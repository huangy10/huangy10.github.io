<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[读论文]车联网与边缘计算 2019]]></title>
    <url>%2Fposts%2F17042%2F</url>
    <content type="text"><![CDATA[还是 VTM 的文章。这次是 2019 年最新一年的文章：Mobile Edge Computing For the Internet of Vechicles: Offloading framework and job scheduling。文章主要关注了车联网场景下的边缘计算问题。这也是时下研究的一个热点方向。 看完了文章可以来写评论了。这篇文章写的就非常简略了，基本上有营养的就只是提到了边缘计算的 System Model。对于具体的机制过程缺少详细的介绍。这也是 Magazine 文章的风格吧。要了解车联网边缘面临的重要问题还是得去看 Transaction 的文章吧。 研究背景 移动边缘计算 (Mobile Edge Computing) 可以使得车辆之间能够共享计算资源。在这篇文章里面，我们提出了一种分布式的车辆边缘计算解决方案: autonomous vehicular edge (AVE)，可以让相邻车辆之间通过 V2V 通信共享计算资源。我们进一步扩展这一想法，提出了 hybrid vehicular edge cloud (HVC) 的概念。在 HVC 中车辆可以访问周围各种不同的计算纪元，包括路边单元 (Roadside Unit, RSU) 以及云上的计算资源。最后我们验证了这里提出了两种去中心化方案的性能，并讨论了一些 Open Problems。 现代车辆，尤其是自动驾驶车辆内部对于计算性能的要求越来越高。除了驾驶系统本身的需求，乘客的娱乐需求也需要消耗一部分的计算资源。直接升级硬件是最简单的，不过会显著推高成本。此时让车辆能够使用外部的计算资源能够作为一个可行的替代选项。不过利用外部计算资源面临着通信的延时和可靠性困难。 MEC 技术也被称为雾计算 (fog computting)。MEC 在边缘网络提供了云计算的能力。在车联网场景中，邻接汽车和 RSU 可以作为合适的外部计算资源的来源。现有的边缘计算方案一般收到两个方面的制约：要么只适用于静止的场景；要么是中心化架构，缺少分布式的实现。如何在高动态的车联网场景中提供通用的、高效的边缘计算解决方案目前还是悬而未决的问题。其中的关键问题是如何发现可用的计算以及如何调度计算卸载，并优化性能目标。 这篇文章针对郊区车联网和城市车联网两种场景分别设计了车联网 MEC 机制。分别是分布式实现版本 AVE 和 Online 实现版本 HVC。 在 AVE 中我们通过 DSRC 通信协议在车辆之间以去中心化的方式共享计算资源。AVE 机制不涉及基础设施。AVE 的工作流包括计算任务缓存，邻居节点发现，计算任务调度，数据传输，任务执行以及计算结果传输。邻居节点的数据，包括 GPS 数据，会用于邻接节点发现和计算任务调度。 在 HVC 中，我们扩展了 AVE 机制以支持路边单元和云上服务器（通过蜂窝网络）。这些基础设施相比邻居车辆拥有更强大的计算资源。多址接入技术，如 LTE 以及 毫米波通信，也被引入到 V2X 通信中。我们研究了如何高效的利用这些通信手段，并设计了在线计算卸载调度算法。仿真验证了通信性能对于混合车辆边缘计算框架性能的影响。 车联网边缘计算框架 系统模型 这里我们用如下的一些通用的指标来度量计算任务： Utility 效用: 按成这项计算任务能够带来的用户体验提升； Host specified: 提供计算的 processor 必须要满足一定的要求才能处理计算任务； Context-free 上下文无关: 一个计算任务包含了完成计算的所有数据，可以在任何节点上完成预算； Brief: 为描述计算任务的信息； 我们这里将客户端程序号成为 application modules，将服务端程序称为 back-end modules，如下图所示。 应用 (Application) 运行于原生操作系统之上，由操作系统管理优先级和资源。后端 (back end) 运行在虚拟机上，虚拟机则由我们的框架管理。框架中的管理模块实现为中间层软件【这里的中间指介于应用和后端之间】，用来收集计算任务和计算结果的信息，并负责判断和执行计算卸载。 还有一些定义需要引入。我们称产生计算任务请求的节点为 requester，接受任务请求处理计算的是 processor。计算卸载的两个核心任务是：requester 如何发现附近的可用 processor，以及 requester 按照何种规则将计算任务发送给哪个 processor。 AVE 框架 Workflow AVE 是为分布式场景提出。在 AVE 中不涉及基础设施，计算卸载发生在相邻的车辆之间。车间数据交换通过基于 IEEE 802.11p 的 V2V 通信进行。AVE 的工作流如下图所示。 Workflow of AVE 上图中的关键步骤如下： 通过 Beacon 广播发现邻接网络的计算资源: Beacon 消息比较简单，包含了描述节点的基础信息。对于 requester 来说，周围发送 Beacon 的相对速度比较小的车辆可以成为潜在的 processor。 计算任务缓冲: 当计算任务产生时，不会立即调度出去。节点一般会缓冲这个计算任务，以寻找更加合适的任务分配方案，并避免并发的卸载调度请求。 Processor 发现：在 Beacon 阶段发现了潜在的 processors，那么 requester 会进入 processor-discovery 阶段。此时 requester 会广播一个消息为缓存中的计算任务寻找可用的 processor。这个广播消息里面会包含计算任务的需求，requester的速度等信息。可用的 processor 会在受到此广播消息后反馈完成该计算任务需要的时间的估计值。 计算任务调度：同时有多个就计算任务需要调度到多个车辆上。考虑 DSRC 有限的信道容量。传输时间也是在计算卸载调度中需要考虑的重要因素。 计算卸载：从 processor-discovery 到开始卸载中的传输的间隔通常非常短。我们认为这段时间内网络结构没有发生变化，那么计算卸载中的数据传输路径可以采用和发现阶段同样的传输路径。而为了将计算结果返回到 requester，我们采用了一个比较传统的路由协议：ad hoc on-demand distance vector routing。 基于 ACO 的调度算法 在计算任务调度过程中，调度需要给出计算任务传输的顺序（这里我们不考虑任务的并行传输）以及每个计算任务分配的 processor，以使得目标函数值最大化。从数学上来看，这个问题是 two-stage hybrid flow-step problem，这类问题是 NP 难的。而在 AVE 框架中，调度需要在车上进行，计算资源相对受限，因此我们需要一个高线的算法来求解这样的问题。 我们提出的解决方案采用了基于 ACO 的算法【ACO 为蚁群算法，是一种启发式算法】。该算法可以以非常小的计算成本得到次优解。类似于 particle swarm optimization 和 stochastic diffusion search，ACO 算法也是用了群体智能(swarm intelligence)。 具体的 ACO 算法建模方法在文章里面没有说，作者给了一个参考文献，指向文章：AVE: Autonomous vehicular edge computing framework with ACO-based scheduling。这篇文章也是本篇 Magazine 的作者写的。 HVC 框架 HVC 的主要改进是引入了基础设施角色，其中 RSU 还有云端服务器都可以作为计算资源的来源。我们假设 V2X 通信使用的是 IEEE 802.11p 或者是毫米波通信。 requester 和 processor 之间可以通过毫米波设备进行直接通信，或者可以通过毫米波中继（在我们的 HVC 场景中毫米波通信最多两跳）。毫米波信道建模时引入了一个失败概率，用来模拟毫米波的指向性和易被遮挡的特点。如果计算任务被调度到远端云上处理，这是计算任务的上传通过蜂窝网络进行。如何组织这些计算和通信资源是一个挑战。 Workflow Workflow of HVC 上图展示了 HVC 框架的工作流，我们这里关注一下和 AVE 的不同部分。 Beacon 和 processor 发现：为了减少计算任务的等待时间，这里的 Beacon 消息包含了更多的信息，故后面再做调度时不需要重复再做一遍 processor 发现。当一个车辆收到来自 RSU 或者邻居车辆的 Beacon 消息时，需要估计发送者停留在自己的通信范围内的时间。这个时间指标会应用到计算任务调度的决策环节。 计算任务调度：当计算任务到达时，调度者立刻开始调度，从而缩短任务的整体完成时间。如果信道或者本地资源目前处于繁忙的状态，那么将计算任务放到相应的队列。调度算法需要在这时确定计算任务在队列中的合适位置。HVC 中调度问题和 AVE 中的调度问题类似，不过具体的目标的函数以及限制要素存在一定的区别。具体的算法内容参见下一个 Subsetion。 计算卸载：HVC 需要保持计算卸载的可靠性的前提下，进一步减少计算任务的完成时间。因此，在任务卸载到 RSU 或者周围车辆的时候，requester 和 processor 会通过握手协议确定调度的开始时间是否可行【原文是 when jobs are offloaded to RSUs or nearby vehicles, handshaking, which exchanges information about the feasibility of scheduled starting time, is used】。当 processor 不可用时，相应的计算任务会被重新调度。 HVC 的优化算法 在 HVC 中，计算任务到达时调度算法就需要确定每个任务分配的 processor，同时还需要确定计算任务加入队列中的位置。由于任务立刻被调度，故每次需要同时被调度的任务数量相比于 AVE 要少的多。所以我们采用了一个线性复杂度的 online 的算法来求解调度问题。对于每个等待调度的任务，我们知道当前节点可用的 RSU 和邻居车辆的集合。也知道这些节点的处理速率和完成时间，故通过 IEEE 802.11p 协议卸载计算的时间也能估计出来。下图演示了这个过程。 图中，(a)中 Job 1 到达，调度到最后的可用的时隙上【原文对这里解释的不是很充分】。传输时间需要在处理之前。(b) 中，Job 2 到达，调度到 processor B 上，因为 processor A 没有足够的空余计算资源可用。(c) 中，Job 3 到达，被分配到 processor A 上。这种分配可以达到最短的完成时间。【这里的最短是指相比于将计算任务分配到 process B 上而言的，原文仍然没有说清楚为什么要先传输 Job 3，后传输 Job 1】。(d) 中，Job 2 被传输出去。(e) 中，握手协议在发送任务前检查目标 processor 的可用性。如果不可用，会重新调度计算任务。在 (f) 中，前一个任务失败之后立刻开始传输下一个任务。 作者接下来聊了一大通关于效用函数 (Utility Function) 的问题，但是聊的很宽泛，也没有给出效用函数的形式（Magazine文章不允许出现太多的公式）。这里就略过了。 性能分析(略) 仿真分析略过。]]></content>
      <categories>
        <category>读论文</category>
      </categories>
      <tags>
        <tag>读论文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[读论文]自动驾驶编队与LTE D2D通信]]></title>
    <url>%2Fposts%2F14647%2F</url>
    <content type="text"><![CDATA[这里选择的文章是 2017 年的文章 Better Platooning Control Toward Autonomous Driving: An LTE Device-To-Device Communications Strategy That Meets Ultralow Latency Requirements。文章来自 Vehicular Technology Magazine 杂志。这个杂志的影响因子挺高的。从标题来看，作者关注的是 LTE D2D 通信无人驾驶编队的控制问题中的应用。D2D 通信是 5G 引入的一个非常重要的特性。可以说对于物联网应用来说，D2D 能力比起带宽和延时来说更为重要。不过舆论对于这个问题的关注不多。这篇文章是一篇 Magazine，一般 Magazine 文章关注的都是研究趋势，而不是关注特别细节的技术问题。因此仔细阅读这篇文章，可以帮助我们了解车联网 + 5G 研究的一些前沿的思路，而不用陷入很多繁冗的细节问题。 看完了文章可以来做一些评论了。最初看这篇文章的目的有两方面，首先是我准备投稿 VTM，因此找来上面的文章看看其风格，而具体而言选择这篇文章，是因为这篇文章涉及的无人驾驶编队问题和 5G D2D 技术都是我比较关心的。 从文章风格来看，这篇 VTM 还是比较典型的 Magazine 文章风格：即篇幅不长，图片比较多，而几乎没有公式。文章的会有比较大段、详细的研究背景阐述。其提出的协议和机制内容不会特别复杂，也比较少和其他文章的协议进行对比。总结而言，这类文章是选择一个比较新的研究背景，在充分介绍背景问题的基础上，提出一些非常简单的机制，具有 Tutorial 的性质。 就这篇文章的内容来说，其提出的通信架构其实是非常简单的，模型也非常简单。可见，要写这类 Magazine 文章，提出什么精巧详尽的协议并不是最重要的。最重要的还是要找到非常好的研究场景。 研究背景 编队技术是全面实现自动驾驶的第一步，也是 5G 应用的一个非常重要的场景。在编队系统中，编队成员的间距和速度通过自动化系统来进行控制，这种控制的效率和可靠性建立在车间通信的效率（带宽和延时，尤其是延时）和可靠性之上。在这篇文章中我们主要讨论 5G 技术在车辆编队系统中数据分发的应用潜力。文章提出的通信机制可以实现编队通信的超低延迟需求。文章提出的机制的另一个优势是可以实现对 LTE 资源的空间复用。 这里文章主要的想法是使用直接的 D2D 通信来实现车间通信的低延时。在 3GPP (Third Geenration Partnership Project) 中，基于蜂窝网基础设施的 D2D 通信服务被称为 Proximity Services (ProSe)。目前 LTE 技术在 V2X 通信中的应用已经在一些项目中被提出【文章在这里提到的一个名为 METIS 的项目，不过我查看他们的官网，连一个经过认证的 HTTPS 证书都没有，而且最新的消息只到 2015 年，之后就没有更新了】，且目前正在 3GPP 的讨论进程中。 作者声称在他们的了解中，目前（2017年）还没有针对 LTE-D2D 在编队场景的应用的充分讨论。所以作者提出了一种简单的编队内的基于 D2D 的消息分发策略。这一策略主要采用了下面的概念： 我们提出的策略利用了 Platoon Leader 产生消息的周期性来分配 LTE 资源。 我们利用了编队中车间距离小，所需的传输功率小的特点来实现 LTE 资源在编队成员，编队之间甚至是其他非车辆终端之间的空分复用。 相关技术 编队技术 一个编队可以被定义为一组拥有共同的运动模式，保持一定的队形的一组车辆。通常编队内的成员之间有固定的车间距和统一的速度。编队运行的稳定性依赖于车间信息交换的效率和有效性。车辆的控制系统通过这些共享的信息来调整自己的速度和加速度，从而保持编队结构的稳定。 车间信息同步通过每轮的 Cooperative Awareness Messages (CAMs) 交换来进行。通常信息交换由编队的 Leader (PL) 发起，PL 负责管理所有的编队成员 (PMs)。CAMs 信息交换的周期由 PL 指定，一般是 100 ms 或者更低。 在设计 CAMs 消息的格式和内容的时候需要考虑编队使用的控制策略。例如，在 Predecessor-following 控制策略中，每个车辆只与其前方的车辆通信以了解前方车辆的相对位置。这种策略会导致控制不稳定性的叠加的问题。最末车辆的抖动可能非常大。这一效应可以通过 Predecessor-leader 策略避免。在这一策略中，每个车辆除了获取前方车辆的相对位置，还需要获取 PL 的位置信息。在 Bidirectional 策略中，每个车辆获取其前后车辆的信息用于自身速度调整。不过这种策略在大规模编队系统中控制误差比较大。 编队的性能和稳定性也会高度收到车间通信性能的影响。如果通过 IEEE 802.11 （车联网通信的标准） 交换 CAM 信息，由于其底层使用了 CSMA/CA 协议，这一协议缺乏中心化的资源管理机制，因此难以保证延时和通信的可靠性。 有很多研究针对 IEEE 802.11 提出了改进措施以克服这些问题。在[6]中，一个单独的信道被划分出来用于传输编队信息，从而减少干扰和冲突。不过这种分配方式比较浪费。在[7]中作者提出了一种构筑在 802.11 之上的 TDMA 机制。在[8]中，PL总是以最大的功率 (20 dbm)发送，以覆盖所有的 PM，而每个 PM 以 0 dbm 的功率发送，只需要覆盖其后方的车辆。 上面这些为 802.11 打上无竞争补丁方式提示我们，也许我们需要的是一个新的，中心化资源管理机制。这是 LTE-D2D 能够提供的。 LTE-D2D 在 LTE 系统中，通信资源是由基站直接管理的。基站的管理以 1 ms 长的传输单元 (Transmission time interval, TTI)进行。在每个 TTI 中，基站会分配若干个正交的 180 kHz 的子带 (subband)。每个 TTI 上的一个 子带，被称为一个资源块 (Resource Band, RB)。D2D 通信模式（也被成为 sidelink)，允许设备在不经过基站或者核心网络的情况下直接进行通行。因此 D2D 技术可以让设备之间的通信达到高速率，低延时，低功耗，以及更高的频谱效率。 D2D 通信可以使用蜂窝网的频段 (InBand)，也可以使用未认证的频段。InBand 通信可以进一步划分为 Underlay 和 Overlay 两个类别。前者蜂窝通信和 D2D 通信共用射频资源；后者 D2D 链接使用专用的射频资源。通过使用合适的资源分配算法，可以减少干扰，并实现 RB 的空分复用。 在这篇文章中，我们使用 InBand Underlay D2D 通信模式来进行 CAM 信息交换。LTE 的中心化架构可以让我们对于资源的分配状态有一个全局的认识，从而可以优化资源的使用效率。 系统假设 编队假设 假设这样的道路场景，在一个基站 （eNodeB) 的覆盖范围内有 \(M \geq 1\) 个编队。这里我们考虑编队系统运行稳态的情形，即不考虑新成员的加入和编队现有成员的离开，这意味着编队的大小 \(S_i, i \in {1, \dots, M}\) 是固定的。编队的长度（包括车辆的长度和车间距）为 \(L_i\)。相邻车辆的间距为 \(d_i\)，运动速度为 \(v_i\)。 假设编队使用了 Predecessor-leader 控制策略。在编队 \(i\) 中，信息交换以 CAM 消息的形式进行。PL 每经过 \(T_i\) 秒更新一次 CAM。\(T_i\) 需要不超过 100ms 的数量级以满足控制算法的需要，即 CAM 更新的频率至少要有 10 Hz。更高的 CAM 更新频率可以允许编队在一定的车间距下以更高的速度安全运行。 不同的编队可以运行在同一个车道上也可以在相邻的车道上。在前一种情况中，前一个编队的最后一辆车与后一个编队的第一辆车的距离被定义为编队间距离 (\(\delta\))，这个艰巨的典型值为 40m。在后一种情况下编队间的距离可以小的多。 D2D 假设 CAM 信息交换通过直接的 D2D 链路进行。基站分配给 PL 非独占的 Underlay 模式的上行链路射频资源。网络以时分双工的方式运行 (Time-division duplex, TDD) 。每 10 个 1 ms TTI 称为一个 LTE TDD 帧。上行链路帧，即 U 帧的数量和位置如下表所示。 编队对于 LTE 资源的需求 我们假设一个 CAM 的大小在 50 到 500 字节之间。下图展示了为了成功传输单个的 CAM 包，每个上行帧需要包含的 RB 的数量。图中的水平线还展示了在不同的信道带宽条件下，实际每个上行帧可用的 RB 的数量 \(N_{RB}\)。 例如若一个 CAM 包的大小是 300 字节，那么不到 25 个 RB 就足够了。当带宽是 5 MHz 时，一个上行帧就足够传输一个 CAM 包。但是如果 CAM 包的体积更大一些，一个上行帧就不够用传输 QPSK 调制的 CAM 包了。在文章的接下来的部分我们假设 CAM 包的大小均为 300 字节。 编队占用的 RB 数量与 CAM 包大小的关系 基于 D2D 的编队 CAM 信息分发 在我们提出的机制中，只有 PL 会与基站进行交互以获得基站分配给整个编队的通信资源。传统的资源调度算法一般需要从用户那里获取关于链路质量，缓冲区状态等信息。在编队中，基站需要额外的信息，如编队的大小，车辆间距，以及 CAM 消息的大小和发送频率。我们假设 PL 和基站交互使用现有的 LTE 握手过程。然后基站中部署的资源分配算法那负责计算需要分配给编队的资源的数量。具体的资源分配算法是未来工作的内容。由于 CAM 通信的周期性，基站给出的分配方案是「半永久性」(semipersistent) 的，以避免逐 TTI 调度的额外开销。 资源分配完成以后，在每论更新过程中 CAM 分两阶段在编队内传输：1）在第一阶段，PL 将 CAM 信息传输给所有的 PM；2）在第二阶段，每个 PM 发送其 CAM 给后方的车辆，直到队尾车辆也收到了 CAM 消息。 第一阶段: PL to PMs PL 以足够的高那概率广播以覆盖所有的 PM。如果编队非常长，通信范围 \(R\) 只覆盖了编队长度 \(L_i = [S_i - 1]d_i\) 的一部分。我们设置 \(R \leq 100m\)，如果通信距离太长会产生比较多的干扰。如果 PL 不能覆盖所有的 PM，那么最远处的 PM 要负责进行转发。假设转发节点的通信范围也是 \(R\)。PL 发送的 CAM 消息里面包含了每个PM资源分配的信息。这种用 PL 代表整个编队同基站进行交互的架构大大减少了基站的连接负载。 第二阶段: PM to PM 当 PM 收到了 PL 的 CAM 消息以后，PM 可以以单播的方式向其后方的 PM 发送相应的 CAM 消息。我们选择的 Predecessor-leader 控制策略允许相邻 PM 节点之间建立短距离，低延时的 D2D 连接。由于单个链路的覆盖范围很短，因此相聚一定距离的 PM 间通信可以同时进行，复用 RB 通信资源。 为了详细探讨复用的资源的具体规则，我们考虑一个如下图所示的单车道拓扑的情形。 我们定义复用距离 \(d_r\) 为能够无干扰地并发传输的链路的距离。我们只考虑距离 RX 端最近的潜在干扰源。用 \(d\) 来表示每对 TX/RX 节点的间距。用 \(d_I\) 表示最近的潜在干扰源 \(I\) 和 RX 之间的距离。显然，\(d_r = d_I + d\)。最后，用 \(P_{D2D}\) 表示 PM 节点的传输功率。那么在接收端的平均信噪比 (Signal-to-interference-plus-noise, SINR) 为: \[ \gamma (d, d_I) = \frac{P_{D2D} P L_{D2D}(d)}{P_{D2D} P L_{D2D}(d_I) + N_0}, \] 其中 \(PL_{D2D}\) 为 D2D 链接的路径损耗，\(N_0\) 为背景噪声。这个公式中我们做了 Line-of-sight 传输假设并忽略了多径问题。将 \(d_r - d\) 代入上式的 \(d_I\)，并让 SINR 值等于预定门限，从而可以计算出 \(d_r\)。 \(d_r\) 与门限 SINR 的关系 \(d_r\) 与门限 SINR 的关系如上图所示。更加鲁棒的调制方式允许更低的 \(\gamma_{D2D}\)，因此可以缩小 \(d_r\) 的值。这一结果可以用来指导空分复用的设计。空分复用可以在同一编队内部，不同编队之间，以及编队同其他类型的终端之间进行。例如，当 \(d = 10m\)，目标 SINR \(\gamma_{D2D} = 0 \text{dB}\)，此时复用距离超过 20m。这意味着： 编队内：相聚超过 20 m 的 PM 之间可以使用相同的 RB 资源同时进行传输。 编队间：编队间的距离 \(\Delta\) 一般都超过 20 m，因此同一车道上的编队之间可以复用 RB 资源。不过，相邻车道上的编队之间的复用可能会变得困难，因为二者的距离可能小于 20m。 同其他类型设备：距离编队 20m 以上的其他类型设备可以复用 RB。例如在高速公路场景上，行人的手持设备一般不会靠近道路设施。 实验验证(略) 略，直接看原文。]]></content>
      <categories>
        <category>读论文</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>读论文</tag>
        <tag>D2D</tag>
        <tag>5G</tag>
        <tag>LTE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-25]]></title>
    <url>%2Fposts%2F53997%2F</url>
    <content type="text"><![CDATA[新闻 中美贸易争端第一阶段协议达成 中国官方宣布，中美达成&quot;第一阶段经贸协议&quot;。北京时间周五（12月13日）晚间11点左右，中国发改委、商务部和财政部举行联合新闻发布会，公布这一消息。中国官方通讯社新华社也在同一时间发表了&quot;中方关于中美第一阶段经贸协议的声明&quot;。声明中表示，&quot;已就中美第一阶段经贸协议文本达成一致。协议文本包括序言、知识产权、技术转让、食品和农产品、金融服务、汇率和透明度、扩大贸易、双边评估和争端解决、最终条款九个章节&quot;。 We have agreed to a very large Phase One Deal with China. They have agreed to many structural changes and massive purchases of Agricultural Product, Energy, and Manufactured Goods, plus much more. The 25% Tariffs will remain as is, with 7 1/2% put on much of the remainder.... — Donald J. Trump (@realDonaldTrump) December 13, 2019 根据路透社的报道，出席新闻发布会的中国发改委官员表示，中方增加对于美国能源、农业、医药、金融服务领域的产品进口，其中中国同意在2020年，购买价值 500 亿美元的美国农产品，这相当于贸易战开始前 2017 年的两倍。此外，中方将取消原定周日开始针对美国商品的加税措施。而对于美方对于中国产品加征关税的做法，声明中表示&quot;双方达成一致，美方将履行分阶段取消对华产品加征关税的相关承诺，实现加征关税由升到降的转变。&quot;特朗普的推特中称，“25%的关税仍然维持，其他大部分产品的关税则还是7.5%。……原定12月15日实施的惩罚性关税不会实行”。 不过，该协议还未得到两国的正式签署。中国称，双方约定，双方将各自尽快完成法律审核、翻译校对等必要的程序，并就正式签署协议的具体安排进行协商。 尽管新闻中提到，协议中包含了知识产权，技术转上，金融服务等等方面，不过这些内容并未成为各方媒体关注的焦点。可以预见这部分的内容是相当格式化的，不会有特别核心的利益交换。事实上现在最为核心的内容还是中方让步购买农产品，美方在关税上做出让步。从这个结果来看，可以说在目前阶段贸易战是高高举起，轻轻落下了。至于后面怎么谈，就不取决于中美之间的关系，而是特朗普的选情了。 更多报道： BBC: 中国深夜开记者会宣布与美国达成第一阶段经贸协议 德国之声: 中美贸易争端：第一阶段协议达成！ 俄罗斯卫星社: 中国财政部副部长：美承诺将取消部分对华拟加征和已加征关税 新疆再教育营学院已全部结业 中国新疆官员表示，参加“三学一去”（学习国家通用语言文字、法律知识、职业技能和去极端化）的教培学员已全部结业。 这个中国称之为再教育营的机构，被西方媒体报道为关押了超过一百万维族人的集中营机构。西方以此抨击中国在新疆的民族政策和宗教政策。 世界反兴奋剂组织禁止俄罗斯参赛四年 世界反兴奋剂机构（WADA）执委会禁止俄罗斯在未来四年参加大型国际赛事，包括奥运会和世锦赛。执委会认为俄罗斯反兴奋剂机构违反了反兴奋剂规定章程。这项禁令意味着，在未来司年重大国际比赛中，不能升俄罗斯国旗、奏俄罗斯国歌将禁止，其中包括2020年东京奥运会和2022年卡塔尔世界杯足球赛。 如果俄罗斯运动员能证明自己没有卷入禁药丑闻，俄罗斯运动员将只能以中立身份参赛。俄罗斯政府官员也不能出席此类赛事活动。在4年处罚期内，俄罗斯同样无法主办甚至申办重大国际赛事。 WADA执委会在瑞士洛桑的会议上一致通过这项决定。 印度通过公民身份修正法案 据“今日印度”（India Today）12月9日报道，印度下议院以311票赞成、80票反对，通过“公民身份修正法案”（CAB），提议印度授予，2014年12月31日前因“宗教迫害”而来到印度的巴基斯坦、孟加拉国和阿富汗非法移民国民身份。修正案规定，只有印度教、锡克教、佛教、耆那教、拜火教和天主教徒才有资格摆脱非法移民，获得印度国民的身份；不过，穆斯林教徒并未包括在内。 不过对于这项印度内政事务，美国政府下属的国际宗教自由委员会不仅称这一法案是“错误方向的危险转向”，还威胁称如果法案在印度两院通过，那么它将建议美国政府制裁印度现任内政部长阿米特·沙阿。 12 月 12 日英国大选 英国当地时间早上7点，北京时间12月12日下午3点，英国百年来首次冬季大选投票开启！根据北京时间今天早上6点的出口民调（通常与最终大选结果一致），保守党获得了368个议席，工党仅获得191个议席。这场被称为“一代人最重要的投票”以保守党的大胜为终结！这将是自1987年玛格丽特•撒切尔获胜以来保守党取得的最佳结果。 在替换掉了党内的留欧派议员后，获得巨大胜利的约翰逊面前再无障碍，通过脱欧程序只是时间早晚。如无意外，2020年1月31日前，英国将离开欧盟！消息一出，5分钟后，英镑兑美元汇率上涨2.1%，至1.34美元，这是去年 5 月以来的最高水平。兑欧元汇率也上涨1.7%，为三年半以来的最高值。英国将在明年1月31日前脱离欧盟，从而消除困扰英国企业和经济三年多的英国退欧不确定性。 明年 1 月 31 号是欧盟打击逃税避税的法案 ATAD 最终生效的日子。在王孟源的《【英国】谈Brexit》一文提到。脱欧背后力量的真实动机就是为了避免 ATAD 法案对于英国传统富豪的打击。那么本次英国大选就标志着土豪的胜利了。 英国 NHS 可能被纳入英美经贸谈判 英国引以为傲的“英国国家医疗服务体系(NHS)”成了美英经贸谈判桌上的筹码?英国工党领袖不久前拿出一份被“泄露”的英美经贸谈判的秘密文件，指责英国首相、保守党领袖约翰逊将NHS作为英美贸易谈判的筹码。据“今日俄罗斯”(RT)5日报道，约翰逊当天在一档节目中对此否认并形容，科尔宾口中这份被“泄露”的文件就像“UFO的照片”，并非真实存在。 其他 国内 北大开除冯仁杰。此前北大教师冯仁杰深陷作风问题丑闻。source 12 月 13 日 11 时 56 分上海嘉里粮油有限公司发生火灾。历时 7 小时大火扑灭，目前无人员伤亡。现场浓烟冲天。source 密克罗尼西亚联邦总统戴维·帕努埃洛访华。source 云南孙小果案 19 人一审获刑，其继父获刑 19 年，母亲获刑 20 年。source 国际 新西兰北岛东岸海域的白岛火山喷发，有数人受伤，另有一些人失踪。source | 更新，目前已有 5 人死亡，多人下落不明。source 现芬兰交通部长——34岁的桑娜·马林将出任芬兰总理，届时她将成为全球最年轻的总理。source 智利空军的一架运输机在前往南极科研考察站的途中失踪。机上载有38人。救援队正在全力寻找幸存者。source 南太平洋岛国巴布亚新几内亚东部最大的岛屿布干维尔举行全民公投，以压倒性多数投票赞成独立。source 沙特石油公司阿美 (ARAMCO) 首次发股，上市当天股价飙涨 10%。source 瑞典环保少女 Greta Thunberg 周三(11 日)被《时代》杂志评为年度人物。source 美国国会通过制裁北溪 2 号的协议。这一做法在德国政界和经济界引起不满，被认为是一种威胁手段。source 德国三大电信商之一 O2 宣布 5G 使用华为。这一消息在美国开始制裁北溪二号的北京之下显得非常的「巧合」。source 朝鲜再次进行重大试验，增强其核威慑能力。source 科技与文化 小米发布首款 5G 手机 Redmi K30，1999元起售。 12 月 10 日，苹果官网凌晨正式上架了新款 Mac Pro。其中塔式 47999 元起，架构式 51999 元起。同时苹果官网公布 Pro Display XDR 显示器售价，标准玻璃版售价 39999 元， Nano-texture 纳米纹理玻璃版售价 47999 元，Pro Stand 支架售价 7799 元，VESA 支架转换器售价 1599 元。source Google 发布 2019 年搜索排行榜，其中迪士尼新推出的流媒体服务「迪士尼+ (Disney Plus)」成为最热门的搜索词，iPhone 11 则排名第九。source 电影《姜子牙》发布首支预告，电影将于 2020 年大年初一上映。预告片传送门。]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[翻译]网页中的图像优化指南]]></title>
    <url>%2Fposts%2F27790%2F</url>
    <content type="text"><![CDATA[本文翻译自Optimizing images for the web - an in-depth guide 这篇文章提供了Web开发中涉及图像的一些优化问题： 计算JPG图像文件大小 在线图像优化 自动化方案 图像载入优化 使用CDN WebP图像格式 为高像素密度的屏幕的优化 上面的目录的前几个部分其实讲的就是图像压缩的问题，不过这里他将的特别的入门级，显得比较啰嗦，我会进行一定的简化。 图像性能常常是网页性能糟糕的一个重要因素，尤其是在初始载入的时候。根据的分辨率和图像质量不同，图像的大小可能占据网站总体积的70%以上。不注重图像性能优化很容易让网站的体验变得非常糟糕。没有经验的开发者则常常忽视这个问题。他们也未能及时接触到相关的优化工具。这篇文章的主旨就在于为Web开发者提供网页中图像性能优化的指南。 图像压缩 未被压缩的图像大小和很容易通过像素数量乘以通道数确定：长 * 宽 * 24bits（RGB颜色系统）。原始图像的大小是非常大的，因此图像压缩就非常重要。 有一些在线的网站能够提供图像压缩的功能，如： Compressor.io - JPG, PNG, SVG, GIF - 1 file at the time Squoosh - JPG, PNG, SVG, GIF - 1 file at the time Optimizilla - JPG and PNG - up to 20 images at the time TinyPNG - JPG and PNG - up to 20 images at the time SVGMinify - SVG - 1 file at the time svgomg - SVG - 1 file at the time 不过在开发中大批量的图像处理就不适合用这些网页工具了。在复杂的Web工程中我们一般都会使用一些自动化的构建工具，例如 Gulp, Webpack, Parcel 等。这些自动化工具一般都包含有图像优化的插件，可以完全自动化图像优化处理的过程。这样可以确保所有的图像能够正确地优化。 这里坐着推荐的插件是 imagemin。这一插件非常方便与各种CLI工具或者构建工具集成： imagemin - CLI imagemin - Gulp imagemin - Webpack imagemin - Parcel 图像载入优化 上面已经介绍了通过压缩图像而不减低分辨率以减少前端需要下载文件体积的方法。不过如果一次性载入的图像数量比较多，网页的性能还是会很糟糕。 Lazy Loading Lazy Loading 是指在需要的时候才载入素材的理念。在我们的场景中，只有位于当前用户可视区域内的图像才需要进行载入。 最简单的 Lazy Loading 方法是： 1&lt;img src="image.jpg" loading="lazy" alt="sample image" /&gt; 也有一些基于 JavaScript 的解决方案： verlok/lazyload yall.js Blazy (not actively maintained) Progressive images Lazy Loading 的问题在于，从 UX 设计角度来看，用户在等待图像载入的时候，面对的是一个空的画面，这个设计不是特别的友好。Progressive images 的概念就是，我们可以先载入一个低质量的图像放在那里，然后载入高质量的图像。低质量的图像体积要小很多，可以很快的完成。这个图像质量逐渐改善的过程也可以分成多步，如下图： 这种设计给予用户一种速度的错觉。用户可以看着图片变得越来越清晰，而非只是盯着一个空白区域。这里是一个 JavaScript 实现的 Progressive images: progressive-image。 Responsive images 使用正确尺寸的图像也是一个需要注意的点。 例如，我们有一个图像，在桌面端的最大宽度为1920px，在平板端的最大宽度为1024px，移动端的最大宽度为568px。简单的方法是使用一个1920px的图像用于所有的情况。但是这样就意味着平板用户和移动用户需要载入其实完全不必要的数据。 我么可以使用 picture 元素来告诉浏览器根据设备类型去下载哪个图片。这个元素大约被93%的用户的浏览器支持，不过我们可以内嵌使用 img 元素来实现 fallback。 12345&lt;picture&gt; &lt;source media="(min-width: 1025px)" srcset="image_desktop.jpg"&gt; &lt;source media="(min-width: 769px)" srcset="image_tablet.jpg"&gt; &lt;img src="image_mobile.jpg" alt="Sample image"&gt;&lt;/picture&gt; 使用 CDN 一些 CDN，例如 Cloudinary 还有 Cloudflare 可以在服务器上进行图像优化。如果你使用了 CDN 服务，注意留意一下 CDN 服务提供商是否提供了图像优化的服务。这就可以让我们省下很多功夫了。 WebP 图像格式 最近看到了好多 WebP 格式的图像啊，尤其是微信公众号的文章里都是这种格式。别的优点还不清楚，不过给图像直接下载设置了一点障碍。 WebP 图像格式由 Google 开发，是一种特别针对 Web 场景优化的格式。根据 canIUse 的数据，WebP 格式的图像在大约 80% 的场景下使用。为了保险设计 Fallback机制，例如： 12345&lt;picture&gt; &lt;source type="image/webp" srcset="image.webp" /&gt; &lt;source srcset="image.jpg" /&gt; &lt;img src="image.jpg" alt="Sample image" /&gt;&lt;/picture&gt; 有很多在线转化工具可以将图像转化成 WebP 格式。如果 CDN 能够提供这种支持就是最为省心了。 为高像素密度的屏幕的优化 这更多的是 UX 方面的改善，而非性能方面的改善。例如在我们子啊一个 768px 宽度的屏幕中展示 768px x 320px 的图像，而这个设备的像素密度是2x，则设备屏幕实际的像素宽度是 2 x 768 = 1536px。那么实际上我们是将一个 768px 的图像拉伸了两倍。为了最优化图像在高分辨率设备上的显示，我们需要额外指定一个两倍甚至三倍分辨率的图像。这一图像通过srcset属性来设置： 1&lt;img src="image-1x.jpg" srcset="image-2x.jpg 2x" alt="Sample image" /&gt; 一个完整的响应式的，支持 WebP/PNG 格式以及高分辨率屏幕的例子： 12345678910111213&lt;picture&gt; &lt;source srcset="./images/webp/hero-image-420-min.webp 1x, ./images/webp/hero-image-760-min.webp 2x" type="image/webp" media="(max-width: 440px)"&gt; &lt;source srcset="./images/minified/hero-image-420-min.png 1x, ./images/minified/hero-image-760-min.png 2x" media="(max-width: 440px)"&gt; &lt;source srcset="./images/webp/hero-image-550-min.webp 1x, ./images/webp/hero-image-960-min.webp 2x" type="image/webp" media="(max-width: 767px)"&gt; &lt;source srcset="./images/minified/hero-image-550-min.png 1x, ./images/minified/hero-image-960-min.png 2x" media="(max-width: 767px)"&gt; &lt;source srcset="./images/webp/hero-image-420-min.webp 1x, ./images/webp/hero-image-760-min.webp 2x" type="image/webp" media="(max-width: 1023px)"&gt; &lt;source srcset="./images/minified/hero-image-420-min.png 1x, ./images/minified/hero-image-760-min.png 2x" media="(max-width: 1023px)"&gt; &lt;source srcset="./images/webp/hero-image-760-min.webp 1x, ./images/webp/hero-image-960-min.webp 2x" type="image/webp" media="(max-width: 1919px)"&gt; &lt;source srcset="./images/minified/hero-image-760-min.png 1x, ./images/minified/hero-image-960-min.png 2x" media="(max-width: 1919px)"&gt; &lt;source srcset="./images/webp/hero-image-960-min.webp" type="image/webp"&gt; &lt;source srcset="./images/minified/hero-image-960-min.png"&gt; &lt;img src="./images/minified/hero-image-960-min.png" alt="Example"&gt;&lt;/picture&gt;]]></content>
      <tags>
        <tag>翻译</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-24]]></title>
    <url>%2Fposts%2F4652%2F</url>
    <content type="text"><![CDATA[新闻 华为251事件 华为251事件，又被称之为李洪元事件，是2018年12月16日到2019年8月23日发生于中国大陆的一桩刑事案件。原华为技术有限公司的员工李洪元在离职后，被华为以职务侵占（先被改为泄露商业机密，后再被改为敲诈勒索）为由向警方报案而遭羁押共计251日，终因证据不足而获检察院不起诉处分并释放。2019年11月下旬，案件细节被披露到互联网，迅速引起广大讨论。 这事儿说的太累了，多说感觉也没啥用，还是一贯地💊。 美国对多国加征关税 为报复法国对互联网巨头开征数字税，美国政府周一宣布将对法国价值24亿美元商品开征最高100%的关税，最早明年1月生效。法国财政部长勒梅尔次日表示，美国对法国商品的关税威胁是“不可接受的”，法国和欧盟准备予以回击。法国经济部副部长卢纳歇尔也表示，法国是很“好斗的”，将在数字税问题上与美国“针锋相对”，决不让步。source 12月2日，特朗普表示美国将立即“恢复”对从巴西和阿根廷进口的钢铝产品加征关税。特朗普当天在社交媒体发文称，巴西和阿根廷两国货币大幅贬值，这对美国农民不利。他表示美国将立即“恢复”对巴西和阿根廷钢铝产品加征关税。source 北约 70 周年峰会 北约（北大西洋公约组织）各国领导人星期二（12月3日）在伦敦举行为期两天的北约特别峰会【发言人尽力避免使用“峰会”这个词，理由是去年刚开过正式的峰会，而今年只是领导人碰个头，交换一下意见，最后也不发布正式公告。source】。今年正值北约成立 70 周年。 进来北约似乎诸事不顺。先有法国总统马克龙在接受英国《经济学人》采访时，谈到北约，使用了「脑死亡」这个词。马克龙提到华盛顿决定从叙利亚撤军居然没有通知北约。后来，又有土耳其总统埃尔多安表示，若是北约不认可他们将叙利亚库尔德武装认定为恐怖组织的做法，他们将否决北约防卫波罗的海的一项计划。本来欧洲各国对于美国背叛库尔德人已经怨声载道，要认定库尔德武装为恐怖组织是欧洲各国无法接受的。 北约峰会周三（12月4日）在伦敦达成一份结束性声明。盟友们重申了相互支持的立场，指出中国是新的挑战，俄罗斯仍然是潜在的风险。北京则回应称，中国是“和平力量”，表示目前世界面临的最大威胁是单边主义和霸凌行径。source 北约成立70年： 老兵遇到新情况 未来叵测 这一届北约峰会上，“大佬们”的嘴仗有点好看 对华战略成北约峰会重要议题 华为在美国起诉FCC违宪 华为周四（12月5日）在总部深圳宣布正式起诉美国联邦通信委员会（FCC），理由是有关禁止华为参与联邦补贴资金项目的决定，违反美国宪法以及其它法令。这是今年华为向特朗普政府提交的第二项诉讼。 今年11月22日，FCC发表声明认定华为是美国国家安全威胁，由此禁止美国农村地区运营商使用国有的通用服务基金（USF）购买华为设备。华为有30天时间对这一禁令进行抗辩，而强制移除设备的最终命令最早要到明年才会出台。 华为本次在新奥尔良联邦法院递交的诉状写道，FCC上月不准农村运营商使用国家拨款安装华为和中兴通信设备，是不恰当的做法。在深圳召开的新闻发布会上，华为首席法务官宋柳平说，FCC的决定是出于政治考量，而不是因为风险问题。 支付宝发生短暂崩溃 12月5日下午5时左右，多地网友反应称，支付宝出现故障导致账号无法正常支付、无法收到验证码、无法登录等一系列问题。 出现问题之后，“支付宝崩了”一度成为了热搜话题。不过在5时25分，支付宝官方微博回复称：“刚刚，支付宝的机房网络出现了短暂抖动，影响了部分用户的使用体验。一切已经恢复正常，大家的资金和信息安全不会受到影响。” 与此同时，还有消费者调侃了支付宝，是不是过几天需要还的花呗可以不用还了？ 其他新闻 国内 中国国家能源局原局长努尔·白克力因受贿罪被判处无期徒刑。source 12 月 5 日，兰州兽医研究所近百名学生布鲁氏杆菌病感染血清型阳性。source 驻澳门部队某步兵营装甲连记集体一等功。 12 月 4 日湖南浏阳烟花厂发生爆炸事故。爆炸已致 7 死多伤。source 国际 中国和巴基斯坦自贸协定第二阶段协议书生效，两国间相互实施零关税产品的税目数比例将从此前的35%逐步增加至75%。source 俄土领导人将于1月8日举行会面，地点定在伊斯坦布尔。source 印度2019年第三季度GDP增速持续下滑到4.5%，为6年多来最低水平。source 中俄天然气管道开通，这是苏联解体后俄罗斯最大的能源工程。source 美国众议院以压倒性优势通过《维吾尔人权正则法案》。source 韩国歌手车仁河自杀，是近来第三位自杀的韩国艺人。source 美国众议院议长佩洛西宣布起草弹劾条款。source 周四，法国有 80 万人走上街头抗议政府退休金改革计划，其人数是「黄背心」辉煌时期的三倍。source 科技 Google 联合创始人 Larry Page 和 Sergey Brin 不再担任公司管理职位。Google CEO Sundar Pichai 将同时兼任母公司 Alphabet 的 CEO。 12 月 3 日，罗永浩举办「老人与海」黑科技发布会，发布会涉及的主要技术为佛罗里达大学材料科学教授安东尼·布伦南于2007年创立的 Sharklet Technologies 的抗菌材料。其材料的抗菌原理为模拟鲨鱼皮的围观纹理结构，降低病菌附着的可能。成立十年以后 Sharklet 公司被杭州一家医疗器械资产公司 Peaceful Union 收购。罗永浩与今年加入了的这家公司。 3 日发布的具体产品包括基于 Sharklet 鲨鱼皮技术的抗菌旅行箱，抗菌儿童背包等。source 12 月 4 日，主题为「为你的笑容而来」的国行 Nintendo SwitchTM 产品上市发布会，在上海正式举办。发布会上，腾讯携手任天堂宣布，腾讯引进 Nintendo Switch 将于 12 月 10 日正式发售。国行版 Nintendo Switch 为续航增强版且预装《新 超级马力欧兄弟U 豪华版》体验版，官方建议零售价 2099 元，于 12 月 4 日中午 12 时在京东和天猫官方旗舰店开启预售。腾讯同时表示 Nintendo Switch Lite 的引进工作正在筹备中。source 华为发布了 ARM 架构的台式机主板，使用自家的 CPU 鲲鹏 920。 言论 一个组织不管是出于什么原因而被建立，之后他的首要任务都是维持自身的存在。]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高技术人才长期羁押问题]]></title>
    <url>%2Fposts%2F62057%2F</url>
    <content type="text"><![CDATA[近期华为一位工程师在获取离职赔偿之后被公司诬告，导致他被羁押了251天的事情再次带来了社会舆论对于技术人才遭遇的这种司法不公的关注。似乎在这种问题上，我国的取保候审制度似乎就成了摆设。 2019年12月2日更新： 血淋淋的案例 华为·李洪元·251天 11月28日一份刑事赔偿决定书在网上流传，一位华为离职员工李洪元索要2N赔偿之后，被华为控告敲诈勒索，于2018年12月16日被拘留，法院认定犯罪事实不清，证据不足，不符合起诉条件，关押251天后李洪元重回自由。 在法院的宣判文中，深圳龙岗法院表示：深圳市公安局移送审查起诉的犯罪嫌疑人李洪元涉嫌敲诈勒索罪一案退回公安机关第二次补充侦查。深圳市公安局于7月10日提交了《补充侦查报告》，反映了其在与李洪元商谈离职补偿问题时，李洪元根本不存在敲诈勒索的行为。为此，鉴于李洪元的行为根本不构成犯罪或者依法不应追究刑事责任的实际情况，依照《刑事诉讼法》第一百七十三条第一款及第一百七十一条第四款之规定，对华为该员工作出法定不起诉的决定。 经本院审查并通过补充侦查，仍然认为深圳市公安局认定的犯罪事实不清，证据不足，不符合起诉条件。于2019年8月22日决定对李洪元不起诉。对赔偿请求人李洪元予以国家赔偿，包括人身自由损害赔偿金79300.94元，精神损害抚慰金27755元，两项合计107522. 94元。向李洪元原工作单位、其父亲李洪元所在的工作单位发函、为其消除影响、恢复名誉。 从宣判文中可见： 李洪元2005年入职华为担任工程师，离职前在逆变器销售管理部工作，2018年1月31日离职，在华为工作13年之久，主动离职与辞退离职尚未知晓。 离职过程中，因为补偿金额发生争议，商议后补偿33万元左右。 2018年3月8日，李洪元离职近40天后，华为向其转款补偿金，注意是通过私人账号，同时备注转款原因离职经济补偿。 李洪元得以免除牢狱之灾，还是因为其妻子提供了当时李洪元同HR的谈判录音，才最终证明了李洪元通过私人转账获得的几十万是离职赔偿，而非诈骗款。这么看来，当初HR要以私人账户转33万给李洪元，难道不是提早做局么？ 到目前为止，华为的公关部门广泛在网上删帖屏蔽这一消息，知乎上3000万热度的问题，转眼就没了。微信公众号的文章，也有不少被和谐的。 更多阅读： [转载]传华为13年老员工离职索要赔偿被关押251天 华为离职员工索要2N赔偿，被告敲诈勒索，羁押251天无罪释放！ 潍坊中微·孙夕庆·1277天 近日，历经4年114次庭审，遭羁押1277天的清华海归博士孙夕庆向澎湃新闻表示，11月7日他已拿到了国家赔偿决定书。审理该案的山东潍坊市高新区法院作出决定：向孙夕庆支付人身自由赔偿金和精神损害抚慰金合计54万余元，并为其在侵权行为影响范围内消除影响、恢复名誉、赔礼道歉。 澎湃新闻此前报道，2003年，在美国工作的清华博士孙夕庆动员7名海外博士回国，并到潍坊创立中微光电子（潍坊）有限公司（以下简称：潍坊中微），孙夕庆担任董事长兼总裁。但他没有想到，自己多年之后会因为这家企业而陷囹圄。 潍坊中微成立后，曾一度发展很好，成为全球LED灯具市场上发货量最大的制造商之一，是当地的明星企业。 2014年7月底，潍坊中微发生董事会纠纷，之后孙夕庆被免去董事长和总裁的职务。一个多月后，公司一名董事向公安机关举报孙夕庆利用职务便利侵占公司财产。很快，孙夕庆被公安机关刑事拘留。 2015年11月，孙夕庆被当地检方提起公诉，被指控的罪名为虚开增值税发票罪和职务侵占罪。法庭上，孙夕庆坚称自己无罪，同时认为自己是遭到构陷。 此案经过一审判决，之后发回重审。庭审笔录显示，这个案件4年来经历114次庭审。 2019年5月9日，潍坊市高新区法院对该案作出刑事裁定书。裁定书显示，当天，开发区检察院以证据发生变化为由，向法院申请撤回对被告单位潍坊中微、被告人孙夕庆，及该案另一被告人乐成文的起诉。 8月12日下午，潍坊市高新区检察院检察官向孙夕庆宣读了《不起诉决定书》。决定书中称：“经本院审查并退回补充侦查，本院仍然认为潍坊市公安局高新技术产业开发区分局认定的犯罪事实不清、证据不足，不符合起诉条件。” 随后，孙夕庆提出了2.06亿元国家赔偿申请。10月18日，潍坊高新区法院作出《国家赔偿决定书》。 决定书显示，孙夕庆从2015年2月3日被刑事拘留至2018年8月2日被采取取保候审强制措施，共被羁押1277天。重审过程中，高新区检察院撤回对孙夕庆起诉并作出不起诉决定，属于发回重审后作无罪处理的情形。依照相关法律和司法解释的规定，孙夕庆有权向法院申请获得国家赔偿。 决定书中称，赔偿请求人孙夕庆被判决有罪后在重审期间按无罪处理，法院作为赔偿义务机关应依法赔偿孙夕庆支付被羁押1277天期间的人身自由赔偿金，计403455.38元（315.94元/天×1277天）。 “赔偿请求人孙夕庆因长期被羁押，精神受到损害，且因其被判决有罪，日常生活受到较大影响，社会评价降低，应当认定其精神受到损害且造成严重后果。”决定书中称，法院作为赔偿义务机关应当在侵权行为影响范围内为其消除影响，恢复名誉，赔礼道歉，并支付精神损害抚慰金141000元。 对于孙夕庆主张的刑事案件律师代理费、交通费及家属误工费，以及其主张的因其被羁押致公司业务停顿，其本人持有公司股票价值损失等，高新区法院认为不符合财产权受到损害应予赔偿的情形，驳回了其请求。 更多阅读： 清华海归博士被羁押1277天后检方撤诉 获54万国家赔偿 如何看待清华海归博士孙夕庆被羁押 1277 天后检方撤诉，获 54 万国家赔偿一事？ 李宁·超过4年至今未放 2019年6月24日有媒体报道说，中国工程院院士沈国舫致信媒体表示，中国工程院院士李宁自2014年6月20日以涉嫌贪污公款罪被羁押以来，在超过4年的时间里仍未被法院宣判，“我们很多院士都认为很是不妥”。 最近一些年，在科研经费问题上，许多科研人员、其中有些是学科带头人乃至国际知名专家都纷纷栽了跟头。李宁正是在此问题“栽”进去的又一典型案例。李宁案发当初，有报道称“包括李宁在内的7名教授，弄虚作假套取国家科技重大专项资金涉嫌2500多万元”。在李宁被捕4年多期间内，该案分别于2014年12月23日、2015年1月26日两次移送吉林省松原市检察院审查起诉，在2015年8月20日、21日于松原市中级法院开庭审理后，近3年时间里，此案再无任何下文。 院士遭羁押超4年，审而不判不正常 令狐安:不追究“逼良为娼”的科研经费报销问题 后人哀之而不鉴之 上面这些案子，肯定只是冰山一角。近年来因为维权被诬为诈骗，或者在国家漏洞百出的科研经费管理体系中被人抓辫子等等案例中，其实诬告本身不可怕，因为毕竟上面这些案子，多数最终还是还了受害者一个清白。但是这些案子的可怕之处在于，我们的司法机关可以在没有任何实质证据的情况下，以司法程序中的漏洞，将任何人羁押任意长的时间。至于我们的取保候审制度，什么时候该取保，什么时候不该取保，毫无规则，基本上司法机关说怎么办，那就怎么办。 事实上，在国内法律上并没有严格意义上的「取保候审」制度，所谓把人从公安机关处保释出来，无从谈起。然而，《刑事诉讼法》第六十四条规定，人民法院、人民检察院和公安机关根据案件情况，对犯罪嫌疑人、被告人可以拘传、取保候审或者监视居住。在法律效果上，取保候审与保释差不多。 关于取保候审的适用比例，官方没有公布过数据。实务中，犯罪嫌疑人、犯罪嫌疑人近亲属或辩护律师向办案机关提出的取保候审申请，绝大多数都是石投大海，杳无音讯。实务中，公安机关将案件呈送检察院提请批准逮捕，检察院经审查，认为案件证据不足或不构成犯罪，不批准公安机关的呈捕申请的，公安机关才会迫不得已，将刑事拘留变更为取保候审。可以说，在当前的中国，取保候审难，难于上青天。在当前的中国，逮捕是原则，取保候审是例外。 法律面前人人平等吗 其实，法律条款本身严苛与否，与法律是否公平其实是两回事。但问题在，如果李洪元去告任正非，咱们的公安机关会把任正非羁押251天吗？能羁押一天就算我输。因此我们不得不常常去怀疑司法系统有些人的动机。尽管法律规定过于严苛，存在很多漏洞，但是这些司法人员，想必也不是为了照本宣科地维护法律的字面公义吧。企业动用各种政府关系施压司法机关，司法机关做出这种骚操作的链条，实在是屡见不鲜了。 既是运动员也是裁判员 如果只是说司法机关收到来自外部的压力不得不做这些见不得人的交易，尚且情有可原。但其实很多时候在没有外部压力的情况下司法机关也会做出匪夷所思的操作。为什么呢？这其实是因为中国一个非常常见的现象：有些部门既当运动员，又当裁判员，人家怎么会自己判自己犯规呢？决定拘留人的，是公安机关，决定释放人的，也是公安机关，这不是变相要求公安机关承认自己办错案了吗?反正人被刑事拘留后，被证明没有犯罪事实或因证据不足没有批捕，最终被释放的，公安机关也不算是办错案，不用承担法律责任，不用国家赔偿，为什么要释放呢? 这就会出现一种极其离奇的现象，就是公安机关拘留某人后，发现其极其可能没有犯罪事实的，依然继续羁押，而不是主动将其释放，等到拘留期即将届满了，公安机关就将该案呈送检察院提请批准逮捕，将这个烫手山芋抛给检察院，如果检察院不批准逮捕的话，就放人;如果检察院批准逮捕的话，就将强制措施变更为逮捕。当然到检察院这里，检察院也不想担责任啊！ 既是运动员也是裁判员的滑稽之处就在于：一方面它违反人的自利天性；另一方面它造成责任不明确的现象，多个机关负责就意味着没有人负责。 既是运动员也是裁判员的现象并不罕见。我一直关注学术不端的各种新闻，中国清查学术不端的体系也是这种既是运动员也是裁判员的体系。教授出成果了各种宣传表彰的是高校，如果出了学术不端的案子，负责查的也是高校，这不是逼着高校自己打自己的脸么？ 学会保护自己 其实面对这种腐败的体系的时候，普通人一旦成为主角，实在是毫无办法。面临这种无理由的羁押，在现行法律体系下，人家还真不违法。所以李宁教授被关了四年多还不放出来，就算各方关注，就算众多院士发布公告，也毫无作用。对于那些官僚来说，舆论就算闹到天上，这事不用他们承担什么责任。反之，如果他们放人，就等于承认自己之前的羁押是错误的，到时候就有人要承担责任了吧？也许这种事情只能等相关的胥吏退休或者升职了，换上新人来操作了，才有转圜的空间。 不过好处是，这种司法乱象还只是他们陈腐僵化的体系的一种被动反应，不至于主动伪造证据，强行判处成有罪（这样做不但没有直接的好处如果日后平反还要担责任），所以大家在和任何人打交道的时候，尤其是涉及比较多金钱的时候一定要留足证据。国家补偿虽然不多，但是好歹比坐牢强多了。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[转载]传华为13年老员工离职索要赔偿被关押251天]]></title>
    <url>%2Fposts%2F38296%2F</url>
    <content type="text"><![CDATA[原文转载自：https://www.williamlong.info/archives/5902.html 11月28日一份刑事赔偿决定书在网上流传，一位华为离职员工李洪元索要2N赔偿之后，被华为控告敲诈勒索，于2018年12月16日被拘留，法院认定犯罪事实不清，证据不足，不符合起诉条件，关押251天后李洪元重回自由。 在法院的宣判文中，深圳龙岗法院表示：深圳市公安局移送审查起诉的犯罪嫌疑人李洪元涉嫌敲诈勒索罪一案退回公安机关第二次补充侦查。深圳市公安局于7月10日提交了《补充侦查报告》，反映了其在与李洪元商谈离职补偿问题时，李洪元根本不存在敲诈勒索的行为。为此，鉴于李洪元的行为根本不构成犯罪或者依法不应追究刑事责任的实际情况，依照《刑事诉讼法》第一百七十三条第一款及第一百七十一条第四款之规定，对华为该员工作出法定不起诉的决定。 经本院审查并通过补充侦查，仍然认为深圳市公安局认定的犯罪事实不清，证据不足，不符合起诉条件。于2019年8月22日决定对李洪元不起诉。对赔偿请求人李洪元予以国家赔偿，包括人身自由损害赔偿金79300.94元，精神损害抚慰金27755元，两项合计107522. 94元。向李洪元原工作单位、其父亲李洪元所在的工作单位发函、为其消除影响、恢复名誉。 从宣判文中可见： 李洪元2005年入职华为担任工程师，离职前在逆变器销售管理部工作，2018年1月31日离职，在华为工作13年之久，主动离职与辞退离职尚未知晓。 离职过程中，因为补偿金额发生争议，商议后补偿33万元左右。 2018年3月8日，李洪元离职近40天后，华为向其转款补偿金，注意是通过私人账号，同时备注转款原因离职经济补偿。 前边的一系列流程都很正常，离职然后补偿，但华为的HR并没有停手，他们起诉李洪元敲诈勒索，于2018年12月16日被拘留，幸亏人民法院认定犯罪事实不清，证据不足，认定不符合起诉条件，关押251天后李洪元重回自由。 以下为不起诉意向书（部分）内容： 2018年12月15日，华为公司委托法务人员袁x到深圳市公安局经侦支队八大队报案称：公司员工李xx与杨x等人勾结，在与公司的离职补偿劳动纠纷中，威胁将资料外泄披露，要求公司给予补偿。在公安机关以侵犯商业秘密立案而查证无果的情况下，华为公司改变策略，于2018年12月28日以涉嫌敲诈勒索再次报案，控告李xx于2018年1月31日与部门领导何xx洽谈离职补偿过程中，采用威胁和强制的方式，迫使该员工何xx同意私下给付额外补偿金33万元，以换取他不闹事，不举报，顺利离职的承诺。 本案中，华为公司相关工作人员何xx、李x、袁x、周x作为证人，分别多次接受了公安机关的询问，并制作了询问笔录。所有这些证人均口径一致的指证李xx在与何xx商谈离职补偿时，采用了威胁和强制的方式，逼迫何xx给予额外的2N补偿，最后何xx考虑到李xx的危险性，不得不作出让步。好在该员工李xx保存了当时与何xx商谈离职补偿时的录音资料，通过该录音资料能够反证何xx等人是在说谎，不能排除有恶意构陷李xx之嫌。辩护人觉得事态严重，迅速向贵院出具了法律意见书，要求人民检察院将本案退回补充侦查。 公安机关在第一次补充侦查阶段，提交了将查扣的李xx的两部手机、一台笔记本电脑、一个录音笔、一个u盘、一个移动硬盘设备内的电子数据委托广东安证计算机司法鉴定所进行司法鉴定后，该所出具的《司法鉴定意见书》及录音资料文字版。能够证明当时的商谈是在双方有说有笑的基础上进行的，最终经过2小时12分24秒的充分协商，达成了离职补偿协议，整个过程并无李xx实施威胁或要挟的语言，反倒是何xx与袁x反复强调该协议内容合法，要求该员工李xx尽快接受协议约定的内容并迅速签字，足以证明李xx在与何xx商谈离职补偿的时候没有采用敲诈勒索的方式，何xx等人的证言称何xx在与李xx商谈离职补偿时受到李洪元敲诈勒索没有事实根据。 公安机关在第二次补充侦查过程中，再一次对何xx进行了询问，并附上了对何xx的询问笔录。可能这次是何xx良心发现，推翻了原来的证言，并如实陈述了自己与李xx仅仅只是2018年1月31日下午接触过一次，且在这次商谈过程中，李xx并没有对其实施要挟和威胁行为。该陈述与公安机关第一次补充侦查阶段提供的2019年5月13日华为公司逆变器管理部HRBP吕辉平出具的《关于李xx工作调整和合同不续签的两次正式沟通说明》内容相印证。吕xx在说明中称，自己协助主管熊x与该员工进行了两次沟通，第一次是在2017年7月底指出该员工业务不足以及工作调整，下半年工作重点和输出等，并提供机会给他工作调整；第二次是2017年12月份，作出不续签合同的正式沟通，安排工作交接和要求，整个沟通过程平和，李表示了解公司离职政策，并没有跟沟通主管和吕xx提特殊要求。由此可见，李xx在2018年1月31日与何xx商谈离职补偿之前，没有采用任何过激的语言，当获知公司不续签劳动合同的消息后，也能够保持理智，并没有提出任何特殊要求；接着在与何xx商谈离职补偿的过程中，更没有对何xx实施要挟和威胁的方式。那么，本案所谓敲诈勒索罪依法不能成立。]]></content>
  </entry>
  <entry>
    <title><![CDATA[【翻译】使用Swift语言来进行数据科学研究的指南]]></title>
    <url>%2Fposts%2F37730%2F</url>
    <content type="text"><![CDATA[Swift是苹果公司研发的用来取代Objective C进行苹果生态系统下软件开发的语言。而且苹果对于Swift的野心不至于一款APP专用的开发语言而已。 从Swfit语言发布以来，苹果公司就将Swift开源，并且在Swift版本迭代过程中积极听取来自普通开发者的意见。苹果致力于将Swift打造成跨平台的 通用变成语言。我从Swfit发布起就开始使用了，当时接触Swift的时候就为其所吸引，其引入的很多特性，如Type Interference， Optional，以及 简洁的语言形式等等，都能搞大大提高生产效率，并且提高程序的可读性。 现在我已经不怎么做iOS的开发的，用Swift也偏少。这两天突然看到了一篇名为A Comprehensive Guide to Learn Swift from Scratch for Data Science的文章，便想立刻通读一遍，也许在之后我可以多用Swift来做研究方面的内容。 Overview Swift很快就成为了最为强大和有效的数据科学变成语言之一； Swift和Python比较类似，因此你可以很容易地迁移到Swift上； 这里我们将会涉及Swift的基础知识，并学会如何快速搭建第一个数据科学模型； 简介 Python在数据科学的领域的火热程度自然不用多少，各种各样的排名和调查都将Python列为数据科学编程语言的佼佼者。 Python本身是非常灵活的，作为动态语言，你在使用Python不太需要遵守很多变成方面的潜规则，这带来很大的灵活性。不过这导致随着项目复杂度的增长，维护Python项目会变得比较困难。当然，性能也是一个重要的因素。一般脚本级别的数据科学应用，Python的性能并不突出，Python一般被用来当做胶水语言，主要的计算一般是其他语言实现的模块来完成。不过复杂项目中Python的性能还是会成为一个瓶颈。 不过要记住的一点是，数据科学是一个含义广泛且不断演化的学科。因此其使用的语言也要不断演化。还记得R语言在数据科学中扮演老大角色的日子吗？与Python同时兴起的还有Julia语言。 没错，这里我们就要来讨论一下将Swift语言应用到数据科学中。 “I always hope that when I start looking at a new language, there will be some mind-opening new ideas to find, and Swift definitely doesn’t disappoint. Swift tries to be expressive, flexible, concise, safe, easy to use, and fast. Most languages compromise significantly in at least one of these areas.” – Jeremy Howard 当Jeremy Howard【~Howard was the President and Chief Scientist at Kaggle】为一个语言背书，且将这门语言应用到他的日常数据科学研究中时，你就应该暂时停止你手上的工作好好听一听了。 在这这篇文章中我们将学习Swift编程语言，以及如何将其应用到数据科学领域中【~原作者真啰嗦】。如果你是Python用户，你会发现Swift和Python之间有很多的相似性。 Why Swift? “PyTorch was created to overcome the gaps in Tensorflow. FastAI was built to fill gaps in tooling for PyTorch. But now we’re hitting the limits of Python, and Swift has the potential to bridge this gap” – Jeremy Howard 今年来数据科学领域对于Swift的兴趣日渐增长，几乎人人都在讨论这个话题。以下是你要学习Swfit语言的几个原因： Swift很快，几乎接近C语言的水平； 与此同时，Swift语言非常简洁，可读性很高。这和Python类似。【~个人认为Swift的可读性可比Python高多了】； 1234567891011struct MyModel: Layer &#123; var conv = Conv2D&lt;Float&gt;(filterShaper: (5, 5, 3, 6)) var pool = MaxPool2D&lt;Float&gt;(2) var flatten = Flatten&lt;Float&gt;() var dense = Dense&lt;Float&gt;(16 * 5 * 5, 10) @differentiable func call(_ input: Tensor&lt;Float&gt;) -&gt; Tensor&lt;Float&gt; &#123; return dense(flatten(pool(conv(input)))) &#125;&#125; 12345678910class MyModel(nn.Model): def __init__(self): super().__init__() self.conv = nn.Conv2d(3, 6, kernal_size=5) self.pool = nn.MaxPool2d(2) self.flatten = Flatten() self.dense = nn.Linear(16 * 5 * 5, 10) def forward(self, input): return self.dense(self.flatten(self.pool(self.conv(input)))) 相比于Python，Swift是一门更高效，稳定，安全的编程的语言； Swift更适合应用到移动应用场景。Swift是iOS的官方变成语言； Swift对于自动微分操作支持非常好，因此非常适合数值计算【~参见上面的@differentiable】； Swift背后有Google，Apple和FastAI的支持 下面这个视频是Jeremy Howard谈论Swift的优势的视频。 Swift Basic for Data Analysis 在我们开始将Swift应用于数据科学研究之前，我们先来学习一下Swift语言的基础只是。 Swift生态 目前Swift的数据科学应用生态主要由两个生态系统组成： 开源生态 苹果生态 在开源生态系统中，我们可以在任何操作系统下载并运行swift。我们可以使用一些非常酷的Swift库来构建机器学习应用，例如Swift for Tensorflow, SwiftAI以及SwiftPlot. Swift也能让我们无缝地从Python中引入成熟的数据科学库，例如Numpy, pandas, matplotlib以及scikit-learn。所以如果你之前还在担心从Python迁移到Swift上有任何无法逾越的障碍的话，现在你可以宽心了。 另一方面，苹果公司的生态系统也有其优势。苹果公司提供了一些有用的库，如CoreML，让我们能够在Python中训练大型的模型并且直接导入到Swift中应用。另外，其中还包括了一些已经提前训练好了的成熟模型，我们可以直接在iOS和macOS应用中使用。 还有一些其他的有意思的库，比如Swift-CoreML-Transformers，可以让我们在iPhone上使用业界最新的文字生成模型，例如GPT-2, BERT等。 There are multiple differences between the two ecosystems. But the most important one is that in order to use the Apple ecosystem, you need to have an Apple machine to work on and you can only build for Apple devices like the iOS, macOS etc. 现在你对Swift有了一个宏观的了解了，下面我们来走进代码。 准备Swift环境 在Google Colab【~Colaboratory 是一个免费的 Jupyter 笔记本环境，不需要进行任何设置就可以使用，并且完全在云端运行】上提供了支持GPU和TPU的Swift版本，这里我们直接使用这一服务，从而省去安装过程。 你可以遵循下面的步骤创建一个启用了Colab notebook。 打开一个空白的Swift notebook; 点击&quot;File&quot;，然后选择&quot;Save a copy in Drive&quot; - 这会将Swift notebook保存到你的Google Drive里面。 到这里我们就可以在Colab里面使用Swift了。我们来写下第一行代码： 1print("hello world from Swift") 这就是Swift的hello world程序了！接下来如果你想在本地运行Swift，你可以按照如下的链接进行操作： Swift安装指南：install instructions； 要在Ubuntu中安装Jupyter Notebook：[Jeremy Howard's instructions to install Swift]； 在Ubuntu上也可以使用Docker来安装Swift：Swift for Docker 如果在macOS下面，直接从应用商店安装xcode就行，可以创建一个Swift Playground来试试Swift语言的特性。我记得iPad上也有Swift Playground的应用。 接下来让我们快速过一下Swift的基本语言特性。 The Print function hello world程序中，print函数的形式一点都不陌生啦。 1print("Swift is easy to learn!") Variable in Swift Swift提供了两个创建变量的选项：let和var。其中let被用来创建常量，常量的值在其声明周期中是不能被改变的。var用来创建变量，这意味着类似在Python里一样，你可以修改变量的值。 我们来看下面的例子。创建两个变量： 12let a = "Analytics"var b = "Vidhya" 让我们来尝试修改其值： 12b = "AV"a = "AV" 我们可以看到修改a的值时会出现错误： Colab上的截图 这种支持创建常量的能力可以帮助我们消除很多潜在bug。后面你可以看到我们会用let来创建那些非常重要且我们不希望修改的值。例如训练数据和结果我们会用let来创建，而一些临时变量会使用var来创建。 Swift的另一个很酷的特性是你可以使用emoji来作为变量名【~其实就是对Unicode的支持】 我们也可以使用希腊字母来作为变量名称: 1var π = 3.1415925 Swift数据类型 Swift支持一些通用的类型，如整型，字符串，单精度浮点数(Float)和双精度浮点数(Double)。在创建变量时，Swift会根据初始化值自动推断变量的类型。 123let marks = 63let percentage = 70.0let name = "Sushil" 在创建变量时你也可以显式的声明变量类型。如果初始化值和声明的类型不同，Swift会抛出错误。 1let weight: Double = 62.8 字符串格式化的方式在Swift中非常简洁。只需要用反斜杠\后面跟上括号就可以了： 12let no_of_apples = 3print("I have \(no_of_apples) apples") 你可以使用连续的三个双引号&quot;&quot;&quot;来创建多行字符串。 列表和字典(List and Dictionaries) 如同Python里面一样，Swift里面也支持List和Dictionary数据结构。不同于Python，在Swift中这两种类型都使用方括号[]。 123456789var shoppingList = ["catfish", "water", "tulip", "blue paint"]shoppingList[1] = "bottle of water"var occupationsDist = [ "Malcolm": "Caption", "Kaylee": "Mechanic"]ccupationsDict["Jayne"] = "Public Relations" 循环 除了支持经典的循环之外，Swift有一些自定义的比较独特的循环形式： for...in loop 类似Python的写法，在Swift中，你可以以如下形式来遍历列表Lists或者ranges 12345678for i in 0...5 &#123; print(i)&#125;var someList = [20, 30, 10, 40]for item in someList &#123; print(item * 2)&#125; 上面的连续三个点的符号用来创建ranges。...创建的两侧是闭集， 如果要创建不包含最右侧的变量的范围，使用..&lt;符号即可。 注意Swift使用花括号，而非缩进形式来表示代码层次结构 在Swift中也可以使用比较经典的while和for循环。You can learn more about loops in Swift here 条件 这里就是非常经典的if语句了，不做赘述。 Swift中条件语句针对Optional类型做了专门的优化。 函数 下图是Swift函数的定义形式 代码中的注释 Swift中的注释形式和C/C++比较像：用//来开始行注释，用/* ... */来常见块注释。在代码中多写注释是一个好习惯。 在Swift中使用Python的库 Swift支持和Python的互操作，这意味着你可以直接在Swift中使用大部分Python库：调用函数或者做变量的类型转换。这个特性大大增强了Swift的功能。尽管Swift的生态还非常年轻，但是我们可以直接使用非常成熟的Python库，如Numpy，Pandas还有Matplotlib等。 为了引用Python模块，我们只需要将Swift的Python模块导入，然后使用这个模块的接口即可： 12345678import Python// Load numpy from pythonlet np = Python.import("numpy")// create array of zerosvar zeros = np.ones([2, 3])print(zeros) matplotlib库也可以直接导入： 在Swift中使用Tensorflow创建一个基础模型 Swift4Tensorflow是Swift生态中一个非常成熟的库。我们可以用非常类似Keras的方式来创建机器学习和深度学习的模块。 有意思的是，Swift4Tensorflow不只是一个简单的Tensorflow的Swift语言打包，而是根据Swift本身语言开发的库。未来这个库可能会变成Swift的语言的核心部分。 What this means is that the amazing set of Engineers from Apple’s Swift team and Google’s Tensorflow team will make sure that you are able to do high-performance machine learning in Swift. 这个库加入了一些Swift语言的有用特性，如自动微分支持（这让我想起了PyTorch中的Autogrid）。 关于数据集 首先让我们来解释一下这个section的问题。如果你之前接触过深度学习领域，你应该比较熟悉了。 我们将会建立一个卷积神经网络(CNN)模型来将MNIST数据集中的图片识别为数字字符。MNIST数据集包括60,000个训练图像和10,000个测试图像。图像为手写的数字字符。 这个数据集是研究计算机视觉的时候一个非常常用的数据集，所以我在这里不做细节性的描述。要了解更多，你可以读一下这个。 配置羡慕 在我们开始创建模块之前。我们需要下载数据集并进行预处理。为了你的方便我已经创建了一个Github仓库，提供了预处理代码以及数据。让我们下载配置代码，下载数据集并导入黑色的库。 1234567891011%include "EnableIPythonDisplay.swift"IPythonDisplay.shell.enable_matplotlib("inline")import Foundationimport Pythonlet os = Python.import("os")let plt = Python.import("matplotlib.pyplot")os.system("git clone https://github.com/mohdsanadzakirizvi/swift-datascience.git")os.chdir("/content/swift-datascience") 运行上面的代码，数据集就会下载到Colab的环境中了。 在本地运行时代码应该需要修改，这个我们后面来讨论 不过这个操作太丑陋了，没有使用Swift的native方法来调用shell命令。 载入数据 12345678%include "/content/swift-datascience/MNIST.swift"// Load datasetlet dataset = MNIST(batchSize: 128)// Get first 5 imageslet imgs = dataset.trainingImages.minibatch(at: 0, batchSize: 5).makeNumpyArray()print(imgs.shape) 查看一下数据集 我们尝试画出数据集中的图片来看看我们要处理的问题： 12345# Display first 5 imagesfor img in imgs&#123; plt.imshow(img.reshape(28,28)) plt.show()&#125; 画出来大概是下面的样子： 定义模型结构 现在让我们来定义我们的模型的结构。这里我使用了LeNet-5架构，一个非常基础的CNN模型，包含两个卷基层，average pooling还有三个Dense层【~应该是全连接层？】。最后一级dense layer的输出维数是10，因为我们有10个类别要输出，分别代表0-9. 12345678910111213141516import TensorFlowlet epochCount = 100let batchSize = 128// The LeNet-5 modelvar classifier = Sequential &#123; Conv2D&lt;Float&gt;(filterShape: (5, 5, 1, 6), padding: .same, activation: relu) AvgPool2D&lt;Float&gt;(poolSize: (2, 2), strides: (2, 2)) Conv2D&lt;Float&gt;(filterShape: (5, 5, 6, 16), activation: relu) AvgPool2D&lt;Float&gt;(poolSize: (2, 2), strides: (2, 2)) Flatten&lt;Float&gt;() Dense&lt;Float&gt;(inputSize: 400, outputSize: 120, activation: relu) Dense&lt;Float&gt;(inputSize: 120, outputSize: 84, activation: relu) Dense&lt;Float&gt;(inputSize: 84, outputSize: 10, activation: softmax)&#125; 你可能已经注意到了，上面的代码和你在Keras（或者PyTorch，TensorFlow）中写的Python代码非常类似 The simplicity of writing code is one of the biggest points of Swift. Swift4Tensorflow支持很多现成的多层模型。更多阅读参考：https://www.tensorflow.org/swift/api_docs/Structs 选择梯度下降作为Optimizer 类似的，这里我们也需要选择Optimizer来优化我们的模型。我们这里选择使用随机梯度下降算法(stochastic gradient descent, SGD)。 1let optimizer = SGD(for: classifier, learningRate: 0.1) Swift4Tensorflow还支持很多Optimizer： AMSGrad AdaDelta AdaGrad AdaMax Adam Parameter RMSProp SGD 模型训练 现在万事俱备了，让我们开始训练模型吧。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879print("Beginning training...")struct Statistics &#123; var correctGuessCount: Int = 0 var totalGuessCount: Int = 0 var totalLoss: Float = 0&#125;// Store accuracy results during trainingvar trainAccuracyResults: [Float] = []var testAccuracyResults: [Float] = []// The training loop.for epoch in 1...epochCount &#123; var trainStats = Statistics() var testStats = Statistics() // Set context to training Context.local.learningPhase = .training for i in 0 ..&lt; dataset.trainingSize / batchSize &#123; // Get mini-batches of x and y let x = dataset.trainingImages.minibatch(at: i, batchSize: batchSize) let y = dataset.trainingLabels.minibatch(at: i, batchSize: batchSize) // Compute the gradient with respect to the model. let 𝛁model = classifier.gradient &#123; classifier -&gt; Tensor&lt;Float&gt; in let ŷ = classifier(x) let correctPredictions = ŷ.argmax(squeezingAxis: 1) .== y trainStats.correctGuessCount += Int(Tensor&lt;Int32&gt;(correctPredictions).sum().scalarized()) trainStats.totalGuessCount += batchSize let loss = softmaxCrossEntropy(logits: ŷ, labels: y) trainStats.totalLoss += loss.scalarized() return loss &#125; // Update the model's differentiable variables along the gradient vector. optimizer.update(&amp;classifier, along: 𝛁model) &#125; // Set context to inference Context.local.learningPhase = .inference for i in 0 ..&lt; dataset.testSize / batchSize &#123; let x = dataset.testImages.minibatch(at: i, batchSize: batchSize) let y = dataset.testLabels.minibatch(at: i, batchSize: batchSize) // Compute loss on test set let ŷ = classifier(x) let correctPredictions = ŷ.argmax(squeezingAxis: 1) .== y testStats.correctGuessCount += Int(Tensor&lt;Int32&gt;(correctPredictions).sum().scalarized()) testStats.totalGuessCount += batchSize let loss = softmaxCrossEntropy(logits: ŷ, labels: y) testStats.totalLoss += loss.scalarized() &#125; let trainAccuracy = Float(trainStats.correctGuessCount) / Float(trainStats.totalGuessCount) let testAccuracy = Float(testStats.correctGuessCount) / Float(testStats.totalGuessCount) // Save train and test accuracy trainAccuracyResults.append(trainAccuracy) testAccuracyResults.append(testAccuracy) print(""" [Epoch \(epoch)] \ Training Loss: \(trainStats.totalLoss), \ Training Accuracy: \(trainStats.correctGuessCount)/\(trainStats.totalGuessCount) \ (\(trainAccuracy)), \ Test Loss: \(testStats.totalLoss), \ Test Accuracy: \(testStats.correctGuessCount)/\(testStats.totalGuessCount) \ (\(testAccuracy)) """)&#125; 上面的代码中用了一些fancy的数学符号，但是由于这些符号输入并不方便，因此实际编程中我们不会这么做。 上面的代码流程中我们将数据集的样本传递给模型，帮助其改善预测精度。训练步骤如下： 训练重复若干次，每次我们遍历整个训练集。 在每次训练迭代中，我们逐个传入features(x)和labels(y)，这对下一步非常重要。 使用样本的features，使用模型做出预测，并与labels提供的真值进行比对，进而计算出模型的损失函数和下降梯度方向。 这是梯度下降算法发挥了作用，我们沿着梯度方向更新模型的变量。 追踪训练过程中的一些统计数据来方便我们后续做可视化。 在第一步提到的重复训练中，每次重复2至5步。 epochCount变量为重复遍历数据集的次数。你可以修改其值尝试一下。 需要多少次遍历来取得90%以上的正确率呢？我可以在12次训练下在训练集和测试集上获得97%以上的正确率。 可视化输出训练过程 用下面的方法我么可以可视化输出训练过程中的误差演变过程： 123456789101112plt.figure(figsize: [12, 8])let accuracyAxes = plt.subplot(2, 1, 1)accuracyAxes.set_ylabel("Train Accuracy")accuracyAxes.plot(trainAccuracyResults, color: "blue")let lossAxes = plt.subplot(2, 1, 2)lossAxes.set_ylabel("Test Accuracy")lossAxes.set_xlabel("Epoch")lossAxes.plot(testAccuracyResults, color: "yellow")plt.show() 得到的结果如下图所示： Swift数据科学应用的未来 有产业专家对Swift做出了很高的评价，认为其有潜力成为数据科学的主流语言，同时也能成为机器学习类应用开发的主要工具。 目前，很多fancy的数据科学相关的Swift库还在开发中，其背后有强大的业界支持。我非常看好Swift生态的未来--甚至会比现在的Python更加强大。 下面是一些你可以进一步研究的Swift库： Nifty(Demo): Swift的通用数值就散库 Swiftplot: Swift的数据可视化库 Swift for Tensorflow: 下一代的机器学习平台 Swift AI: 基于Swift的高性能深度学习框架 本文涉及的所有代码托管在Github上。]]></content>
  </entry>
  <entry>
    <title><![CDATA[【翻译】分析恶意SSH访问]]></title>
    <url>%2Fposts%2F46352%2F</url>
    <content type="text"><![CDATA[这篇文章翻译自Analysing nefarious ssh access attempts，非核心内容有删改。 维护我自己的服务器让我在过去的若干年里面学会了很多事情。也让我对那些勇敢的同时维护多个服务器的系统管理员抱有更高的敬意。这篇文章将会讲述我在维护自己的服务器的过程中经常发生的一些奇怪的事情。 Analysing IP addresses 更准确地而言，我们在这里是要寻找对我们的服务器发出的恶意ssh访问请求。这里，恶意的访问请求是指使用无效的ssh密码来尝试访问服务器。由于我管理服务器上所有的用户都使用公钥来访问服务器，因此无效密码这个评价指标是非常站得住脚的。首先让我们收集一点证据。所有的认证请求都会被记录在/var/log/auth.log文件中（或者历史版本）。这个文件的结构非常简单： 12Feb 25 00:07:21 myrddin sshd[22071]: Failed password for root from X.X.X.X port 493 ssh2Feb 25 00:07:28 myrddin sshd[22075]: Invalid user ftpadmin from X.X.X.X port 567 这个文件中不只存储了sshd的认证请求，其他的，例如sudo的认证信息也在这个文件夹 注意到日志条目对于访问者是使用已有用户名还是不存在的用户名上，采用了不同的记录方式。作者用一个python脚本过滤枚举了所有的连接请求，并按照IP排序。一共有983892条记录（大概在一个月的时间里），其中大约17%可能与恶意访问有关。事实上在统计这个数字的时候已经忽略了无效密码【~这里的无效密码应该指不符合格式要求的密码，而非指错误的密码】和无效用户名的情况，所以17%这个数字其实是偏低的。 在进一步检查了IP来源之后我觉得更有意思了。大约3个独特的IP地址，占了所有无效密码请求的25%。为了隐私问题，这里不列举具体的IP了，不过可以说的是这三个IP地址的ISP都来自中国。其中两个是中国电信，另一个是中国联通，尽管这两个ISP都列出了投诉的邮件，不过作者怀疑举报了也不会有什么卵用。 接下来我尝试用nmap搜集更多的消息： 1sudo nmap -O -Pn X.X.X.X 对于两个中国电信的IP地址，对方只开放了一个端口可以访问，为端口25。尽管这个端口我没法访问，不过nmap命令反映出对方可能是FreeBSD 6.2-Release系统【~这很可能指向的只是一个路由网关，而非实际的服务器】。不过对于第三个中国联通的IP地址，nmap挖掘出来的结果要更有意思一些。 123456789101112131415161718192021222324252627282930313233343536Nmap scan report for X.X.X.XHost is up (0.18s latency).Not shown: 977 closed portsPORT STATE SERVICE22/tcp open ssh25/tcp open smtp80/tcp filtered http111/tcp filtered rpcbind135/tcp filtered msrpc139/tcp filtered netbios-ssn199/tcp filtered smux445/tcp filtered microsoft-ds593/tcp filtered http-rpc-epmap901/tcp filtered samba-swat1025/tcp filtered NFS-or-IIS1034/tcp filtered zincite-a1068/tcp filtered instl_bootc1434/tcp filtered ms-sql-m3128/tcp filtered squid-http4444/tcp filtered krb5245800/tcp filtered vnc-http5900/tcp filtered vnc6006/tcp open X11:66129/tcp filtered unknown6667/tcp filtered irc6669/tcp filtered irc8080/tcp filtered http-proxyDevice type: general purpose|WAP|storage-misc|broadband routerRunning (JUST GUESSING): Linux 3.X|4.X|2.6.X|2.4.X (95%), Asus embedded (92%), HP embedded (91%)OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel cpe:/h:asus:rt-ac66u cpe:/h:hp:p2000_g3 cpe:/o:linux:linux_kernel:3.4 cpe:/o:linux:linux_kernel:2.6.22 cpe:/o:linux:linux_kernel:2.4Aggressive OS guesses: Linux 3.10 - 4.11 (95%), Linux 3.13 (95%), Linux 3.13 or 4.2 (95%), Linux 4.2 (95%), Linux 4.4 (95%), Linux 3.16 (94%), Linux 3.16 - 4.6 (94%), Linux 3.12 (93%), Linux 3.2 - 4.9 (93%), Linux 3.8 - 3.11 (93%)No exact OS matches for host (test conditions non-ideal).Network Distance: 16 hopsOS detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 58.88 seconds 这里显示服务器是使用的OpenSSH_6.9p1 Ubuntu-2 pat，可以使用密码或者秘钥登录。所以理论上我可以以其人之道还治其人之身。 Analysing User Names 让我们分析一下所有的恶意请求中使用的有效用户名的比例： root (98.42%) backup (0.29%) www-data (0.14%) ghost (0.11%) nobody (0.08%) 很明显绝大多数恶意请求的目标都是root。不过这些用户其实都不允许通过ssh登录的，攻击者不知道这点。对于使用无效用户名的登录请求，其分布就比较分散了。比例最高的10个我们列出如下： admin (4.57%) test (3.81%) user (3.07%) ubuntu (2.64%) ftpuser (2.40%) postgres (1.19%) oracle (1.10%) nagios (1.08%) git (0.92%) teamspeak (0.89%) Analysis Countries 最后我想可视化地呈现以下恶意访问的来源情况。最后选定的可视化工具是plotly。 这里我们可以看到最容易被攻击的还是root账户。禁止root账户使用ssh登录可以让你免疫绝大多数ssh攻击。禁止的方法参考：Security Tip: Disable Root SSH Login on Linux]]></content>
      <tags>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OLSR 路由算法原理]]></title>
    <url>%2Fposts%2F17082%2F</url>
    <content type="text"><![CDATA[LSR LSR为基于链路状态的路由算法。如何判断链路状态呢？在无线通信的环境下，只需要节点能够收到另一节点的包，就说明链路有效。另一方面，为了建立端到端的路径，路由算法需要发现并检查一跳由多个单跳链接组成的多条链路的可用性，这就需要不断的洪泛广播(flooding)来进行。这种洪泛的方式是非常浪费的。参加下面的例子： LSR 示意图 为了在网络中同步节点状态，需要各个节点进行洪泛广播，产生大量其实是存在冗余的通信。在能源受限的移动网络中是非常不经济的。OLSR通过有选择的洪泛转发(MPR: Multi-Point Relay)来解决这个问题。 OLSR OLSR 将 LSR 中简单的路由建立与同步过程切分成两部分：将邻居信息发现与维护同路由发现独立开来。 邻居发现 OLSR通过周期性地广播Hello消息来发现邻居，建立邻居表。邻居表表中记录一跳及二跳邻居节点的信息，节点间的连接也会被记录为单向还是双向。 Hello消息中包含发送节点的所有邻居即相关的连接状态(单向还是双向)。当节点收到的Hello消息中，对方已经将自己加入到邻居列表中时，说明二者之间的连接为双向。 通过Hello广播过程可以让网络中所有的节点都能知晓距离自己两跳及以内的邻居的信息。 基于邻居信息，节点可以选择出邻居MPR节点集合。一个节点选定的MPR是负责转发此节点的广播消息的节点。通过控制MPR集合的大小可以减少洪泛的开销。MPR选择分为两步： 首先选择能够覆盖「孤立二跳邻居节点」的一跳邻居节点。这里孤立二跳邻居节点是指仅通过一个邻居节点同目标节点相连的二跳邻居节点； 在余下的一跳邻居节点中，按照覆盖二跳邻居节点的数量从高到低依次选择，直到覆盖所有的二跳邻居节点。 MPR 选择算法 如上例所示。首先我们找出覆盖「孤立二跳邻居节点」1和5的A和E，将其加入MPR列表。此时1，2，3，5都被覆盖。在剩下的一跳邻居中，覆盖二跳邻居最多的B（3个）被加入MPR，然后是E，然后是G。当G被加入MPR后，所有的二跳邻居节点都被MPR覆盖。此时的MPR即为我们要选择的MPR全集。 MPR表会通过Hello信息同步给一跳邻居节点。这样每个节点能够建立本地的MPR Selector表，此表表明节点自己应该转发来自哪些节点的广播消息。 路由发现 邻居发现过程使用了Hello消息，路由发现则使用另一种格式的消息：Topology Control消息。TC消息的作用是为节点建立起全局的路由信息。只有MPR节点才会转发TC消息【需要注明的一点是：到底是MPR节点在收到TC消息以后是原样转发还是与本地的拓扑表合并以后发送本地拓扑表还存疑】。 TC消息中包含了发送者的MPR Selector【注意MPR Selector不是指一个节点的MPR节点集合，而是一个节点作为MPR应该转发来自哪些节点的消息】信息以及一个Sequence Number。 基于TC消息的交换，各个节点可以维护一个Topology Table（拓扑表），基于拓扑表节点可以计算出路由表（通过Dijkstra算法）。拓扑表的结构如下： Destination address Destination's MPR MPR SelectorSequence Number Holding Time Markdown中表格的语法 上述四项分别为： 目标地址 目标地址的MPR节点 Sequence Number 该条目的保持时间 上面提到TC消息中包含的是发送节点的MPR Selector列表。那么当另一节点收到TC消息时，将TC条目中的MPR Selector作为目标地址，则发送节点即为其MPR节点，然后填入TC消息中的Sequence Number，已经预定义的Holding Time。 我们考虑下面这个例子： 这个例子中，A，B，C三个节点均将M选择为自己的MPR节点，那么M会建立如下的MPR Selector列表： TC Originator MPR Selector MPR Selector Sequence M A 1 M B 1 M C 1 作为MPR，M会将其MPR Selector列表通过TC消息广播出去。当Y收到M发出的TC消息时，将TC消息中包含的MPR Selector信息转化成拓扑表 (Holding Time省略)： Destination address Destination's MPR MPR SelectorSequence Number A M 1 B M 1 C M 1 ... ... ... 注意对于一个收到TC消息的节点X而言，消息流的顺序是MPR Selector -&gt; MPR -&gt; X，那么反过来如果X需要向这个MPR Selector发送消息，则链条中的MPR节点就是到达目标前的上一跳节点。所以拓扑表中的第二列也会被称为Last-hop Address。故拓扑表中的每一行其实表明了网路中的一条链路。 网络中周期性的通过TC消息保持拓扑表更新，通过拓扑表使用Dijkstra算法即可获得路由表。 Further Reading OLSR路由协议工作原理 Optimized Link State Routing (OLSR) Mobile Adhoc Network Proactive Routing Protocol: 这是一个Youtube的介绍视频，有点印度口音，通过英文字幕倒是可以听懂。讲的还不错。]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>科研</tag>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-23]]></title>
    <url>%2Fposts%2F53357%2F</url>
    <content type="text"><![CDATA[新闻 香港区议会选举泛民大胜 截至今天(25日)中午12时45分，452个选区点票完毕，全部结果出炉。被视为泛民主派的候选人取得超过385席，是香港主权移交以来最多。建制派取得59席，相比上次区选的292席大幅缩水。 这次区议会创下多个香港选举纪录，包括有约294万名选民参加，投票率达71.2%，是主权移交以来最高。泛民主派也首次在区议会取得超过一半议席。 这个选举结果说明香港人并不那么反感暴力，也不那么反感港独，「一国两制」作为一种制度仍然在有效运行，但是大陆已经对一国两制失去了兴趣。 「王立强」间谍案 据多家澳媒报导，一名自称是中国间谍的26岁男子王立强（William, Wang Liqiang，音译）冒着生命危险逃往澳洲，揭露了北京军事情报机构如何通过操纵媒体、渗透大学，干预香港抗议运动和台湾选举，并在澳洲展开业务。 中国公安部门说，在澳大利亚自称是“叛逃”间谍的王立强，其实是个“在逃”诈骗犯。 24日，两名大陆商人向心、龚青在台北机场被台湾调查局国家安全处阻止离境；周一（25日）被移送台北地检署进行复讯；周二（26日）被限制出境出海。台湾媒体报道称，向心夫妇在侦讯时有问必答，态度配合，但否认是中国间谍。他们虽被禁止离境，但仍然可以在台湾自由行动。source 网易暴力裁员事件 近日，一篇名为《网易裁员，让保安把身患绝症的我赶出公司，我在网易亲身经历的噩梦》的文章被广泛转发。作者在文章中称，自己是网易游戏的员工，身患扩张型心肌病。在职期间遇到了一系列不公正待遇，包括认为绩效与个人实际工作情况不符，在其生病后，网易采用各种方式希望其离职，避免进行N+1的离职赔偿，其间遇到了“逼迫、算计、监视、陷害、威胁，甚至被保安赶出公司”。 随后网易针对该事件发表回应称，确实存在简单粗暴、不近人情等诸多行为，向相关前同事及家人道歉。 网易在声明中表示，这位前同事的主管因绩效原因向其提出解除劳动合同，文章展示的“业绩排名”，实际为工作量排名，不完全反映工作质量。经复核，其绩效确不合格。此时，该主管并没有充分尽责地了解其患病情况。 关于解决方案，网易称，这位前同事谢绝了公司在9月主动提出“N+1&quot;外的特殊关怀方案：在“N+1”补偿的基础上，我们将在其离职后的12个月内，继续额外每月无条件提供等同于其月基本工资的关怀金。 11月29日，网易裁员事件落幕：当事员工谅解，网易公布五项举措。 网易裁员，让保安把身患绝症的我赶出公司。我在网易亲身经历的噩梦！ 如何看待网传网易裁员，让保安把身患绝症的 5 年老员工赶出公司一事？ 11 月 25 日网易就暴力裁员事件发布道歉信，都有哪些信息量？事件要反转了吗？ 11月29日，网易裁员事件落幕：当事员工谅解，网易公布五项举措 猪肉价格下降 近期，一路上涨的猪肉价格已得到明显遏制。11月28日，商务部新闻发言人高峰在商务部例行新闻发布会上表示，11月初以来，由于生猪存栏环比回升、冻猪肉上市量增加、猪肉进口增长等因素的影响，国内猪肉价格回落明显。根据商务部监测，上周（11月18-24日），全国36个大中城市猪肉平均批发价格为每公斤43.66元，比前一周下降了8.6%，降幅比前一周扩大1.7个百分点，比11月初下降了16.5%。 伦敦发生恐怖袭击 当地时间周五（29日）下午约14点，市中心伦敦桥上发生持刀捅人事件，造成2人死亡，3人受伤，凶嫌被警方击毙。警方称这是一起恐怖袭击事件。 伦敦反恐警察负责人尼尔·巴苏告诉记者，周五下午，袭击者已经在作案现场被警察击毙。 巴苏说，这名男子身着背心，看上去像是一个假的爆炸装置。对于犯罪动机，巴苏表示，暂不予猜测。 该起袭击事件后不久同一天荷兰也发生了持刀伤人事件。 其他新闻 国内 京东网银在线因违规将境内外汇转移境外被罚款2943万元。source 11月27日艺人高以翔在录制制浙江卫视综艺节目《追我吧》节目过程中晕倒，抢救无效去世。高以翔原名曹志翔，1984 年 9 月 22 日出生于台北，从小在加拿大温哥华长大，曾出演《遇见王沥川》《101次求婚》《胜女的代价》《彩虹的重力》等。source 11月27日，携号转网正式实施。用户号码保持不变，符合条件可自由选择移动、联通、电信等运营商。电信业务经营者不得干涉用户自主选择。source 28日，香港警方正式进入香港理工大学清查。警方针对香港理工大学内示威者的包围已经持续了12天。source 10月31日，经深圳市人民检察院批准，台湾居民李孟居因涉嫌为境外刺探、非法提供国家秘密罪，被深圳市国家安全局依法逮捕；11月26日，经广州市人民检察院批准，伯利兹籍人员李亨利（外文名：LEE HENLEY HU XIANG）因涉嫌资助危害国家安全犯罪活动罪，被广州市国家安全局依法逮捕。二者都与「反中乱港」活动有关。source 国际 德国东部一家博物馆遭窃，10亿欧元珠宝不翼而飞。source 一名擅闯特朗普海湖庄园的中国女子被判处八个月监禁。source 土耳其向中国移交两件中国流失文物。分别是唐代石窟寺壁画和北朝晚期至隋唐的随葬陶俑，距今已有1000多年历史。 特朗普签署《香港人权与民主法案》。source。28日，中国外交部召见美国驻华大使，就美“香港人权与民主法案”签署成法提出严正交涉和强烈抗议。source 29日，日本前首相中曾根康弘去世，享年101岁。 荷兰购物街发生持刀袭击事件，多人受伤。source 韩国流行乐歌手郑俊英和崔钟训分别被判6年和5年监禁，他们被控对醉酒女性实施轮奸。source 科技 华为发布全新平板电脑MatePad Pro。source 11月26日，阿里巴巴在港交所正式挂牌，股票代码[9988.HK]，挂牌首日开盘价187港元/股，较发行价每股176港元高开6.25%，总市值4.04万亿。source 米其林发布2020北京米其林指南，这也是首版北京米其林指南。此次榜单包含23家餐厅，其中有1家三星餐厅（新荣记），2家二星餐厅（京兆尹、屋里厢），和20家一星餐厅。source 央行副行长范一飞周四表示，将挑选数字货币试点地区。source 俄罗斯西伯利亚冻土层发现一只1.8万年前的狼狗幼崽，保存完好，可能成为世界上发现的最古老的狗的样本。source 文章、言论与资源 如何自制一辆电动摩托车 特斯拉汽车的自动驾驶可以挽救数百万人的生命，但它可能首先会造成一些人的死亡，然后才能达到这个目标。 -- 彭博社]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-22]]></title>
    <url>%2Fposts%2F4268%2F</url>
    <content type="text"><![CDATA[受了点伤，这周更新的内容估计要少一点了。 新闻 至21日伊朗连续第三天关闭互联网 伊朗当局为镇压全国反政府抗议活动，已连续第三天关闭互联网服务。自上星期五（11月15日）抗议爆发以来，已有至少八人丧生。 伊朗反政府抗议者封锁了首都德黑兰的一条道路。(2019年11月17日) 互联网中断使得伊朗人很难与其他国家和外界分享抗议图片和信息。星期五早些时候，政府突然将汽油价格上调了50%，引发了抗议活动。伊朗新的汽油价格约合每升合13美分，仍属世界最低油价之列。但许多伊朗人认为，在经济状况不断恶化之际，这将给他们增加更多经济负担。 美国两院通过香港人权法案 美国国会众议院星期三(11月20日)以压倒多数通过了《香港人权与民主法案》。这项法案将定期审议香港的自治地位，从而决定是否维持美国法律所赋予香港的特殊待遇。这部法案接下来送交特朗普总统等候签署。 参议院在星期二无异议通过了这部法案。众议院在今年9月曾无异议通过同一法案的众议院版本。按照国会程序，两院版本如果不同，在送交总统签署前，必须加以协调。然而，在国会年底休假将近之际，众议院直接对参议院版本进行了表决，因此无须再整合版本和二度表决。 有意思的是，NYT的报道说这一事件的反复显示了华为在白宫的脆弱地位。其实恰恰想法。要是华为的地位真的脆弱，早就完全禁了，何至于这么反复延期，落人笑柄呢？ 美国延期华为的临时许可 本周伊始，特朗普政府给了中国电信巨头华为一个喘息的机会。它很可能会以不同的监管机构投票表决，使这家企业在美国更难开展业务而告终。商务部周一表示，将把允许企业向华为出口商品的许可证延长90天，尽管华为被列入美国政府的黑名单，禁止与美国合作伙伴开展业务。联邦通信委员会（Federal Communications Commission，简称FCC）将于周五投票，决定是否禁止无线供应商利用联邦补贴购买华为设备——设立该补贴的目的是将宽带接入扩大到服务不足的地区。 其他 国际 安倍晋三成为日本在职时间最长的首相。source 三艘在俄罗斯被扣押的乌克兰舰艇回到乌克兰。source【进来欧盟(主要是法国牵头)正在从中协调俄乌和解，这一举措应该是和解进程推进的表现】 中国区块链技术相关专利申请数量位居世界第一，达到美国的三倍。source 图瓦卢外交部长科菲访问台湾。 国内 王思聪21日再次被限制消费。source 江一燕获奖的别墅被确认是违建。source 科技 Nature 重磅发现癌基因存在于环形 ecDNA。source 阿里王坚当选中国工程院院士。source IPv4地址耗尽。source 文章与资源 CSS定位详解]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-21]]></title>
    <url>%2Fposts%2F4588%2F</url>
    <content type="text"><![CDATA[新闻 天猫双十一总成交额达2684亿 11月12日零点，2019天猫双十一落下帷幕，双11总成交额超2600亿大关，最终定格2684亿元。 2018年天猫双11最终成交额2135亿元，今年双11开幕16小时31分12秒，天猫成交额就超过了去年全天。 天猫及淘宝总裁蒋凡今天凌晨在阿里巴巴西溪总部园区向媒体表示，新消费深刻重构了人、货、场，驱动了前所未有的商业数字化变革，发掘了商业新人口，创造了商业新供给，带来了商业新行为。 白头盔创办人在土耳其死亡 在叙利亚内战时期成立的叙利亚公民防御组织创办人之一是一名英国退伍陆军军官，他的尸体在他伊斯坦布尔办公室附近被发现。 14日全港学校停课，大陆学生撤离香港 香港教育局今天(13日)发布消息称，因当前及可预计的状况，及全港学校的整体汇报，全港学校（包括幼稚园、小学、中学及特殊学校）将于明天停课。发言人表示，香港社会连日受到暴力示威者广泛破坏，情况令人齿冷；教育局强烈呼吁示威者立即停止所有暴力行为，尽快让学生安全上学。 由于示威对抗活动气氛蔓延到校园，众多大陆学生受到针对，因此目前有大量大陆学生选择临时返回深圳。深圳的高校为这些学生提供了临时住宿。 10月新能源汽车销量同比降低45% 自今年 7 月中央和地方政府减少新能源车补贴以来，国内新能源车（仅指纯电动和插电混动）销量连续四个月同比减少，10 月同比降幅进一步扩大至 45.65%，几近腰斩。 其他新闻 国内新闻 北京朝阳区确认接诊两例肺鼠疫病例。患者来自内蒙古自治区。 国足1-2不敌叙利亚，主教练里皮随后宣布辞职。 国际新闻 中国敬业集团试图收购英国钢铁公司。source 意大利威尼斯遭遇半世纪以来最大水灾。source 韩国《Produce 101》综艺节目被警方查出投票全系列造假，警方已经确认制作团队介入其中。据悉，因涉嫌操纵得票被拘留的安俊英等两人14日被移交检察机关。 ​source 特斯拉宣布在德国建立新厂。source 波音737 MAX将在下个月重新获得飞行许可。该型号飞机已经停飞了7个月了。 科技新闻 苹果发布16寸屏幕的Macbook Pro 微软全球执行副总裁沈向洋 Harry Shum 将离职微软。沈向洋为在微软级别最高的中国人。他在1996年加入微软，2007年出任搜索部门研发工程副总裁；2013年成为微软执行副总裁，进入微软核心管理层，负责微软研究院的技术和研究公司。source 11月13日，阿里巴巴向港交所提交上市申请。source]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-20]]></title>
    <url>%2Fposts%2F53549%2F</url>
    <content type="text"><![CDATA[新闻 印度宣布退出RCEP 中国牵头、原定16国参加的亚太自贸协定（RCEP）比原计划推迟签署。印度对该协定提出质疑，表示目前不愿加入。而仅隔了一天就传出消息，印度将与欧盟就签署自贸协定展开会谈。 英国大选 图为执政党保守党领袖约翰逊和在野最大党工党领袖科尔宾 英国议会2019年11月6日周三凌晨解散，大选竞选活动正式拉开帷幕。各党领袖先后演讲，亮出自己的承诺。英国政府首相约翰逊前往白金汉宫与女王会面，这标志着12月12日投票前选举期的开始。 在约翰逊可以完成英国脱欧任务的承诺下，英国目前执政的保守党也将发起该党的竞选活动。 与此同时，在野的工党领袖科尔宾将在演讲中承诺，在工党领导下实现一场“真正的变革”。 香港亲中议员何君尧被刺伤 滴滴宣布恢复顺风车业务 不过这一过程中引起了不少争议。因为新政策发布文字中提到：“试运营期间，首先提供 5:00-23:00（女性 5:00-20:00）、市内中短途（50 公里以内）的顺风车平台服务”。引起舆论对于滴滴性别歧视的指控。 在舆论发酵之后，滴滴修改了顺风车政策，无论男女，顺风车业务都只开放到20点。 中国称美国愿意分阶段取消关税 中国官方周四宣布，中美双方同意“分阶段取消加征关税”。而此前曾有美方官员表示，特朗普和习近平可能会将签署贸易协议推迟到12月份，因为协议内容和双方会面地点依然没有敲定。 王思聪被限制高消费 王思聪已被上海市嘉定区人民法院发布限制消费令。上述限制消费令显示，法院于2019年08月12日立案执行申请人曹悦申请执行上海熊猫互娱文化有限公司其他合同纠纷一案，因熊猫互娱未按执行通知书指定的期间履行生效法律文书确定的给付义务，被采取限制消费措施，限制其法定代表人、主要负责人、影响债务履行的直接责任人员、实际控制人王思聪不得实施高消费及非生活和工作必需的消费行为。 其他新闻 国内 习近平会见香港特首林郑月娥，肯定其工作。source 滴滴宣布了顺风车的试运营产品方案将于11月20日起，陆续在哈尔滨、太原、石家庄、常州、沈阳、北京、南通7个城市上线试运营。根据方案，试运营期间，滴滴将在这7个城市首先提供5:00-23:00（女性5:00-20:00）、市内中短途（50公里以内）的顺风车平台服务。试运营期间，不收取信息服务费。source 根据VISA中国官方的消息， Visa将与腾讯合作为国际Visa持卡人提供微信支付服务。同时支付宝（Alipay）首次向中国的国际旅行者开放该平台。 香港反送中出现第一条命案：一名港科技大学本科生在香港防暴警察于将军澳驱散示威者期间从高处堕下，其堕楼原因仍在调查当中。在抢救五日以后，这名学生死亡。source 前10个月中国进出口总值3.74万亿美元，同比下降2.5%。source 日本议员在华走私毒品案宣判，涉案的樱木琢磨被广州市中级人民法院判处无期徒刑。他于2013年10月31日在广州白云国际机场准备搭乘航班经由上海转机回日本时，安检人员在其行李箱拉杆夹层及箱内女式松糕凉鞋内共查获甲基苯丙胺（俗称冰毒）3289克。 长春长生生物科技有限责任公司破产。该公司之前陷入疫苗不合格的丑闻。 大陆开放香港人在粤港大湾区的购房资格限制。source 国际 印度新德里严重雾霾导致航班延误。世界上污染最严重的前30个城市中，印度占了22个。这是设在瑞士的全球空气质量数据研究机构IQ AirVisual和环保组织绿色和平的最新研究结果。其余的8个城市则在巴基斯坦、孟加拉和中国。不过榜上有名的中国城市并不是其首都北京。北京的空气质量近年来大幅改善，现在已经列在第122名。source 台湾向其「邦交国」洪都拉斯提供3亿美元贷款。source 中美贸易战签约可能延迟到12月。source 法国总统马克龙访华。 匈牙利计划让华为参与本国的5G网络建设。source 伊朗回复福尔多核设施的浓缩铀活动。source 越南和英国警方确认上月发生在英国的集装箱惨案遇难者国籍，39名遇难者均为越南人。source 中美联合破获首起芬太尼走私案，缴获芬太尼11.9公斤。source 柏林墙倒塌30周年 纽约市长布隆伯格有意参选总统。source 科技新闻 百度上线匿名社交APP：听筒 马云蝉联国内首富（福布斯杂志) 文章与言论 Yes, Americans should only be exposed to American Corporate-sanctioned propaganda. -- HN 读者评论美国政府宣布对抖音收购 Musical.ly 进行国家安全审查。source]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-19]]></title>
    <url>%2Fposts%2F10221%2F</url>
    <content type="text"><![CDATA[新闻 冲绳首里城大部分建筑被烧毁 周四，位于日本冲绳的世界文化遗产首里城的大部分建筑遭大火烧毁。首里城建造于 13 世纪末至 14 世纪之间，从 15 世纪至 19 世纪是琉球国都城和王宫的所在地，至今有 500 多年的历史，公元 2000 年由联合国列为世界遗产。朝日新闻报道，31 日凌晨 2 点 50 分左右，110 报警电话接到消防方面的通报称，那霸市首里城 “正殿发生火灾，冒出黑烟”。那霸署表示，首里城的正殿、北殿及南殿全部烧毁。火势也蔓延至位于正殿前的御庭入口 “奉神门” 及与南殿相邻的“书院”。以上均为木造建筑物。 ISIS头目巴格达迪在美国袭击中死亡 美国总统特朗普周日宣布，极端组织“伊斯兰国”(ISIS)头目巴格达迪(Abu Bakr al-Baghdadi)在美国特种部队对叙利亚西北部的袭击行动中身亡，实现了他所谓的最高国家安全目标。 特朗普在白宫发表电视讲话中称，巴格达迪被逼入一个坑道尽头，随即引爆自杀式炸弹背心身亡。 特朗普称，15分钟后经过DNA检验，确认了他的身份。 数小时后，叙利亚库尔德民兵武装保护人民部队(YPG)宣布，被称作巴格达迪左右手的伊斯兰国发言人Abu al-Hassan al-Muhajir，也在库尔德人和美国军方在叙利亚北部的另一次联合行动中身亡。 欧盟同意英国脱欧延期 欧洲理事会主席图斯克(Donald Tusk)周一表示，欧盟其他27个成员国周一同意接受英国的要求，将英国退欧期限延长至2020年1月31日。 首相约翰逊谋求提前举行大选。英国将在12月12日提前举行大选。source 英国集装箱案 39 名死者均为越南人 英国埃塞克斯警方说，他们相信在集装箱惨案中发现的39名遇难者全部为越南人，推翻了此前其认定是中国人的结论。 三季度中国国内手机出货量情况 同比去年下降3%。其中： 华为增长66%，占比42.4%， vivo下降23%，占比17.9%， OPPO下降20%，占比17.4%， 小米下降33%，占比9.0%， 苹果下降28%，占比5.2%， Others下降31%，占比8.0%。 智利宣布取消主板APEC峰会 智利周三宣布，受街头抗议活动影响，取消主办即将于下个月举行的亚太经合组织(APEC)峰会。美国和中国原本料在这次峰会上签署一项贸易协议，缓和双方已经损害到全球经济的贸易战。 同时取消的还有联合国气候变化大会(COP25)。西班牙提议接替智利在马德里主办COP25. 其他新闻 国内 敦煌干涸了三百年的湖泊哈拉奇湖重现，湖面约5平方公里 鄂尔多斯男子在微信群称化肥含量不够被拘留: 8月25日至26日，鄂尔多斯市杭锦旗吉日嘎朗镇村民梁某某在没有购买使用某化肥公司的化肥，并且没有任何证据证明该化肥公司的化肥有质量问题的前提下，在一个50人的微信群内发表该化肥公司含量不够等言论，造成了严重的社会影响。source 黄之锋被剥夺香港区议员参选资格。source 台湾立法院批准耗资最多2500亿新台币（约81.9亿美元）向美国购买66架F-16V战斗机的《新式战机采购特别条例草案》。source 世界贸易组织小型部长会议将于11月5日在上海举行。source 广州市宣布区块链奖励政策，公链项目最高补贴1000万元、本地项目最高补贴300万元。补贴基金总计10亿元。 罗永浩被列入限制高消费名单，不得选择飞机二等以上舱位。 国际 澳大利亚的乌鲁鲁岩宣布对攀登者永久性关闭 加州因为野火宣布进入紧急状态。截至北京时间 10 月 29 日下午 2 点，整个加州目前有 12 处火点正在燃烧，其中仅有 1 处火势已经被完全控制，但距离扑灭仍然有较长距离。 法国加莱发现偷渡冷藏车，货柜车的目的地是英国。检查人员拉响了警报。车厢里藏有8人，其中4名孩子，因发现及时，躲过一劫。source 比利时警方30日在该国北部城市Antwerp的一辆货车的冰柜内发现12名男性移民。 英国将在12月12日提前举行大选。source 叙利亚和土耳其政府军在叙利亚北部边境地区发生直接交火。source 美国通过「台北法案」 美国众议院以压倒性的绝对多数表决结果，正式承认第一次世界大战期间对亚美尼亚人的屠杀是种族灭绝。source Twitter将在全球禁止政治广告。 美国众议院投票通过弹劾总统调查程序。source 本周联合国大会，谴责中国新疆政策的国家有22个，而赞赏北京做法的国家则有54个。显然北京的同盟军正在不断发展壮大。source 印度已将克什米尔地区正式划分为由新德里中央政府直接管辖的两个地区。该决定可能再次引起地区骚乱。source 科技新闻 28日小米宣布将在11月5日发布小米手表 苹果发布AirPods pro，包含主动降噪功能。source 28日蔚来汽车CFO 谢东萤辞职，自2019年10月30日起生效。source 中国成立了一只 2000 多亿美元的半导体投资基金]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读论文:一种面向无线网络的Group Centric Networking路由算法]]></title>
    <url>%2Fposts%2F53819%2F</url>
    <content type="text"><![CDATA[这次我们要读的文章是Group centric networking: A new approach for wireless multi-hop networking[1]，文章的作者来自MIT的林肯实验室。这篇文章主要提出了一种针对大规模的物联网系统无线网络的网络架构方案，方案的名称为Group Centric Networking (GCN)。协议仿真由NS3仿真来实现，同时还在一个由90部Android手机组成的测试平台上进行了测试，并且作者将相关的源代码进行了开源。在通信网络相关的文章中，能够进行如此详尽的实现和测试的文章不多的。因此这篇文章有比较多的研究价值。 评论：看完这篇文之后再回到这里写评论。这篇文章提出的思想还是有意思的。现有的无线组网算法基本是对有线场景的路由算法的照搬，尤其是那些基于链路的路由算法。但是无线通信天然就是广播的，充分挖掘这一特点可以提高无线路由的可靠性。不过，作者选取的场景比较「诡异」，虽然提出了分组的概念，但是组内成员在空间上没有聚集性，而且和众多非组内成员杂处。这一场景可能在某些IOT场景有其合理性，但是对于移动组网场景而言，这个组的分布特点，是不太符合实际情况的。一般移动场景，需要进行通信的分组都是有一定的空间聚集性，且不同的组之间往往会有一定的距离，且不会杂处。例如无人机集群，同一组的无人机一般是执行某个任务，集中于某个区域，而不同组队无人机执行不同的任务，一般不在一块。所以这篇文章对于解决我们的问题，作用非常有限。 多跳无线自组网问题由来已久，但是我们还并未真正实现最初的设想 -- 即提供一种能够几乎不依赖于基础设施泛在的连接网络。目前广泛使用的无线网络方案，如Wifi和移动蜂窝网络，仍然依靠有限网络作为backbone，其无线部分只是解决了最后一跳的问题。不过随着物联网的大规模应用趋势逐渐到来，这种星型拓扑的结构可能无法支撑爆炸性增长的节点数量。因此发展自组网能力就非常重要。物联网的节点，是不大可能全部采用有线连接的方式的。用有线方式部署成本比较高，维护困难。事实上5G网络已经引入了D2D部分。 多跳无线自组网问题的核心挑战包括： 网络的可扩展性 通信的可靠性 高动态特性（不稳定拓扑） 其中，对于物联网应用来说一般节点位置比较固定，故第三点问题不太显著。 下面我们来详细讨论一下[1]中的内容。 未来网络特点分析 传统的网络架构往往强调一个「地址」的概念。通常一个用户是client，另一个用户是server，这两个用户在网络中的任意位置，通过路由算法进行连接。在未来的网络中，这种点对点(P2P)的架构可能就不合时宜了。在物联网场景中，更多的是海量的设备位于一个局域网络中，服务于一个人类终端用户，或是在工厂中协作改进生产效率。传统的长距离的P2P通信将不是网络通信的主要内容。作者将这种「局域化」通信的网络特性称之为Group-Centric，即局部通信成为网络流量的主要模式。 总结来看，Group-Centric网络有如下特点： Devices will be grouped by an inherent set of &quot;interests&quot; that are dependent on the tasks they are performing, and these group members will wish to communicate reliably between one another. Devices are not limited to a single group, and can belong to multiple groups. The majority of message exchanges will be within some local area, and long-distance traffic will only be a small fraction of overall communications. Any device can be a source or a sink, and traffic patterns between them may be one-to-one, one-to-many, many-to-one, or many-to-many. Future wireless environments will have a mix of mobile and stationary devices, where mobility will be typically be limited to some local area. 文章中提到一个数据很有意思：a recent study shows that 95% of traffic in military networks travels at most three hops, with only 5% of traffic being long-range[2] 当前多跳无线网络的路由机制，本质上是照搬有线网络中的解决思路。这些路由机制都是基于链接(Link)的，即将远程端到端通信分解为多个首尾相接的链路。但是相比于有线网络，无线网络有天然的广播特性(干扰，多径，噪声等问题)，因此执着于Link的方式是不合适的。The idea of a link is itself borrowed from wired networks: in a wireless network, there is no one-to-one connection between two radios; transmissions are sent over-the-air and are typically overheard by multiple devices。 本文[1]提出的GCN方法，就摒弃了基于Link的路由概念，而使用了「智能洪泛」(smart-flood)的方法。GCN的核心特点如下： No link state or neighbor information is utilized or maintained, and minimal control information is exchanged. Data is efficiently disseminated only across the region where group members exist. To support this, we develop a novel Group Discovery algorithm that dynamically discovers the region of interest and efficiently selects the minimal amount of relay nodes required to “cover” this region More reliable communications is achieved in an error-prone and mobile environment by using tunable resiliency, where the number of redundant data relays is configurable and is able to self-adjust in response to real-time channel conditions. Devices communicate in a many-to-many traffic pattern. Efficient one-to-one, one-to-many, and many-to-one are subsets. 文章证明了，CGN相比于传统无线网络路由算法，使用的网络资源少一个数量级，且提供了可靠的通信连接。 GCN机制内容 GCN 设计的目的是服务于设备分组聚集的网络，其中大部分的通信内容都在组内部进行。 网络中的节点资源受限，环境中存在干扰导致通信并不总是可靠。因通信需要：i) 能够抗干扰；ii) 高效实用带宽和能量。 业务模式 组件用户的通信是多对多模式(many-to-many)。一个用户可能希望想另一个组中的全部或者部分用户发送数据，或者是从另一个组内收集数据。注意One-to-one, one-to-many, 和many-to-one通信模式其实都是many-to-many的子集。 GCN 的一个网络布局的例子如下图： An example of a group centric network 在上图中，通过定义一系列的中继节点，我们让组内的成员可以互相连接起来。使用one-to-many的通信方式，即便存在一条链路传输失败，其他节点可以继续中继数据。上图中只显示了一个Group，但是节点事实上可以同时从属于多个group。 GCN的核心机制如下： Group Discovery: Efficient discovery of the local region where group members reside via a group discovery algorithm that is able to connect group members without the use of global control information Tunable resiliency: Relay nodes are activated such that the local region is sufficiently &quot;covered&quot; in data by having a tunable number of redundant data relays. This allows for resiliency towards both packet loss and mobility without the need for the constant exchange of control information. The number of activated relay nodes self-adjusts in response to real-time channel conditions Targeted flooding: Data can be efficiently and resiliently sent between sets of group members through an approach we call &quot;targeted flooding&quot; Group Discovery Group Discovery 的作用是在没有先验信息的情况下于局部发现彼此相连的组成员（不局限于一跳，但是最大跳跃数不会太高）。且这一过程不需要进行低效率的全局广播过程。Naive的做法是使用TTL机制来做洪泛广播，不过这种方式非常低效，浪费通信资源。 本文提出了一种更叫高效的方法，我们称之为discovery regeneration。其基本思想是，预期发送一个TTL比较大的包，不如多次重新生成一个TTL比较小的包。具体的过程如下： 某个组成员通过发送一个discovery message来发起group discovery操作。相应的discovery message的TTL值，会根据group想要扩展的范围来进行设置。将最初发起者设置的TTL成为source TTL。 如果某个组成员监听到了一个discovery message，该节点会使用source TTL来重新生成一个消息。 如果一个非组成员监听到一个discovery message，如果其TTL大于0，那么将TTL减一后再次广播，反之如果TTL为0，则什么都不做。 中继节点(Data relays)通过Group Nodes发送的ACK消息来确定。当一个Group Member收到一个discovery消息时，会向中继此discovery消息的Group Node发送ACK消息。加载在Group Nodes之间的非组成员节点在收到对应的ACK时，会成为 Data Relays. 当Group Nodes收到多个discovery消息时，只会对第一个discovery消息发送ACK。去重机制会确保discovery消息只被广播发送一次。还有一点要注意的是，ACK消息只会发送给重新生成discovery消息的Group Node，而非一路转发回到最初的原始节点。 在GCN中，当一个节点成为Data Relay的时候，这个节点就作为整个Group的网络的中继节点而存在，而非只服务于当初发送ACK的那个Group Node。同时，中继节点也不需要保留发送ACK的这个组节点的信息。反过来，任何Group Node也会监听来自Relay Node的信息。 上面这一套发现流程完成之后，GCN中的任何节点都不需要保留链路信息或者是邻居信息。借助于Relay Node的作用，现在所有组成员都被连接了起来，通过现有网络架构，可以实现One-to-all模式的通信，进而也可以实现many-to-many的通信模式。这个组发现流程可以周期性地执行，从而允许网络结构调整，包括新节点加入等。 下图是上述发现流程的一个例子： 图中生成discovery时初始TTL为2，发出去的时候减去1。非组成员并不重新生成新的discovery包，而是将TTL减去1转发，因此限制了扩散范围。 从上面的描述来看，这里的组发现过程，并不只是发现组的成员，还要发现转发需要的Relay Node。 那么，剩下的问题是如何选择合适的初始TTL值呢？如果TTL选的太小，那么不足以发现所有的组成员。如果TTL太大，则会产生太多的冗余通信内容。文章的作者从理论和仿真的角度论证了即便是比较低的TTL值也足以发现比较稀疏的网络中的所有组成员。 设\(N\)个用户分布在面积为\(A\)的二维区域中，那么用户密度为\(\lambda = N / A\)。任意一个用户是组成员的概率是\(P_g\)，每个成员的通信传输距离都是\(X\)。在如上假设下，我们可以得到被发现的组成员的比例，同TTL初始值\(T\)的关系为\(1 - e^{P_g \lambda \pi ((X - \frac{1}{2\lambda})\cdot T)^2}\)。下图是仿真和理论结果的拟合情况。 仿真场景为100个节点均匀分布在半径为100米的圆形区域内，每个用户的传输距离是40m。上图中不同的曲线使用了不同的\(P_g\)值。所有节点都是静止的 为了比较GCN机制的优越性，作者提供了整体传输效率的比较。这里的传输效率是指为了将一个消息发送给的网络中所有的组成员，需要实际发送的数据量的大小。这里我们不详细介绍这个环节了，对比图如下。 传输效率对比图 Tunable Resiliency 前面的组发现流程为网络中分散分布的组成员创建了一系列中继节点组成的集合，该集合的中继可以实现组成员之间的one-to-many的通信。不过这一组合是「最小组合」，其可靠性还缺乏保障。如果某一中继环节传输失败可能导致后续的传输中断。节点的运动会使得这种情况愈发严重。 为了提升GCN机制的可靠性，作者在上述组发现机制之余在增加了一个新的机制 -- Tunable Resiliency。这一新机制可以激活额外的中继节点以改善GCN广播转发过程的可靠性。额外激活的中继节点的数量可以根据信道条件自适应地调整。Tunable Resiliency机制对于组发现的过程的修改如下： 在ACK【ACK为组成员回复给潜在的中继节点的】机发送前增加一小段延时。 每个用户都记录其周围的可见邻居节点的数量，以方便确定其周围存在的可能的中继节点的数量。 以随机性的方法选择一组用户【用户依照一定的概率自行决策】成为中继节点。 在ACK前增加一小段的延时是为了让组发现消息(discovery message)充分传输到特定用户的周围，以方便用户统计周围邻居节点的数量【下面马上会讨论这个】。这一延时的大小的确定取决于用户的链路层。 在邻居节点数量统计过程中，一个用户会计算周围发送discovery messages的节点的户数量。除非一个节点是非组成员节点，而且TTL为0，不然收到discovery messages的节点会立刻转发此消息。因此延后ACK一小段时间，节点【目标区域内的节点，包括组成员和非组成员都可以通过这个过程获知邻居数量信息】在发送前可以通过收到的discovery messages的数量来统计周围邻居的数量。 对于可以潜在的中继节点候选者，其可以根据周围邻居的数量来调整自己转变成中继节点的概率。这样可以保证最终生成的中继节点的数量符合预期的密度。 Tunable Resiliency 效果示例 Targeted flooding 上面的两个部分我们讨论的组发现和Tunable Resiliency过程构造的中继节点集合，主要面向的还是一对多的通信模式。为了能够有效地实现多对一或者一对一的通信，作者提出了Targeted Flooding机制。 为了实现这种通信模式，GCN需要通过控制消息传输来获取距离信息（跳跃数，而非空间距离），从而构建一个组成员的梯度场。在每次包（数据包以及控制包）传输时，包会包含如下额外信息：发送者的ID和已经经过的跳跃数(hop count)。每当一个用户监听到一个包时，都会记录自己距离包的最初发送者的距离（跳跃数）。 one-to-one traffic 对于某用户\(i\)，将其到另一用户\(j\)的距离记为\(\Delta_j^i\)。从一个用户向另一个用户发出的消息将会在其Header中包含目标地址以及最大传输距离（Maximum Retransmt Distance, MRD）【MRD在每次转发后都会更新减一】。中继节点在收到要转发的包时，检查其自身到目标的距离是否不超过MRD的限制。若是，则转发，否则放弃转发。 Traget Flooding for One-To-One的例子，图中圈内的数字为该节点到\(j\)的距离 上面的例子给出了Target Flooding的过程。在(a)中，经过one-to-group过程，组内节点都可以知道自己到\(j\)的跳跃数。图中圈内的数字为该节点到\(j\)的距离。(b)展示了直观的通过链路状态的路由方式，但是这种方式需要维持路由表，开销巨大而且在动态场景下不太稳定。(c)演示了将MRD设置为2时从\(i\)到\(j\)消息的传播路径。可见Flooding的范围是受控的。(d)则 演示了将MDR设置为3的情形，这时冗余传输增加了，但是可以提供更多的鲁棒性。 one-to-many traffic 这里说的one-to-many指发送给组的一个子集，而非发送给整个组。这种通信模式是对one-to-one的直接扩展。节点在发送时直接指定多个目标地址/MRD对就可以了，其他处理过程和one-to-one通信过程是一样的。 One-to-many的例子 many-to-many traffic many-to-many过程中，各个发送节点独立发送one-to-many模式的消息即可。 以上是协议涉及的所有内容，至于仿真部分这里就不分析了 Reference [1] G. Kuperman, J. Sun, B.-N. Cheng, P. Deutsch, and A. Narula-Tam, “Group centric networking: A new approach for wireless multi-hop networking,” Ad Hoc Networks, vol. 79, pp. 160–172, 2018. [2] R. Ramanathan, R. Allan, P. Basu, J. Feinberg, G. Jakllari, V. Kawadia, S. Loos, J. Redi, C. Santivanez, and J. Freebersyser, “Scalability of mobile ad hoc networks: Theory vs practice,” in 2010-milcom 2010 military communications conference, 2010, pp. 493–498.]]></content>
      <categories>
        <category>读论文</category>
      </categories>
      <tags>
        <tag>无人机</tag>
        <tag>科研</tag>
        <tag>读论文</tag>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-18]]></title>
    <url>%2Fposts%2F59180%2F</url>
    <content type="text"><![CDATA[新闻 陈同佳出狱 陈同佳愿意前往台湾投案，但是被台当局拒绝。随后两天民进党当局态度反复，至本周结束仍然没有确定信息。 厄瓜多尔临时迁都 新华社基多10月7日电（记者郝云甫）厄瓜多尔总统莫雷诺7日宣布，鉴于当前首都基多的安全局势愈发紧张，厄政府机关将从基多临时迁至厄瓜多尔第一大城市瓜亚基尔。 莫雷诺在7日晚发表的全国电视讲话中表示，从10月3日开始，厄社会受到抗议活动的严重冲击。他说，抗议活动的暴力色彩越来越严重，暴徒恣意进行打砸抢等暴力活动。“这是有组织、有计划的行动，意在破坏厄瓜多尔的民主秩序，破坏政府的稳定。” 莫雷诺指责厄瓜多尔前总统科雷亚是暴力活动的幕后黑手。他指控科雷亚及其支持者企图利用抗议活动发动一场旨在推翻现政府的“政变”。 莫雷诺强调，政府不会退缩，不会在压力下停止经济改革。同时他呼吁抗议者立即同政府开展对话以化解分歧。 日前，厄宣布取消对汽油等燃油的价格补贴，这一措施导致油价大涨并引发民众强烈不满。为抗议政府放开汽油价格，厄交通运输业者3日举行全国大罢工。莫雷诺3日宣布全国进入为期60天的紧急状态，以应对厄公共交通行业宣布罢工给社会造成的混乱状况。 在厄首都基多，居民由于担心物价大幅上涨而开始抢购食物。超市货架的各类食品被抢购一空。厄政府开始采取措施打击哄抬物价的行为。此外，由于担心安全问题，从3日开始，厄瓜多尔全国中小学处于持续停课状态。 德仁天皇即位典礼22日举行 日本德仁天皇正式即位典礼将于周二(22日)举行，将有来自超过180个国家的政要贵宾出席这场有百年历史的庆祝仪式。 晚间将举行“飨宴之仪”，本次宴请将于22日，25日，29日，31日分4天宴请约2000名国内外宾客，其中22日宴请外国领导人，祝贺使节，参众两院议长，首相，最高裁判所长官等共约410人。 当日东京银座，数百名对天皇制的民众在东京银座举行示威，高喊“反对即位”等口号，部分示威者与警方发生冲突，3人被捕。 智利宣布进入紧急状态 智利首都圣地亚哥因地铁加价【10月6日凌晨，圣地亚哥新公交系统开始使用，地铁早晚高峰各两个小时时段的票价较原来上涨30比索，达到830比索（约合1.17美元）】引发民众示威抗议。智利总统皮涅拉宣布首都进入紧急状态。 当地时间周五，以学生为主的示威者在当地多个地铁站出入口纵火，破坏站内设施。有示威者向警察投掷石块，袭击警车并燃烧至少一辆巴士。警方出动防暴警察，向示威者使用警棍及催泪弹。 受示威影响，当地地铁服务暂停。 旧闻一则 玻利维亚大选结束，存在舞弊疑虑 玻维亚昨天举行战况激烈的总统大选，最新计票结果显示，长期执政的现任总统莫拉莱斯似乎准备迎接胜利，引发舞弊疑虑，主要反对派候选人梅沙今天拒绝承认这项结果。 昨晚初步计票结果显示，得票率第2高的前总统梅沙（Carlos Mesa）将与莫拉莱斯（Evo Morales）一同进入第2轮决选，如今计票结果却突然翻转，梅沙今天谴责选举当局发布的修正结果是场「骗局」。 梅沙说：「我们不会承认那些计票结果，那是这场可耻、虚假骗局的一环，使玻利维亚社会处于不必要的紧张局势。」 梅沙在圣克鲁斯（Santa Cruz）告诉记者：「我们相信公民们不会接受这个结果。政府创造了一个不可能发生的局面，伪造人民的投票。」 来自美洲国家组织（Organization of American States）的选举监督小组稍早已对玻利维亚大选结果突然逆转「深表关切」。 选举监督小组声明说：「对于投票结束后显示的初步结果走向发生剧烈且难以解释的变化，美洲国家组织代表团深表关切和讶异。」 代表团指出，昨晚公布的初步计票结果显示，59岁的莫拉莱斯囊括45%选票，66岁的梅沙则拿下38%，两人得票皆未达到首轮所需的当选门槛，这意味莫拉莱斯原本将首度面临第2轮决选。 媒体报导，双方支持者在行政首都拉巴斯（La Paz）街头爆发冲突，美洲国家组织呼吁选举当局「坚决捍卫玻利维亚人民的意志」，并呼吁各方冷静。 「在这种棘手的情况下，保持冷静和避免各种形式的暴力极为重要。」 反对派支持者已在全国各地主要计票中心外头发起抗议，以向选举当局持续施压。 中国富裕人口总数超过美国 瑞士信贷的研究显示，中国富裕人口首度超越美国。瑞士信贷周一公布的年度财富调查结果显示，截至今年年中为止，名列全球前 10% 的富裕人口中，中国占了 1 亿人，美国则占了 9,900 万人。研究显示，全球百万美元富翁人数估计增加 110 万人至 4,680 万人，整体净资产规模达 158.3 万亿美元，占全球总数的 44%。美国占上述增幅的一半以上，新增 67.5 万个百万富翁。55,920 名成年人的身家至少 1 亿美元，4,830 人的净资产超过 5 亿美元。 英国卡车集装箱内发现39具尸体 据英国天空新闻23日最新消息，英国埃塞克斯一工业园区的一辆卡车集装箱内发现39具尸体。报道称，卡车司机是一名来自北爱尔兰的25岁男子，现因涉嫌谋杀已被逮捕。 后续传出消息39名遇难者均为中国国籍，随后驻英大使馆以及英国警方均表示目前还未确认遇难者国籍。有消息显示遇难者中可能有越南人(source)。有多名越南人表示他们担心其亲属可能在这辆集卡车上(source)。 27日消息，英国警方称将把调查重点转向越南社区。(source) 其他新闻 总市值超过30亿港元的「51信用卡」疑似被查。(source) 塔利班组织证实了将于下周在华举行阿富汗各派间会议的计划。(source) 加拿大大选结束，特鲁多连任，但议会席次大减。(source) 外籍乘客拉高铁紧急制动阀未被处理？广州铁路回应。 因为美国未及时发放签证，中国代表团集体缺席今年的国际宇航联大会。(source) 韩国决定放弃世贸组织中的发展中国家地位。(source) 当地时间10月27日，美国德州发生大规模枪击案，已致2死10多伤: 综合美联社、《达拉斯早报》27日消息称，当地时间周日(27日)凌晨，位于得克萨斯州格林维尔市的一个校园派对上发生大规模枪击事件。据当地官员和目击者称，至少造成2人死亡、十多人受伤。 巴西宣布对中国免签。 27日，叙利亚民主力量（SDF）周日（10月27日）宣布从叙利亚和土耳其边境最终撤离，叙利亚边防军将取代他们。(source) 26日，《中华人民共和国密码法》发布。密码法旨在规范密码应用和管理，促进密码事业发展，保障网络与信息安全，提升密码管理科学化、规范化、法治化水平，是中国密码领域的综合性、基础性法律。(source) 数码新闻 10月23日华为正式发布5G折叠手机Mate X，售价为16999元起。 微软赢得五角大楼100亿美元的云计算合同。 路透社刚刚援引英国《星期日泰晤士报》27日的报道称，英国首相鲍里斯·约翰逊正准备授予中国华为公司访问英国未来的5G电信网络“不具争议性”部分的权限。(source)]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-17]]></title>
    <url>%2Fposts%2F58220%2F</url>
    <content type="text"><![CDATA[新闻 赵紫阳下葬民间公墓 10月18日下午一時，前中共中央总书记赵紫阳在逝世14年后，与夫人的骨灰合葬于北京昌平区民间公墓天寿园。赵家子女在经历多年波折后，终于在父亲百岁冥诞之时，遵循了中国“入土为安”的传统。在此之前，赵的骨灰一直放置在他北京的故居。 BBC中文得到消息，赵家子女在与官方协商后，为顺利举行安葬仪式，做出承诺：仅安排直系后裔参加，以家礼送葬。北京数名原本听到消息，准备低调参与安葬仪式的赵紫阳仰慕者被限制行动，未能成行。 腾讯恢复NBA季前赛直播 要么一开始就别整，要整就要整到底。雷声大雨点小，授人以柄，丢人现眼 加泰罗尼亚独立运动领导人被判重刑 西班牙最高法院作出裁定：分别判处加泰罗尼亚独立运动的12名被告中的9人9至13年有期徒刑。不过，法官未认定被告犯有叛乱罪。检方曾要求以该罪判处被告最高25年监禁。被告分别被判处多年监禁。前加泰罗尼亚大区政府副主席容克拉斯获最高13年徒刑。数名被告还被裁定犯有侵吞公共资产罪。另3名前政界人士被裁定犯有不服从罪。此案涉及分离主义运动领袖们在2017年10月1日的遭禁独立全民公投中所扮演的角色，及由此导致的巴塞罗那地区政府作出加泰罗尼亚脱离西班牙的决定。 16日，加泰罗尼亚首府巴塞罗那又发生严重冲突。独立运动支持者焚烧汽车和街垒。大区政府现任主席谴责了暴力。警方通报说，有暴力倾向的独立运动人士不仅向安全力量投掷石块和爆竹，而且还使用了&quot;沾有酸性液体的物品&quot;。这已是在巴塞罗那市内及周边大规模示威的第三天。(来源) 美国众议院通过香港人权民主法案 美国众议院投票一致通过《香港人权与民主法案》，要求美国政府每年审视香港的自治情况，按需要调整美国对香港的贸易特别待遇。 法案的通过被视为美国政府回应香港近期示威浪潮的重要一步。 法案的主要发起人、共和党议员史密斯（Chris Smith）说，众议院促请中国和香港政府履行承诺，保护香港的权利和自治权。 中国外交部发言人耿爽周三（10月16日）对法案获得众议院通过感到“强烈愤慨和坚决反对”，他批评香港面临的不是人权和民主问题，而是尽快恢复秩序、维护法治的问题。“美国国会众议院罔顾事实、颠倒黑白，把肆意纵火、打砸商铺、暴力袭警等严重犯罪称之为人权和民主问题，是赤裸裸的双重标准。” 同一天，香港政府也发表声明，对美国众议院通过法案表示遗憾，重申外国议会不应干预香港内部事务。 除了《香港人权与民主法案》，众议院还通过了《保护香港法案》，禁止美国公司向香港出口催泪弹等人群管制用品。 这两部法案正式成为法律前，仍然需要参议院通过，最后由总统特朗普签署正式确定。参议院目前仍未决定什么时候开始审议。《经济学人》智库早前分析称，相信这份法案会在今年年底之前成为真正的法律。 华为公布第三季度业绩报告 华为于昨日公布了 2019 年第三季度的业绩报告。报告显示，华为截至第三季度销售收入 6108 亿人民币，同比增长 24.4%，净利润率为 8.7%。在消费者业务方面，智能手机保持稳健增长，前三季度发货量超过 1.85 亿台，同比增长 26%。而 PC、平板、智能穿戴、智能音频等新业务均获得高速增长。 另外，在报告中华为还提到，截至目前，华为已和全球领先运营商签定了 60 多个 5G 商用合同，40 多万个 5G Massive MIMO AAU 将发往世界各地。 在制裁中逆势增长，中国还是太缺像华为这样的企业了。 英国退欧协议在欧盟获得通过 路透布鲁塞尔10月17日 - 欧盟执委会主席容克说，英国和欧盟达成了一项新的英国脱欧协议。 英国议会10月19日星期六就脱离欧盟问题举行辩论，决定再次延迟英国议会的脱欧表决。约翰逊政府遭遇重大挫折。(source) 英国议会议员们以322票赞成，306否决，通过了前保守党议员、现独立无党派议员莱特温提出的英国脱欧修正案，规定所有必要的英国立法获得通过前，英国政府必须推迟英国脱欧。 这意味着约翰逊首相必须在当地周六晚11点前致函欧盟，提出英国脱欧延期的要求。 其他新闻 重名梗：台湾政治学学者蔡英文先生于10月10日在台北去世，享年67岁。(来源) 印度放宽对华旅游签证限制(来源) 韩国艺人崔雪莉死亡(来源) 沙特首次开放旅游签证([来源]](http://www.bbc.com/zhongwen/simp/world-50047289)) 德国宣布不会在5G网络建设中排除华为(来源) 贾跃亭正式申请个人破产(来源): 贾跃亭债务处理小组在发布的《有关贾跃亭先生个人破产重组及成立债权人信托的声明》（以下简称声明）中表示，贾跃亭已于美国当地时间10月13日根据美国相关法律第11章（chapter 11）主动申请个人破产重组，这将成为解决贾跃亭个人余下债务并保障债权人利益的最佳方案。 风灾已经导致日本58人死亡(来源)，其中遇难中国籍船员达到6人(来源)。 中缅边境地区电信诈骗猖獗，严重区域内的微信支付宝支付服务被封停。 深圳开出首张电子烟发单，罚款50元。这意味着在禁烟场所，电子烟同样不被允许。 国务院：允许外国银行在中国设立独资银行或者开分行。(来源) 香港特首发表《施政报告》，首次以短片形式发表。(来源) 中美合拍的《雪人奇缘》出现中国「九段线」，遭到越南封禁。(来源) 中国9月 CPI涨幅达到六年以来的最高水平，生猪数量减少四成。(来源) 香港民阵召集人岑子杰遭到不明身份人士袭击，目前已送院接受治疗。(来源) 一名挪威议员提议港人竞选2020年诺贝尔和平奖(来源) 美国政府要求中国驻美人员应在对政府、高校和研究机构的代表进行正式访问之前，事先通知美国外交部门。(来源) 亚美尼亚开通受理中国银联卡。(来源) 通用汽车与工会和解 17日，土耳其同意在叙利亚停火五天，供库尔德武装撤离。(来源) 中国内地停止向香港出口黑色T恤。(来源) 广西玉林一家化工厂发生爆炸。(来源) 引发持续四个月“反送中”示威的香港杀人嫌犯陈同佳同意赴台自首，但台湾官方表示，希望香港政府续押陈同佳。(source) 智利首都圣地亚哥因地铁加价引发民众示威抗议。智利总统皮涅拉宣布首都进入紧急状态。(source) 波兰：新法案将性教育与“恋童癖”划等号。(source) 科技新闻 亚马逊消费者业务关闭最后的甲骨文数据库。 苹果明年可能发布四款5G iPhone。 亚马逊提出了一种新的无线协议，叫做Amazon Sidewalk协议，使用900兆赫频率，特点是低带宽、长距离（通信距离可以到一英里），设计用途是连接房屋内部和周围的所有物联网设备。第一款使用该协议的产品，将是明年发售的狗牌 Ring Fetch。狗戴着这个设备，一旦失去信号，就表示狗已经远离了你，你就会收到警报。只要收到信号，就表示狗在距离你一英里的范围内。(来源) 10月8日 丰台发布第二代Mirai燃料汽车。(来源) 肯尼亚的埃留德·基普乔格（Eliud Kipchoge）10月12日在维也纳以1:59:40的成绩，成为第一个马拉松进入两小时以内的人。不过，由于这是一次专门为他破记录举办的挑战赛，为了创造记录，有41个人配合他跑，为他挡风和配速，所以国际田联不会承认这个纪录。(来源) 第一个进行太空行走的宇航员阿列克谢·列昂诺夫（Alexei Leonov）去世，享年85岁。 10月16日，在美国华盛顿，美、英、韩执法官员宣布，捣毁一个以韩国为基地的儿童非法视频暗网，并逮捕338人。该网站出售儿童非法视频，使用比特币支付，允许用户在交易中隐藏他们的身份，该网收集了至少价值37万美元的比特币。 文章与言论 吴恩达新书《Machine Learning Yearning》完整中文版开源 Modern C电子书下载。]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[梁振英的一段发言]]></title>
    <url>%2Fposts%2F50577%2F</url>
    <content type="text"><![CDATA[梁振英，大紫荆勋贤，GBS，JP（英语：Leung Chun-ying，1954年8月12日－），生于香港，籍贯山东省威海市，现任全国政协副主席、全国政协常务委员，香港特别行政区第4任行政长官，也是前香港特别行政区行政会议非官守成员召集人，香港测量师学会前会长及戴德梁行亚太区前主席。梁振英于香港回归前，曾经担任由中方委任的基本法咨询委员会秘书长，参与《香港基本法》的起草事务。 泛民用「普選」將「高度自治」篡改成「完全自治」，製造憲制危機 新加坡總理李顯龍日前講出一個顯淺而關鍵的道理：香港有些人要普選，但是香港不是一個國家。 香港不是一個國家，和普選不普選有什麼關係？這個問題在30多年前起草基本法時已經釐清，反修例運動發生後我再講過幾次，上星期六在摩洛哥舉行的國際會議上我又講了一次，全場的西方人聽到之後都明白，沒有人反駁。 道理是這樣的：香港不是一個國家，因此在香港本地實施的民主只能是地方性民主，只可以和倫敦、紐約、東京等城市的民主程度比較。民主國家的城市通過一人一票選出的市政府首長以及他領導的政府的權力相當有限，比香港的行政長官和特區政府的權力小得多。 為什麼香港的行政長官和特區政府的權力比外國民主國家的市長和市政府權力大？這是因為除了由香港選民通過選舉給予行政長官和特區政府民意授權外，還有中央政府通過實質任命給予額外授權，兩個授權疊加就形成了香港的高度自治權。正正由於需要有中央政府的額外授權才有高度自治，因此行政長官的產生，從辦法的制定、修改以至產生的過程，都不能把中央撇開。如果要把中央撇開，就不會有中央的額外授權，香港的行政長官和特區政府的權力就會大幅縮小至類似倫敦、紐約或東京的市長和市政府的權力。這是香港人願意接受的嗎？ 我過去公開問過泛民這個問題：選舉委員會選舉也好，一人一票選舉也好，如果產生的當選人是中央不能任命的，這樣嚴重的憲制危機，該怎樣處理？泛民說，中央應該尊重香港的民意，按選舉結果任命。這就是廢除中央的任命權力，把中央變成橡皮圖章，用我的話說，是「去中央化」，用泛民的話說，是「自決」，無論怎樣表述，是30多年前「民主抗共」的延續，是香港走向獨立的一大步。 中央對行政長官的任命有最終決定權，是「高度自治」和「完全自治」的重要分野。中國政府在聯合聲明和基本法都保留了「協商」作為產生行政長官的一種辦法，是留了一手，也是為了避免出現上述的憲制危機。 我要把這個道理在今天再說一次，原因也很簡單：過去四個月，反修例是引子，「五大訴求」中四個訴求是虛晃一招，要害的是排在最後的一個訴求：「雙普選」。五年前「佔中」，明知是違反基本法的「公民提名 必不可少」竟然成為價碼，今次捲土重來，「五大訴求」的「雙普選」開價不會比「佔中」時低。過去四個月，「和勇一家」、泛民不肯割席、蘋果無恥加無良，利用每一個過世的人，為的都是選票。未來兩年半有四場選舉（區議會、立法會、行政長官選舉委員會、行政長官），下個月的區議會選舉是前哨戰，最後一役的行政長官選舉是戲肉，如果這四場選舉在今天舉行，香港會全面變天，上面說的中央拒絕任命行政長官當選人的嚴重憲制危機就會出現。 泛民選出的行政長官當選人會把尾巴藏起來，怎麼藏？參照十多年前台灣。這種人萬一成為行政長官，名義上香港仍然是中國的特別行政區，實質上是西方國家的附庸，成為反華反共基地，顛覆華南一帶，更會利用所有執法部門對建制人士和中資機構「專政」。天方夜譚嗎？請參考其他地方的顏色革命。對這些圖謀，中央一清二楚。 少數人將全體香港人被綁上戰車，攬炒中央，這不是香港大多數人的意願，只有西方國家喜聞樂見，香港本來很有潛力成為中國的金融商貿中心，幾個月下來，香港很可能成為中國的痛點，用英文的說法，就是中國大腿上的一條刺。 下去怎麼樣？不要猜，「覆巢之下無完卵」，關心香港和亞洲地區的人都要團結起來，行動起來，尤其是工商界。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>政治</tag>
        <tag>香港</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-16]]></title>
    <url>%2Fposts%2F9133%2F</url>
    <content type="text"><![CDATA[新闻 中美贸易战谈判达成第一阶段贸易协议 当地时间周五下午，特朗普在白宫表示，美中经贸磋商取得了实质性的第一阶段成果，美国将暂缓下周15号的对华加征关税。刘鹤表示，双方在此轮磋商中就共同关心的经贸问题进行了坦诚、高效、建设性的讨论，在农业、知识产权保护、汇率、金融服务、扩大贸易合作、技术转让、争端解决等领域取得实质性进展(这些部分目前尚未有明确的说明)，讨论了后续磋商安排。 特朗普表示，美中两国“非常接近”终结贸易战。特朗普还表示，美中贸易协议有可能在下个月智利举行的亚太峰会上，由他本人与中国国家主席习近平正式签署。 美国从叙利亚北部撤军 美国媒体NBC新闻7日报道，美国总统特朗普与土耳其总统埃尔多安6日就叙利亚问题通了电话，随后白宫发布“撤军”声明。NBC将此声明的发布时间形容为“非同寻常”。依据白宫声明，美国将“不支持也不参与”土耳其即将在叙利亚北部展开的军事行动，同时“也不会干涉”，因为美国军队将不再在“附近区域”行动。 同时，白宫在声明中提及，美国在叙利亚地区抓获了许多来自于法国、德国等欧洲国家的ISIS恐怖分子，但以上国家事后都拒绝接收。美国决定将不再收押被抓获的恐怖分子，“交由土耳其负责”，“以免浪费美国纳税人的金钱”。 另外，观察者网6日报道，土耳其总统埃尔多安在5日发出迄今为止最强烈的警告，威胁将在叙利亚东北部发动军事行动。埃尔多安表示，土耳其的目标是“用和平之泉浇灌幼发拉底河东岸”，并将200万难民安置回去。 10月9日周三，土耳其对叙利亚东北部的库尔德武装组织发动军事攻势。土耳其总统埃尔多安表示，这场攻势旨在库尔德人控制的区域建立一个“安全区”，重新安置目前居住在土耳其的叙利亚难民。许多观察人士将此次中东局势的升级怪罪于特朗普，说他“出卖盟友”。特朗普撤军决定来得突然，国际上，美国国会两党、法国等盟友都表达了反对，认为此举背信弃义，会进一步搅乱中东局势。还有中国的军事战略观察人士认为，特朗普此举是为了重返亚太的政策，将美军的重点放在亚太地区集中对付中俄两国。 不过特朗普还表示，已经警告土耳其不得出手太重，否则将摧毁土耳其经济。 刘鹤将于10日至11日赴美国进行新一轮谈判 中国商务部周二表示，应美方邀请，中共中央政治局委员、国务院副总理、中美全面经济对话中方牵头人刘鹤将率团访问华盛顿，于10月10日至11日同美国贸易代表莱特希泽、财政部长姆努钦举行新一轮中美经贸高级别磋商。 2019年诺贝尔奖揭晓 三名科学家因氧气感知机制而获得诺贝尔医学奖；三名物理学家因宇宙学发现获诺贝尔物理学奖; 化学奖授予锂电池; 美国商务部将28家中国机构和企业列入贸易黑名单 美国商务部周一把中国一地方公安局和包括视频监控公司海康威视及其他七家企业在内的28家机构和企业加入贸易黑名单，理由是少数民族人权问题。 火箭队总经理莫雷的推特言论事件持续发酵 30年努力3天内被毁！总裁连夜飞上海要见姚明，但依旧不道歉；NBA在中国面临全面封杀 央视暂停NBA转播 腾讯体育也跟进停止转播NBA的比赛 10日的上海NBA中国赛场气氛热烈，NBA球迷正常观看比赛，被骂的比较惨。 无锡312国道发生跨桥侧翻事故 10月10日18时10分许，312国道K135处、锡港路上跨桥发生桥面侧翻事故。经现场搜救确认，桥下共有3辆小车被压，其中1辆系停放车辆（无人，驾驶员已找到），1辆车上共2人、已死亡，1辆车上只有1人、已死亡。侧翻桥面上共有5辆车，其中3辆小车、2辆卡车。事故共造成3人死亡，2人受伤。 故原因是限载65吨的车拉着187吨上了单柱高架，倾覆了。 其他新闻 港交所宣布放弃与伦交所的合并计划 布拉格市政府同意解除与北京的友好城市关系: 布拉格现市长贺瑞普（Zdeněk Hřib）上任后，要求删除姊妹城市协定中承诺遵守“一个中国原则”的条款。作为“回应”，中方则在过去半年多次取消捷克乐团前往中国演出的行程。 全球多地发生极端环保主义者的示威活动：在纽约，几名气候变化环保主义者向纽约著名地标华尔街铜牛泼“假血”抗议，被警察逮捕。在伦敦，大量极端环保主义者封锁伦敦重要道路和桥梁，造成严重交通堵塞，至少280人被警方逮捕。 白宫拒绝配合参与弹劾调查: 美国总统新闻秘书斯蒂芬妮∙格里沙姆称，白宫认为对美国总统特朗普的弹劾程序非法，并拒绝参与调查。 德国林堡发生卡车冲撞事件: 德国黑森州林堡市一十字路口，一男子驾驶一辆劫来的载重车撞击多辆轿车。起初，这起事件被看作是一场交通事故。然而随着时间的推移，越来越人猜测，这可能是一起恐怖袭击。 华人工程师因为实名抗议遭到Facebook解雇: 因Facebook华人工程师跳楼事件，9月26日在Facebook门前悼念自杀华人工程师的活动中举工牌谴责Facebook的工程师尹伊，因此事被Facebook开除，开除的理由是“lack of judgement” （缺乏判断力）。 Paypal退出虚拟货币组织Libra协会 吴京成为中国首位150亿先生 宁夏推出夫妻共同育儿假， 0至3岁子女父母每年可以休10天假期。 10月1日 烟台氦气球事故导致一对母子遇难 习近平访问印度，为期两天 10月10日 伊朗女性几十年来被首次允许现场观看球赛 10月11日 伊朗油轮在沙特附近海域遭到两枚导弹袭击。伊朗国家石油公司是这艘油轮的船主。 教育部发布关于深化本科教育教学改革全面提高人才培养质量的意见，文件要求，严把考试和毕业出口关。完善过程性考核与结果性考核有机结合的学业考评制度，综合应用笔试、口试、非标准答案考试等多种形式，科学确定课堂问答、学术论文、调研报告、作业测评、阶段性测试等过程考核比重。加强考试管理，严肃考试纪律，坚决取消毕业前补考等“清考”行为。 肯尼亚运动员埃鲁德·基普乔格成为史上首个在两小时之内跑42195米马拉松的田径运动员。 强台风海贝思12日晚登陆日本 美国新奥尔良兴建中酒店大楼倒塌，1死18伤。(来源) 数码信息 10月8日 苹果推送了macOS Catalina正式版: 新版 macOS 将 iTunes 拆分为三个独立应用、推出了支持 iPad 作为第二屏幕的 「随航」，macOS 版「屏幕使用时间」等多项新功能。 法国高级法院今日裁定 Steam 玩家有权转卖自己购买的数字版游戏，Valve 不但无权阻止还必须提供线上交易二手游戏的功能并删除禁止玩家交易游戏的条款。限期一个月执行。此裁定不仅限于法国而是在全欧盟生效。来源 文章与资源 SheUi: 一个设计素材网站。 CSS Grid 网格布局教程: 阮一峰写的教程 npm和yarn的区别]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-15]]></title>
    <url>%2Fposts%2F8941%2F</url>
    <content type="text"><![CDATA[新闻 国庆大阅兵 Facebook总部一名中国籍员工跳楼 Facebook一名中国籍员工从公司位于加州门洛帕克（Menlo Park）的总部大楼四楼跳楼身亡。据悉，该员工已经在美国工作8年，但他仍没有拿到绿卡，只有工作签证，又要养家糊口，不能和上司翻脸，只好忍气吞声，最终不堪重负结束了自己的生命。 据华商报报道，自杀者为38岁的华人男子陈勤（音译）。根据领英页面显示，陈勤今年38岁，浙江大学毕业，到美国后在南加州大学攻读硕士，去年3月入职Facebook公司。 十一香港继续骚乱 中国庆祝国庆70周年当天，香港多个地区发生民众游行示威活动，演變為激烈警民衝突。警方除了使用催泪弹和水炮車驱散示威者，更多次開真槍，導致一名示威青年中槍。當局公佈最少74人受伤送院，數人情況危殆及嚴重。 10月4日 香港特区政府行政长官林郑月娥周五称，政府决定引用《紧急情况规例条例》订立禁止蒙面规例，10月5日生效，但此举不等于香港进入紧急状态。 Thomas Cook宣布破产 9月23日，英国最大的旅游集团Thomas Cook突然发布声明，宣告公司即刻破产。Thomas Cook拥有178年历史，是世界上第一家旅行社，在英国拥有最大的旅游市场份额。破产之后Thomas Cook在全球范围内雇佣的2.2万员工（其中9000英国员工）将立刻面临失业。 百年老字号Thomas Cook轰然倒闭时，有超过60万游客仍在度假，其中15万是英国人。Thomas Cook宣告破产将直接导致这些游客的旅行计划告吹，甚至滞留海外。 对于Thomas cook的突然倒闭，英国交通大臣Grant Shapps表示，英国政府和民航管理局已租用数十架专机，准备免费把Thomas cook的旅客安全送回英国。这次代号为“马特洪峰”（Operation Matterhorn）的大规模撤侨已经启动，昨天（9月22日），空无一人的专机已经从英国出发，今天就会开始“救援”。英国交通部表示，所有此前通过Thomas cook预订在未来两周回国的英国旅客，将会在尽量接近原定返回日期的日子搭乘政府安排的航班。 台湾宜兰南方澳跨港大桥坍塌 10人受伤5人失踪 台湾宜兰县的知名地标南方澳跨港大桥，10月1日当地时间上午9时发生坍塌意外，倒塌详细原因不明。事故发生时，一辆油罐车正要过桥，当车辆驶抵对岸时，大桥两端突然断裂崩塌，油罐车瞬间下坠，起火燃烧，目前该驾驶员已送医急救。 台湾媒体报导，根据当地警察和消防部门初步清查，至少有三艘渔船被压在桥下，已传出10多人受伤，其中多名是外籍渔工。 甘地骨灰被盗 《今日印度》（India Today）援引当地政府的消息报道称，印度民族解放运动领导人莫罕达斯∙甘地的骨灰被从印度纪念馆中盗走。 在1948年1月被暗杀后甘地的遗体被火化，骨灰被分成几部分，其中一部分被保存在中央邦的纪念馆中。 骨灰被盗一事发生在庆祝甘地诞辰150周年之日。报纸报道称，前来向“印度国父“甘地表示敬意的当地国大党领袖古尔米特∙辛格发现了骨灰被盗。此外，在纪念馆的入口处还被写上了“国家的叛徒”的涂鸦。 辛格说：“好像，这件事是那些喜欢南度蓝姆∙高德西的人所为，而高德西是刺杀甘地的凶手。这种仇恨必须立刻停止，警方必须迅速采取行动，确定并抓住窃贼。” 普京承认正在帮助中国打造导弹攻击预警系统 10月3日，俄联邦总统普京在“瓦尔代”国际辩论俱乐部所做的最为主要的声明是，正式承认帮助中国打造导弹攻击预警系统。这是中俄在战略国防领域进行合作的首次正式确认。这种合作的事实本身，要比中俄关系中的任何政治声明都重要。出席“瓦尔代”俱乐部总结大会的俄罗斯军事专家瓦西里·卡申在接受卫星通讯社采访时这样指出。 伊拉克局势紧张 科技新闻 百度浏览器正式停止服务 华为已生产出可绕过所有美国零部件的5G基站，并早在今年的8月和9月对新基站进行了测试。 10月2日 微软发布Surface Neo双屏电脑 美国加州弗里蒙特警察局一辆特斯拉在追击逃犯的过程中电量耗尽 SpaceX 公司发布自己的宇宙飞船StartShip 其他新闻 美国将对欧盟数十亿美元的商品加征关税: 10月2日，世贸组织裁决欧盟“未能采取合适措施撤销对空客的补贴”，允许美国向欧盟约75亿美元的商品及服务征税。现在，华盛顿将对这一裁决付诸实施。布鲁塞尔则威胁要采取报复行动。 希腊最大的护卫舰在演习中搁浅 英国和美国政府于周四签订了「史上首份」双边数据分享协议，允许执法部门直接向对方国家的科技公司要求数据。这意味着，英国当局不再需要向美国政府提出申请，即可直接要求美国脸书、谷歌、推特等公司提供用户数据，协助涉及恐怖主义、儿童侵害与其他严重犯罪的调查。 截图：英国政府官网 新加坡「防网络假信息」法生效: 恶意散播假信息，损害新加坡公共利益的个人最高可判10年有期徒刑和10万新加坡元（约合50万元人民币）的罚款，不愿配合的企业则会面临100万新加坡元（约合500万元人民币）的罚款。根据法令，新加坡内阁部长将有评断信息真假，并要求更正或撤下信息的绝对权力，当事方若有异议，可以上诉。 关于《防止网络假信息和网络操纵法案》生效的政府公报 文章与资源 沙特王室蓝钻事件：卅年余波不息疑团至今未解: 沙特皇宫30年前出了一起珠宝失窃案，引发了一连串凶杀命案和外交危机，余波持续至今。那个偷了沙特王子蓝钻石的人现在同意与媒体见面，讲出他的故事。]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-14]]></title>
    <url>%2Fposts%2F57900%2F</url>
    <content type="text"><![CDATA[临近国庆，GFW也是越来越高了，大量现有的梯子都挂了，我的梯子也不能直连了。不过好在我在国内有一台支持Ipv6的服务器。大概是因为Ipv6的普及率还不够高，因此Ipv6还没有被严格封禁，可以利用这台服务器作为跳板机跳出去。具体的方法可以参考我的这几篇博文： Shadowsocks中继-从Ipv4到Ipv6 Haproxy支持Ipv6 新闻 英国高院裁定首相让议会休会违法 英国最高法院周二裁定，首相约翰逊建议伊丽莎白女王让议会休会的行为违法，因此议会不算休会。 中国第一艘两栖攻击舰下水 9月25日上午，中国海军首艘两栖攻击舰下水仪式在上海举行。 075型两栖攻击舰是中国人民解放军海军正在设计建造的一种大型两栖攻击舰，此舰为解放军海军最大的两栖战舰，设有机库，能搭载近30架各型直升机，拥有直通甲板，可同时起降多架直升机，同时设有坞舱，可作为两栖车辆和气垫登陆艇的母船，可以运送士兵、步兵战车、主战坦克等展开登陆作战，这将使中国海军能更顺利进行两栖作战，提升解放军的登陆力量。 预计明年3月该型号的两栖攻击舰还有一艘下水。 北京大兴机场投入运营 北京大兴国际机场 9 月 25 日将迎来首航，届时，也标志着该机场正式投入运营。大兴机场被英国《卫报》评为「新世界七大奇迹」之首。2015 年，机场航站楼工程开工建设；2017 年 6 月，航站楼钢结构封顶；2018 年 12 月，机场跑道道面全面贯通；2019 年，主体工程全部竣工。 美国众议院通过有关弹劾特朗普的一项决议 美国国会众议院司法委员会当地时间12日表决通过一项决议，为弹劾总统相关调查确立准则。这也是该委员会就弹劾现任美国总统特朗普通过的第一项决议。 事件起因是有人匿名举报川普通乌克兰。。。举报者说7月25日川普打电话给新当选的乌克兰总统泽连斯基，以4亿美元军事援助款项为要挟，8次要求乌克兰调查拜登儿子在乌克兰的腐败案件。 作为反击，川普周三上午立刻公布了自己的电话录音文本力证清白。30分钟的通话记录显示，川普只提了两次拜登的名字，只是请求泽连斯基继续调查拜登家族贪腐案，完全没有用军事援助来要挟。 另外，周一标普收盘2992点，周二佩洛西（众议院议长）宣布「通过弹劾相关决议」，标普下点0.8%，周三特朗普公开电话记录，标普上涨0.6%。 其他新闻 美国参众两院的外交委员会在周三这天，通过了多项涉及香港的法案，包括《香港人权与民主法案》、《保护香港法案》以及支持港人自由权利的决议案。相关人士指出，预计在10月中这些法案就能获得全院通过，立法成功。 黑胶唱片的销售额自1986年以后第一次超过CD 韩国2018年生育率降低至 0.98，成为全球唯一一个生育率跌破1的国家。 美国五角大楼向沙特调派雷达和爱国者导弹电池，以加强沙特的防御，本月沙特石油设施遭遇了有史以来规模最大的袭击，造成沙特石油产量缩减50%，占全球产量的5%。 法国前总统希拉克逝世 印度「维克兰特」号在建航母电脑内的硬盘、内存、CPU丢失: 印度警方答复是，在船厂外是有监控的，但航母内部没有监控，所以追查十分困难。 法国警察上街游行 突尼斯合法妓院将绝迹 资源 中文 UML 教程 Java学习资源]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Qt on Mac摸索记录 - 其四]]></title>
    <url>%2Fposts%2F41659%2F</url>
    <content type="text"><![CDATA[事件与信号(Events and signals) 事件系统在任何GUI框架中都是非常重要的，所有的GUI应用都是事件驱动的(Event-driven)。这些信号可以是用户产生，也可能是程序内部产生。在一个事件模型中，有如下三个重要的部分 event source event object event target 其中，event source是指产生事件的对象，一般在产生事件的同时，其内部状态也发生了变化。event object则是指描述事件本身的对象。event target则是需要响应这些事件的对象。 当我们调用QApplication::exec函数时，应用进入主循环中(main loop)。主循环负责获取事件并将事件发送给合适的响应对象。Qt实现了独特的signal and slot机制。这一机制是对C++变成语言的扩展。这里，信号(signal)和槽(slot)用于对象之间的通信，其中信号在事件发生时产生。槽一般是一个正常的C++函数，当指定信号触发时这个函数会被调用。信号和槽需要事先进行连接。 鼠标点击 我们之前已经见过了在QPushButton上应用信号与槽的机制来处理点击事件。这里不再赘述，参考按钮与交互这个部分。 按键响应 下面的这个例子显示了按键响应的例子： 12345678910111213// keypress.h#pragma once#include &lt;QWidget&gt;class KeyPress : public QWidget &#123; public: KeyPress(QWidget *parent = 0); protected: void keyPressEvent(QKeyEvent * e);&#125;; 123456789101112131415// keypress.cpp#include &lt;QApplication&gt;#include &lt;QKeyEvent&gt;#include "keypress.h"KeyPress::KeyPress(QWidget *parent) : QWidget(parent)&#123; &#125;void KeyPress::keyPressEvent(QKeyEvent *event) &#123; if (event-&gt;key() == Qt::Key_Escape) &#123; qApp-&gt;quit(); &#125; &#125; 123456789101112131415#include &lt;QApplication&gt;#include "keypress.h"int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); KeyPress window; window.resize(250, 150); window.setWindowTitle("Key press"); window.show(); return app.exec();&#125; 注意keyPressEvent是父类QWidget的一个虚函数。故这里我们不直接使用到槽函数。 QMoveEvent 这个事件代表Widget移动的过程，同样是通过override父类的虚函数实现的。见下面的例子： 123456789101112131415// move.h#pragma once#include &lt;QMainWindow&gt;class Move : public QWidget &#123; Q_OBJECT public: Move(QWidget *parent = 0); protected: void moveEvent(QMoveEvent *e);&#125;; 1234567891011121314151617// move.cpp#include &lt;QMoveEvent&gt;#include "move.h"Move::Move(QWidget *parent) : QWidget(parent)&#123; &#125;void Move::moveEvent(QMoveEvent *e) &#123; int x = e-&gt;pos().x(); int y = e-&gt;pos().y(); QString text = QString::number(x) + "," + QString::number(y); setWindowTitle(text);&#125; 12345678910111213141516// main.cpp#include &lt;QApplication&gt;#include "move.h"int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); Move window; window.resize(250, 150); window.setWindowTitle("Move"); window.show(); return app.exec();&#125; 断开信号和槽的联系 信号和槽可以通过槽连接气力啊，也可以断开。断开通过disconnect函数来实现，其参数形式应当和connect时的参数一致。例如 1234connect(clickBtn, &amp;QPushButton::clicked, this, &amp;Disconnect::onClick);// ... disconnect(clickBtn, &amp;QPushButton::clicked, this, &amp;Disconnect::onClick); Timer Timer是周期性发出的事件（当然也可以用来做single shot）。Timer的典型例子就是用来实现一个时钟： 12345678910111213141516#pragma once#include &lt;QWidget&gt;#include &lt;QLabel&gt;class Timer : public QWidget &#123; public: Timer(QWidget *parent = 0); protected: void timerEvent(QTimerEvent *e); private: QLabel *label;&#125;; 12345678910111213141516171819202122232425262728#include "timer.h"#include &lt;QHBoxLayout&gt;#include &lt;QTime&gt;Timer::Timer(QWidget *parent) : QWidget(parent) &#123; QHBoxLayout *hbox = new QHBoxLayout(this); hbox-&gt;setSpacing(5); label = new QLabel("", this); hbox-&gt;addWidget(label, 0, Qt::AlignLeft | Qt::AlignTop); QTime qtime = QTime::currentTime(); QString stime = qtime.toString(); label-&gt;setText(stime); startTimer(1000);&#125;void Timer::timerEvent(QTimerEvent *e) &#123; Q_UNUSED(e); QTime qtime = QTime::currentTime(); QString stime = qtime.toString(); label-&gt;setText(stime);&#125; 123456789101112131415#include &lt;QApplication&gt;#include "timer.h"int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); Timer window; window.resize(250, 150); window.setWindowTitle("Timer"); window.show(); return app.exec();&#125; 这里的startTimer和timerEvent都是父类提供的函数。 QWidget 这里梳理一下常用的基础控件类型。这些类都是QWidget的子类。 QLabel QLabel用来展示文字和图片，不涉及用户操作。 QSlider QSlider提供了便捷的连续数字选择器。长这个样子： QComboBox QComboBox可以让我们从有限的下拉选项中选择。 QSpinBox 用来处理可以递增递减的离散数字 QLineEdit 单行文字输入，这个我们之前已经接触过了。 Statusbar 状态栏，通过statusBar()函数来获取。 其他 还有好多控件就不一一说明了，很多看名字就能知道是做什么用的： QCheckBox QListWidget QProgressBar QPixmap QSpliter QTableWidget 绘图 这个部分也是我需要关注的重点，如何自由地绘图 QPainter是我们进行绘图操作的画板。绘图过程在paintEvent函数(QWidget的函数)中完成。 我们首先来看一个绘制直线的例子。 1234567891011121314// lines.h#pragma once#include &lt;QWidget&gt;class Lines : public QWidget &#123; public: Lines(QWidget *parent = 0); protected: void paintEvent(QPaintEvent *event); void drawLines(QPainter *qp);&#125;; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// lines.cpp#include &lt;QPainter&gt;#include "lines.h"Lines::Lines(QWidget *parent) : QWidget(parent)&#123; &#125;void Lines::paintEvent(QPaintEvent *e) &#123; Q_UNUSED(e); QPainter qp(this); drawLines(&amp;qp);&#125;void Lines::drawLines(QPainter *qp) &#123; QPen pen(Qt::black, 2, Qt::SolidLine); qp-&gt;setPen(pen); qp-&gt;drawLine(20, 40, 250, 40); pen.setStyle(Qt::DashLine); qp-&gt;setPen(pen); qp-&gt;drawLine(20, 80, 250, 80); pen.setStyle(Qt::DashDotLine); qp-&gt;setPen(pen); qp-&gt;drawLine(20, 120, 250, 120); pen.setStyle(Qt::DotLine); qp-&gt;setPen(pen); qp-&gt;drawLine(20, 160, 250, 160); pen.setStyle(Qt::DashDotDotLine); qp-&gt;setPen(pen); qp-&gt;drawLine(20, 200, 250, 200); QVector&lt;qreal&gt; dashes; qreal space = 4; dashes &lt;&lt; 1 &lt;&lt; space &lt;&lt; 5 &lt;&lt; space; pen.setStyle(Qt::CustomDashLine); pen.setDashPattern(dashes); qp-&gt;setPen(pen); qp-&gt;drawLine(20, 240, 250, 240);&#125; main.cpp的文件内容很简单，我们之后就不放了。 在这个例子中我们用六种不同的笔触画了六根线，如下图： 更高阶的绘图还是看原教程吧，内容太多了。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程 - Qt - C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Qt on Mac摸索记录 - 其三]]></title>
    <url>%2Fposts%2F24435%2F</url>
    <content type="text"><![CDATA[这个系列的摸索是在研究Qt Tutorial英文教程的基础上，克服在macOS上遇到的若干问题写下的记录。前面两篇我们还是在研究比较基础的模块，还没有涉及具体的GUI部分。从这篇开始我们来研究GUI开发。 First program, more 在第一篇文章里面我们写了一个简单的窗口程序： 123456789101112131415#include &lt;QApplication&gt;#include &lt;QWidget&gt;int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); QWidget window; window.resize(250, 150); window.setWindowTitle("Simple example"); window.show(); return app.exec();&#125; 这里我们将其扩展一下。 鼠标图标的例子 这个例子将展示控件的组合方式 123456789101112131415161718192021222324252627282930313233343536373839404142434445// cursors#include &lt;QApplication&gt;#include &lt;QWidget&gt;#include &lt;QFrame&gt;#include &lt;QGridLayout&gt;class Cursors : public QWidget&#123;public: Cursors(QWidget *parent = 0);&#125;;Cursors::Cursors (QWidget *parent) : QWidget (parent)&#123; QFrame* frame1 = new QFrame(this); frame1-&gt;setFrameStyle(QFrame::Box); frame1-&gt;setCursor(Qt::SizeAllCursor); QFrame *frame2 = new QFrame(this); frame2-&gt;setFrameStyle(QFrame::Box); frame2-&gt;setCursor(Qt::WaitCursor) ; QFrame *frame3 = new QFrame(this); frame3-&gt;setFrameStyle(QFrame::Box); frame3-&gt;setCursor(Qt::PointingHandCursor); QGridLayout *grid = new QGridLayout(this); grid-&gt;addWidget(frame1, 0, 0); grid-&gt;addWidget(frame2, 0, 1); grid-&gt;addWidget(frame3, 0, 2); setLayout(grid);&#125;int main(int argc, char*argv[]) &#123; QApplication app(argc, argv); Cursors window; window.resize(350, 150); window.setWindowTitle("Cursors"); window.show(); return app.exec();&#125; 运行界面如下： 将鼠标放到不同的框里面，鼠标的图标形态会发生变化。 按钮与数据交互 我们来写一个累加累减小工具。这次我们需要写三个文件： 12345678910111213141516171819202122// plusminus.h#pragma once#include &lt;QWidget&gt;#include &lt;QApplication&gt;#include &lt;QPushButton&gt;#include &lt;QLabel&gt;class PlusMinus : public QWidget &#123; Q_OBJECT public: PlusMinus(QWidget *parent = 0); private slots: void OnPlus(); void OnMinus(); private: QLabel *lbl;&#125;; 1234567891011121314151617181920212223242526272829303132// plusminus.cpp#include "plusminus.h"#include &lt;QGridLayout&gt;PlusMinus::PlusMinus(QWidget *parent) : QWidget(parent) &#123; QPushButton *plsBtn = new QPushButton("+", this); QPushButton *minBtn = new QPushButton("-", this); lbl = new QLabel("0", this); QGridLayout *grid = new QGridLayout(this); grid-&gt;addWidget(plsBtn, 0, 0); grid-&gt;addWidget(minBtn, 0, 1); grid-&gt;addWidget(lbl, 1, 1); setLayout(grid); connect(plsBtn, &amp;QPushButton::clicked, this, &amp;PlusMinus::OnPlus); connect(minBtn, &amp;QPushButton::clicked, this, &amp;PlusMinus::OnMinus);&#125;void PlusMinus::OnPlus() &#123; int val = lbl-&gt;text().toInt(); val++; lbl-&gt;setText(QString::number(val));&#125;void PlusMinus::OnMinus() &#123; int val = lbl-&gt;text().toInt(); val--; lbl-&gt;setText(QString::number(val));&#125; 12345678910111213141516// main.cpp#include "plusminus.h"int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); PlusMinus window; window.resize(300, 190); window.setWindowTitle("Plus minus"); window.show(); return app.exec();&#125; 在原版英文教程中没有给出编译方法【即没有给出pro文件的内容】，这里可能会有一些坑要踩。我们首先来看一下源文件中有什么不太一样的地方，然后给出编译的方法。 我们来看plusminus.h文件。首先我们要注意到Q_OBJECT这个宏。这个宏放在这里是我们使用Qt提供的信号与回调（槽）【我也是刚开始学习，这里描述措辞后续可能需要更改】的必要条件。宏的内容，实际上是定义了一些函数和属性，并且qmake编译系统在扫描到这个文件时，会自动生成实现这些函数的文件。另一需要注意的点是，在OnPlus和OnMinus声明的前面有private slots字段。这里的slots也是一个特殊的宏，起作用是将其后的函数标注为可供Qt事件响应系统的回调函数。 要编译这几个文件，在处理pro文件时需要注意这么几点： 添加Headers += plusminus.h。如果没有这句话，编译系统就无法为Q_OBJECT标注的类创建需要的源文件，导致链接时出现Undefined symbols for architecture XXX类型的错误。 这里编译过程的中间临时文件比较多，建议在pro文件里面添加 12OBJECTS_DIR=tmpMOC_DIR=tmp 完整的pro文件如下： 1234567891011121314151617181920212223####################################################################### Automatically generated by qmake (3.1) Wed Sep 18 17:05:09 2019######################################################################TEMPLATE = appTARGET = learnQtINCLUDEPATH += .# You can make your code fail to compile if you use deprecated APIs.# In order to do so, uncomment the following line.# Please consult the documentation of the deprecated API in order to know# how to port your code away from it.# You can also select to disable deprecated APIs only up to a certain version of Qt.#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000 # disables all the APIs deprecated before Qt 6.0.0OBJECTS_DIR=tmpMOC_DIR=tmp# InputSOURCES += main.cpp plusminus.cppHEADERS += plusminus.hQT += widgets 程序运行的界面如下： Menus and toobars 这里来介绍菜单和工具栏的使用。尽管在不同的操作系统下他们长的不一样，但是Qt提供了一致的接口。 简单的例子 下面的例子给出了最简单的Menu功能演示。我们分成三个文件： 1234567891011// simplemenu.h#pragma once#include &lt;QMainWindow&gt;#include &lt;QApplication&gt;class SimpleMenu : public QMainWindow &#123; public: SimpleMenu(QWidget *parent = 0);&#125;; 12345678910111213141516// simplemenu.cpp#include "simplemenu.h"#include &lt;QMenu&gt;#include &lt;QMenuBar&gt;SimpleMenu::SimpleMenu(QWidget *parent) : QMainWindow(parent) &#123; QAction *quit = new QAction("&amp;Quit", this); QMenu *file; file = menuBar()-&gt;addMenu("&amp;File"); file-&gt;addAction(quit); connect(quit, &amp;QAction::triggered, qApp, QApplication::quit);&#125; 123456789101112131415// main.cpp#include "simplemenu.h"int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); SimpleMenu window; window.resize(250, 150); window.setWindowTitle("Simple menu"); window.show(); return app.exec();&#125; 这个例子在Mac上运行没法看到&quot;File&quot;这个菜单栏选项。为什么呢？这是因为在MAC中，名称为Quit的Action会被自动整合到名称为应用名的首个菜单项目里面去。要看到独立的File菜单选项，需要把Quit改成其他名字就好了。 图片出处：https://forum.qt.io/topic/98908/menubar-in-macos-not-working/9 Qt 的官方网文档在这里说明了原因: Qt for macOS also provides a menu bar merging feature to make QMenuBar conform more closely to accepted macOS menu bar layout. The merging functionality is based on string matching the title of a QMenu entry. These strings are translated (using QObject::tr()) in the &quot;QMenuBar&quot; context. If an entry is moved its slots will still fire as if it was in the original place. The table below outlines the strings looked for and where the entry is placed if matched: Toolbar 这部分最近应该用不到，先不实验，把教程内容搬过来 123456789101112#pragma once#include &lt;QMainWindow&gt;#include &lt;QApplication&gt;class Toolbar : public QMainWindow &#123; Q_OBJECT public: Toolbar(QWidget *parent = 0);&#125;; 123456789101112131415161718192021#include &quot;toolbar.h&quot;#include &lt;QToolBar&gt;#include &lt;QIcon&gt;#include &lt;QAction&gt;Toolbar::Toolbar(QWidget *parent) : QMainWindow(parent) &#123; QPixmap newpix(&quot;new.png&quot;); QPixmap openpix(&quot;open.png&quot;); QPixmap quitpix(&quot;quit.png&quot;); QToolBar *toolbar = addToolBar(&quot;main toolbar&quot;); toolbar-&gt;addAction(QIcon(newpix), &quot;New File&quot;); toolbar-&gt;addAction(QIcon(openpix), &quot;Open File&quot;); toolbar-&gt;addSeparator(); QAction *quit = toolbar-&gt;addAction(QIcon(quitpix), &quot;Quit Application&quot;); connect(quit, &amp;QAction::triggered, qApp, &amp;QApplication::quit);&#125; 123456789101112131415// main.cpp#include "toolbar.h"int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); Toolbar window; window.resize(300, 200); window.setWindowTitle("QToolBar"); window.show(); return app.exec();&#125; 布局 这个部分开始我们来将布局方面的知识，这也是我最为关注的部分。布局有两种方式： absolute positioning layout managers 绝对定位 绝对定位要求显式指定各个Widget的位置和大小。关于绝对定位我们需要注意如下几点： Widget的位置和大小不会因为窗口resize而变化 使用绝对定位在不同平台上看起来可能不会不一样（通常会很糟糕） 改变字体会导致布局出错 如果我们试图修改布局，那那么需要进行大量的重构，这是非常费时的 综合上面的原因，除了一些必须的场景以外，我们一般都是使用布局管理器。 下面是一个使用绝对布局的例子： 1234567891011121314151617181920212223242526272829// absolute.cpp#include &lt;QApplication&gt;#include &lt;QDesktopWidget&gt;#include &lt;QTextEdit&gt;class Absolute : public QWidget &#123; public: Absolute(QWidget *parent = 0);&#125;;Absolute::Absolute(QWidget *parent) : QWidget(parent) &#123; QTextEdit *ledit = new QTextEdit(this); ledit-&gt;setGeometry(5, 5, 200, 150);&#125;int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); Absolute window; window.setWindowTitle("Absolute"); window.show(); return app.exec();&#125; 这里setGeometry()函数用来设置绝对位置坐标和大小。 下面我们开始介绍典型的布局管理器。 Box布局 QVBoxLayout这个类将Widget垂直放置。Widget通过addWidget函数添加。 12345678910// verticalbox.h#pragma once#include &lt;QWidget&gt;class VerticalBox : public QWidget &#123; public: VerticalBox(QWidget *parent = 0);&#125;; 123456789101112131415161718192021222324252627282930// verticalbox.cpp#include "verticalbox.h"#include &lt;QVBoxLayout&gt;#include &lt;QPushButton&gt;VerticalBox::VerticalBox(QWidget *parent) : QWidget(parent) &#123; QVBoxLayout *vbox = new QVBoxLayout(this); vbox-&gt;setSpacing(1); QPushButton *settings = new QPushButton("Settings", this); settings-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding); QPushButton *accounts = new QPushButton("Accounts", this); accounts-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding); QPushButton *loans = new QPushButton("Loans", this); loans-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding); QPushButton *cash = new QPushButton("Cash", this); cash-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding); QPushButton *debts = new QPushButton("Debts", this); debts-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding); vbox-&gt;addWidget(settings); vbox-&gt;addWidget(accounts); vbox-&gt;addWidget(loans); vbox-&gt;addWidget(cash); vbox-&gt;addWidget(debts); setLayout(vbox);&#125; 这里我们创建了五个垂直堆叠的按钮，并且让五个按钮再长、宽两个方向尽可能扩展(Expanding)。 12345678910111213141516// main.cpp#include "verticalbox.h"#include &lt;QApplication&gt;int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); VerticalBox window; window.resize(240, 230); window.setWindowTitle("VerticalBox"); window.show(); return app.exec();&#125; 运行之后长这个样子: 类似于QVboxLayout, QHBoxLayout提供了水平排列的布局。垂直布局和水平布局可以联合起来使用。在下面这个例子中我们在窗口右下角添加两个水平分布的按钮。这就是通过混合使用垂直于水平分布实现的。 123456789101112131415// buttons.h#pragma once#include &lt;QWidget&gt;#include &lt;QPushButton&gt;class Buttons : public QWidget &#123; public: Buttons(QWidget *parent = 0); private: QPushButton *okBtn; QPushButton *applyBtn;&#125;; 12345678910111213141516171819#include "buttons.h"#include &lt;QVBoxLayout&gt;#include &lt;QHBoxLayout&gt;Buttons::Buttons(QWidget *parent) : QWidget(parent) &#123; QVBoxLayout *vbox = new QVBoxLayout(this); QHBoxLayout *hbox = new QHBoxLayout(); okBtn = new QPushButton("OK", this); applyBtn = new QPushButton("Apply", this); hbox-&gt;addWidget(okBtn, 1, Qt::AlignRight); hbox-&gt;addWidget(applyBtn, 0); vbox-&gt;addStretch(1); vbox-&gt;addLayout(hbox);&#125; 123456789101112131415#include &lt;QApplication&gt;#include "buttons.h"int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); Buttons window; window.resize(290, 170); window.setWindowTitle("Buttons"); window.show(); return app.exec();&#125; 下面是一个更加复杂的布局嵌套的例子: 12345678910// nesting.h#pragma once#include &lt;QWidget&gt;class Layouts : public QWidget &#123; public: Layouts(QWidget *parent = 0);&#125;; 1234567891011121314151617181920212223242526272829303132333435363738// nesting.cpp#include &lt;QVBoxLayout&gt;#include &lt;QPushButton&gt;#include &lt;QListWidget&gt;#include "nesting.h"Layouts::Layouts(QWidget *parent) : QWidget (parent)&#123; QVBoxLayout *vbox = new QVBoxLayout(); QHBoxLayout *hbox = new QHBoxLayout(this); QListWidget *lw = new QListWidget(this); lw-&gt;addItem("The Omen"); lw-&gt;addItem("The Exorcist"); lw-&gt;addItem("Notes on a scandal"); lw-&gt;addItem("Fargo"); lw-&gt;addItem("Capote"); QPushButton *add = new QPushButton("Add", this); QPushButton *rename = new QPushButton("Rename", this); QPushButton *remove = new QPushButton("Remove", this); QPushButton *removeall = new QPushButton("Remove All", this); vbox-&gt;setSpacing(3); vbox-&gt;addStretch(1); vbox-&gt;addWidget(add); vbox-&gt;addWidget(rename); vbox-&gt;addWidget(remove); vbox-&gt;addWidget(removeall); vbox-&gt;addStretch(1); hbox-&gt;addWidget(lw); hbox-&gt;addSpacing(15); hbox-&gt;addLayout(vbox); setLayout(hbox);&#125; 123456789101112131415// main.cpp#include &lt;QApplication&gt;#include "nesting.h"int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); Layouts window; window.setWindowTitle("Layouts"); window.show(); return app.exec();&#125; 上述程序运行得到的界面如下图： Form布局 QFormLayout可以处理典型的表格输入的布局。其子Widgets被分为两列，分别是Label和输入控件（例如QLineEdit或者QSpinBox)。 Form布局的使用见下面的例子： 12345678910// form.h#pragma once#include &lt;QWidget&gt;class FormEx : public QWidget &#123; public: FormEx(QWidget *parent = 0);&#125;; 12345678910111213141516171819202122// form.cpp#include &lt;QFormLayout&gt;#include &lt;QLabel&gt;#include &lt;QLineEdit&gt;#include "form.h"FormEx::FormEx(QWidget *parent) : QWidget(parent) &#123; QLineEdit *nameEdit = new QLineEdit(this); QLineEdit *addrEdit = new QLineEdit(this); QLineEdit *occpEdit = new QLineEdit(this); QFormLayout *formLayout = new QFormLayout; // 调整Label的对齐规则为水平右对齐，垂直居中 formLayout-&gt;setLabelAlignment(Qt::AlignRight | Qt::AlignVCenter); formLayout-&gt;addRow("Name:", nameEdit); formLayout-&gt;addRow("Email:", addrEdit); formLayout-&gt;addRow("Age:", occpEdit); setLayout(formLayout);&#125; 123456789101112131415// main.cpp#include &lt;QApplication&gt;#include "form.h"int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); FormEx window; window.setWindowTitle("Form example"); window.show(); return app.exec();&#125; 程序运行得到的界面如下： 网格布局 网格布局使用QGridLayout这个类，我们已经在前面的例子中见过了。这是一个强大的布局工具。英文教程中给了两个例子，其中Review那个例子要更加复杂一些，我们使用那个来说明： 12345678910// review.h#pragma once#include &lt;QWidget&gt;class Review : public QWidget &#123; public: Review(QWidget *parent = 0);&#125;; 12345678910111213141516171819202122232425262728293031323334353637// review.cpp#include &lt;QGridLayout&gt;#include &lt;QLabel&gt;#include &lt;QLineEdit&gt;#include &lt;QTextEdit&gt;#include "review.h"Review::Review(QWidget *parent) : QWidget(parent) &#123; QGridLayout *grid = new QGridLayout(this); grid-&gt;setVerticalSpacing(15); grid-&gt;setHorizontalSpacing(10); QLabel *title = new QLabel("Title:", this); grid-&gt;addWidget(title, 0, 0, 1, 1); title-&gt;setAlignment(Qt::AlignRight | Qt::AlignVCenter); QLineEdit *edt1 = new QLineEdit(this); grid-&gt;addWidget(edt1, 0, 1, 1, 1); QLabel *author = new QLabel("Author:", this); grid-&gt;addWidget(author, 1, 0, 1, 1); author-&gt;setAlignment(Qt::AlignRight | Qt::AlignVCenter); QLineEdit *edt2 = new QLineEdit(this); grid-&gt;addWidget(edt2, 1, 1, 1, 1); QLabel *review = new QLabel("Review:", this); grid-&gt;addWidget(review, 2, 0, 1, 1); review-&gt;setAlignment(Qt::AlignRight | Qt::AlignTop); QTextEdit *te = new QTextEdit(this); grid-&gt;addWidget(te, 2, 1, 3, 1); setLayout(grid);&#125; 1234567891011121314#include &lt;QApplication&gt;#include "review.h"int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); Review window; window.setWindowTitle("Review"); window.show(); return app.exec();&#125; 这里使用QGridLayout::addWidget参数的时候，除了行列号以外，剩下两个数字分别表示行列的Span。函数定义： 程序运行得到的界面是]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>C++</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转载】5G大战,美国败像已露]]></title>
    <url>%2Fposts%2F58026%2F</url>
    <content type="text"><![CDATA[来源 为了将中国企业排除在新一代通信标准5G之外，美国发动高科技战已过去1年有余。世界的数据网将不断分裂为相互隔绝的2个，一个美国主导，另一个中国主导——当初这样的担忧出现扩大。 美国谷歌前董事长施密特也是敲响这一警钟的人之一。但是，美国、日本今后面对的情况也许比这个警钟更严厉，不仅是世界5G基础设施的一半，中国企业有掌握更多份额的可能性。在对亚洲各国采访的过程中，我禁不住这样想。 传输庞大信息的5G网可以看作是人类身体上的大动脉。只要将其控制，在政治和军事方面，中国的影响力便可能进一步加强。 但是，如果仅观察华盛顿大张旗鼓采取的对华强硬举措，容易令人感到正在加强攻势的是美方。 美国2018年8月通过《国防授权法》，决定将华为技术和中兴通讯（ZTE）排除出美国。点燃了高科技战争的导火索。 经过1年的宽限期，美国政府自今年8月13日起，禁止美国政府机构采购华为和中兴通讯的产品。1年后起，对于采用两家公司等产品的民营企业，也将被禁止与美国政府交易。 美国担心如果让两家中国企业进入本国5G领域，重要信息可能被窃取。虽然中国否认这种危险，但美国正在敦促同盟国和友好国家也将两家企业排除出5G网。 美国政府计划在事实上禁止向华为出口美国造零部件和软件。这将对于无法使用美国谷歌软件的华为智能手机终端构成打击。 但是，要问能在多大程度上将2家中国企业排除出5G基础设施，局势对美国极为不利。与美国统一步调、决定排除华为的国家目前只有日本和澳大利亚。英国和法国都表示“正在讨论”，而德国则坚持“难以排除”的立场。 在英德的通信基础设施中，华为已在4G领域浸透。德国政府内部有声音表示，“事到如今，让我们在5G中排除（中国企业），也是难为人的要求”。 在这样背景下，左右中美5G战争形势的是亚洲的走向。8月下旬，在曼谷举行的“日本-东盟媒体合作论坛”（主办方为日本的国际交流基金）的讨论非常耐人寻味。在亚洲记者讨论世界局势的情况下，成为主要话题的是中美的5G战争。东南亚的大部分与会者都断言，美国难以战胜中国。 的确，这种迹象很明显。柬埔寨采用华为的技术，将于年内启动5G服务。马来西亚和泰国也在5月底宣布不抵制华为。 在菲律宾、印度尼西亚和缅甸，当地的通信大型企业与华为和中兴通讯签署合同，显示出在5G领域展开合作的趋势。 原因何在？第一，能替代华为和中兴通讯的选项过度缺乏。从移动通信基础设施来看，这2家企业占到世界市场的近4成份额。虽然欧洲的爱立信（29％）和诺基亚（23.4％）也拥有较高份额，但在价格竞争中无法与中国企业相匹敌。 东南亚的经济专家表示，与中国2家企业相比，爱立信和诺基亚的价格高出2——3成。对东南亚和印度来说不合算。 另外一个原因在于美国自身。在批评中国的同时，美国自身也参与情报间谍活动——这种不信任感在亚洲内部不断增强。 知道可能存在被中国获取信息的危险，但是，美国或许也在利用先进的高科技，大肆监视外国的通信，获取信息——东南亚的当局者和安全专家透露出这样的不满。 东南亚冷眼旁观的是美国的间谍活动。美国国家安全局（NSA）前雇员斯诺登爆料称，美国政府侵入各国政府和企业的网络，暗中获取信息。 也就是说，在信息被拿走的风险方面，中国和美国没有什么区别。在伊斯兰人口众多的印度尼西亚、马来西亚、巴基斯坦和文莱等国，甚至有看法认为，与中国相比，信息被美国窃取更为可怕。 受长达20年的阿富汗和中东战争的影响，在亚洲的伊斯兰圈，对美国的感情芥蒂沉淀下来。一位前外交官的话很有代表性。 他说：“正如萨达姆·侯赛因领导的伊拉克那样，美国将向不听话的国家投下炸弹。但是，中国将向看不顺眼的国家投下金钱（投资），还是中国更好。” 要想抗衡华为和中兴通讯，欧洲和日韩的通信企业必须提高价格竞争力，建立能扩大市场份额的体制。美国或许有必要进一步共享所谓依赖中国企业的风险，在此基础上，为了在6G领域掌握主导权加快投资。日本通信商NTT最近成功开发出着眼于6G的新技术。中美数字主导权的竞争不会止步于5G，下一场战争已经打响。 稿源：日经中文网，作者：秋田浩之]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Qt on Mac摸索记录 - 其二]]></title>
    <url>%2Fposts%2F54018%2F</url>
    <content type="text"><![CDATA[跟着上一篇继续。本篇介绍Qt重新造的轮子：容器系统和文件操作系统。 容器 按理说标准库里面就有各种容器的实现了，这里重新造轮子了？ 容器分为了两类：序列容器 和 关联容器。 QVector 动态数组容器，内部本质就是内存连续的数组，从而使得随机存取的效率非常高。但是对于元素的删除插入操作性能会比较差。对于长度很大的序列，推荐采用链表实现的的QList。 QVector的例子如下。使用非常简单，不再赘述。 123456789101112131415161718192021222324252627#include &lt;QVector&gt;#include &lt;QTextStream&gt;int main(void) &#123; QTextStream out(stdout); QVector&lt;int&gt; vals = &#123;1, 2, 3, 4, 5&#125;; out &lt;&lt; "The size of the vector is: " &lt;&lt; vals.size() &lt;&lt; endl; out &lt;&lt; "The first item is: " &lt;&lt; vals.first() &lt;&lt; endl; out &lt;&lt; "The last item is: " &lt;&lt; vals.last() &lt;&lt; endl; vals.append(6); vals.prepend(0); out &lt;&lt; "Elements: "; for (int val : vals) &#123; out &lt;&lt; val &lt;&lt; " "; &#125; out &lt;&lt; endl; return 0;&#125; QList QList 也是序列容器，内部是链表实现。其随机访问、删除、插入操作效率都比较高。因此是 Qt 中最常用的容器。参考下面👇这个例子。 12345678910111213141516171819202122232425262728#include &lt;QTextStream&gt;#include &lt;QList&gt;#include &lt;algorithm&gt;int main(void) &#123; QTextStream out(stdout); QList&lt;QString&gt; authors = &#123;"Balzac", "Tolstoy", "Gulbranssen", "London"&#125;; for (int i=0; i &lt; authors.size(); ++i) &#123; out &lt;&lt; authors.at(i) &lt;&lt; endl; &#125; authors &lt;&lt; "Galsworthy" &lt;&lt; "Sienkiewicz"; out &lt;&lt; "***********************" &lt;&lt; endl; std::sort(authors.begin(), authors.end()); out &lt;&lt; "Sorted:" &lt;&lt; endl; for (QString author : authors) &#123; out &lt;&lt; author &lt;&lt; endl; &#125; &#125; QStringList 为字符串做了优化的列表。 123456789101112131415#include &lt;QTextStream&gt;#include &lt;QList&gt;int main(void) &#123; QTextStream out(stdout); QString string = "coin, book, cup, pencil, clock, bookmark"; QStringList items = string.split(","); QStringListIterator it(items); while (it.hasNext()) &#123; out &lt;&lt; it.next().trimmed() &lt;&lt; endl; &#125;&#125; QSet 集合可以确保其中存储的值是唯一的。 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;QSet&gt;#include &lt;QList&gt;#include &lt;QTextStream&gt;#include &lt;algorithm&gt;int main(void) &#123; QTextStream out(stdout); QSet&lt;QString&gt; cols1 = &#123;"yellow", "red", "blue"&#125;; QSet&lt;QString&gt; cols2 = &#123;"blue", "pink", "orange"&#125;; out &lt;&lt; "There are " &lt;&lt; cols1.size() &lt;&lt; " values in the set" &lt;&lt; endl; cols1.insert("brown"); out &lt;&lt; "There are " &lt;&lt; cols1.size() &lt;&lt; " values in the set" &lt;&lt; endl; cols1.unite(cols2); out &lt;&lt; "There are " &lt;&lt; cols1.size() &lt;&lt; " values in the set" &lt;&lt; endl; for (QString val : cols1) &#123; out &lt;&lt; val &lt;&lt; endl; &#125; QList&lt;QString&gt; lcols = cols1.values(); std::sort(lcols.begin(), lcols.end()); out &lt;&lt; "*********************" &lt;&lt; endl; out &lt;&lt; "Sorted:" &lt;&lt; endl; for (QString val : lcols) &#123; out &lt;&lt; val &lt;&lt; endl; &#125; return 0;&#125; 可以看到合并(unite())后重复元素被移除了，只留下一份。 QMap QMap是关联式容器，存储key-value对。下面是QMap使用的例子： 1234567891011121314151617181920212223242526272829303132333435#include &lt;QTextStream&gt;#include &lt;QMap&gt;int main(void) &#123; QTextStream out(stdout); QMap&lt;QString, int&gt; items = &#123; &#123;"coins", 5&#125;, &#123;"books", 3&#125; &#125;; items.insert("bottles", 7); QList&lt;int&gt; values = items.values(); out &lt;&lt; "Values:" &lt;&lt; endl; for (int val : values) &#123; out &lt;&lt; val &lt;&lt; endl; &#125; QList&lt;QString&gt; keys = items.keys(); out &lt;&lt; "Keys:" &lt;&lt; endl; for (QString key : keys) &#123; out &lt;&lt; key &lt;&lt; endl; &#125; QMapIterator&lt;QString, int&gt; it(items); out &lt;&lt; "Pairs:" &lt;&lt; endl; while (it.hasNext()) &#123; it.next(); out &lt;&lt; it.key() &lt;&lt; ": " &lt;&lt; it.value() &lt;&lt; endl; &#125;&#125; 自定义排序 自定义排序其实就是要自定义比较函数。以下面的类为例： 123456789101112// book.hclass Book &#123; public: Book(QString, QString); QString getAuthor() const; QString getTitle() const; private: QString author; QString title;&#125;; 12345678910111213141516// book.cpp#include &lt;QString&gt;#include "book.h"Book::Book(QString auth, QString tit) &#123; author = auth; title = tit;&#125;QString Book::getAuthor() const &#123; return author;&#125;QString Book::getTitle() const &#123; return title;&#125; 使用自定义的方式排序如下： 1234567891011121314151617181920212223242526272829#include &lt;QTextStream&gt;#include &lt;QList&gt;#include &lt;algorithm&gt; #include "book.h"bool compareByTitle(const Book &amp;b1, const Book &amp;b2) &#123; return b1.getTitle() &lt; b2.getTitle();&#125;int main(void) &#123; QTextStream out(stdout); QList&lt;Book&gt; books = &#123; Book("Jack London", "The Call of the Wild"), Book("Honoré de Balzac", "Father Goriot"), Book("Leo Tolstoy", "War and Peace"), Book("Gustave Flaubert", "Sentimental education"), Book("Guy de Maupassant", "Une vie"), Book("William Shakespeare", "Hamlet") &#125;; std::sort(books.begin(), books.end(), compareByTitle); for (Book book : books) &#123; out &lt;&lt; book.getAuthor() &lt;&lt; ": " &lt;&lt; book.getTitle() &lt;&lt; endl; &#125;&#125; 文件系统 这里涉及QFile, QDir, QFileInfo三个类。其中QFile负责操作文件（读取和写入），QDir提供了访问路径结构及其内容的接口，QFileInfo提供了与独立于操作系统的文件信息，包括文件名、文件存储的路径，访问时间，修改时间，权限，文件所有权信息。 文件大小 文件的大小通过QFileInfo::size()函数来获取。见下面的完整例子: 123456789101112131415161718192021222324252627#include &lt;QTextStream&gt;#include &lt;QFileInfo&gt;int main(int argc, char *argv[]) &#123; QTextStream out(stdout); if (argc != 2) &#123; qWarning("Usage: file_size file"); return 1; &#125; QString filename = argv[1]; if (!QFile(filename).exists()) &#123; qWarning("The file does not exist"); return 1; &#125; QFileInfo fileinfo(filename); qint64 size = fileinfo.size(); QString str = "The size is: %1 bytes"; out &lt;&lt; str.arg(size) &lt;&lt; endl;&#125; 读取文件内容 读取文件之前需要打开文件，并基于这个文件创建流。 12345678910111213141516171819202122#include &lt;QTextStream&gt;#include &lt;QFile&gt;int main(void) &#123; QTextStream out(stdout); QFile file("colours"); if (!file.open(QIODevice::ReadOnly)) &#123; qWarning("Cannot open file for reading"); return 1; &#125; QTextStream in(&amp;file); while (!in.atEnd()) &#123; QString line = in.readLine(); out &lt;&lt; line &lt;&lt; endl; &#125; file.close();&#125; 写入文件内容 要写入文件需要文件以写入模式打开。 1234567891011121314151617181920212223242526#include &lt;QTextStream&gt;#include &lt;QFile&gt;int main(void) &#123; QTextStream out(stdout); QString filename = "distros"; QFile file(filename); if (file.open(QIODevice::WriteOnly)) &#123; QTextStream out(&amp;file); out &lt;&lt; "Xubuntu" &lt;&lt; endl; out &lt;&lt; "Arch" &lt;&lt; endl; out &lt;&lt; "Debian" &lt;&lt; endl; out &lt;&lt; "Redhat" &lt;&lt; endl; out &lt;&lt; "Slackware" &lt;&lt; endl; &#125; else &#123; qWarning("Could not open file"); &#125; file.close(); &#125; 复制文件 12345678910111213141516171819202122#include &lt;QTextStream&gt;#include &lt;QFile&gt;int main(int argc, char *argv[]) &#123; QTextStream out(stdout); if (argc != 3) &#123; qWarning("Usage: copyfile source destination"); return 1; &#125; QString source = argv[1]; if (!QFile(source).exists()) &#123; qWarning("The source file does not exist"); return 1; &#125; QString destin(argv[2]); QFile::copy(source, destin);&#125; 文件信息的获取 文件所有者：QFileInfo::group()和QFileInfo::owner()，返回的都是QString; 修改时间: QFileInfo::lastRead()和QFileInfo::lastModified()，返回的是QDateTime; 文件路径：参见下面的例子 123456789101112131415161718192021222324252627282930// filepath.cpp#include &lt;QTextStream&gt;#include &lt;QFileInfo&gt;int main(int argc, char *argv[]) &#123; QTextStream out(stdout); if (argc != 2) &#123; out &lt;&lt; "Usage: file_times file" &lt;&lt; endl; return 1; &#125; QString filename = argv[1]; QFileInfo fileinfo(filename); QString absPath = fileinfo.absoluteFilePath(); QString baseName = fileinfo.baseName(); QString compBaseName = fileinfo.completeBaseName(); QString fileName = fileinfo.fileName(); QString suffix = fileinfo.suffix(); QString compSuffix = fileinfo.completeSuffix(); out &lt;&lt; "Absolute file path: " &lt;&lt; absPath &lt;&lt; endl; out &lt;&lt; "Base name: " &lt;&lt; baseName &lt;&lt; endl; out &lt;&lt; "Complete base name: " &lt;&lt; compBaseName &lt;&lt; endl; out &lt;&lt; "File name: " &lt;&lt; fileName &lt;&lt; endl; out &lt;&lt; "Suffix: " &lt;&lt; suffix &lt;&lt; endl; out &lt;&lt; "Whole suffix: " &lt;&lt; compSuffix &lt;&lt; endl;&#125; 输出为 1234567$ ./file_path ~/Downloads/qt-everywhere-opensource-src-5.5.1.tar.gz Absolute file path: /home/janbodnar/Downloads/qt-everywhere-opensource-src-5.5.1.tar.gzBase name: qt-everywhere-opensource-src-5Complete base name: qt-everywhere-opensource-src-5.5.1.tarFile name: qt-everywhere-opensource-src-5.5.1.tar.gzSuffix: gzWhole suffix: 5.1.tar.gz 权限信息：通过QFile::permissions方法可以权限信息，具体的例子如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;QTextStream&gt;#include &lt;QFile&gt;int main(int argc, char *argv[]) &#123; QTextStream out(stdout); if (argc != 2) &#123; out &lt;&lt; "Usage: permissions file" &lt;&lt; endl; return 1; &#125; QString filename = argv[1]; QFile::Permissions ps = QFile::permissions(filename); QString fper; if (ps &amp; QFile::ReadOwner) &#123; fper.append('r'); &#125; else &#123; fper.append('-'); &#125; if (ps &amp; QFile::WriteOwner) &#123; fper.append('w'); &#125; else &#123; fper.append('-'); &#125; if (ps &amp; QFile::ExeOwner) &#123; fper.append('x'); &#125; else &#123; fper.append('-'); &#125; if (ps &amp; QFile::ReadGroup) &#123; fper.append('r'); &#125; else &#123; fper.append('-'); &#125; if (ps &amp; QFile::WriteGroup) &#123; fper.append('w'); &#125; else &#123; fper.append('-'); &#125; if (ps &amp; QFile::ExeGroup) &#123; fper.append('x'); &#125; else &#123; fper.append('-'); &#125; if (ps &amp; QFile::ReadOther) &#123; fper.append('r'); &#125; else &#123; fper.append('-'); &#125; if (ps &amp; QFile::WriteOther) &#123; fper.append('w'); &#125; else &#123; fper.append('-'); &#125; if (ps &amp; QFile::ExeOther) &#123; fper.append('x'); &#125; else &#123; fper.append('-'); &#125; out &lt;&lt; fper &lt;&lt; endl;&#125; 操作路径(directories) 创建文件夹: QDir::mkdir()，返回布尔值表明创建是否成功。QDir::mkpath()也是创建文件夹 ，其区别在于mkpath()函数会同时创建缺少的父文件夹。 重命名: QDir::exists(), 文件是否存在。 获取 一些特殊的文件夹的位置： QDir::currentPath() QDir::homePath() QDir::tempPath() QDir::rootPath() 输出文件夹内的内容 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;QTextStream&gt;#include &lt;QFileInfo&gt;#include &lt;QDir&gt;int main(int argc, char *argv[]) &#123; QTextStream out(stdout); if (argc != 2) &#123; qWarning("Usage: list_dir directory"); return 1; &#125; QString directory = argv[1]; QDir dir(directory); if (!dir.exists()) &#123; qWarning("The directory does not exist"); return 1; &#125; dir.setFilter(QDir::Files | QDir::AllDirs); dir.setSorting(QDir::Size | QDir::Reversed); QFileInfoList list = dir.entryInfoList(); int max_size = 0; foreach (QFileInfo finfo, list) &#123; QString name = finfo.fileName(); int size = name.size(); if (size &gt; max_size) &#123; max_size = size; &#125; &#125; int len = max_size + 2; out &lt;&lt; QString("Filename").leftJustified(len).append("Bytes") &lt;&lt; endl; for (int i = 0; i &lt; list.size(); ++i) &#123; QFileInfo fileInfo = list.at(i); QString str = fileInfo.fileName().leftJustified(len); str.append(QString("%1").arg(fileInfo.size())); out &lt;&lt; str &lt;&lt; endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>C++</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Qt on Mac摸索记录 - 其一]]></title>
    <url>%2Fposts%2F46595%2F</url>
    <content type="text"><![CDATA[我参考http://zetcode.com/gui/qt5/introduction/这个链接入坑，使用macOS。网上看起来是Windows和Linux的教程居多，这个链接里的教程初看起来应该也是基于Linux的。谁让Mac的市场占有率低呢。 First Try Show version 首先是从官网下载了GUI形式的安装器安装的Qt，Qt的默认安装位置是~/Qt。安装的Qt版本是5.13.1。首先参照教程熟悉一下编译过程。教程链接里给出的例子是： 1234567// version.cpp#include &lt;QtCore&gt;#include &lt;iostream&gt;int main() &#123; std::cout &lt;&lt; "Qt version: " &lt;&lt; qVersion() &lt;&lt; std::endl;&#125; 编译的命令是 1g++ -o version version.cpp -I/usr/local/qt5/include/QtCore -I/usr/local/qt5/include -L/usr/local/qt5/lib -lQt5Core -fPIC 不过这个编译命令在Mac上无法成功。我使用的是如下命令： 1234567891011g++ -o version version.cpp \# Include path，需要指向包含QtCore的头文件的位置-Ipath/to/qt/5.13.1/clang_64/lib/QtCore.framework/Headers \# -F指定framework的路径，-framework则用来指明使用的framework的名字-F/Users/lena/qt/5.13.1/clang_64/lib -framework QtCore# 在mac上g++其实也是调用的clang，这里加上这个避免一些warning-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX10.13.sdk \-mmacosx-version-min=10.12 \# rpath是程序在运行的时候载入动态库（即QtCore.framework）的位置-Wl,-rpath,/path/to/5.13.1/clang_64/lib-pipe -stdlib=libc++ -O2 -std=gnu++11 -Wall -W -fPIC 编译成功后调用./version就可以看到运行成功并输出Qt版本了。 First GUI 下面我们来测试一个简单的GUI例子。首先新建一个文件如下 12345678910111213141516// simple.cpp#include &lt;QApplication&gt;#include &lt;QWidget&gt;int main(int argc, char *argv[]) &#123; QApplication app(argc, argv); QWidget window; window.resize(250, 150); window.setWindowTitle("Simple example"); window.show(); return app.exec();&#125; 然后使用qmake工具，运行 1qmake -project 这个命令会创建一个项目文件simple.pro【文件的名字与根目录文件夹的名字相同】。文件的内容应该类似于： 123456789101112####################################################################### Automatically generated by qmake (3.0) Fri Oct 30 17:11:00 2015######################################################################TEMPLATE = appTARGET = simpleINCLUDEPATH += .# InputSOURCES += simple.cppQT += widgets 注意最后一行，需要我们手动添加QtWidget模块。然后运行qmake命令，生成编译使用的Makefile。然后就可以编译了： 1make 程序运行后会弹出一个空的窗口。 Strings Qt 引入了QString来加强字符串处理的能力。 QtString表示一个Unicode字符串，其存储字符串为16比特的QChars。每个QChar代表一个Unicode 4.0字符。不同于很多其他的变成语言，QtString可以被修改【如Python的字符串就是静态的，“修改”字符串实际是生成新的字符串】。 这里主要是了解QtString的能力，汇总记录就可以了，没有必要编译运行。 初始化 有多种初始化方法，如下： 12345678910111213141516171819202122232425#include &lt;QTextStream&gt;int main(void) &#123; QTextStream out(stdout); QString str1 = "The night train"; out &lt;&lt; str1 &lt;&lt; endl; QString str2("A yellow rose"); out &lt;&lt; str2 &lt;&lt; endl; std::string s1 = "A blue sky"; QString str3 = s1.c_str(); out &lt;&lt; str3 &lt;&lt; endl; std::string s2 = "A thick fog"; QString str4 = QString::fromLatin1(s2.data(), s2.size()); out &lt;&lt; str4 &lt;&lt; endl; char s3[] = "A deep forest"; QString str5(s3); out &lt;&lt; str5 &lt;&lt; endl; return 0;&#125; 访问字符串元素 如前文所述，QString由QChar组成，我们可以使用[]操作符或者at()函数来访问元素： 12345678910111213141516171819#include &lt;QTextStream&gt;int main(void) &#123; QTextStream out(stdout); QString a = "Eagle"; out &lt;&lt; a[0] &lt;&lt; endl; out &lt;&lt; a[4] &lt;&lt; endl; out &lt;&lt; a.at(0) &lt;&lt; endl; if (a.at(5).isNull()) &#123; out &lt;&lt; "Outside the range of the string" &lt;&lt; endl; &#125; return 0;&#125; 字符串长度 与字符串长度相关的函数有三个： size(), count()和length。三个函数的作用是一样的。 字符串构建 参考如下的例子： 1234567891011121314151617181920212223#include &lt;QTextStream&gt;int main() &#123; QTextStream out (stdout); QString s1 = "There are %1 white roses"; int n = 12; out &lt;&lt; s1.args(n) &lt;&lt; endl; QString s2 = "The tree is %1 m high"; double h = 5.65; out &lt;&lt; s2.args(h) &lt;&lt; endl; QString s3 = "We have %1 lemons and %2 oranges"; int ln = 12; int on = 4; out &lt;&lt; s3.arg(ln).arg(on) &lt;&lt; endl; return 0;&#125; 待被替换的占位符用%开头，后面借数字。需要注意的是多个占位符需要替换时，需要多次调用args()函数，而非为args()函数传递多个参数。 子字符串(Substring) 这里涉及left()，mid()，right()三个函数，分别代表从左侧开始的Substring，中间一段的Substring，右侧开始的Substring。见下面的例子： 12345678910111213141516171819#include &lt;QTextStream&gt;int main(void) &#123; QTextStream out(stdout); QString str = "The night train"; out &lt;&lt; str.right(5) &lt;&lt; endl; out &lt;&lt; str.left(9) &lt;&lt; endl; out &lt;&lt; str.mid(4, 5) &lt;&lt; endl; QString str2("The big apple"); QStringRef sub(&amp;str2, 0, 7); out &lt;&lt; sub.toString() &lt;&lt; endl; return 0;&#125; 遍历字符串 QString遵循了C++的通常做法： 12345678910111213141516171819202122232425262728#include &lt;QTextStream&gt;int main(void) &#123; QTextStream out(stdout); QString str = "There are many stars."; foreach (QChar qc, str) &#123; out &lt;&lt; qc &lt;&lt; " "; &#125; out &lt;&lt; endl; for (QChar *it=str.begin(); it!=str.end(); ++it) &#123; out &lt;&lt; *it &lt;&lt; " " ; &#125; out &lt;&lt; endl; for (int i = 0; i &lt; str.size(); ++i) &#123; out &lt;&lt; str.at(i) &lt;&lt; " "; &#125; out &lt;&lt; endl; return 0;&#125; 字符串比较 QString::compare()函数用来比较两个字符串。该函数返回一个整型数。如果返回值小于0，那么第一个字符串小于第二个字符串；如果返回0，两个字符串相等；如果返回值大于0，那么第一个字符串大于第二个字符串。 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;QTextStream&gt;#define STR_EQUAL 0int main(void) &#123; QTextStream out(stdout); QString a = "Rain"; QString b = "rain"; QString c = "rain\n"; if (QString::compare(a, b) == STR_EQUAL) &#123; out &lt;&lt; "a, b are equal" &lt;&lt; endl; &#125; else &#123; out &lt;&lt; "a, b are not equal" &lt;&lt; endl; &#125; out &lt;&lt; "In case insensitive comparison:" &lt;&lt; endl; if (QString::compare(a, b, Qt::CaseInsensitive) == STR_EQUAL) &#123; out &lt;&lt; "a, b are equal" &lt;&lt; endl; &#125; else &#123; out &lt;&lt; "a, b are not equal" &lt;&lt; endl; &#125; if (QString::compare(b, c) == STR_EQUAL) &#123; out &lt;&lt; "b, c are equal" &lt;&lt; endl; &#125; else &#123; out &lt;&lt; "b, c are not equal" &lt;&lt; endl; &#125; c.chop(1); out &lt;&lt; "After removing the new line character" &lt;&lt; endl; if (QString::compare(b, c) == STR_EQUAL) &#123; out &lt;&lt; "b, c are equal" &lt;&lt; endl; &#125; else &#123; out &lt;&lt; "b, c are not equal" &lt;&lt; endl; &#125; return 0;&#125; 其中Qt::CaseInsensitive表示无视大小写的比较。 字符串解析 这里指将字符串解析为数字类型。这里涉及toInt(), toFloat(), toLong()等函数。反过来，setNum()函数可以将数字类型转化成字符串。 12345678910111213141516171819#include &lt;QTextStream&gt;int main(void) &#123; QTextStream out(stdout); QString s1 = "12"; QString s2 = "15"; QString s3, s4; out &lt;&lt; s1.toInt() + s2.toInt() &lt;&lt; endl; int n1 = 30; int n2 = 40; out &lt;&lt; s3.setNum(n1) + s4.setNum(n2) &lt;&lt; endl; return 0;&#125; 字符类型 QChar类型可以肥尾数字，祖母，空格以及标点符号，QChar提供了识别这些类型的函数： 12345678910111213141516171819202122232425262728293031#include &lt;QTextStream&gt;int main(void) &#123; QTextStream out(stdout); int digits = 0; int letters = 0; int spaces = 0; int puncts = 0; QString str = "7 white, 3 red roses."; foreach(QChar s, str) &#123; if (s.isDigit()) &#123; digits++; &#125; else if (s.isLetter()) &#123; letters++; &#125; else if (s.isSpace()) &#123; spaces++; &#125; else if (s.isPunct()) &#123; puncts++; &#125; &#125; out &lt;&lt; QString("There are %1 characters").arg(str.count()) &lt;&lt; endl; out &lt;&lt; QString("There are %1 letters").arg(letters) &lt;&lt; endl; out &lt;&lt; QString("There are %1 digits").arg(digits) &lt;&lt; endl; out &lt;&lt; QString("There are %1 spaces").arg(spaces) &lt;&lt; endl; out &lt;&lt; QString("There are %1 punctuation characters").arg(puncts) &lt;&lt; endl; return 0;&#125; 修改字符串 修改字符串的函数可以分为两类，一类返回一个修改后的副本，原字符串保持不变(如toLower())；另一类是直接原地修改原字符串。 12345678910111213141516171819202122232425#include &lt;QTextStream&gt;int main(void) &#123; QTextStream out(stdout); QString str = "Lovely"; str.append(" season"); out &lt;&lt; str &lt;&lt; endl; str.remove(10, 3); out &lt;&lt; str &lt;&lt; endl; str.replace(7, 3, "girl"); out &lt;&lt; str &lt;&lt; endl; str.clear(); if (str.isEmpty()) &#123; out &lt;&lt; "The string is empty" &lt;&lt; endl; &#125; return 0;&#125; 字符串对齐 这里指输出格式调整，将输出的内容左对齐(leftJustified())或者右对齐(rightJustified())。如下面的例子： 1234567891011121314151617181920#include &lt;QTextStream&gt;int main(void) &#123; QTextStream out(stdout); QString field1 = "Name: "; QString field2 = "Occupation: "; QString field3 = "Residence: "; QString field4 = "Marital status: "; int width = field4.size(); out &lt;&lt; field1.rightJustified(width, ' ') &lt;&lt; "Robert\n"; out &lt;&lt; field2.rightJustified(width, ' ') &lt;&lt; "programmer\n"; out &lt;&lt; field3.rightJustified(width, ' ') &lt;&lt; "New York\n"; out &lt;&lt; field4.rightJustified(width, ' ') &lt;&lt; "single\n"; return 0;&#125; 输出为 1234 Name: Robert Occupation: programmer Residence: New YorkMarital status: single Escaping Qt5 提供了 toHtmlEscapted() 方法，将字符串中涉及的html下特殊的字符，如&lt;, &gt;, &amp;, &quot;等，替换成HTML下的编码。如 处理文件 12345678#include &lt;stdio.h&gt;int main(void) &#123; for (int i=1; i&lt;=10; i++) &#123; printf(&quot;Bottle %d\n&quot;, i); &#125;&#125; 使用如下 1234567891011121314151617181920212223// html_escape.cpp#include &lt;QTextStream&gt;#include &lt;QFile&gt;int main(void) &#123; QTextStream out(stdout); QFile file("cprog.c"); if (!file.open(QIODevice::ReadOnly)) &#123; qWarning("Cannot open file for reading"); return 1; &#125; QTextStream in(&amp;file); QString allText = in.readAll(); out &lt;&lt; allText.toHtmlEscaped() &lt;&lt; endl; file.close(); return 0;&#125; 输出内容如下： 123456789$ ./html_escape#include &amp;lt;stdio.h&amp;gt;int main(void) &#123; for (int i=1; i&amp;lt;=10; i++) &#123; printf(&amp;quot;Bottle %d\n&amp;quot;, i); &#125;&#125; Date and Time 这个部分还是继续讲 Qt 扩展的数据类型。本次涉及QDate，QTime 和 QDateTime 三个类。 QDate 用于管理格里高利历的日历。QTime处理时钟，QDateTime则是二者的结合。 初始化 日期&amp;时间对象 日期和时间对象的初始化有两种基本方法：要么用构造函数直接复制，要么构造一个空的对象后续赋值。参见下面的粒子： 123456789101112131415161718192021222324#include &lt;QTextStream&gt;#include &lt;QDate&gt;#include &lt;QTime&gt;int main(void) &#123; QTextStream out(stdout); // 年 - 月 - 日 QDate dt1(2015, 4, 12); out &lt;&lt; "The date is " &lt;&lt; dt1.toString() &lt;&lt; endl; QDate dt2; dt2.setDate(2015, 3, 3); out &lt;&lt; "The date is " &lt;&lt; dt2.toString() &lt;&lt; endl; // 时 - 分 - 秒 - 毫秒 QTime tm1(17, 30, 12, 55); out &lt;&lt; "The time is " &lt;&lt; tm1.toString("hh:mm:ss.zzz") &lt;&lt; endl; QTime tm2; tm2.setHMS(13, 52, 45, 155); out &lt;&lt; "The time is " &lt;&lt; tm2.toString("hh:mm:ss.zzz") &lt;&lt; endl; &#125; 当前时间 见下面的例子： 1234567891011121314#include &lt;QTextStream&gt;#include &lt;QTime&gt;#include &lt;QDate&gt;int main(void) &#123; QTextStream out(stdout); QDate cd = QDate::currentDate(); QTime ct = QTime::currentTime(); out &lt;&lt; "Current date is: " &lt;&lt; cd.toString() &lt;&lt; endl; out &lt;&lt; "Current time is: " &lt;&lt; ct.toString() &lt;&lt; endl;&#125; 注意，源文件不能叫time.cpp。 1QDate cd = QDate::currentDate(); 返回的当前的日期。 1QTime ct = QTime::currentTime(); 返回当前的时间。toString()函数则将的日期和时间对象转化成字符串。 比较日期 关系操作符和用来比较日期（在日历上的位置）。 123456789101112131415161718#include &lt;QTextStream&gt;#include &lt;QDate&gt;int main(void) &#123; QTextStream out(stdout); QDate dt1(2015, 4, 5); QDate dt2(2014, 4, 5); if (dt1 &lt; dt2) &#123; out &lt;&lt; dt1.toString() &lt;&lt; " comes before " &lt;&lt; dt2.toString() &lt;&lt; endl; &#125; else &#123; out &lt;&lt; dt1.toString() &lt;&lt; " comes after " &lt;&lt; dt2.toString() &lt;&lt; endl; &#125;&#125; 闰年 使用QDate::isLeapYear()函数来判断 日期/时间 格式 预定义日期格式 Qt 有一些内建的日期格式。QDate 的 toString()函数可以接收一个日期格式描述对象作为参数。默认的参数是Qt::TextDate。一些其他的格式见下面的粒子： 12345678910111213141516171819// dateformats.cpp#include &lt;QTextStream&gt;#include &lt;QDate&gt;int main(void) &#123; QTextStream out(stdout); QDate cd = QDate::currentDate(); out &lt;&lt; "Today is " &lt;&lt; cd.toString(Qt::TextDate) &lt;&lt; endl; out &lt;&lt; "Today is " &lt;&lt; cd.toString(Qt::ISODate) &lt;&lt; endl; out &lt;&lt; "Today is " &lt;&lt; cd.toString(Qt::SystemLocaleShortDate) &lt;&lt; endl; out &lt;&lt; "Today is " &lt;&lt; cd.toString(Qt::SystemLocaleLongDate) &lt;&lt; endl; out &lt;&lt; "Today is " &lt;&lt; cd.toString(Qt::DefaultLocaleShortDate) &lt;&lt; endl; out &lt;&lt; "Today is " &lt;&lt; cd.toString(Qt::DefaultLocaleLongDate) &lt;&lt; endl; out &lt;&lt; "Today is " &lt;&lt; cd.toString(Qt::SystemLocaleDate) &lt;&lt; endl; out &lt;&lt; "Today is " &lt;&lt; cd.toString(Qt::LocaleDate) &lt;&lt; endl;&#125; 12345678Today is Sat Oct 31 2015Today is 2015-10-31Today is 10/31/15Today is Saturday, October 31, 2015Today is 10/31/15Today is Saturday, October 31, 2015Today is 10/31/15Today is 10/31/15 自定义日期格式 如下表： 预定义时间格式 和日期的类似，时钟对象的toString()也接收格式描述对象参数。默认的是Qt::TextDate。其他格式如下例子 123456789101112131415161718#include &lt;QTextStream&gt;#include &lt;QTime&gt;int main(void) &#123; QTextStream out(stdout); QTime ct = QTime::currentTime(); out &lt;&lt; "The time is " &lt;&lt; ct.toString(Qt::TextDate) &lt;&lt; endl; out &lt;&lt; "The time is " &lt;&lt; ct.toString(Qt::ISODate) &lt;&lt; endl; out &lt;&lt; "The time is " &lt;&lt; ct.toString(Qt::SystemLocaleShortDate) &lt;&lt; endl; out &lt;&lt; "The time is " &lt;&lt; ct.toString(Qt::SystemLocaleLongDate) &lt;&lt; endl; out &lt;&lt; "The time is " &lt;&lt; ct.toString(Qt::DefaultLocaleShortDate) &lt;&lt; endl; out &lt;&lt; "The time is " &lt;&lt; ct.toString(Qt::DefaultLocaleLongDate) &lt;&lt; endl; out &lt;&lt; "The time is " &lt;&lt; ct.toString(Qt::SystemLocaleDate) &lt;&lt; endl; out &lt;&lt; "The time is " &lt;&lt; ct.toString(Qt::LocaleDate) &lt;&lt; endl; &#125; 输出为 12345678The time is 15:58:26The time is 15:58:26The time is 3:58 PMThe time is 3:58:26 PM CETThe time is 3:58 PMThe time is 3:58:26 PM CETThe time is 3:58 PMThe time is 3:58 PM 自定义时间格式 其他工具函数 daysOfWeek(): 周几，1表示周一，7表示周日； daysInMonth(): 在月中的第几天； daysInYear():: 在年中的第几天； isValid(): 验证日期是否有效； daysTo()，daysFrom：计算日期的间距； QDateTime类 QDateTime类是日期和时间的组合，其接口也非常类似。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>C++</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shadowsocks 完全手册]]></title>
    <url>%2Fposts%2F36409%2F</url>
    <content type="text"><![CDATA[目前我的博客里面还是Shadowsocks相关的文章看的人最多，所以我这里干脆汇总整理一下。 什么是Shadowsocks Shadowsocks 据传早期是由一名知乎员工(clowwwindy)开发，从一开始就是不属于任何公司的开源软件。不过在Shadowsocks广为流行之后，这名员工被有关部门请去喝茶，其本人Github名下的Shadowsocks代码仓库也被清空，只留下内容为「Removed due to regulations」。不过 Shadowsocks 的代码被很多人Fork，所以Shadowsocks的活力并未受到影响。 后来Shadowsocks又被开发者（breakwa11）发展成ShadowsocksR，加了很多加密、流量混淆插件，比原版更安全、更稳定、更快速。不过这名作者随后被人肉，代码被迫删除。 Shadowsocks 为一种代理软件。对于软件工程不熟悉的人，通常会混淆代理与VPN二者的概念，网络上有很多文章来讲解这二者的区别。按照「What’s the Difference Between a VPN and a Proxy?」这篇文章的说法，代理的作用为隐藏你的真实IP，让你以服务器的IP的身份来访问站点。不过代理的链接并不一定保证加密。另外，代理的实现层级比较高，一般的应用程序需要主动连接代理才会进行访问。而VPN的核心特点链接加密。且VPN的实现层级比较低，可以全局起效果。 Shadowsocks部署 海外服务器 任何翻墙技术的本质都是将网络流量发送给一台位于中国大陆防火墙之外的服务器，由服务器访问目标网站再把响应数据发送给客户端。因此，一台海外服务器是必须的。目前云计算技术成熟，租赁一台海外的虚拟服务器的唯一困难，基本就是你需要一张VISA信用卡来支付美元。没有VISA，PayPal应该也是可以的，PayPal可以绑定借记卡。 有非常多的厂商提供虚拟服务器租赁服务，这个可以按照价格和服务器的地理位置，根据自己的需要选择。我自己选择的是DigitalOcean位于洛杉矶的机房。Ping的延时大概在200ms以内。另外还需要补充的是，对于校园网用户，国内的校园网大多支持Ipv6且Ipv6部分的流量是不计费的。因此在租赁服务器时选择支持Ipv6的机器就非常重要了。 Shadowsocks服务对于服务器的性能要求不高，因此一般选择最便宜的一档就可以了，例如DigitalOcean最便宜的一档是1GB内存，单核CPU，25GB SSD磁盘，1 TB流量，价格5美元/月，并且支持Ipv6。 Shadowsocks服务端安装 Shadowsocks 发展到今日已经是相当成熟的大众产品了，有众多安装方法可供选择。这里我选择了teddysun开发的一键安装脚本系列。 teddysun 的脚本在广为流行之后，也开始面临了当局的压力，放弃了更新，并且删除了教程文章。Shadowsocks发展到今天，真是有很多人付出心血的结果。 teddysun本人的Github项目仓库的代码在master分支上还有保留，故方便使用。 一般情况下，我们使用shadowsocks-all.sh脚本就可以了。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-13]]></title>
    <url>%2Fposts%2F8301%2F</url>
    <content type="text"><![CDATA[新闻 格力集团欲400亿卖掉格力电器 观察者网【格力集团欲400亿“卖掉”格力电器 富士康或接盘】 格力电器控股权从1991年成立以来一直属于珠海市国资委旗下格力集团。但在4月8日，格力集团拟通过公开征集受让方的方式协议转让格力集团持有的格力电器总股本15%的股票。本次转让完成后，公司控股股东和实际控制人可能将发生变更。 一名珠海国资人士透露，近来富士康科技集团在珠海进行了大规模投资，有可能成为潜在的接盘方。 电影《杀人回忆》的故事原型真凶疑似被发现 不过按键已经超过了韩国刑法规定的追诉时效，嫌疑人无法被提起公诉并定罪。 按照韩国的法律规定，2007年之前发生的案件的公诉时效是15年，因为这是同一个犯罪嫌疑人连续杀人，公诉期按照最后一个案件的发生日期来计算 -- 可惜最后一个杀人案是在1991年4月23日发生的，到现在已经28年，已经过了公诉时效，也就是说从法律上不能再对犯罪人处以刑罚了。 中美关系 中央财办副主任、财政部副部长廖岷拟于本周三率团访美，与美方就中美经贸问题进行磋商，为10月份在华盛顿举行的第十三轮中美经贸高级别磋商做准备。 香港后续 穆迪调低香港信用评级展望至负面。 美国众议院院长佩洛西 (Nancy Pelosi) 9月18日在华府接见黄之锋与何韵诗等数名香港倡议人士，并藉此向中国政府喊话，表示美国国会基于人权，支持香港「反送中」示威的运动者。 关于台湾的若干消息 大陆20个城市恢复金马澎个人游 金门县政府稍早宣布，大陆出入境管理部门公告，自本月20日起恢复受理金门、马祖、澎湖“小三通”个人旅游签注申请，“对长期仰赖‘小三通’的金门观光产业，无疑是一剂强心针，昔日陆客穿梭大街小巷的荣景，将可望再现。”相当于福建省、浙江省、江西省与广东省等20个城市，自20日起可循“小三通”到金门、马祖与澎湖个人游。 在台湾这几个地方也是归于中华民国福建省管辖的。 所罗门群岛和台湾断交 台湾“中央社”16日下午发布消息称，所罗门群岛总理梅纳西·索加瓦雷16日召开内阁会议，决定中断与台湾的关系，与中国大陆建交。随后，台外事部门召开记者会证实这一消息，并称台当局与所罗门群岛“断交”。 目前台湾所谓“友邦”数量降至16个。 基里巴斯和台湾断交 20日的消息，太平洋岛国基里巴斯与台湾断交 郭台铭与柯文哲相继宣布不参加2020选举 鸿海集团前董事长郭台铭16日深夜宣布不参加2020年台湾地区领导人连署登记，先前与郭台铭达成参选默契的台北市长柯文哲将如何回应？会不会自己跳出来参选？今早近九点，柯文哲在市政会议前接受媒体联访，导报驻台记者获悉，柯文哲也宣布不选2020。 于此同时，民进党前副总统吕秀莲宣布参选。 其他新闻 沙特展示油田袭击为伊朗所为的证据 9月19日 华为在德国发布Mate 30系列 9月19日 李荣浩和杨丞琳宣布结婚 资源 PyQt5 tutorial 历史上的今天 10万张不哟啊肖像权的人脸照片 现代web开发 为知笔记发布Docker服务端 言论 信息的商业模式，不应该是收费，而是应该鼓励更多的人消费它。 当你遇到需要同时获取多个子组件数据，或者两个组件之间需要相互通讯的情况时，需要把子组件的 state 数据提升至其共同的父组件当中保存。之后父组件可以通过 props 将状态数据传递到子组件当中。这样应用当中所有组件的状态数据就能够更方便地同步共享了。 -- React 官方教程]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-12]]></title>
    <url>%2Fposts%2F57516%2F</url>
    <content type="text"><![CDATA[新闻 Brexit与欧盟ATAD法案 读王孟源的文章，总是能让人获得新的观察问题的视角。在他最新的《【英國】談Brexit》一文中，王孟源就提到了英国脱欧同欧盟将要实施的反避税指令ATAD(Anti Tax Avoidance Directive)有关。简而言之，应该这种老牌资本主义国家的土豪有着各种各样的避税法门，这在英国尤其「严重」。英国历代议会收到这些土豪的掣肘严重，一直无法解决这一问题。不过欧盟内福利国家多，避税传统没有英国强，且各国地方土豪，对于布鲁塞尔的欧盟官僚影响力要更弱。因此欧盟得以整合力量来解决这些土豪避税的问题。但是ATAD无疑是动了英国土豪的命根子。一个端倪是前几年ATAD刚刚开始立法过程，Brexit忽然就成为英国政坛的主流。由于ATAD预定在2020年1月1日正式生效【Member States will have until 1 January 2020 to transpose the Directive into national laws and regulations(来源)】，预计脱欧势力必然会在这个时间节点之前尽一切努力达成无协议脱欧。 相反，如果无法在2020年1月1日ATAD开始实施之前完成脱欧，脱欧派的立场可能会软化，转而追求软脱欧甚至是重新公投。 苹果发布新iPhone及其他新品 今天(11日)凌晨，苹果在 Steve Jobs Theater 召开了一年一度的秋季发布会，发布了 iPhone 11、iPhone 11 Pro、iPhone 11 Pro Max、新一代 Apple Watch 以及全新的 10.2 英寸入门款 iPad。 马云正式宣布不再担任阿里巴巴董事局主席 9月10日教师节，阿里巴巴创办人、「乡村教师」马云将正式卸任董事局主席一职，而今日也正是阿里巴巴集团创办20周年整，马云昨日亲身到访阿里巴巴位于杭州的总部滨江园区，向同事道别。根据内地媒体报道，马云所到之处人山人海、水泄不通，而他最后一日工作因提早下班，故此没有本月全勤奖。 沙特两处石油设施遭到无人机袭击 也门胡赛武装宣布对此次事件负责，称其动用10架无人机进行袭击。不过美国国务卿蓬佩奥指责伊朗在幕后主使。而伊朗则指责美国说谎。沙特没有透露石油设施遭到攻击的细节，只说没有人员伤亡，但表示石油产能受到影响。沙特能源部长阿卜杜勒阿齐兹亲王表示，受影响减少的产能(约500万桶，约占全球产能5%)，其中一部分将有庞大的石油储备替代。 ....sufficient to keep the markets well-supplied. I have also informed all appropriate agencies to expedite approvals of the oil pipelines currently in the permitting process in Texas and various other States. — Donald J. Trump (@realDonaldTrump) September 15, 2019 对于原油市场而言，这是有史以来最严重的供应突然中断，规模超过了1990年8月萨达姆突然入侵科威特时的水平。根据美国能源部数据，此次供应减量规模也超出了1979年伊朗伊斯兰革命时的水平。周六针对沙特的袭击致使原油市场周一开盘出现了剧烈震荡，9月16日，受沙特油田事故影响，美原油开盘跳涨约15%，达5月以来的最高点，布伦特原油开盘暴涨，涨幅一度扩大至19%，为1988年期货开始交易以来美元计价最大涨幅。 香港后续 本周香港的暴力冲突仍然在继续。不过，除了陆续警民冲突之外，民众之间的互相攻击开始增加。 黄之锋到达德国，周一顺利如期出席德国媒体于首都柏林举办的活动。 德国外长会见黄之锋 港交所发布公告，已经正式向伦敦交易所提出合并要约。，不过伦敦交易所拒绝了。 其他新闻 迪士尼宣布允许游客带自用食品进入园区 印度「月船 2 号」登陆月球失败，在距离月球表面2.1公里处失联。 8月 中国出口同步减少1% 波音暂停新机型 777X测试: 在进行地面高压应力测试时，波音 777X 的测试机的一扇货舱门向外爆炸，目前，777X 的联邦航空管理局（FAA）认证测试已被暂停。 9月9日 英国国会强制休会期启动，此论休会将延续到10月14日。 9月11日 苏格兰法院裁定首相约翰逊让议会休会五周不合法 特朗普开除国家安全事务助理博尔顿 所罗门群岛可能与台湾断交，赶在十一前和大陆建交 郭台铭退出国民党，参选在即 西班牙 95:75 战胜阿根廷夺得男篮世界杯冠军]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则匹配的一些研究]]></title>
    <url>%2Fposts%2F30513%2F</url>
    <content type="text"><![CDATA[元字符和语法 Python支持正则表达式元字符和语法 模式研究 浮点数匹配 1r'-?(\d+(?:\.\d+)?(?:e-?\d+)?)' 这个模式能够匹配所有的数字模式，包括正负数，科学计数法模式。这里注意一下(?:)这个模式，代表这个括号标出的元组不参与编号，在输 输出的结果中也不会单列出来。 汉字 1r'^[\u4e00-\u9fa5]&#123;0,&#125;$ ' 邮箱 1r'^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$ ' 手机号码 1r'^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$' 更多阅读 常用的正则表达式知识点与常见的正则匹配模式 Python正则表达式指南]]></content>
      <categories>
        <category>编程研究</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-11]]></title>
    <url>%2Fposts%2F57836%2F</url>
    <content type="text"><![CDATA[新闻 林郑月娥宣布正式撤回《逃犯条例》草案 9月4日当地时间下午，香港特首林郑月娥发表电视讲话：“宣布正式撤回逃犯修订条列草案，“以完全释除市民的疑虑”。 她在讲话中承诺保安局局长会在立法会复会后，按《议事规则》动议撤回条例草案。 这位香港特首还表示：这两个多月发生的事，令每一个香港人都感到震惊和伤心，亦令大家对香港感到焦虑和痛心，大家都希望可以尽快走出目前的困局。她作为行政长官，有责任尽一切努力，在种种局限下寻找社会向前行的机会。 ... 她表示，经过两个多月因修例工作引起的冲突，大家都意识到，眼前的矛盾是反映了长期积压的政治、经济和社会问题，例如房屋和土地供应、贫富悬殊、社会公义、青年人的机遇，以至公众参与决策等。她指，持续出现的暴力正动摇香港法治的根基，极少数人挑战“一国两制”，冲击中央政府驻港机构，污损国旗、国徽，将香港推向危险的境地。无论市民对政府或对社会现况有多大不满，暴力绝对不是解决问题的方法。目前，最迫切的就是要遏止暴力、捍卫法治、重建社会秩序。政府会对所有违法及暴力行为，严正执法。 讲话伊始，这位香港特首表示，逃犯条例修订引起的示威冲突持续两个多月，对很多香港人来说，这城市变得很陌生：&quot;道路和隧道突然被堵塞，旅客担心香港还是否安全，不愿来港旅游和经商……大家都很焦急，希望可以尽快走出目前的困局。&quot; 接着她逐一回应了&quot;五大诉求&quot;：&quot;有关撤回条例草案，我在5月15日已经宣布暂缓条例草案，之后亦表明，修例工作已经完全停止，修例草案明年7月便会自动失效。&quot; 她接着提到第二点，成立独立调查委员，表示香港政府认为有关警方执法行动，应该按既定机制，交由专责的独立监警会处理，而不应该另设独立调查委员会。监警会除了处理有关警方的投诉，亦正按照其法定职权，详细审视6月9日开始发生的一连串大型公众活动，评估警方的处理。元朗袭击事件就是重点之一。调查报告的内容和建议都会公开。 关于第三点示威活动定性，这位香港特首强调已多次重申：法律程序上不存在&quot;暴动定性&quot;：&quot;律政司指出，每宗案件的刑事检控决定，都是按照证据、法律、按照《检控守则》作出。&quot;至于第四点，要求释放所有被捕人士，不检控、不追究违法的人：&quot;这些要求是法治社会所不能接受。&quot;林郑接着补充说：&quot;根据《基本法》，律政司的刑事检控决定，必须不受任何干涉，否则有违香港的法治精神。&quot; 最后有关双普选，她指出，这是《基本法》订下的最终目标：&quot;要实现这个目标，社会需要在法理的基础上，在平和及互信的氛围下，以务实的态度进行讨论，否则只会令社会更加撕裂。&quot; 当日晚大陆这边的媒体风平浪静，新浪的网站倒是有报道，但是很快就404了。 5日各个大陆各个主流媒体开始报道 本周香港的一些其他新闻： 本周一，立陶宛外交部召见了中国驻立陶宛大使。立陶宛方面指责中国使馆工作人员干涉了8月23日在首都维尔纽斯举行的支持香港民主的示威集会。 香港示威者在9月2日發起第二回「三罷」行動，並且會持續更久。 路透社流出一段林郑月娥在非公开场合的录音，包含“如果有选择，我第一件事就是辞职，并深刻道歉”这样的内容。林郑后续回应：我从未向中央提过辞职。 黄之锋活保释，今明赴台。 联邦快递涉嫌非法收寄寄往香港的管制刀具，涉案物品已被中国有关部门暂扣，相关调查正在进行之中。之前联邦快递分别在中国大陆和香港都被发现寄送强制。 传言林郑将撤回《逃犯条例》 国泰航空董事局主席史乐山辞任。 9月5日，黎智英寓所被投掷汽油弹 香港部分警员受邀参加国庆庆典 惠誉(Fitch Ratings)降低香港评级，理由是机构认为，尽管“一国两制”框架预计保持完好，但香港进一步融入中国治理体系将带来更大挑战。 在林郑宣布撤回《逃犯条例》以后，香港的示威运动仍未停止。9月6日晚有示威者强闯港铁太子站，破坏站内设施；另有一批示威者围堵警署、阻碍交通，期间有示威者破坏交通设施，甚至在街头多处纵火。 国泰航空发现飞机氧气瓶被排气 据香港《南华早报》消息，30日，又有一架香港国泰航空客机的氧气瓶遭排气放空，这是继27日后第三架陷入“氧气被排空”风波客机。处在舆风口浪尖的国泰航空再曝丑闻，引发外界广泛质疑。 香港《南华早报》31日报道称，30日，国泰航空A330 B-LBI客机在起飞前例行检查时发现氧气瓶遭排空。该客机前一天晚上由巴厘岛飞抵香港，航空检查显示所有氧气瓶均正常，但第二天起飞前往吉隆坡前检查时发现，其中一个氧气瓶遭排空。A330客机上共有16个氧气瓶，被排气放空的是左手边第一个门上的氧气瓶。 事发后，国泰航空发言人表示非常重视该事件，已成立内部调查委员会，并向香港民航处和警方通报了事件，强调事关安全不容妥协。“在任何情况下，机组人员和乘客的安全都不会受到影响。 国泰在本轮香港运动浪潮中由于支持示威者一边，早到大陆方面的打压。继之前两名高管辞职之后，本周国泰航空董事局主席史乐山辞任。 猪肉价格大涨 8月的第二周，猪肉价格同比上涨了46.8%，部分地区出厂价格就达到32.61元/每公斤高位；生猪存栏量却同比下降32%，创下20年来的最低水平。 8月30日，国务院副总理胡春华召开了全国稳定生猪生产和猪肉保供稳价电视电话会议，要求采取切实措施解决群众吃肉问题。 可以说，这次猪价波动，直接原因和非洲猪瘟影响有关，但深层次的原因可能更为复杂，它涉及到农业生产经营方式、环保、土地等综合因素。 北洋舰队旗舰定远舰找到了 9月2日报道，“威海湾一号甲午沉舰遗址保护区域划定论证会”当天在山东威海刘公岛上举行。经专家论证，历经两个月的水下考古调查，现已基本确认清代北洋海军旗舰“定远舰”的沉灭位置，并出水一批沉舰遗物，这是2014年以来北洋甲午沉舰系列调查与研究工作的又一重大成果。 弄丢共享单车被告，企业索赔2.55万 2018年5月18日，福建泉州的刘先生借了一辆共享单车，因未正确归还导致车辆丢失。2019年7月31日，共享单车运营公司起诉刘先生，要求支付2.55万元租车费。8月24日，刘先生主动赔偿车辆遗失费用1800元后，双方和解，公司已向法院申请撤诉。 北斗卫星的数量超过GPS 2018年，中国发射了18颗北斗导航卫星。目前，一共有35颗北斗卫星在运行，而美国的 GPS 卫星只有31颗，欧盟的伽利略系统22颗，俄罗斯的 GLONASS 系统24颗。另外，日本（4颗）和印度（6颗）的系统只限于本国可用。 全世界195个国家和地区中的130个（多是一带一路沿线国家），接收到的北斗卫星要多于 GPS 卫星。这使得在这些国家，使用北斗定位会信号更强，定位更快速。上图中，深蓝的区域是北斗占优，红色的区域是 GPS 占优。下图是主要国家的北斗和 GPS 的对比。 执政37年的津巴布韦前总统穆加贝去世 前津巴布韦长年总统罗伯特·穆加贝（Robert Mugabe）逝世，终年95岁。这是该国现总统埃默森·姆南加古瓦（Emmerson Mnangagwa）通过推特宣布的。今年4月起，穆加贝一直在新加坡一家医院接受治疗。 穆加贝 中美关系 美国和波兰周一签署了5G技术合作的协议。 美对3000亿美元中国产品加税 中国向WTO起诉: 9月1日，美国对华3000亿美元输美产品中第一批加征15%关税措施正式实施，我就此在世贸组织争端解决机制下提起诉讼。美方的征税措施严重违背中美两国元首大阪会晤共识，中方强烈不满和坚决反对。中方将根据世贸组织相关规则，坚定维护自身合法权益，坚决捍卫多边贸易体系和国际贸易秩序。 美国初步认定中国有补贴与倾销嫌疑，宣布将对其出口的「预制结构钢」课征关税。 中美经贸高级别磋商双方牵头人通话：10月初举行第十三轮磋商: 9月5日上午，中共中央政治局委员、国务院副总理、中美全面经济对话中方牵头人刘鹤应约与美国贸易代表莱特希泽、财政部长姆努钦通话。商务部部长钟山、中国人民银行行长易纲、国家发改委副主任宁吉喆等参加通话。 科技新闻 罗技推出 MX Master 3 鼠标和 MX Keys 无线键盘 9 月 4 日，罗技推出了 MX Master 系列的最新一代产品 MX Master 3。新款采用 USB-C 接口，并使用新的电磁系统取代了机械滚轮，滑动更加顺滑静音。罗技微调了拇指按键和第二滚轮的设计，前进 / 后退按钮从轮后移到了下方。MX Master 3 沿用了 4000 DPI 的传感器，支持蓝牙或罗技 Unifying USB 接收器，电池续航约为 70 天。 另外罗技还同步推出了新款 MX Keys 无线键盘，功能类似 Craft Keyboard，支持背光，但取消了滚轮设计。MX Keys 支持通过 USB-C、蓝牙和罗技 Unifying 接收器连接，兼容 Windows、macOS、iOS、Android 平台。MX Master 3 和 MX Keys 售价均为 899 元，暂未公布国行具体上市时间。 新浪推出的「绿洲」APP图标涉嫌抄袭 USB 4 发布 AppleInsider 消息，在 3 月份 USB Promoter Group 首次发布了 USB 4 规范后，昨天最终的 USB 4 规范标准正式发布。 USB4 将支持 40Gb/s 数据传输，是 USB 3 最新版本速度的两倍，同时向后兼容 USB 3.2、USB 2.0、雷雳 3 接口。USB4 将使用与 USB 3 相同的 USB-C 连接器，这意味着厂商不需要推出新的 USB4 接口类型。它还可以提供最高达 100W 的电源功率，还可以外接显卡、两台 4K 显示器或 1 台 5K 显示器等。 USB4 标准已经完成，预计搭载 USB4 规范的零售产品最早将会在 2020 年底上市。 其他 迪斯尼公司定于11月12日，推出自己的视频订阅服务 阿里投资网易云音乐 保时捷推出旗下第一款全电动汽车Taycan这个名字的寓意为“年轻活泼的骏马”，也代表了保时捷的企业文化。之前这款Taycan的开发代号名叫MissionE，拥有482公里行驶里程，动力超过600马力，百公里加速时间仅为3.5秒。Taycan被视作是特斯拉ModelS最直接的竞争对手，两款电动汽车都具有非常顶级的性能。特斯拉ModelS的续航距离为540公里，百公里加速时间为2.5秒。这篇文章有不错的介绍。 其他新闻 男篮世界杯，中国男篮加时76:79不敌波兰，周琦各种失误，被网友骂惨了 男篮世界杯中国不敌委内瑞拉遭淘汰 天安门广场9月7日18时至8日10时暂停对外开放: 记者从天安门地区管理委员会获悉，根据北京市庆祝中华人民共和国成立70周年活动筹备工作统一部署安排，天安门广场于2019年9月7日18时至9月8日10时暂停对外开放（届时，将根据广场实际情况适时恢复对外开放）。 8月30日 特斯拉进入免购置税车辆名单。 三大运营商开始陆续停售4G无限流量套餐 英国首相威胁提前进行大选 英国议员周三批准了一项旨在防止英国首相约翰逊政府在没有达成协议的情况下带领英国退出欧盟的法案。 韩国决定尽快收回26处驻韩美军极地 《黑猫警长》导演戴铁郎先生去世 加拿大任命新的驻华大使: 在中加关系紧张的背景下，渥太华任命曾多年在麦肯锡咨询公司工作的商界人士巴顿为新的驻华大使，填补了这个自今年1月以来一直空缺的职位。 Facebook数亿用户电话号码曝光 特朗普中断和塔利班的和谈，作为对喀布尔最新爆炸袭击事件的反应。 DC漫改电影《小丑》获得金狮奖，这是影史首个三大最高奖给漫改电影。 言论与文章 虽然很政治不正确，但是很高级黑： apt和apt-get的区别]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[旧文迁移|Django部署:Nginx+Gunicorn+virtualenv+supervisor+PostgreSQL]]></title>
    <url>%2Fposts%2F34441%2F</url>
    <content type="text"><![CDATA[Django是最受欢迎的基于Python的web框架之一，也非常适合新手入门。虽然Django为我们提供了一个用于测试的轻量级server，但这个server不能用于实际生产环境的部署。最早的Django的部署方法推荐的是Apache+mod_wsgi。演化到现在，django的部署方法也变得越来越弹性、有效，也更加的复杂了。在下面的教程中我们需要使用下面的这些工具： Nginx Gunicorn virtualenv supervisor PostgreSQL 前期准备 你需要一个你拥有root权限的server。下面的教程是基于Debian 7，所有相同的步骤对于Ubuntu和其他的基于Debian的发行版都是适用的。 更新系统 首先确保系统处于最新的状态 12$ sudo aptitude update$ sudo aptitude upgrade PostgreSQL 为基于Debian的系统安装PostgreSQL，你只需要运行下面这个命令： 1$ sudo aptitude install postgresql postgresql-contrib 完成安装以后为我们的django应用创建一个用户和一个数据库 12345678910$ sudo su - postgres postgres@django:~$ createuser --interactive -P Enter name of role to add: hello_django Enter password for new role: Enter it again: Shall the new role be a superuser? (y/n) n Shall the new role be allowed to create databases? (y/n) n Shall the new role be allowed to create more new roles? (y/n) n postgres@django:~$ postgres@django:~$ createdb --owner hello_django hello postgres@django:~$ logout $ 创建一个运行账户 为了避免万一web应用被攻击以后带来不受控制的后果，我们一般会单独为web应用创建一个权限受限的用户来运行这个web应用。例如我们这里为我们的django应用创建一个名为hello的用户，并将其归入webapps这个组。 12$ sudo groupadd --system webapps$ sudo useradd --system --gid webapps --shell /bin/bash --home /webapps/hello_django hello virtualenv Virtualenv是一个Python虚拟环境管理的工具，所谓虚拟环境就是讲你Web应用所需要的python环境从系统的python环境中独立出来，这使得你可以在不同的应用中使用不同版本的第三方库。 用下面的命令来在Debian上安装Virtualenv 1$ sudo aptitude install python-virtualenv 为你的Django应用创建一个python环境 这里我将django应用放在了/webapps这个路径下面，如果你偏好/var/www, srv或者其他的路径也可以。首先在这个目录下面创建/webapps/hello_django/文件夹来存储应用，并将这个文件夹的owner设置为上面我们创建的运行账户hello 12$ sudo mkdir -p /webapps/hello_django/$ sudo chown hello /webapps/hello_django/ 切换到hello用户并创建虚拟环境 123456789$ sudo su - hellohello@django:~$ cd /webapps/hello_django/hello@django:~$ virtualenv .New python executable in hello_django/bin/pythonInstalling distribute..............done.Installing pip.....................done. hello@django:~$ source bin/activate (hello_django)hello@django:~$ 现在虚拟环境就被激活了，我们可以将django安装到这个虚拟环境里面 123456Downloading/unpacking django (...) Installing collected packages: django (...)Successfully installed django Cleaning up... 完成django的安装以后我们来创建一个空的django项目 1(hello_django)hello@django:~$ django-admin.py startproject hello 你可以通过启动测试服务器来测试是否一切正常 12345678(hello_django)hello@django:~$ cd hello (hello_django)hello@django:~$ python manage.py runserver example.com:8000 Validating models... 0 errors found June 09, 2013 - 06:12:00 Django version 1.5.1, using settings 'hello.settings' Development server is running at http://example.com:8000/ Quit the server with CONTROL-C. 现在你可以通过http://example.com:8000来访问了。 为Django配置PostgreSQL Django默认的新工程使用的是SQLite3作为数据库的，这个数据库的性能不足以支持生产环境下的数据库应用。我们这里采用PostgreSQL来做为我们的Django项目的数据库。为了让Django能够使用PostgreSQL，我们需要将psycopg2安装到虚拟环境。首先安装这个包的依赖项 1libpq-dev 然后通过pip来安装的psycopg2 1(hello_django)hello@django:~$ pip install psycopg2 现在可以将Django的数据库设置修改为： 12345678910DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'hello', 'USER': 'hello_django', 'PASSWORD': 'Your password', 'HOST': 'localhost', 'PORT': '', # Set to empty string for default. &#125; &#125; 然后向向Postgres应用你的Django设置 1(hello_django)hello@django:~$ python manage.py migrate Gunicorn 在实际生产环境中我们不会使用Django的单线程开发服务器。这里我们使用Gunicorn. 通过pip来安装Gunicorn 1(hello_django)hello@django:~$ pip install gunicorn 安装好以后你可以尝试用Gunicorn来运行Django了 1(hello_django)hello@django:~$ gunicorn hello.wsgi:application --bind example.com:8001 上面的命令是一个简单的测试，为了真正在生产环境下使用Gunicorn，我们还需要增加一些配置。我们把这些配置文件写成一个bash脚本，保存为bin/gunicorn_start 1234567891011121314151617181920212223242526272829303132#!/bin/bash NAME="hello_app" # Name of the applicationDJANGODIR=/webapps/hello_django/hello # Django project directorySOCKFILE=/webapps/hello_django/run/gunicorn.sock # we will communicte using this unix socketUSER=hello # the user to run asGROUP=webapps # the group to run asNUM_WORKERS=3 # how many worker processes should Gunicorn spawnDJANGO_SETTINGS_MODULE=hello.settings # which settings file should Django useDJANGO_WSGI_MODULE=hello.wsgi # WSGI module name echo "Starting $NAME as `whoami`" # Activate the virtual environmentcd $DJANGODIRsource ../bin/activateexport DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULEexport PYTHONPATH=$DJANGODIR:$PYTHONPATH # Create the run directory if it doesn't existRUNDIR=$(dirname $SOCKFILE)test -d $RUNDIR || mkdir -p $RUNDIR # Start your Django Unicorn# Programs meant to be run under supervisor should not daemonize themselves (do not use --daemon)exec ../bin/gunicorn $&#123;DJANGO_WSGI_MODULE&#125;:application \--name $NAME \--workers $NUM_WORKERS \--user=$USER --group=$GROUP \--bind=unix:$SOCKFILE \--log-level=debug \--log-file=- 将这个文件改成可执行模式 1$ sudo chmod u+x bin/gunicorn_start 下面你可以尝试运行这个脚本了 1$ sudo su - hello hello@django:~$ bin/gunicorn_start Starting hello_app as hello 2013-06-09 14:21:45 [10724] [INFO] Starting gunicorn 18.0 2013-06-09 14:21:45 [10724] [DEBUG] Arbiter booted 2013-06-09 14:21:45 [10724] [INFO] Listening at: unix:/webapps/hello_django/run/gunicorn.sock (10724) 2013-06-09 14:21:45 [10724] [INFO] Using worker: sync 2013-06-09 14:21:45 [10735] [INFO] Booting worker with pid: 10735 2013-06-09 14:21:45 [10736] [INFO] Booting worker with pid: 10736 2013-06-09 14:21:45 [10737] [INFO] Booting worker with pid: 10737 ^C (CONTROL-C to kill Gunicorn) 2013-06-09 14:21:48 [10736] [INFO] Worker exiting (pid: 10736) 2013-06-09 14:21:48 [10735] [INFO] Worker exiting (pid: 10735) 2013-06-09 14:21:48 [10724] [INFO] Handling signal: int 2013-06-09 14:21:48 [10737] [INFO] Worker exiting (pid: 10737) 2013-06-09 14:21:48 [10724] [INFO] Shutting down: Master $ exit 注意，如果你在上面的过程中设置了自定义的参数的话，需要将gunicorn_start脚本中对应的参数改过来。其中，worker的数量推荐设置为2 * CPUs + 1，这样的话，在任何时候都有一半的worker在做IO。 Supervisor Superviosr是一个进程监管的工具。简而言之，Superviosr可以保证你的程序在服务器开机时自动启动以及程序意外终止时重新启动。通过下面的命令即可安装: 1sudo aptitude install supervisor Superviosr通过配置文件来设置被监管的程序。一般配置文件都放置在/etc/supervisor/conf.d路径下面。此处我们创建一个名为hello.conf的配置文件，内容如下： 1234567891011[program:hello]command = /webapps/hello_django/bin/gunicorn_start ; Command to start appuser = hello ; User to run asstdout_logfile = /webapps/hello_django/logs/gunicorn_supervisor.log ; Where to write log messagesredirect_stderr = true ; Save stderr in the same logenvironment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8 ; Set UTF-8 as default encoding 你可以参考其他设置，不过上面的设置一般情况下应该足够了。 日志文件需要我们手动创建一下： 1hello@django:~$ mkdir -p /webapps/hello_django/logs/ hello@django:~$ touch /webapps/hello_django/logs/gunicorn_supervisor.log 设置好上面的文件以后，我们可以通过supervisorctl工具来启用这些设置了： 1234$ sudo supervisorctl reread hello: available $ sudo supervisorctl update hello: added process group 现在你可以start，stop或者restart你的进程了 12345678$ sudo supervisorctl status hello hello RUNNING pid 18020, uptime 0:00:50 $ sudo supervisorctl stop hello hello: stopped $ sudo supervisorctl start hello hello: started $ sudo supervisorctl restart hello hello: stopped hello: started Nginx 安装Nginx同样非常简单： 12$ sudo aptitude install nginx $ sudo service nginx start 此时你访问server(http://example.com)就应该可以看见Nginx的欢迎页面了(&quot;Welcome to nginx&quot;) 为Django创建一个虚拟server配置 每个Nginx的虚拟server都由/etc/nginx/sites-available路径下的一个配置文件来表示。而将其链接到的/etc/nginx/sites-enabled路径下则可以启用对应的站点。 为我们的Django应用创建一个配置文件/etc/nginx/sites-available/hello. 文件内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364upstream hello_app_server &#123;# fail_timeout=0 means we always retry an upstream even if it failed# to return a good HTTP response (in case the Unicorn master nukes a# single worker for timing out). server unix:/webapps/hello_django/run/gunicorn.sock fail_timeout=0;&#125; server &#123; listen 80;server_name example.com; client_max_body_size 4G; access_log /webapps/hello_django/logs/nginx-access.log;error_log /webapps/hello_django/logs/nginx-error.log;location /static/ &#123;alias /webapps/hello_django/static/;&#125;location /media/ &#123;alias /webapps/hello_django/media/;&#125; location / &#123;# an HTTP header important enough to have its own Wikipedia entry:# http://en.wikipedia.org/wiki/X-Forwarded-Forproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # enable this if and only if you use HTTPS, this helps Rack# set the proper protocol for doing redirects:# proxy_set_header X-Forwarded-Proto https; # pass the Host: header from the client right along so redirects# can be set properly within the Rack applicationproxy_set_header Host $http_host; # we don't want nginx trying to do something clever with# redirects, we set the Host: header above already.proxy_redirect off; # set "proxy_buffering off" *only* for Rainbows! when doing# Comet/long-poll stuff. It's also safe to set if you're# using only serving fast clients with Unicorn + nginx.# Otherwise you _want_ nginx to buffer responses to slow# clients, really.# proxy_buffering off; # Try to serve static files from nginx, no point in making an# *application* server like Unicorn/Rainbows! serve static files.if (!-f $request_filename) &#123;proxy_pass http://hello_app_server;break;&#125;&#125; # Error pageserror_page 500 502 503 504 /500.html;location = /500.html &#123;root /webapps/hello_django/static/;&#125;&#125; 将这个文件链接到site-enabled文件夹下： 1$ sudo ln -s /etc/nginx/sites-available/hello /etc/nginx/sites-enabled/hello 然后重启nginx 1$ sudo service nginx restart 现在你再访问http://example.com看到的就应该不是nginx的欢迎页面，而是Django的欢迎页面了。 至此配置就全部完成了，最终项目的整个结构应该如下所示： 123456789101112131415161718192021222324252627282930/webapps/hello_django/ ├── bin &lt;= Directory created by virtualenv │ ├── activate &lt;= Environment activation script│ ├── django-admin.py │ ├── gunicorn │ ├── gunicorn_django │ ├── gunicorn_start &lt;= Script to start application with Gunicorn │ └── python ├── hello &lt;= Django project directory, add this to PYTHONPATH │ ├── manage.py │ ├── project_application_1 │ ├── project_application_2 │ └── hello &lt;= Project settings directory │ ├── __init__.py │ ├── settings.py &lt;= hello.settings - settings module Gunicorn will use │ ├── urls.py │ └── wsgi.py &lt;= hello.wsgi - WSGI module Gunicorn will use ├── include │ └── python2.7 -&gt; /usr/include/python2.7 ├── lib │ └── python2.7 ├── lib64 -&gt; /webapps/hello_django/lib ├── logs &lt;= Application logs directory │ ├── gunicorn_supervisor.log │ ├── nginx-access.log │ └── nginx-error.log ├── media &lt;= User uploaded files folder ├── run │ └── gunicorn.sock └── static &lt;= Collect and serve static files from here]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-10]]></title>
    <url>%2Fposts%2F8493%2F</url>
    <content type="text"><![CDATA[新闻 英国女王批准首相约翰逊提出的议会休会请求 英国女王伊丽莎白二世28日在枢密院会议上批准了首相约翰逊提出的议会休会请求。目前处于夏季休会期的英国议会将于9月3日重新召开。根据约翰逊的请求，伊丽莎白二世批准议会在9月9日至9月12日期间再次开始休会，休会期一直到10月14日。 约翰逊对议会休会期的新安排引发争议，反对者认为此举是为了阻止议员反对“无协议脱欧”的努力。反对党工党副党魁汤姆·沃森说，此举“完全是公然冒犯我们的民主制度，令人震惊”。 更多阅读： 睡前消息：英国首相为脱欧竟暂停议会，三年了，这次能成功吗？ 如何看待英国女王正式批准首相鲍里斯的暂停议会请求？] 张伟丽成为中国首位UFC冠军 北京时间8月31日， UFC格斗之夜深圳站在深圳大运中心体育馆开战，中国女选手张伟丽挑战UFC现役女拳王、巴西选手安德拉德，争夺草量级（115磅）世界冠军金腰带。比赛开始不到一分钟，张伟丽KO巴西女拳王，成为UFC中国首位冠军。 全国首套房房贷利率上调 香港问题后续 周日又有游行示威进行，警方首次出动水炮车驱散抗议者，并有警员开枪。警方总共逮捕了36人，其中年龄最小的12岁。开枪过程BBC做了一个梳理:Hong Kong: What led to a single gunshot being fired? - BBC News. 港龙空勤人员协会主席施安娜遭国泰港龙航空解雇 多名知名运动人士被捕，包括香港民族党前召集人陈浩天与香港众志秘书长黄之锋 经济学人做的调查：Almost nobody in Hong Kong under 30 identifies as “Chinese” 前一段时间推特和facebook封禁了一批「有政府背景」的账户，关于此，推荐一篇论文Chinese computational propaganda: automation, algorithms and the manipulation of information about Chinese politics on Twitter and Weibo. 何韵诗逃往澳大利亚 太子站乘客冲突过程 中美关系 美国海军“迈耶”号驱逐舰未经中国政府允许，8月28日擅自闯入中国南沙岛礁邻近海域 一艘美国海军军舰近日要求访问青岛港，但遭到中国回绝 中国商务部29日在例行记者会上，表示出愿意和美方继续磋商，不愿意让贸易战升级的态度之后，美国股市应声上扬。 其他新闻 旷视向港交所申请上市。据悉，当前阿里巴巴、蚂蚁金服、联想、创新工场等均为旷视科技股东。 OG 3:1 击败Liquid夺得Ti9冠军，成为世界首位双冠王 没有联合宣言的G7闭幕，特朗普称赞「团结」 澳籍作家杨恒均在广州机场被国保带走，被控间谍罪。 林书豪加盟北京首钢，薪水约为税后300万美元 好奇心日报恢复更新拉 警方通报黄毅清存在向他人贩卖毒品和吸食毒品的行为，已被提请批捕 拼多多市值超过百度，目前总市值390.67亿美元，今年迄今累涨逾50%，超过了百度的369.18亿美元市值。 八月底华为方舟编译器开源 -《哪吒之魔童降世》票房超过《流浪地球》，成为中国影史票房总榜第二名]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[乌克兰独立广场旧事]]></title>
    <url>%2Fposts%2F31351%2F</url>
    <content type="text"><![CDATA[喜欢历史的人，在看到当下的事情的时候，就会情不自禁地想到历史上一些类似的旧事。比如这次又见到了一个很有意思的新闻。说是联邦快递被曝出来在中国投递的包裹里面有真枪，而且包裹是从美国寄出来。这件事有意思的地方有这么几个点： 其一是这件事情其实早在六月份就出来了，但是当时并没有在舆论上大范围传播，也没有中国的高调反应。反而是在这个节点爆出来，时机的选择耐人寻味。 其二是这件事情的一些细节非常有意思。从联邦快递的回应来看，是联邦快递主动报警的，那么这件事情可能并不是联邦快递有意为之。不过，一个含枪支的包裹通过了层层检查，甚至包括中美两国的海关系统，都没有被查验出来。按理说枪支的形状特征非常明显，从X光下面走一遍很容易分辨出来。如果说美国方面要有小动作，故意放了一马，那中国这方面的检查为什么也放过了这个包裹了？看着有点『钓鱼执法』的意味。 更有意思的事情来了。这两天，在香港也有一个类似的案子。19日在香港有一个军火案在西九龙法院再审。被告林靖峰藏有的3支长枪和1支短枪已证实为真枪。此外，控方在庭上透露涉案包裹由美国寄往香港。这个案子案发，即被告被抓，是在今年1月14日。 最近香港不太平，不过这个案子的案发时间，是在逃犯条例发布之前。不过，这上面的两个例子显示出境外的一些势力，确实有将枪支运送到香港，甚至是大陆的能力。那么，这些枪支能够用来做什么呢？这个时候就可以点题了，让我们来回忆一下历史。 2013年底开始，由于时任乌克兰总统亚努科维奇中止了和欧盟签署政治和自由贸易协议，而强化和俄罗斯的关系，导致大规模的抗议活动。此轮抗议活动最终导致亚努科维奇下台。而且，这轮抗议的影响甚至导致乌克兰陷入分裂。随后陆续发生了克里米亚脱离乌克兰加入俄罗斯。乌克兰东部及南部产生分裂主义运动，乌克兰陷入内战。 当时，乌克兰基辅的独立广场是反对派与政府的主要拉锯场地。在抗议期间，独立广场甚至出现了狙击手，反对派与政府方面均有人被狙击受伤甚至死亡。后来乌克兰新政府将狙击行为归咎于前总统亚努科维奇势力。不过去年似乎又有了一些有意思的信息。俄罗斯《卫星报》方面找到了当年参与狙击的格鲁吉亚狙击手亚历山大·列瓦济什维利。狙击手表示现任的乌克兰最高拉达国家安全与国防委员会主席谢尔盖·帕申斯基和人民议员弗拉基米尔·帕拉修克亲自参与了当年独立广场骚乱期间的杀人事件。《卫星报》还掌握有机票复印件，证明狙击手确实当时曾经前往基辅。 2014年的基辅独立广场 另外，欧盟外长凯瑟琳·艾希顿（Catherine Margaret Ashton）和爱沙尼亚内务部长乌尔马斯·帕耶特（Urmas Paet）的电话对话录音，证明基辅独立广场现场的狙击手和乌克兰反对派有关。在谈话中乌尔马斯·帕耶特也提到，在基辅独立广场上出现的狙击手，是乌克兰反对派雇佣的，他所看到的所有的罪证都证明，无论示威民众还是执法人员都是被同一批狙击手射杀的。爱沙尼亚驻基辅大使已证实此录音的真实性。帕耶特称向其透露消息的是活动人士、医生柏格摩列兹（Olga Bogomolets）。许多人将这名医生视为独立广场的英雄，原本在新政府中有一席之位的她却拒绝出任。 之前我看八方论坛上就香港问题采访王孟源的时候，王孟源就提到尽量不要派遣大陆方面的武装力量进入香港，否则如果有人想在香港复制当年独立广场上的套路，武警或者解放军就是不清楚这事了。看来，所言非虚。 更多阅读 华尔街日报：中国警方调查联邦快递包裹涉枪案 环球网：香港警方检获军火案今再审，已证实至少4支真枪均由美国寄出 德国之声：谁是乌克兰广场狙击手的幕后指使者? 环球网：乌克兰称独立广场狙击手开火 致20多名警察受伤 盟外长凯瑟琳·艾希顿（Catherine Margaret Ashton）和爱沙尼亚内务部长乌尔马斯·帕耶特（Urmas Paet）的电话对话录音 维基百科：乌克兰亲欧盟示威运动 俄罗斯卫星通讯社：格鲁吉亚狙击手：乌克兰议员曾参与基辅独立广场杀人事件]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>政治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-9]]></title>
    <url>%2Fposts%2F11084%2F</url>
    <content type="text"><![CDATA[新闻 关税！关税！ 贸易战又双叒叕峰回路转了。 周五中国宣布对于原产于美国的约750亿美元进口商品加征关税，作为“应对美方单边主义、贸易保护主义”之举。这批关税将分两批在9月和12月分别开始施行。 数小时后特朗普就连发了多条推特，表示要进一步提高对中国商品加征关税的税率。他还要求在华经营的美国企业撤出中国、最好将业务搬回美国。特朗普周五总共发了37条推特。特朗普的推特表示美国将在10月1日将2500亿美元中国商品的现有关税从25%提高至30%，他还说，定于9月1日生效的另外3000亿美元中国商品的关税将从10%升至15%。 美国总统特朗普在推特上宣布，从10月1日开始，对来自中国的2500亿美元产品关税税率从目前的25%提高到30%。他还宣布，对余下的3000亿美元来自的中国产品，原计划从9月1日起加征的10% #关税 现将提高至15%。 https://t.co/UYtR94ox7Y — 美国之音中文网 (@VOAChinese) August 23, 2019 同时，特朗普还下令美国公司离开中国，寻找替代。 Our Country has lost, stupidly, Trillions of Dollars with China over many years. They have stolen our Intellectual Property at a rate of Hundreds of Billions of Dollars a year, &amp; they want to continue. I won’t let that happen! We don’t need China and, frankly, would be far.... — Donald J. Trump (@realDonaldTrump) August 23, 2019 特朗普周五上午的推特风暴，还包括向美联储施压。他在推文中写道：“现在应该是美联储拿出他们本事来的时候了！”他又提问谁是美国最大的敌人，是（美联储主席）鲍威尔（Jerome Powell）还是习近平主席？ ....My only question is, who is our bigger enemy, Jay Powell or Chairman Xi? — Donald J. Trump (@realDonaldTrump) August 23, 2019 除此之外，特朗普指责中国还未履行阻止芬太尼流入美国的承诺，他要求联邦快递、UPS、亚马逊、美国邮政等公司拒绝递送来自中国的芬太尼药品。 8月1日，特朗普曾说将从9月1日起向3000亿美元的中国商品加征10%关税。9月1日也是中美贸易谈判下一轮会面的日期。其后，美国政府又宣布，部分关税将延迟至12月15日实施，还有部分商品被剔除出加税名单。 中方此番加税反制，在关税实施的时间上完全匹配了美国的上述关税威胁。但鉴于中美向对方出口的商品总额相差悬殊，中国无法在征税的商品价值总量上匹配美国，可能还会以非关税措施反制美国。中国观察家利明璋（Bill Bishop）曾指出，这些潜在手段包括出台“不可靠实体清单”、对美商投资展开安全审查、增加海关检查、取消与美国企业的订单、骚扰美企驻华雇员等。中国商务部发言人高峰在22日表示，不可靠实体清单将于近期发布。 中国宣布对750亿美国商品加征关税 VOA: 再度升级 特朗普宣布对中国商品关税再加码 中美贸易战再升级：两国互征关税，特朗普要求美企撤出中国 芬太尼危机：中国是否是非法药品的主要来源？ 深圳先行示范区 8月18日，中共中央、国务院关于支持深圳建设中国特色社会主义先行示范区的意见发布。 【中共中央、国务院发布关于支持深圳建设社会主义特色经济示范区的意见】党和国家作出兴办经济特区重大战略部署以来，深圳经济特区作为我国改革开放的重要窗口，各项事业取得显著成绩，已成为一座充满魅力、动力、活力、创新力的国际化创新型城市。当前，中国特色社会主义进入新时代，支持深圳高举新时代改革开放旗帜、建设中国特色社会主义先行示范区，有利于在更高起点、更高层次、更高目标上推进改革开放，形成全面深化改革、全面扩大开放新格局；有利于更好实施粤港澳大湾区战略，丰富“一国两制”事业发展新实践；有利于率先探索全面建设社会主义现代化强国新路径，为实现中华民族伟大复兴的中国梦提供有力支撑。 这个新闻虽说是目前香港乱局的档口出来的，其中意味令人遐想。不过，这个先行示范区其实早就开始规划了。早在2018年1月，深圳市委六届九次全会讨论了《深圳经济特区率先建设社会主义现代化先行区规划纲要（2018-2035年）（讨论稿）》，并明确了深圳率先建设社会主义现代化先行区的目标任务。 不过吧，对于国家这种「口号」，不能光看他怎么说，还要看他拿多少钱出来。深圳是不是要腾飞，还需要排队，前面至少还有一个雄安呢。 联邦快递在华包裹包含枪支 中国福建省福州市公安局晋安分局官方微博周日称，该局近期接到报警，福建某运动用品公司收到由美国联邦快递公司(FDX.N)承运的一美国客户寄出的快递包裹，内有枪支。 晋安分局并称，当前福州警方已将枪支暂扣，并开展立案调查。 新华社此前报导，中国国家有关部门依法对联邦快递（中国）有限公司未按名址投递快件一案实施调查发现，联邦快递关于将涉华为公司快件转至美国系“误操作”的说法与事实不符，另发现联邦快递(FedEx)(FDX.N)涉嫌滞留逾百件涉华为公司进境快件。 香港问题后续 818集会：香港人在民阵的号召下再次上街，他们以行动表达目前没有退场的空间。与此同时，香港基本法委员会前副主席梁爱诗说，即便出动驻港军队，也不意味着&quot;一国两制&quot;的完结。 德国也发生香港和内地支持者对立：为响应香港的示威活动，居住柏林的香港人星期六下午（8月17日）于勃兰登堡门前举行了&quot;反送中&quot;集会，有数百人参与。同一天，柏林、汉堡和科隆都有内地青年举行&quot;爱国爱港&quot;示威活动。 推特和脸书封禁了一批有中国官方背景的账户，随后Youtube也跟进删除了一批账户（210个）。谷歌称这些频道是有针对性的“协调影响行动” 。 国泰航空英籍CEO何杲（Rupert Hogg）辞职: 这个在王孟源在八方论坛上就预测了。同日辞职还有担任顾客及商务总裁的卢家培。 8月20日英驻港总领馆香港雇员在深圳被拘, 随后加拿大驻港总领事馆暂停其雇员前往中国内地。周六此名雇员被释放回到香港。 香港几家银行星期四分别在当地报纸刊登广告，称反对社会暴力行为，呼吁社会各界努力维护香港的国际金融中心地位。 八方论坛采访王孟源的报道，值得一看： 王孟源：【香港】對八月12日八方論壇訪問視頻的補充 负利率贷款 本周有两条新闻，大家可能没注意。 第一条是丹麦发放全世界第一笔负利率贷款，利率是-0.5%。银行借你一万元，一年后你还9950元。 据说原因是，银行没有足够的贷款业务，为了减少存款，已经向企业存款收费了。既然存款可以收费，那么贷款负利率也能赚钱。 第二条是德国政府正在出售负利率的债券。你买一万元国债，若干年后，政府还你9000多元。还真的有人买，据说动机是，以后的负利率会更大，所以这种债券还有升值可能。 这两条新闻说明了什么？就是一点，欧洲的钱非常多，但是投资机会很少，钱没有去处。所以，移民到欧洲好不好？生活环境是很好，但可能也很苦闷，因为看不到发展机会。 目前，全世界都是资本过剩。国内的利率已经在下跌，肯定还会不断下跌，投资机会也会越来越稀缺。 这告诉我们两点启示。一是钱存在银行，长期肯定不会增值；二是融资将会越来越容易，创业项目根本不担心融不到钱。 亚马逊森林大火 巴西国家空间研究所（INPE）表示，该国1月至8月期间发生了近7万3千多起森林火灾。相较起来，2018年前8个月只有3万9759起。该研究所数据也显示，火灾主要集中在亚马逊附近的几个州。本月早些时候，巴西面积最大的亚马逊州宣布进入紧急状态。自8月15日以来，巴西各地又发生了9500多起森林火灾，主要集中在亚马逊盆地。 欧盟的数据，20日生物质燃烧气溶胶的图像。 针对快速蔓延的亚马逊野火，巴西总统博索纳罗(Jair Bolsonaro)周四(8月23日)强烈回应国际上对他的批评。他说，有迹象显示，这次亚马逊大火灾的始作俑者可能是一些非政府组织，原因是政府撤回了这些组织的资金。他也指责国际上许多批评他的领导人试图“干涉主权”。 不过，在另外的脸书广播节目中，博索纳罗也称，当地农民可能参与纵火。 亚马逊雨林大火十天的事情是真的吗？会对地球产生什么影响？ BBC中文：亚马逊雨林：创纪录大火源于天灾还是人祸 其他新闻 腾讯NextStudio在科隆游戏展公布游戏《重生边缘:SYNCED: Off-Planet》 阿根廷大选初选，股市、汇率、债券崩盘: 据阿根廷新大陆周刊报道，当地时间8月11日近3300万选民参加了初选投票，占选民总数的75%。投票统计结果显示，“全民阵线”费尔南德斯组合得票率47.37%，而“变革联盟”的马克里组合得票率为32.23%。当晚22点30分，马克里宣布在初选中落败。马克里的意外落败给阿根廷的金融市场带来了巨大震动，阿根廷比索对美元汇率狂泻25%，主要股指暴跌38%，阿根廷在美股上市企业集体暴跌，其中EDN跌59.3%、LomaNegra跌57.3%、BBVA银行跌55.85%。 迪士尼和索尼谈崩，漫威不再参与蜘蛛侠电影 8月19日 土耳其和俄罗斯在叙利亚激烈交火：土军在努曼以北确认遭遇俄军空袭，有伤亡，土耳其宣称绝不放弃莫莱克阵地，正在一直向包围圈里运送增援部队，土耳其从杜虎儿方向的Tuqan抽调守军增援汉谢洪，北京时间1600第三批土耳其援军进入叙利亚境内，开始南下。 上周的新闻，但是今天才看到：8月15日 俄A321撞鸟双发失效迫降玉米地: 俄罗斯乌拉尔航空由莫斯科茹科夫斯基国际机场飞往克里米亚地区辛菲罗波尔的U6178次航班，起飞后不久紧急迫降在机场外的玉米地内，机上234人全部生还，有10人需送往医院治疗。 特朗普想买格陵兰岛 克什米尔冲突激化，巴基斯坦告上海牙国际法庭 美国财政部制裁三名中国人，指控其非法交易芬太尼: 芬太尼是一种成瘾性的类鸦片合成药物，从中国大量流入美国。控制芬太尼的流动也是中美贸易谈判的一部分。三周前美国总统特朗普指责中国方面食言，没有阻止这种使人成瘾的类鸦片合成药物大量流入美国。 Steam中国正式定名为&quot;蒸汽平台&quot; 《哪吒之魔童降世》票房超越《复联4》跻身中国内地票房榜前三 这周是不是开了G7？这个G7已经几乎没有存在感了。 文章与资源 八方论坛: 美籍华人史东做的访谈节目。我听过好几期了，质量非常高，每期节目就少数一两个话题做深入讨论。史东本人是抗战英雄独臂飞将军石邦藩的幼子。 vnstat: 网络流量统计工具，非常好用 言论 習近平之所以要修憲取消任期限制，原因在於他不放心在中國實力超越美國霸主的這個渡河過程中途換馬，尤其是内部改革反對者眾，如果只有十年的固定任期，必然會有普遍的以拖待變心態。取消任期限制能消弭陽奉陰違的消極態度，倒不是他真想要做終身總統。我個人的猜測是有超過一半的可能，他會在2027年卸任。如果真是如此，那麽習近平很可能也不放心把統一這樣重要的工作留給下任，假使外部的時機也成熟了，他只需要有合適的導火綫就能出手。 --- 王孟源的博客 在一次制订美国宪法的会议上，有位议员说：“在宪法里要规定一条：常规部队任何时候都不得超过5000人。华盛顿平静地说：“这位先生的建议的确很好。但我认为还要加上一条：侵略美国的外国军队，任何时候都不得超过3000人。”]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ 中的字符串分割]]></title>
    <url>%2Fposts%2F38198%2F</url>
    <content type="text"><![CDATA[原文地址 自己用STL实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;vector&gt;#include &lt;string&gt;#include &lt;iostream&gt;using namespace std;vector&lt;string&gt; split(const string &amp;s, const string &amp;seperator)&#123; vector&lt;string&gt; result; typedef string::size_type string_size; string_size i = 0; while(i != s.size())&#123; //找到字符串中首个不等于分隔符的字母； int flag = 0; while(i != s.size() &amp;&amp; flag == 0)&#123; flag = 1; for(string_size x = 0; x &lt; seperator.size(); ++x) if(s[i] == seperator[x])&#123; ++i; flag = 0; break; &#125; &#125; //找到又一个分隔符，将两个分隔符之间的字符串取出； flag = 0; string_size j = i; while(j != s.size() &amp;&amp; flag == 0)&#123; for(string_size x = 0; x &lt; seperator.size(); ++x) if(s[j] == seperator[x])&#123; flag = 1; break; &#125; if(flag == 0) ++j; &#125; if(i != j)&#123; result.push_back(s.substr(i, j-i)); i = j; &#125; &#125; return result;&#125;int main()&#123; string s = "a,b*c*d,e"; vector&lt;string&gt; v = split(s, ",*"); //可按多个字符来分隔; for(vector&lt;string&gt;::size_type i = 0; i != v.size(); ++i) cout &lt;&lt; v[i] &lt;&lt; " "; cout &lt;&lt; endl; //输出: a b c d&#125; 更加简洁的版本如下： 1234567891011121314void SplitString(const std::string&amp; s, std::vector&lt;std::string&gt;&amp; v, const std::string&amp; c)&#123; std::string::size_type pos1, pos2; pos2 = s.find(c); pos1 = 0; while(std::string::npos != pos2) &#123; v.push_back(s.substr(pos1, pos2-pos1)); pos1 = pos2 + c.size(); pos2 = s.find(c, pos1); &#125; if(pos1 != s.length()) v.push_back(s.substr(pos1));&#125; 用C语言中的strtok 函数来进行分割 12345678910111213141516#include &lt;string.h&gt;#include &lt;stdio.h&gt;int main()&#123; char s[] = "a,b*c,d"; const char *sep = ",*"; //可按多个字符来分割 char *p; p = strtok(s, sep); while(p)&#123; printf("%s ", p); p = strtok(NULL, sep); &#125; printf("\n"); return 0;&#125;//输出: a b c d 使用boost库中的split函数 boost库有很多方法来实现split，也包含了一个split函数，可以直接使用，非常实用而且强大，但是得自己下载boost库。使用代码如下 123456789101112131415161718192021222324252627282930313233343536#include &lt;boost/algorithm/string.hpp&gt;#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;vector&gt;using namespace std;using namespace boost;void print( vector &lt;string&gt; &amp; v )&#123; for (size_t n = 0; n &lt; v.size(); n++) cout &lt;&lt; "\"" &lt;&lt; v[ n ] &lt;&lt; "\"\n"; cout &lt;&lt; endl;&#125;int main()&#123; string s = "a,b, c ,,e,f,"; vector &lt;string&gt; fields; cout &lt;&lt; "Original = \"" &lt;&lt; s &lt;&lt; "\"\n\n"; cout &lt;&lt; "Split on \',\' only\n"; split( fields, s, is_any_of( "," ) ); print( fields ); cout &lt;&lt; "Split on \" ,\"\n"; split( fields, s, is_any_of( " ," ) ); print( fields ); cout &lt;&lt; "Split on \" ,\" and elide delimiters\n"; split( fields, s, is_any_of( " ," ), token_compress_on ); print( fields ); return 0;&#125; 更多阅读 How to split a string in C Split a string C++ 的 string 为什么不提供 split 函数？]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-8]]></title>
    <url>%2Fposts%2F60301%2F</url>
    <content type="text"><![CDATA[新闻 热点·环球网记者付国豪在香港机场被拘禁 一时之间，舆论哗然，这个问题既然登上了知乎热榜第一，也足见官方态度。之前也有另外一名大陆男子徐锦炀被打，其身份确实是大陆的公安。不过被打的也太惨了。 还有一个问题必须说明：切不要以为香港的事情全由香港人来管，中央一点都不管，就万事大吉了。这是不行的，这种想法不实际，中央确实是不干预特别行政区的具体事务的，也不需要干预。但是，特别行政区是不是也会发生危害国家根本利益的事情呢？难道就不会出现吗？那个时候，北京过问不过问？难道香港就不会出现损害香港根本利益的事情？能够设想香港就没有干扰，没有破坏力量吗？我看没有这种自我安慰的根据。如果中央把什么权力都放弃了，就可能会出现一些混乱，损害香港的利益。所以,保持中央的某些权力，对香港有利无害。 大家可以冷静地想想，香港有时候会不会出现非北京出头就不能解决的问题呢？过去香港遇到问题总还有个英国出头嘛！总有一些事情没有中央出头你们是难以解决的。中央的政策是不损害香港的利益，也希望香港不会出现损害国家利益和香港利益的事情。要是有呢？所以请诸位考虑，基本法要照顾到这些方面。有些事情，比如一九九七年后香港有人骂中国共产党，骂中国，我们还是允许他骂，但是如果变成行动，要把香港变成一个在“民主”的幌子下反对大陆的基地，怎么办？那就非干预不行。干预首先是香港行政机构要干预，并不一定要大陆的驻军出动。只有发生动乱、大动乱驻军才会出动。但是总得干预嘛! --《邓小平文选》第三卷，一九八七年四月十六日，会见香港特别行政区基本法起草委员会委员时的讲话 更多香港的消息如下： 香港机管局获法庭禁制令禁止干扰机场正常 客运大楼实施进出管制。 中国拒绝了两艘美国海军军舰未来几周访问香港的请求。 香港記者協會對於近日兩宗內地傳媒記者拍攝示威者時受阻表示遺憾，並譴責暴力對待記者的行為 中通社记者遭香港激进示威者围攻，被逼删除照片 特朗普称中国应“人道地”对待香港 然后才能达成贸易协议: 美国总统特朗普周三表示，中国希望达成贸易协议，但其应该首先“人道地”对待香港。这显然把贸易协议与和平解决香港示威问题关联起来了。 周四，香港机场恢复正常运作: 香港机场管理局表示，香港国际机场周四航班恢复正常运作；而昨日航班升降按照重新编配后的计划进行，全日共处理超过1,000班航班，运作畅顺。 武警在深圳集结 2019 年 8 月 16 日香港多家报纸头版，登出李嘉诚「反对暴力」的宣言 有视频资料显示武警已经进入香港 热点·特朗普决定推迟对部分中国商品加征关税 美国总统特朗普决定推迟对部分中国商品加征关税，无意中承认在与中国正在进行的这场贸易争端中，美国不再掌握主动权。 美国贸易代表办公室周三宣布，将于9月1日对来自中国的每年价值3,000亿美元的进口产品征收10%的关税，但对于部分商品的关税推迟到12月15日生效。 推迟加征关税的产品包括手机、笔记本电脑和服装，估计约占3,000亿美元待加征关税商品的一半左右，主要是消费类商品。 特朗普告诉记者，决定推迟对部分中国商品征收关税，是为了防止美国消费者在圣诞假期购物季之前面临价格上涨。 说好的关税由中国买单呢？ 翎客航天自主研发的可回收试验火箭成功回收 2019 年 8 月 11 日，早上10点半，翎客航天自主研发的新一代可回收试验火箭(RLV-T5)，在青海省冷湖火箭试验基地进行第三次发射以及成功回收。 如何看待 8 月 10 日翎客航天自主研发的可回收试验火箭成功回收？这波操作什么水平? 超强台风「利奇马」 中国新闻网周日报导，据浙江省报灾系统最新统计，截至11日13时30分，超强台风“利奇马”已致浙江535.8万余人受灾，因灾32人遇难，16人失联。 报导称，目前浙江已紧急转移安置120.2万人。农作物受灾面积18.5万公顷，绝收约2.3万公顷，因灾倒损房屋3.6万间，直接经济损失157.5亿余元人民币。 中国气象局网站新闻称，今年第9号台风“利奇马”已于10日20时在浙江省湖州市南浔境内由强热带风暴级减弱为热带风暴级。“利奇马”将继续北上影响黄淮、华北，给这些地区带来强降水。 上海迪士尼的负面新闻 最近上海迪士尼遭遇负面新闻二连击啊，包括 上海迪士尼禁止自带饮食被大学生告了: “禁止携带食物入园”、“入园需翻包检查”等规定一直饱受争议。今年年初，华东政法大三学生小王因携带零食被园方工作人员翻包阻拦。小王查询发现，美国和法国的3处迪士尼并没有禁止消费者携带食物进园，而中国和日本的迪士尼乐园却禁止。上海迪士尼相关规定目的是提高园内餐饮业的创收，侵害了消费者的合法权益。 上海迪士尼台风天气首次闭园且不予退票 美国亿万富翁爱泼斯坦狱中死亡 杰弗里·爱德华·爱泼斯坦（英语：Jeffrey Edward Epstein，1953年1月20日－2019年8月10日），美国投资家、科研慈善事业赞助者，在册性罪犯。 据NBC报道，涉嫌与未成年人性交易被起诉的美国富翁爱泼斯坦在狱中自杀身亡。 7月初，爱泼斯坦被逮捕，纽约检察官对其提出两项指控：性交易与共谋性交易。他被指性侵多名未成年女性，并为权贵提供性交易，曾与克林顿、安德鲁王子、特朗普等人交好。在爱泼斯坦被捕后，包括维密老板、美国前劳工部长多位名人被卷入此事，特朗普也因二人当年关系受到质疑，但他称已经十余年未与爱泼斯坦讲话。 美国富翁爱泼斯坦在狱中死亡有什么黑幕？ 美国亿万富翁爱泼斯坦狱中死亡 初步推断死因是自杀 「港澳单列」事件 最近众多奢侈品牌都发生了在T恤上单独将香港或者台湾列成国家而早到大陆网民声讨的事件。这些品牌包括范思哲、蔻驰、雅诗兰黛、亚瑟士等。 这些品牌的国内代言艺人纷纷表示与其品牌借阅。率先表态的是杨幂旗下的嘉行工作室。 后续亦有刘雯，易烊千玺，关晓彤、许魏洲和任嘉伦等也纷纷表态。这些品牌后来陆续发布道歉声明： 有公众号文章称此问题是因为这些品牌使用了ISO-3166-2标准导致的。 印度撤回克什米尔的自治区地位 印度政府突然宣布废除克什米尔自治地位。这一消息不仅引发地方紧张局势升温，同时也令印巴关系急剧恶化。继巴基斯坦外长紧急访华之后，印度外长苏杰生也于本周日到访北京。 本周，中国外交部举行的新闻例会上，有记者问到&quot;印度政府宣布成立'拉达克中央直辖区'，其中涉及中印边界西段领土。中方对此有何评论？&quot;外交部新闻发言人华春莹回答说：&quot;中方一直反对印方将中印边界西段的中方领土划入印行政管辖范围。这一立场是坚定、一贯的，从无任何改变。&quot;她说：&quot;近日印方以单方面修改国内法律的形式，继续损害中方的领土主权，这一做法不可接受，也不会产生任何效力。我们敦促印方在边界问题上谨言慎行，严格遵守双方达成的相关协定，避免采取导致边界问题进一步复杂化的举动。&quot; 在香港不断闹的现在，这条新闻真的有意思 更多相关新闻 外交圈人士：中国提议安理会审议克什米尔问题 北京劳斯莱斯堵占医院应急通道 据网友爆料，8 月 14 日上午，一女子驾驶京 A 牌劳斯莱斯在北京妇产医院东院区疑似因排队问题与保安发生争执，并堵住救护通道。民警到达后，女子依然不愿挪车。 目前微博上的视频删除的差不多了，估计有点背景，但是下面这个回答说的比较有道理： 我看是自我审查闹得，毕竟各网站负责删帖的人也是老百姓，他们并不知道犯这种事本身就说明富贵不到哪儿去。要知道真正有背景、有钱的人根本不可能犯这事。首先，来之前肯定打过招呼，有人接待。其次，医院本来就有机动车位留着。最后，有司机。而且，包子有肉不在褶上，公车没豪车的。像这种自己开车，停车都没地方停，科室主任一级都没人下来迎接的人，能富贵到哪儿去呦。。。医院停车难不是一天两天了，我看还是同病相怜吧。 -- 回答地址 以及，玩弄典故： 其一：是大热天的正午，一个农妇做事做得正苦，忽而叹道：‘皇后娘娘真不知道多么快活。这时还不是在床上睡午觉，醒过来的时候，就叫道：拿个柿饼来！’ 其二：曹孟德在马上一声大叫，关二弟听我说你且慢逃。 在许都我待你哪点儿不好，顿顿饭包饺子又炸油条。你曹大嫂亲自下厨烧锅燎灶，大冷天只忙得热汗不消。白面馍夹腊肉你吃腻了，又给你蒸一锅马齿菜包。搬蒜臼还把蒜汁捣，萝卜丝拌香油调了一瓢。 其三：东宫娘娘烙大饼，西宫娘娘剥大葱。 器官黑市 其他新闻 Tumblr换东家了，但是买主不是Pornhub: 没了小黄图的汤不热身价暴跌。8月13日，博客平台 Tumblr 以 300万美元卖给了 WordPress 的母公司。2013年，雅虎收购 Tumblr 花了11亿美元，这意味着仅仅六年时间，Tumblr 变得一钱不值。 外教在华被拘捕数量激增: 前几周的舆论风向转变带来的影响是普遍的。 美债利率倒挂： 美国国债收益率曲线在12年来首次暂时逆转。美国股市因此大幅下挫。这一消息也表现出投资者对经济衰退的担忧。 北京将允许外资提供VPN服务 8月15日，滴滴回应或被下架登上热搜 传言阿里巴巴收购网易考拉业务: 8月15日晚间，据财新报道，从接近交易的人士处得知，阿里巴巴收购网易考拉的交易已确定，交易对价20亿美元，阿里巴巴将以全现金方式支付，未来双方还将开展其他形式的合作和交易。截止发稿，网易和阿里巴巴集团对此交易的回复均为不予置评。 网易市值超过百度: 周三美国大跌道指跌幅为3.05%报25479.42点；纳指跌3.02%报7773.94点，标普500指数跌2.93%报2840.60点。网易股价逆势上涨0.49%，市值超过百度。 文章与资源 创始人应该给自己发多少工资？ TCP 与 UDP 的区别 微信Mac版的最新更新支持设置代理了 破解滑块认证: Puppeteer Linux内核代码检索网站: bootlin Zerotier: 开源的VPN方案 Plex: 流媒体服务框架 知乎上一篇折腾家用NAS的回答 Webmin：Unix/Linux网页管理工具 Emby: 类似Plex的流媒体框架 言论 做得快不仅可以让你在单位时间内完成更多的工作，而且 因为你工作得很快，所以你会觉得成本低，从而倾向于做更多。 -- 出处。 为了让我们的生活更轻松，最好只有一小部分代码库处理状态，其他代码都是无状态和纯的。实际上，这就是前端的 Redux 库取得巨大成功的主要原因。 20世纪50年代，建造月球基地是一项工程和技术挑战。 今天，它基本上是一个政治和经济挑战，难点是说服足够多的人，花时间和精力去做这件事是值得的。 「羁旅侨士，重帑在外，上间谋计，下与民事者，可亡也。」- 韩非子 · 亡徵》公元前250年（解析） 典故 郑伯克段于鄢 初，郑武公娶于申，曰武姜，生庄公及共叔段。庄公寤生，惊姜氏，故名曰寤生，遂恶之。爱共叔段，欲立之。亟请于武公，公弗许。 及庄公即位，为之请制。公曰：“制，岩邑也，虢叔死焉。佗邑唯命。”请京，使居之，谓之京城大叔。祭仲曰：“都城过百雉，国之害也。先王之制：大都不过参国之一，中五之一，小九之一。今京不度，非制也，君将不堪。”公曰：“姜氏欲之，焉辟害？”对曰：“姜氏何厌之有！不如早为之所，无使滋蔓，蔓难图也。蔓草犹不可除，况君之宠弟乎！”公曰：“多行不义，必自毙，子姑待之。” 既而大叔命西鄙北鄙贰于己。公子吕曰：“国不堪贰，君将若之何？欲与大叔，臣请事之；若弗与，则请除之。无生民心。”公曰：“无庸，将自及。”大叔又收贰以为己邑，至于廪延。子封曰：“可矣，厚将得众。”公曰：“不义，不暱，厚将崩。” 大叔完聚，缮甲兵，具卒乘，将袭郑。夫人将启之。公闻其期，曰：“可矣！”命子封帅车二百乘以伐京。京叛大叔段，段入于鄢，公伐诸鄢。五月辛丑，大叔出奔共。 书曰：“郑伯克段于鄢。”段不弟，故不言弟；如二君，故曰克；称郑伯，讥失教也；谓之郑志。不言出奔，难之也。 遂寘姜氏于城颍，而誓之曰：“不及黄泉，无相见也。”既而悔之。颍考叔为颍谷封人，闻之，有献于公，公赐之食，食舍肉。公问之，对曰：“小人有母，皆尝小人之食矣，未尝君之羹，请以遗之。”公曰：“尔有母遗，繄我独无！”颍考叔曰：“敢问何谓也？”公语之故，且告之悔。对曰：“君何患焉？若阙地及泉，隧而相见，其谁曰不然？”公从之。公入而赋：“大隧之中，其乐也融融！”姜出而赋：“大隧之外，其乐也洩洩。”遂为母子如初。 君子曰：“颍考叔，纯孝也，爱其母，施及庄公。《诗》曰：‘孝子不匮，永锡尔类。’其是之谓乎。]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[温和穆斯林和极端穆斯林旧事]]></title>
    <url>%2Fposts%2F51087%2F</url>
    <content type="text"><![CDATA[前几年的时候的，国内回汉矛盾加上国际上以ISIS为代表的穆斯林恐怖主义的泛滥，导致针对穆斯林的批评大涨。于是很多穆斯林出来辩称说那些极端恐怖分子只是少数，并不能代表所有的穆斯林。但是喊打喊杀的极端穆斯林所抢占出来的生活空间，确实在相当大的程度上被所有其他的温和穆斯林所享有了。这种模式我们称之为极端穆斯林和温和穆斯林模式。即一部分人暴力充当打手，另一部分则态度模棱两可，向外界宣称自己的群体本质并不坏，但是回过头来享受打手产生的红利。 说这些是不是因为要重温就是，而是最近的香港人也开始反映出这个样子。国内很多公众号的文章在讨论香港的问题的时候，总是要强调说虽然游行队伍里面混有港独分子，但是他们并不能代表大多数的香港人，大多数香港人是不支持港独的。这看着很有迷惑性，也符合大家对于香港同胞的期待。不过，这其实就是典型的极端穆斯林和温和穆斯林套路。几十万人的队伍，如果大家都是反对港独的，那么这些占少数的港独分子怎么可能在队伍中来去自如，还打着港英旗帜，喊港独口号呢？事实上，如果有一个藏独在天通苑地铁站打出雪山狮子旗，喊西藏独立，他能站着出地铁站吗？游行队伍里能混杂港独分子，而未传出示威者与港独分子剧烈冲突的消息，这本是就是不正常。在一个有关香港讨论的电报群里，我也曾经质问过群里参与讨论的香港人是有参与发送中的各个小团体，工会之类的负责人出来谴责港独的，他们一直没有正面回答这个问题。 另一方面，这些激进港独在前面冲锋陷阵，确实是为整个游行队伍带来了巨大的利益的。这些激进派通常敢于出手，能制造激烈的警民冲突，甚至挺身冲击立法会，中联办，在舆论上有巨大的影响力。可能几千个港独分子的行动就能比几十万，甚至上百万的普通示威者产生更大的影响力。自然，参与反送中的重要人物们就不会愿意公开谴责港独，与港独分子划清界限，要是他们和港独做切割了，那谁来给他们充当打手冲锋陷阵呢？不仅如此，在反对派对港府提出的五大诉求中，就有包含一条要求赦免所有被捕的示威者，更是让各个港独分子更加越战越勇，毫无后顾之忧了。 因此，我们可以看出，这些参与游行香港人，绝大多数都是所谓的“温和穆斯林”。他们未必直接支持港独，但也不会是旗帜鲜明地反港独的。这些中间派是不是港独呢？我们叫他们温和的港独吧。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly-7]]></title>
    <url>%2Fposts%2F61389%2F</url>
    <content type="text"><![CDATA[新闻 香港周一全港大罢工 一上午，香港大罢工及示威活动令这座城市陷入瘫痪。上百航班停飞，数百万人早间通勤受阻。午后1时左右，港铁全线服务陆续恢复，全港七区下午将举行罢工集会。香港特首林郑月娥警告称，抗议者将香港“推向不归路”。她指部分极端分子令事件变质，“挑战国家主权，危害一国两制”，并表示当局将“决心维护法治”。 这轮香港抗议潮流是因为反对《逃犯条例》，不过《逃犯条例》之前已经被港府宣布寿终正寝，现在的抗议，又是为了什么呢？我看了这么多关于今天（5日）罢工的新闻，就是没看明白抗议者的诉求具体是什么？无非就是港独嘛，能不能「理直气壮」一点。 此前，美国总统特朗普在被采访时就香港的表态也是：「有人说，事情发展到一定程度时，他们会阻止。但这是香港和中国（内地）之间的事，因为香港是中国的一部分。必须由他们自己处理这个问题，不需要建议。」 话说为什么港府一直拒绝采用撤回修订草案？我的看法是，港府采用的「寿终正寝」的书法，意指推行这一条例受到阻力中中途停止，是一个比较中性的说法。反对派一直要求港府说「撤回」这个词，其实是让港府承认当初提出修改《逃犯条例》本身是错误的，是让港府认错。既然认错了，就要有人负责，进而可以剑指特首林郑月娥，要求其下台。 本来，让港府认错也未尝不可，对中央政府来说，让特首下台，也不是不行。2003年9月5日，时任特首就在推动《国家安全（立法条文）条例草案》引发大规模抗议之后，宣布撤回《国家安全（立法条文）条例草案》，并于2005年3月10日宣布以身体不适为由向中央呈辞。3月12日，国务院接纳其辞职。 有意思的是，十几年前的《国家安全（立法条文）条例草案》始末，和本次的《逃犯条例》颇有类似之处。当时，反对派举行的游行中，参与者也是大多穿黑色衣服。不过这次的抗议活动，港独色彩太浓厚，甚至有直接挑战国家主权的行为（如冲击中联办，扔国旗下海等），此时港府认错，如同向港独势力认错，届时，恐怕港独势力得寸进尺。另一方面，今日中国内部氛围和十几年前不可同日而语，中央政府，也有去正面刚废青的底气。 香港正面临回归以来最严峻的局面 中央高度关注--港澳办主任 香港要“止暴制乱、恢复秩序” 中央坚定不移支持林郑月娥--港澳办（更新版）: “反对派逼迫香港特首林郑月娥辞职的企图注定不能得逞，中央对特首的支持是坚定不移、毫不动摇的。”港澳办发言人在发布会上表示。 香港问题中的一些谣言和误解 香港之夏：誤讀與真相 一个讨论相关问题的Telegram群https://t.me/hkchats 温和穆斯林和极端穆斯林旧事 8月9日中国民航局向香港国泰航空发出重大航空安全风险警示: 指其近期在多起事件中暴露出的安全风险及隐患，要求对参与和支持非法游行示威等的人员立即停止其执飞内地航班。 人民币汇率破7 8月5日，美元兑人民币汇率骤然波动，离岸、在岸价格均小幅升破 “7”这一整数关口。不过，这次汇率调整是中国央行放任的结果。中国央行不再像以前死死守着美元兑人民币“七元”的心理关口，而是放手让人民币自由贬值。 有意思的是，这次因为中国央行没有干预汇率，而导致同一天美国将中国列为汇率操纵国了。 暂停大陆影片和人员参加2019年金马影展 华为发布鸿蒙系统 8月9日，万众瞩目的华为开发者大会如期举行，华为消费者业务CEO余承东重磅发布鸿蒙操作系统(HarmonyOS)！据悉，鸿蒙是全世界第一个基于微内核的全场景分布式操作系统！非常巧的是，今天恰巧是华为消费者业务 CEO 余承东 50岁生日。 鸿蒙的四大技术特性： 分布式架构首次用于终端OS，实现跨终端无缝协同体验 确定时延引擎和高性能IPC技术实现系统天生流畅 基于微内核架构重塑终端设备可信安全 通过统一IDE支撑一次开发，多端部署，实现跨终端生态共享 更多信息参考: 如何看待华为 2019 年 8 月 9 日正式发布的 HarmonyOS 鸿蒙系统？ 华为鸿蒙问世！余承东喊话安卓：全球首款微内核全场景分布式OS开源！ 中国民航局向香港国泰航空发出重大航空安全风险警示 中国民航局周五向香港国泰航空发出重大航空安全风险警示，指其近期在多起事件中暴露出的安全风险及隐患，要求对参与和支持非法游行示威等的人员立即停止其执飞内地航班。 民航局网站发文称，近期，香港国泰航空先后发生飞行人员参与暴力冲击被控暴动罪却未被停止飞行活动，以及恶意泄露航班旅客信息等事件，存在严重威胁航空安全的隐患，造成了恶劣的社会影响，增加了香港至内地的输入性航空安全风险。 为维护航空运输秩序，切实保护旅客安全，防范航空活动对空中、地面和水面第三人发生损害，民航局在安全风险警示中，对香港国泰航空明确提出三点要求。 一是自2019年8月10日零时起，对所有参与和支持非法游行示威、暴力冲击活动，以及有过过激行为的人员，立即停止其执飞内地航班或执行与内地航空运输活动相关的一切职务活动。 二是自2019年8月11日零时起，向其在内地的运行合格审定机构报送所有飞往内地和飞越内地领空的机组人员身份信息，未经审核通过，不予接收该航班。 三是于2019年8月15日零时前，向其在内地的运行合格审定机构报送公司加强内部管控、提升飞行安全和安保水平的措施方案。 民航局将视香港国泰航空对上述警示要求的执行情况，依法依规监管处置。同日，民航局责成民航中南地区管理局行政约见了国泰航空。 国泰航空最近似乎比较跳，涉及的事件包括： 7月26日国泰航空空服协会煽动在香港机场航站楼内进行示威活动 国泰航空副机长廖颂贤参与了7·28上环的暴动并被逮捕，但获得保释后国泰航空依然让他执飞航班 国泰航空的员工泄露了前往成都参加世界警察和消防员运动会的香港警队代表队成员的航班信息。 其他新闻 美国二十四小时内发生两起大规模枪击案 习近平表弟被澳大利亚当局调查: 习近平表弟齐明为澳大利亚公民，今日卷入一起针对有组织犯罪，洗钱，以及滥用移民政策的调查中。 苹果信用卡8月6日起正式向用户开放注册 8月8日上午5:28，台湾东部海域发生里氏6级地震。 北极圈发生大火 鹿晗的《上海堡垒》扑街：流量明星的时代是真的要过去了。 华为向伟创力索赔4亿，伟创力则表示仍希望能合作。伟创力是华为的代工厂商，其在美国政府将华为纳入「实体清单」之后，伟创力扣留了其在珠海工场的华为价值约4亿的物资，包括生产设备，原材料和半成品。 超强台风「利奇马」登陆江浙沪 资源 autosetup: 一个 Bash 脚本，可以在 Debian 系的发行版上，让用户通过图形界面，一次性选择所要安装的应用程序，主要用于新系统的装机 哈利路亚英文输入法 folium: 一个Python的地图可视化库 马前卒的睡前消息出视频版了，每周二更新。]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lychee使用中的头疼bug]]></title>
    <url>%2Fposts%2F3710%2F</url>
    <content type="text"><![CDATA[之前我使用了Lychee来搭建我博客的图床。使用Lychee中可能会出现一些头疼的问题。 无法上传图片 一般出现这种问题时，查看Nginx的error.log目录可以发现类似下面形式的错误： 12019/07/31 05:47:44 [crit] 306#306: *149 open() &quot;/var/tmp/nginx/client_body/0000000002&quot; failed (13: Permission denied), client: 172.18.0.1, server: _, request: &quot;POST /php/index.php HTTP/1.0&quot;, host: &quot;imgs.codewoody.com&quot;, referrer: &quot;https://imgs.codewoody.com/&quot; 显示权限错误。导致做个错误的原因是对于/var/tmp/nginx/client_body这一目录，nginx缺乏写入的权限。解决方法如下： 首先进入容器内部： 12docker exec -it lychee_lychee_1 bashcd /var/tmp/nginx/client_body 这一目录的所有者是abc用户，所在的group也是是abc。我们可以将nginx用户添加到这个组，并且为目录/var/tmp/nginx/client_body赋予组写入权限： 12adduser nginx abcchmod g+w . 问题解决。 /var/lib/nginx/client_body/0000000011 failed (13: Permission denied) with node.js Fixing nginx client body temp permission denied errors]]></content>
      <categories>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Debug</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly - 6]]></title>
    <url>%2Fposts%2F41391%2F</url>
    <content type="text"><![CDATA[新闻 美国对华追加3000亿美元关税 2019年7月30日，上海，中美经贸磋商举行前外滩附近悬挂的中美两国国旗。 美国总统特朗普周四表示，将从9月1日起对剩余的3,000亿美元从中国进口商品加征10%的关税，之前中美两国谈判代表的最新一轮磋商未能取得进展。 市场反应激烈。布兰特原油暴挫7.2%，创三年多来最大单日跌幅，美股由升转跌，美国公债价格上扬。 《RUSSELL专栏》美中或许自认握有贸易战制胜牌 双方都是虚张声势 华为公布上半年业绩 销售收入 4013 亿人民币，同比增长 23.2%，净利润率 8.7%，这是华为 2019 年上半年交出的成绩单，也是该公司首次公开发布半年业绩。 在 7 月 30 日的发布会上，华为公司董事长梁华介绍了各项具体业务的表现：上半年智能手机出货量达到 1.18 亿部，同比增长 24%，平板电脑同比增长 10%，PC 增长 3 倍，可穿戴设备增长 2 倍，云服务生态服务用户超过 5 亿，消费者业务收入为 2208 亿元。此外，华为已经拿到了 50 份商用 5G 合同，全球基站发货超过 15 万个。 大陆居民赴台个人游试点暂停 7月31日下午2点左右，文化和旅游部网站正式发布海峡两岸旅游交流协会关于暂停大陆居民赴台个人游试点的公告。公告称：鉴于当前两岸关系，决定自2019年8月1日起暂停47个城市大陆居民赴台个人游试点。 之前两岸关系紧张的时候一般是会限制团体游客，但是自2011年自由行开通依赖，大陆方面还从未就自由行进行限制。另外，这次禁令事发非常突然，7月31日发布，第二天就开始施行。当天上午十点多才陆续有小道消息。 目前关于为何会推出本轮禁令的目的尚不明确，原因众说纷纭。有人说是提前就台湾大选增加压力，也有说是因为台湾方面牵涉香港反送中过多，被大陆方面警告。 中国国台办称民进党严重破坏大陆居民赴台个人游试点的基础和条件 美联储降息25个基点 这是美联储十年以来首次降息。 《程实专栏》美联储降息：预期之内 规则之外 河北工程大学留学生威胁女生被遣返 河北工程大学一校园自媒体账号“矿院日报社”发布消息称，7月31日18时许，其收到同学投稿，称自己遭到一名巴基斯坦留学生骚扰（舌吻和袭胸）。当日20时，被侵犯女学生到开元派出所报警，民警根据女生描述将犯罪嫌疑人带到派出所接受调查。该账号运营人员告诉新京报记者，相关校领导连夜处理此事，目前正在等待处理结果。 目前，警方依据《中华人民共和国治安处罚法》第四十四条之规定，对陶文做出行政拘留十日处罚，并遣送出境。 「天机芯」登上Nature封面 好消息！清华大学开发出全球首款异构融合类脑芯片，登上了最新一期 Nature 封面！研究团队还展示了由该芯片驱动的 “无人驾驶自行车” ，这项研究由清华大学类脑计算研究中心施路平教授带队，历时 7 年，终于修成正果！ 曼谷发生爆炸 泰国一名高级警官称，周五（8月2日）有六枚炸弹分别在曼谷三个地点爆炸，一个爆炸装置启动前被排除。 警官Kamtorn Uicharoen告诉路透，三枚炸弹在瓦塔纳路(Chaeng Wattana)的政府大楼爆炸，一枚没有爆炸。另外两枚在琼龙西(Chong Nonsi)地区爆炸。 “这两个地区的炸弹是由定时器引爆的自制炸弹，”他说。 一枚“乒乓炸弹”在Suan Luang地区爆炸。(完) 其他新闻简讯 小红书疑似被各大安卓应用商店下架：七麦数据的下架监控显示小红书APP在华为手机、魅族手机均被下架。目前，除小米商城和IOS系统的Apple store外，包括华为、OPPO、魅族、一加等在内的品牌商手机均无法下载小红书应用。 京阿尼的一台服务器火灾中逃过一劫，原画数据已经恢复 暴风冯鑫涉嫌犯罪被采取强制措施: 没错，就是暴风影音的那个暴风集团。 字节跳动入局全网搜索引擎:7月31日晚，字节跳动在其“字节跳动招聘”公众号上正式对外为“字节跳动搜索部门”招聘员工。 思科中国区裁员 英特尔证书发布11款十代酷睿处理器 美国正式退出中导条约 资源 macOS动态照片工具]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机动车占用非机动车道停车/行驶的法律问题]]></title>
    <url>%2Fposts%2F4757%2F</url>
    <content type="text"><![CDATA[《中华人民共和国道路交通安全法》第七十条 第七十条 驾驶自行车、电动自行车、三轮车在路段上横过机动车道，应当下车推行，有人行横道或者行人过街设施的，应当从人行横道或者行人过街设施通过;没有人行横道、没有行人过街设施或者不便使用行人过街设施的，在确认安全后直行通过。 因非机动车道被占用无法在本车道内行驶的非机动车，可以在受阻的路段借用相邻的机动车道行驶，并在驶过被占用路段后迅速驶回非机动车道。机动车遇此情况应当减速让行。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>法律</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python: 获取经验分布(EDF)的方法]]></title>
    <url>%2Fposts%2F42351%2F</url>
    <content type="text"><![CDATA[什么是经验分布EDF 经验分布函数（Empirical Distribution Function）是统计学中一个与样本的经验测度有关的分布函数。该累积分布函数是在所有\(n\)个数据点上都跳跃\(1/n\)的阶跃函数。对于被测随机变量的某个可能取值而言，EDF在这个取值处的值为所有观测样本中小于或者等于该取值的比例。 经验分布函数是对用于生成样本的累积分布函数的估计。根据Glivenko-Cantelli定理可以证明，经验分布函数以概率1收敛至这一累积分布函数。 令\((x_1, \dots, x_n)\)为独立同分布的的实随机变量，它们共同的累积分布函数为\(F(t)\)。于是，经验分布函数可以定义为 \[\begin{equation} \hat{F}_{n}(t)=\frac{\text { number of elements in the sample } \leq t}{n}=\frac{1}{n} \sum_{i=1}^{n} \mathbf{1}_{x_{i} \leq t} \end{equation}\] 其中\(\mathbf{1}_{A}\) 为事件 \(A\) 的指示函数。 \(\mathbf{1}_{x_i \leq t}\)为\(p=F(t)\)是伯努利随机变量。因而\(n \hat{F}_n(t)\)则是期望为\(nF(t)\)，方差为\(nF(t)(1 - F(t))\)的二项随机变量。这意味着\(\hat{F}_n(t)\)是\(F_(t)\)的无偏估计。 蓝线为经验分布函数，黑色长条表示相应的样本，灰线则是用于生成样本的累积分布函数。 Python实现 从上面的定义来看，其实自己实现一个EDF函数也并不困难。这里有一个例子：Calculate ECDF in Python。statsmodels这个库里面提供了现成的ECDF函数。 这里函数名字是ECDF，其中C表示累积分布。 1234567&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; from statsmodels.distributions.empirical_distribution import ECDF&gt;&gt;&gt;&gt;&gt;&gt; ecdf = ECDF([3, 3, 1, 4])&gt;&gt;&gt;&gt;&gt;&gt; ecdf([3, 55, 0.5, 1.5])array([ 0.75, 1. , 0. , 0.25])]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>数学</tag>
        <tag>python</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly - 5]]></title>
    <url>%2Fposts%2F41199%2F</url>
    <content type="text"><![CDATA[最近香港那边热闹的狠，有意思的是，江泽民怒斥香港记者的视频又出现在了的油管的推荐表里。不过现在点进去看里面的评论，大多都是支持江的言论了，感慨自己当时确实是naive，不理解蛤哈的深意。现在回过头看今年来的海内外乱象，才知道他确实说的对。 其实也就是十余年的光景，世事已不可同日而语矣。 新闻 鲍里斯·约翰逊成为新一任英国🇬🇧首相 23日，鲍里斯.约翰逊(被称为英国版特朗普)正式当选执政党保守党党魁，在获得女王批准之后将接替特雷莎·梅出任英国首相。鲍里斯票数：92,153 杰里米·亨特票数：46,656 。参与投票的是16万保守党党员。 现年55岁的约翰逊是“脱欧派”领袖，曾多次强调英国必须在10月31日的新期限前完成“脱欧”，哪怕这样做的代价是“无协议脱欧”，他表示将与欧盟就新“脱欧”协议谈判。约翰逊是英国政坛鲜见的特色人物：反正统、破规矩、不修篇幅，且花絮不断。一头杂乱金发也是出名的个性标志。他也因2008年北京奥运会闭幕式上代表伦敦去接奥运会旗和火种而为中国民众熟知。 英国新首相约翰逊：一名记者出身的领导人 应对硬脱欧，鲍里斯酿大招！减免买房印花税，让英国做税收天堂 华为招聘应届博士年薪超过200万 都是博士，怎么差距那么大呢？？？ 复旦女博士劈腿丑闻 7月24日至25日，网传这样一条消息：复旦大学附属中山医院医生陆某为了和复旦大学女博士李某在一起而抛家弃子。但在他给李某买房、买车、买包包、送珠宝以及给她署名和刊发几篇高质量医学文章后，李某却和他分手。 经受不住打击，陆某选择了服30颗安眠药自杀。也有消息称，陆某自杀后，被抢救过来。 复旦女博士“劈腿”致男医生自杀？官方回应 5 篇 SCI 相当于什么？需要花费多少时间和精力？ 「送」SCI 在学术圈是什么操作？是学术不端吗？ 学术圈五大蛊王吃瓜汇总 刘强东案149页警方档案公布 具体内容包括： 女学生的友人8月30日拨打911报案的三起电话录音文本文件； 刘强东去年9月10日接受警方问话的电话录音，时长约30分钟； 刘强东进入女方公寓及在明大商学院内遭逮捕的照片； 女学生与当事人在中国的好友、男友等人的短信记录； 案发当日餐馆、公寓的高清版监控录像共9段，高清照片21张； 警方的全案报告，包括4份警方出警和问询记录报告，最长的一篇多达149页。 刘强东涉嫌性侵案的149页的档案中，内容包括对刘强东及其他当事人和目击者访问的笔录，在警察报告的当事人访谈部分写道，女方在警方的询问下，表示刘强东将自己压在身下、举起了自己的双腿，进行了性器官插入，在这个过程中刘强东还询问女方是否处于安全期，性行为持续了约两分钟。 另外，关于女方在整个案件过程中的态度和言辞转变也在这些材料中披露出来，包括女方曾经想经常承认其性行为是自愿的，但后面又多次改变了自己的论述。 运营商放弃对菏泽怡海花园进行网络覆盖的努力 郭文贵被指为中国间谍 最近中国流亡美国的富商郭文贵被与其有商业争端的公司指为中国的间谍。两年前在海外媒体爆料出名的郭文贵此前也承认他曾经为中国国家安全部门做事。 据《华尔街日报》报道，郭文贵和Strategic Vision公司自2018年1月就开始产生商业纠纷。法庭文件显示，当时郭文贵同该公司签订了一份900万美元的雇佣合同。郭文贵已经向该公司支付了100万美元，用于启动调查。 Strategic Vision提供文件向法庭显示，郭文贵要求该公司搜集一些人的财务，社交媒体和旅行方面的资料。郭文贵提供的名单是一些与中共高层有联系的中国人。 法庭文件显示，这家调查公司还专门招募了前情报人员或执法人员进行上述调查。但他们查明，郭文贵名单上前15个人的名字已经被美国政府列为“记录受保护”的人，即不得对外透露这些人士的资料。 因此他们认为这些人士的移民状况被当局列为“不能对外公开”，可能意味着这些是帮助美国政府的人。他们认为郭文贵并不打算利用他们的调查结果对付中共，而且郭文贵也并非如他所说的那样是异见者。 其他新闻汇总 7月19日，天宫二号返回地球，受控坠毁，残害落入南太平洋 阿联酋在沙漠中建设了世界最大的太阳能电厂，一共安装了320万块太阳能板，可以为9万人供电。峰值发电量是1180兆瓦，相比之下，美国最大的太阳能厂是569兆瓦。 6月27日，美国参议院通过法律要求减少电网自动化程度，不得完全采用计算机控制。目的是防止电网遭受黑客攻击时，出现大规模停电。 欧盟新规要求新生产的电动汽车必须配备噪声发生器。 7月23日，美国《财富》杂志每年发布的“财富世界500强”榜单。小米上榜并在全球排名468位，是“互联网服务与零售”分类中的7家公司之一，成为史上最年轻的世界500强公司（除了合并产生的公司外）。同时，雷军成将给所有在职同事和核心外包服务团队攻击20538人赠予1000股小米股票。 7月23日，支付宝微博宣布给予第一个愿意相信淘宝并使用担保交易的人焦振中授予「支付宝终身尊贵奖」 京都动画知名监督武本康弘确认离世，这会给京都动画会带来怎样的损失？ 世界五百强中国首(129)次超越美国(121)。 河北「爱心妈妈」案主犯李丽娟获刑20年。知乎讨论 资源 A Guide to SVG Animations (SMIL) 图说设计模式：软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，实际上，在软件生存期的每一 个阶段都存在着一些被认同的模式。 今天发现在mac使用使用搜狗输入法的时候按下Cmd + Shift + E可以切换到一个专门的英文输入模式，这个模式下输入英文会有补全以及英文释义 中国互联网报告2019: 南华早报出品。 一场将Safa和Marwa分开的战斗 Overleaf提供的Latex教程 SQL风格指南 言论 地位游戏一定是零和的，有赢家就肯定有输家。 比如，我当了部门主管，你就不能当了。所以，地位游戏很凶险，必须时刻提防其他玩家的冷枪。财富游戏不是零和的，我盖了一幢漂亮的房子，不影响你也盖一幢。我赚钱了，不影响其他人的利益，很可能还让其他人过得更好。比如，乔布斯创办了苹果公司，其他人就有了更好的电子产品可用。-- 阮一峰]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网贷的法律问题相关]]></title>
    <url>%2Fposts%2F59410%2F</url>
    <content type="text"><![CDATA[最近家里有亲人沾染上了网贷的事情，果然是在身边印证了当前年轻人普遍负债的现象。不过这些网贷，既然这么容易就能借到，必然也是找各种擦边球的手段，来提高事实利率来对冲贸然接待的高风险。不然坏账这么多，肯定遭不住。 国家法律规定中，用24%和36%两个关键数字，划定了民间借贷的利率和利息问题。根据2015年9月1日起开始施行的《最高人民法院关于审理民间借贷案件适用法律若干问题的规定》司法解释： 借贷双方约定的利率未超过年利率24%，出借人请求借款人按照约定的利率支付利息的，人民法院应予支持。借贷双方约定的利率超过年利率36%，超过部分的利息约定无效。借款人请求出借人返还已支付的超过年利率36%部分的利息的，人民法院应予支持。 不过，大部分的网贷平台，到目前也不太可能蠢到把事实上奇高的利息写到纸面上。相反，这些高额利息会被包装成手续费，服务费之类的名目。例如，A从某网贷借出20000，服务费的扣除5000，还款24%的利息，事实上的年化利息达到了65%。 不过，2017年12月1日，联网金融风险专项整治工作领导小组办公室、P2P网贷风险专项整治工作领导小组办公室印发并实施了《关于规范整顿“现金贷”业务的通知》。其中第四部分，「持续推进，完善P2P网络借贷信息中介机构业务管理 」，第一条规定： 不得撮合或变相撮合不符合法律有关利率规定的借贷业务；禁止从借贷本金中先行扣除利息、手续费、管理费、保证金以及设定高额逾期利息、滞纳金、罚息等。 另，2018年中国互金会发布《关于P2P网络借贷机构自律检查第一阶段会员自查自纠工作相关问题的说明》，其中要求： 会员机构不得撮合或变相撮合不符合法律有关利率规定的借贷业务，禁止从借贷本金中先行扣除利息、手续费、管理费、保证金以及设定高额逾期利息、滞纳金、罚息等,相关逾期罚息也要计算在综合资金成本中。 随着法规的完善，这些网贷平台自然也是道高一尺，魔高一丈。很多网贷在收取服务费的时候，就是要求借款人将服务费转到私人账户。这样，将来有了纠纷，借款人也就无法举证说明这笔费用是平台收取的服务费了。今年春天爆出来的西安奔驰车主维权中： 在曝光的谈话录音里，车主提到自己本来可以全款购买，但4S店称奔驰金融贷款利息低，用各种方法“引诱”自己使用奔驰金融。此后，她付完首付款后，在不知情的情况下被开通奔驰金融，还被迫交纳服务费1.5万，对方还要求把钱转至一个私人账户，并且没有发票。交完这笔服务费，才接着为她办理后续业务。车主表示，并不理解自己交纳的这笔服务费，到底获得了什么服务。 西安这个案子全国瞩目，自然，当事人被收取的金融服务费被退还了。其他的普通人遇到同样的时间，自然是不会有这个待遇。而且就目前来说，如果服务费之类的内容已经打到了私人账户上，确实没有任何有效的手段能够追回，或是让法院认可这笔交易是交纳服务费了，举证非常困难。但是如果网贷平台的环节设置中存在漏洞，例如在平台APP上曾经显示服务费的项目，也许可以有一定的转机。 不过，还有一个潜在的「文字」问题：上面涉及到的条款并非禁止收取高额服务费，而是禁止从本金中预先扣除这些费用，即变相的砍头息。如果已经全部拿到纸面的本金，再以其他渠道收取服务费，则是不违法的。 更多阅读： 网贷乱象再调查：到手8万8要还近16万，变相砍头息用户维权难 网贷真能逼死人 别让高利贷钻了创新空子 秘而不宣的网贷砍头息：借款5000元 手续费就得1200]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>杂谈</tag>
        <tag>法律</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql安装过程中没有提示设置密码的问题]]></title>
    <url>%2Fposts%2F9986%2F</url>
    <content type="text"><![CDATA[原贴地址 问题描述：在使用sudo apt-get install -y mysql-server的过程中没有提示设置root账户的密码，按照教程执行mysql_secure_installation时，无法以root账户登录进入MySQL。 解决方法如下： 1234567$ sudo mysqld_safe --skip-grant-tables&amp;$ sudo mysql --user=root mysqlmysql&gt; update user set authentication_string=PASSWORD('new-password') where user='root';mysql&gt; flush privileges;mysql&gt; quitsudo service mysql restart 注意将new-password替换为你想要设置的密码。注意，我们仍然需要使用sudo才能运行mysql_secure_installation，否则会出现Error: Access denied for user 'root'@'localhost'的错误。]]></content>
      <categories>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>翻译</tag>
        <tag>linux</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sqlite: window function]]></title>
    <url>%2Fposts%2F35361%2F</url>
    <content type="text"><![CDATA[Sqlite Window Function 简介 之前我们接触的SQL命令的结果，一般都是逐行的。即SQL命令返回的结果，都是来自原表的同一行。Window Function则赋予了我们在SQL 结果中，获得来自一组行的数据的能力。这样的组被称为「Window」。 Window Function最鲜明的特征是OVER关键字。如果 以一个函数有OVER子句，则此函数为Window Function。反之，如果这个函数不带OVER子句，则这个函数是简单的聚合(Aggregate)函数或者标量(Scalar)函数。Window Function在函数和OVER子句之间，还可能带有FILTER子句。 Window Function的语法结构如下： Window function invocation 不同于普通的函数，Window Function不能使用Distinct子句。另外，Window Function只能出现在查询结果中和ORDER BY后面。 Window Function可以划归为的两种不同类型：聚合窗函数(Aggregate Window Function)和内建窗函数(Built-in Window Function)。每个聚合窗函数也可以当做普通的聚合函数使用（只需要舍去OVER和FILTER子句即可）。内建窗函数，也可以通过合适地配置OVER子句从而具备聚合函数的功能。在应用中，我们也可以通过sqlite3_create_window_function()接口（C）来自定义新的聚合窗函数。 下面是使用内建的row_number()窗函数的例子： 123456789101112CREATE TABLE t0(x INTEGER PRIMARY KEY, y TEXT);INSERT INTO t0 VALUES (1, 'aaa'), (2, 'ccc'), (3, 'bbb');-- The following SELECT statement returns:---- x | y | row_number------------------------- 1 | aaa | 1-- 2 | ccc | 3-- 3 | bbb | 2--SELECT x, y, row_number() OVER (ORDER BY y) AS row_number FROM t0 ORDER BY x; row_number()窗函数函数可以每行添加一个行号。行号的顺序通过OVER后面的ORDER BY y确定。注意，OVER后面的ORDER BY y不会影响SELECT返回的查询结果的顺序。在上面的例子中，SELECT返回的顺序还是根据x来排序的。比对上面的「Window function invocation」图，OVER后的子句体称为window-defn。我们还可以在SELECT语句中通过WINDOW子句来声明named window-defn 12345SELECT x, y, row_number() OVER win1, rank() OVER win2FROM t0WINDOW win1 AS (ORDER BY y RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), win2 AS (PARTITION BY y ORDER BY x)ORDER BY x; WINDOW子句，应当位于HAVING之后，ORDER BY之前。 聚合窗函数 在这个部分我们假设所有的数据库的结构都是： 12345678CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);INSERT INTO t1 VALUES (1, 'A', 'one' ), (2, 'B', 'two' ), (3, 'C', 'three'), (4, 'D', 'one' ), (5, 'E', 'two' ), (6, 'F', 'three'), (7, 'G', 'one' ); 聚合窗函数类似于一般的聚合函数，添加聚合窗函数不会改变查询返回的行数。相反，聚合窗函数会将于「Window frame」中运行的得到的聚合结果添加到原本的每一行结果中。例如 123456789101112131415-- The following SELECT statement returns:---- a | b | group_concat--------------------------- 1 | A | A.B-- 2 | B | A.B.C-- 3 | C | B.C.D-- 4 | D | C.D.E-- 5 | E | D.E.F-- 6 | F | E.F.G-- 7 | G | F.G--SELECT a, b, group_concat(b, '.') OVER ( ORDER BY a ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS group_concat FROM t1; 在上面的例子中，我们要做的将本行与上下两行的结果拼起来，而上下行关系，是根据OVER子句中的ORDER BY来确定的。 PARTITION BY 子句 为了计算窗函数，查询的返回结果通过PARTITION BY子句分割成多个「partitions」。PARTITION BY类似于GROUP BY，可以将查询结果中，于PARTITION BY后的window-defn所指定列拥有相通值的行组成组。若没有PARTITION BY子句，则所有的查询结果组成一个单一的组。窗函数在各个「partition」上运行。 例如 12345678910111213141516-- The following SELECT statement returns:-- -- c | a | b | group_concat----------------------------------- one | 1 | A | A.D.G -- one | 4 | D | D.G -- one | 7 | G | G -- three | 3 | C | C.F -- three | 6 | F | F -- two | 2 | B | B.E -- two | 5 | E | E -- SELECT c, a, b, group_concat(b, '.') OVER ( PARTITION BY c ORDER BY a RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS group_concatFROM t1 ORDER BY c, a; 在上面的查询例子中，PARTITION BY c将查询结果划分成了三个Partition。第一个Parition的c = one，第二个Partition的c = three，第三个Partition的c = two。注意，Partiion的划分，及其后续的的ORDER BY的排序，和最终查询结果的顺序是没有关系的。上面的查询的例子的输出也可能是： 12345678910111213141516-- The following SELECT statement returns:-- -- c | a | b | group_concat----------------------------------- one | 1 | A | A.D.G -- two | 2 | B | B.E -- three | 3 | C | C.F -- one | 4 | D | D.G -- two | 5 | E | E -- three | 6 | F | F -- one | 7 | G | G --SELECT c, a, b, group_concat(b, '.') OVER ( PARTITION BY c ORDER BY a RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS group_concatFROM t1 ORDER BY a; Frame Specification Frame Specification是OVER子句的一个部分，规定了聚合窗函数读取的输出行的范围。frame-spec在window-defn中的位置如下: frame-spec包含如下四个部分： Frame type: either ROWS, RANGE or GROUPS; A starting frame boundary; An ending frame broundary; An EXCLUDE clause; 细节的语法结构如下： 其中ending frame boundary可以被省略，此时默认情况下ending frame boundary默认为 CURRENT ROW。 如果frame type为RANGE或者GROUPS，那么在ORDER BY所指定的列上具有相同值的行被归为一组「peers」。如果没有ORDER BY，那么所有的行归于一组Peer。注意Peers总是属于相同的frame。 默认的frame-spec为 1RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE NO OTHERS 默认的配置的意思是，聚合窗函数从Partition的开头开始读取直到当前的行的所有Peers。同Peer组的行对从窗函数获取的返回值是相通的（其Window frame是相同的）。例如 123456789101112131415-- The following SELECT statement returns:-- -- a | b | c | group_concat------------------------------- 1 | A | one | A.D.G -- 2 | B | two | A.D.G.C.F.B.E-- 3 | C | three | A.D.G.C.F -- 4 | D | one | A.D.G -- 5 | E | two | A.D.G.C.F.B.E-- 6 | F | three | A.D.G.C.F -- 7 | G | one | A.D.G -- SELECT a, b, c, group_concat(b, '.') OVER (ORDER BY c) AS group_concat FROM t1 ORDER BY a; 关于Frame的更多细节，参考出处原文（页面顶部） FILTER 子句 如果出现了FILTER子句，那么只有expr指定的行才会被包含到window frame中。这里的FILTER不会过滤查询结果，只是决定了窗函数作用的范围。 内建窗函数 内建窗函数也具备和聚合窗函数同样的PARTITION BY子句功能：每个行都从属于一个Partition，而每个Partition被单独地进行处理。ORDER BY的作用，我们在下面进行阐述。有一些特定的窗函数（rank(), dense_rank, percent_rank and ntile()）采用了peer group的概念（rows within the same partition that have the same values for all ORDER BY expressions）。此时frame-spec中frame type(ROWS, GROUPS, RANGE) 就不起作用了。 SQLite支持如下11个内建的窗函数 row_number(): 当前行位于Partition中的位置（行号），从1开始排列，顺序由窗函数的ORDER BY决定。 rank(): 每一个Group（同一个Partition内在ORDER BY指定的列上具有相同值的行归于一个Group）中的第一个peer（行）的row_number值。rank获取的序号可能是不连续的。 dense_rank(): 相比于rank(), 压缩了序号的间隙，得到的序号总是连续的。从1开始排。 percent_rank(): 将rank转化成百分比，等于(rank - 1)/(partition-rows - 1)。如果只有一个组，返回0. cume_dist(): 累积分布，等于row-number/partition-rows。 ntile(N): 参数N为整数，这个函数将partition划分为尽可能均匀的N份，并为每份分配一个1到N的整数，顺序由ORDER BY决定（若无ORDER BY，则为乱序）。如果需要的话，较大的组会先出现。 lag(expr) lag(expr, offset) lag(expr, offset, default): 返回对上一行执行expr得到的结果。如果没有上一行，返回空。可以通过offset修改偏移量（如设为2，返回往上数第二行执行结果，必须为费复制）。offset为0表示对当前行执行。default表示目标行不存在时需要返回的默认值。 lead(expr) lead(expr, offset) lead(expr, offset, default): 和lag函数类似，不过是向下获取。 first_value(expr): 返回第一个行的数据 last_value(expr): 返回最后一行的数据 nth_value(expr, N): 返回第N行的数据。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>翻译</tag>
        <tag>转载</tag>
        <tag>sqlite</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly - 4]]></title>
    <url>%2Fposts%2F24622%2F</url>
    <content type="text"><![CDATA[「长安十二时辰」还是非常好看的，安利一下！ 新闻 广州越秀区 -「轻微醉驾从宽免刑」 虽然不是这周发生的事情，不过进来看到了，深感滑稽，放在这里 从今年 4 月 1 日起，越秀区检察院在轻微醉驾案件中引入社会公益服务考察项目。轻微醉驾者在满足一定的申请条件后，通过在一个月内参加 40 个小时的社会公益服务，来获得不起诉决定的机会。截至目前，已有48名轻微醉驾者申请该公益服务考察项目，其中已有 46 名获得罪轻不起诉决定。 朝阳区爆发诺如病毒感染 7月15日凌晨，北京朝阳官方微博通报，7月12日晚，接到群众反映朝阳区豆各庄地区部分小区居民出现腹泻情况，截止到7月14日20时，调查了到医院就诊的49人、自述有症状未就诊的105人，并采集了肛拭子和便标本105件，已检测79件，其中，52件检测出诺如病毒。从调查情况判断，存在诺如病毒感染情况。专家提示，诺如病毒感染是一种常见消化道传染病，传染性强，常见症状为腹泻、呕吐。 张扣扣被执行死刑 7月17日，张扣扣被执行死刑。2018年除夕，张扣扣为母报仇，刺死了上坟返途中的邻居王家大儿子和三儿子，随后到王家将王家父亲刺死。2019年1月8日，汉中中院一审当庭判处张扣扣死刑，其当庭上诉。4月11日，陕西高院驳回上诉维持死刑判决。 京阿尼第一工作室火灾 堪称二次元911。这个工作室是京都动画最重要的工作室，这里集中了大多数制作部门。监督、演出、作监、原画、中割、上色、CG、美术、摄影……我们通常看到的京都动画内部的视频/照片，也都是在这里拍摄的。 预计死亡人数会超过10人，数十人受伤。本次火灾为人为纵火。 章莹颖案被告获无期判决 历时两天、12名陪审团成员用8小时27分的时间完成了讨论，没有就判处章莹颖案凶手克里斯滕森死刑获得统一意见。克里斯滕森被判处终身监禁。根据美国联邦法律，他将老死狱中，不得假释。 被告人克里斯滕森 Brendt Christensen 魅族李楠辞职 这几天，关于李楠辞职创业的消息传得沸沸扬扬。电子烟，机械键盘，这位曾经魅族的功臣，活跃的知乎答主，会选择哪个方向作为职业的下一站，是很多“煤油”关心的问题。而早在今年 5 月，李楠就已经从魅族主要人员中移除。 针对此事，黄章昨晚再次在魅族论坛语出惊人：“能挣钱的就是人才，不断亏钱的就是费财”。虽然没有指名道姓，但结合最近的传言，很难不让人产生联想。 资源 SQLite Window Function：在最近的仿真研究中使用了Window function，是之前比较少接触到的，但是功能非常强大！ 言论 从本质上来说，父母选择怎样的育儿方式，不取决于父母小时候的经历，而取决于父母对孩子现在与未来的预测。 -- 科学松鼠会 经济学研究的是人们如何做出选择。社会学研究的是人们其实并无多少选择余地。 - 经济学家James Duesenberry]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git:恢复一个已经在提交中被删除的文件]]></title>
    <url>%2Fposts%2F10723%2F</url>
    <content type="text"><![CDATA[这里要研究的问题是，如果我们在之前的某一个提交中删除了一个文件，如何使用git将此文件恢复出来。 首先我们要做的是找到当时删除的这个文件对应的提交。比较简便的方法是使用一些图形化的Git软件，可以直接浏览找到对应的提交。这些软件包括SourceTree，Github Desktop等。纯命令行的环境可以使用如下的命令： 1git log --diff-filter=D --summary 在找到对应的提交后，使用如下命令： 1git checkout $commit~1 path/to/file.ext 注意一下，这里的$commit指的是对应的commit id。后面的~n是git的一种语法，表明追溯某个提交的第n个祖先。详情可以参考Git Treeishes Considered Awesome。那这里的意思就是检出删除这个文件的提交的上一个提交（届时那个文件还存在）中的对应文件。 参考链接]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时空错乱的名称二则]]></title>
    <url>%2Fposts%2F53783%2F</url>
    <content type="text"><![CDATA[荷兰豆 荷兰豆在中国叫荷兰豆，在荷兰叫中国豆，类似的情况还有： 梅毒：意大利人叫那不勒斯症状、法国病、高卢病，法国人叫意大利病，俄罗斯叫波兰人病，日耳曼人叫西班牙病，阿拉伯人叫基督徒病，大溪地叫英国人病，日本叫唐疮，琉球疮，葡萄牙病，有意思的是，中国人称之为广东疮。这基本上反映了梅毒的传染过程。 过山车：在法国、意大利、葡萄牙、西班牙等一些地方，“过山车”的字面意思是“俄罗斯山峰”，这是因为过山车的原型是俄罗斯的雪橇，从雪山上滑下来。在法国，当时就叫Les Montagnes Russes（俄罗斯山峰）。重点来了，在俄罗斯，过山车叫&quot;американские горки&quot; [Amerikanskie gorki]，字面意思就是“美国山峰”。 手抓饼在大陆叫台湾手抓饼，在台湾叫天津葱抓饼。 关于荷兰豆在荷兰被称为中国豆的考证： (1)刚开始豌豆Pisum sativum是只吃豆的。 (2)然后在中国南部接近东南亚的地区，人们培育了一种可以吃豆荚的豌豆，我们叫荷兰豆，英语里叫Chinese snow pea, 学名为Pisum sativum var. saccharatum,豌豆苗是它的嫩芽 (3)再然后出现了另一种吃豆荚的豌豆snap pea, Pisum sativum var. macrocarpon,我们叫甜豆，豆荚更鼓。 最后美国人把2和3杂交了一下，就出现了sweet snap pea(4),适合完全生吃。所有这些生吃都无毒. 为什么要叫荷兰豆？应该是荷兰蔬菜育种比较强,所以被联系在了一起，跟荷兰人无关. 资料来源：Plant Breeding Reviews, Volume 21，Chapter 3. Origin, History, and Genetic Improvement of the Snap Pea (Pisum sativum L.) 下面是我搜索到的例子： Cooking Snow Peas 中情局十条诫令 “十条诫令” : 这是此谣言在中国大陆地区使用的名称。其他名称包括：十条戒令，十大戒令。虽然此谣言在全世界各地都有不同版本和名称，最流行的二个国家是中国大陆和巴西。而且还会有不同的中文版本。其首次在1940年代的美国出现。现在在全世界不同国家继续流传，是有不同作者，不同版本的都会传奇。所以根本就没有原始文件的存在。美国的名称是“共产党革命章程”。巴西和西班牙则说是列宁写的十诫。中国大陆则谣传是美国中央情报局1951年的绝密文件。随着时间推移，谣言的内容也会不断增加。在中国大陆地区，现在已经出现美国中情局的十二条诫令，又加入了新的第一条，和最后第十二条。 下面三张图，是我今天听说的北京四中的给高中生做的讲座的内容： 美国版本为 Communist Rules for Revolution 谣传的内容是协约国在德国Dusseldorf发现了Communist Rules for Revolution，翻译过来就是共产党革命章程的。其内容的精神，无外乎就是说应该通过腐化国家的年轻一代以策动革命。 从Google Books最早可以搜到提到“共产主义者革命章程”的书籍是出版于1964年。美国纽约时报，署名Donald Janson在1970年7月10日，就发表文章，指出这些内容是假的。根据该篇文章报导，1946年2月，最早的版本发表在‘新世界新闻’。 包括瑞士，法国，巴西，西班牙等地流传的版本，可以进一步看维基 我这边最早接触到这一「谣言」的渠道，是中国大陆军方人士制作的长达90分钟的宣传片《较量无声》中引用了“十条诫令”，并称是前美国中央情报总监艾伦·杜勒斯提出来颠覆中国共产政权的。 结语 我们的对外宣传部门挤满了没有脑子的翻译机器，但我毫无办法。-- 长者]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>宗教</tag>
        <tag>智商税</tag>
        <tag>政治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly - 3]]></title>
    <url>%2Fposts%2F41583%2F</url>
    <content type="text"><![CDATA[新闻 三体一在日本大卖 日亚·三体 见证三体逐渐成长为一个全球性的超级IP！ 北京市发布三个房屋出租合同范本 7月8日，北京发布《北京市住房租赁合同》《北京市房屋出租经纪服务合同》《北京市房屋承租经纪服务合同》三个合同示范文本。示范文本均在说明中强调，不得改变房屋内部结构分割出租、出租房屋人均居住面积不得低于5平方米、每个房间居住的人数不得超过2人等有关禁止违法群租的文件规定内容。 此外，租金方面，合同明确规定，未经双方当事人协商一致，出租人不得在租赁期限内单方面提高租金。合同提前解除的，出租人应在合同解除后约定日期内退还已收但尚未发生的租金。承租人应当在合同解除后约定时间内搬离。 《逃犯条例》修订已「寿终正寝」 路透香港7月9日 - 香港特首林郑月娥周二称，社会目前的矛盾、纷争、愤怒等都由《逃犯条例》修例引起，承认有关工作是完全失败，并清晰说明《逃犯条例》修订已经“寿终正寝”，政府愿意聆听社会更广泛民意，平息纷争。 IBM 以 340 亿美元收购Red Hat 根据路透社报道，IBM周二宣布以340亿美元正式收购红帽。这笔交易最初公布于去年十月，当时IBM表示将会以每股190美元的价格，用现金购买红帽的所有股份。 IBM &amp; Red Hat 此次交易也是IBM迄今为止最大规模的一次收购交易，在美国历史上也可以排在前列。撇开AOL和时代华纳的并购不谈，美国科技产业的前两大收购交易分别是2016年戴尔和EMC之间价值670亿美元的并购以及JDS Uniphase在2000年以410亿美元收购光学元件供应商SDL。 按照交易合约，这家开源企业软件制造商将并入IBM的混合云部门，而红帽的首席执行官吉姆·怀特赫斯特（Jim Whitehurst）将加入IBM的高管团队，向IBM的首席执行官罗睿兰（Ginni Rometty）汇报工作。 Red Hat 日本制裁韩国 据日本《产经新闻》6月30日报道，日本政府将从7月4日开始限制对韩国出口部分半导体、OLED材料出口。韩联社称，韩国相关业界高度紧张，认为稍有不慎就会出现严重状况。日本经济产业省已经于7月1日上午，公布了相关决定。 涉及的被限制对韩出口的材料包括「氟聚酰亚胺」，「光刻胶」，以及「高纯度氟化氢」等三个品种。日本在这几个材料上的市场份额占据压倒性的优势。 日本之所以宣布制裁韩国，可能是日本不满韩国无视1965年协议，不断向日本发起「二战」劳工诉讼。不过日本方面否认了这一说法。日本内阁官房长官菅义伟2日向媒体表示，这是出于安全保障考虑而进行的适当的出口管理，并不是围绕“劳工”问题而采取的对抗措施。 3日，据韩联社报道，韩国执政的共同民主党、政府、青瓦台周三就日本限制对韩半导体材料出口的应对方案表示，政府推进对半导体材料、零部件、设备研发每年投入1万亿韩元（约合人民币58.8亿元）的方案，并正在对此进行可行性调查。日本此举也激怒了韩国民众，从3日开始，韩国网络上出现不少鼓励抵制日货的言论。《中央日报》称，被韩国网友点名的日本商品覆盖从知名家电到汽车、化妆品、服装、手表、酒类等数十个种类。不仅如此，韩国网络上还开始出现抵制赴日旅游的号召。韩联社称，韩国政府3日开始向WTO提出申诉，目前韩贸易部已开始审查相关法律文件。 图片来自蒋校长 全世界都在打贸易战 阮一峰的科技爱好者周刊增加就业栏目 阮一峰也是非常有名的中文技术博客博主，我开始写Weekly就是受他的科技爱好者周刊的启发。本周阮一峰想要为他的周刊增加一个《就业栏目》。 向大家报告，我想为周刊增加一个 《就业栏目》 ，每周发布招聘信息。如果你的公司正在招人，欢迎联系我（邮箱：yifeng.ruan@gmail.com）。 软件推荐 LanguageTool 是一款支持中文、英语、德语、日语等 27 种语言的语法与拼写检查工具，拥有网页版、Chrome 和 Firefox 插件，LibreOffice、Google Docs、MS Word、甚至还有 Android、Emacs、Vim、VS Code 等平台插件，服务器端开源。 资源 学习Java以及JavaScript的网站： Java Brains Numpy可视化介绍 表格转化工具，支持markdown, json, html, xml, yaml等数据格式 段子与言论 2017 年初，为了验证亚马逊公司的「无限云」，一名叫 Beaston02 的男子坚持录制了 2000 TB 色情片上传到亚马逊云。半年后，亚马逊停止了无限云服务。-- 来源 马克思的学说在今天的遭遇，正如历史上被压迫阶级在解放斗争中的革命思想家和领袖的学说常有的遭遇一样。当伟大的革命家在世时，压迫阶级总是不断迫害他们，以最恶毒的敌意、最疯狂的仇恨、最放肆的造谣和诽谤对待他们的学说。在他们逝世以后，便试图把他们变为无害的神像，可以说是把他们偶像化，赋予他们的名字某种荣誉，以便“安慰”和愚弄被压迫阶级，同时却阉割革命学说的内容，磨去它的革命锋芒，把它庸俗化。现在资产阶级和工人运动中的机会主义者在对马克思主义作这种“加工”的事情上正一致起来。他们忘记、抹杀和歪曲这个学说的革命方面，革命灵魂。他们把资产阶级可以接受或者觉得资产阶级可以接受的东西放在第一位来加以颂扬。 -- 列宁 发达国家人均预期寿命：美国以冠绝全球，接近18%的医疗GDP占比，人均寿命如图。（出处） 要承认人工智能是作者，事实上也就意味着要在著作权法上创设一种新的独立法律主体，这将遇到极大的法律和伦理障碍，在相当长的一段时间内恐怕都难以实现。 - 人大法学院教授万勇]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Struct in Vector: 进一步讨论]]></title>
    <url>%2Fposts%2F62430%2F</url>
    <content type="text"><![CDATA[之前我们讨论了C++中将结构体放置在std::vector容器内的操作风险。这里我们来进一步讨论如何处理在容器中存储的结构体数据。 前文中提到，如果我们尝试获取容器中的结构体时，我们直接拿到的是该结构体的拷贝，如果要对结构体成员修改，我们需要整体进行两次复制： 12345678910111213141516std::vector&lt;struct A&gt; data;// ...struct A val = data.at (0);val.b = c;data[0] = val;``这种操作显然是不经济。一种『粗暴』的方法是使用`std::vector::data`函数获取底层数据的指针，然后操作这个指针。但是这种方法不太优雅，也不安全。合适的做法是使用引用```cppstd::vector&lt;struct A&gt; data;// ...struct A &amp; val = data[0];val.b = c; 放在遍历的场景中，可以使用如下的形式： 1234std::vector&lt;struct A&gt; data;// ...for (auto&amp; val : data) &#123;...&#125;]]></content>
      <categories>
        <category>编程研究</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CPP: STL map的用法]]></title>
    <url>%2Fposts%2F3626%2F</url>
    <content type="text"><![CDATA[抛开具体的编程语言场景，map是一类非常基本的数据组织形式，其作用是将一个可Hash的值，映射到另一个值，而且一般来讲是一对一的（存在一对多的情况）。map内部使用了红黑树，这棵树具有对数据自动排序的功能，使得对map的检索意义达到非常高的效率。基于键值的查找的复杂度是Log(N)。 这里讲讲C++标准库里面map的用法。 使用map 头文件： 1#include &lt;map&gt; 声明时需要指明键与值的类型： 1std::map&lt;int, string&gt; persons; 数据插入 数据插入有三种方法： 使用insert函数插入pair数据，例如： 123std::map&lt;int, string&gt; students;students.insert (std::pair&lt;int, string&gt; (1, "Student A")); 用insert函数插入value_type的数据，例如： 123std::map&lt;int, string&gt; students;students.insert (std::map&lt;int, string&gt;::value_type (1, "Student A")); 用Subscript方式插入数据，例如： 123std::map&lt;int, string&gt; students;students[1] = "Student A" 上面三种插入方式的区别在于，第三种默认会覆盖已经存在的映射，而前两个不会。前两个插入方式等价，在插入的键已经存在于映射中时，当前的插入语句会被忽略。那么如何知道插入是否成功呢？可以通过insert函数的返回值来判断。 123456789101112std::map&lt;int, string&gt; students;// res为pair&lt;map&lt;int, string&gt;::iterator, bool&gt;乐行auto res = students.insert (pair&lt;int, string&gt; (1, "Student A"));if (res.second == true) &#123; std::cout &lt;&lt; "Insert successfully" &lt;&lt; std::endl; &#125;else &#123; std::cout &lt;&lt; "Insert fail" &lt;&lt; std::endl; &#125; 数据的遍历 使用迭代器： 12345for (auto iter = students.begin (); iter != students.end (); iter ++ ) &#123; // first为key，second为value cout&lt;&lt;iter-&gt;first&lt;&lt;' '&lt;&lt;iter-&gt;second&lt;&lt;endl; &#125; 查找并获取map中的元素 查找是map的核心功能。我们可以使用find函数来进行查找。当找到目标时，返回一个迭代器，否则返回end。 123456789101112std::map&lt;int, string&gt; students;// ...auto iter = students.find (1);if (iter == students.end ()) &#123; std::cout &lt;&lt; "not found " &lt;&lt; std::endl; &#125;else &#123; string studentName = iter.second; &#125; 删除元素 123456789std::map&lt;int, string&gt; students;// ...auto iter = students.find (1);student.erase (iter);student.erase (1);// 这会清空整个mapstudent.erase (students.begin (), students.end ()); Further Reading C++中的STL中map用法详解 std::map::map]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly - 2]]></title>
    <url>%2Fposts%2F60429%2F</url>
    <content type="text"><![CDATA[新闻 Rick and Morty 第四季将会在11月上映 Rick and Morty · Season 4 华为禁令「取消」 6月29日，为期3天（6月27日至29日）的二十国集团领导人第十四次峰会刚刚在日本大阪落下帷幕。29日上午，中、美两国元首举行了约80分钟的会晤，此后两国共同宣布了两大成果：1）中美双方同意在平等和相互尊重的基础上重启经贸磋商。2）美方表示不再对中国出口产品加征新的关税。 在两国元首会谈之后，美国总统特朗普在记者会上表示，同意让美国公司继续销售产品给华为。 特朗普解释称，这些卖给华为的产品都是美国公司制造的，是很复杂很科学的产品，是只有美国拥有技术和在制造的产品。“实际上我们在硅谷做的事情令人难以执行，没有人能和我们竞争，所以我同意 -- 我很容易地就同意允许他们继续出售这些产品”，特朗普说，“我们让他们继续卖给华为。” 据华尔街日报报道，特朗普称将允许美企向华为供货，中国则将开始购买大量美国农产品。他强调了中国大宗采购美国农产品的意愿，将其归为允许向华为出售美国产品和推迟新关税的一大理由。据美国农业部，周五会谈前，中国采购了54.4万吨大豆。？ 美国家经济委员会主席拉里·库德洛在电视采访中更加详细地解释了解禁一事。他表示解禁即将生效，美国商务部可能会考虑“授予一些临时许可证”，让美国公司与华为恢复业务。对于解禁范围，他强调华为仅可以购买“其它国家同样广泛销售的美国芯片产品”，否认这是“特赦”，表示国家安全仍然是最重要的考虑因素，只要不构成国家安全问题，华为可以恢复从美国企业采购产品。 Fuchsia官方开发者网站上线 Fuchsia 是 Google 打造的下一代操作系统，它不基于 Linux 内核，运行方式也和 Android 完全不同，但可以通过相关工具让 Android 应用可以移植到新系统中。近日 Google 也正式上线了 Fuchsia 的 开发者网站，从这个网站中开发者可以了解到 Fuchsia 的系统开发进展及其采用的技术，为后续开发做好准备。 ps: Android的生态其实有点太过恶劣了： 安卓碎片化严重到什么地步？安卓本身有12个版本，如果每个版本有12个厂商，每个厂商有12个手机型号，因此安卓生态至少包含1,728种&quot;版本- 品牌 - 设备&quot;的组合。 大兴机场竣工 大兴机场 时 4 年半，北京大兴国际机场于 6 月 30 日正式竣工，9 月底将投入运营，各家航空公司也陆续公布了在新机场的航线投入计划。 各家航司的转场投运情况如下： 国航系（国航、国货航、深航、山航、昆明航、国航内蒙、北京航、大连航）留守首都机场，但国航在大兴有 10% 航班时刻； 东航系（东航、上航、中联航、东航江苏、东航云南、东航武汉）转场大兴，但东航的京沪快线留守首都机场； 南航系（南航、厦航、河北航、江西航、重庆航、汕头航、珠海航、贵州航、南航河南）转场大兴； 海航、大新华航等留守首都机场； 首都航空转场大兴； 其他国内航司可选择首都机场或大兴机场任一机场运行，但不得两场运行； 允许外航及港澳台地区航空公司自行选择运行机场包括两场运行。 李彦宏演讲被砸场子 只是为了这张图载一下这个新闻： 宏颜获水 7月3日，在2019年百度AI开发者大会上发生突发状况，百度董事长、CEO董事长李彦宏在展示完小度最新功能后，被台下观众泼水。由于事发突然，现场一度陷入沉默。面对这样的突发状态，现场观众集体给李彦宏加油打气，李彦宏也很快调整状态，并调侃道：发展AI的路上就是会遇到这种挫折。 事件现场 北京石景山发生枪战 应该与扫黑行动有关，据说肇事者已经被抓走了。具体情况不明，舆论被管控了。 新城控股董事长王振华涉嫌猥亵女童 犯罪嫌疑人 警情通报 据悉，犯罪行为发生于6月29日下午，地点为大渡河路一家五星级酒店。被猥亵女童事后向在江苏的母亲打电话哭诉，母亲即来沪报警，王某随即被采取强制措施。目前女童已验伤情，阴道有撕裂伤，构成轻伤。 据最新消息，带女童入住酒店的女子周某也已到案。周某49岁，江苏徐州人。据其供述，事发当天，她带了两个女孩入住酒店，一个9岁，一个12岁。两个女孩的母亲为周某朋友。周某谎称带两女孩去上海迪斯尼玩，从江苏带至上海。当天王某对9岁女童实施犯罪，事后给付周某现金1万元。 王振华身家3000亿的帝国 王振华的更多背景资料 软件推荐 Mathpix: 将图片转化成Latex公式，重点是这款软件是免费的！ 文章与言论 Why defensive programming is the best way for robust coding 原生动物是如何演化成后生动物的？ 日常劝退：It's ok to quit your Ph.D，中文:Science「劝退文」：读博压力山大，是时候退学了 读博无疑是一个痛苦的过程。甚至有人说，如今，读博已经变成了“赌博”。面对学业压力，很多博士生选择延期毕业。近日，《科学》杂志发表长文，提供了另一种选择：退学。美国研究生院理事会（Council of Graduate School）公布的数据显示，约1/4的美国科学与工程专业博士生在入学的头3年选择退学。《科学》杂志此次采访了9位博士阶段退学者，并总结了退学的3点理由：对研究失去兴趣，开始追寻其他事业，或是因在学术界的遭遇而心灰意冷。 如何更快地读一本书 呼吸读书法 为什么供给能创造自己的需求呢？实际上，当生产者还没有生产或提供某种新的商品或消费品时，人们不能真正地看到或意识到这种东西带来的用处，因此很难想到对它的实际需求。就像是地铁，为什么10年前没有四通八达的地铁线路，人们也能按部就班地过日子，没有哭着喊着说没有地铁就不能活呢？这是因为当时人们还没有体会过地铁给他们带来的便捷，生活也并不依赖于它，因此并没有对于它有过于迫切的需求。相反，如果换成现在的我们失去了地铁，整个城市或许都会因此而崩溃。 -- 地铁越修越多，交通反而拥挤 经济权力就是权力本身。-- 知乎 - 罗一觉 你问我宇宙大爆炸之前发生的事情，就像问我南极以南是什么地方。 -- 霍金]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo启用Han支持过程中发现的问题]]></title>
    <url>%2Fposts%2F36496%2F</url>
    <content type="text"><![CDATA[Han指的是「汉字标准格式」。 「汉字标准格式」是一个集合了「语意样式标准化」「文字设计」「高级排版功能」等三大概念的网页排版框架，使用Sass及JavaScript构架而成。其专为汉字网页提供的美观而标准化的环境，不仅符合传统阅读习惯、更为萤幕阅读提供了既成标准，得以完整解决现今汉字网页设计的排版需求。 汉字标准格式 总而言之，使用Han这个框架可以让排版更好看。按道理，启用Han应该在NexT主题中的选项即可 1han: true 不过这么设置之后还是不行。原因是启用之后只会引入CSS，而没有引入js渲染，导致一些比较高级的排版效果，如标点调整无法使用。因此，还需要手动调整一下。于themes/next/layout/_layout.swig的body标签底部加入如下内容： 1234567891011121314&lt;script src="https://ethantw.github.io/Han/latest/han.min.js"&gt;&lt;/script&gt; &lt;script&gt; void function()&#123; window.hinst = Han().setRoutine([ 'initCond', 'renderElem', 'renderJiya', 'renderHanging', 'renderHWS', 'correctBasicBD', 'substCombLigaWithPUA' ]).render() &#125;() &lt;/script&gt; 注：使用文档中给的cloudflare CDN地址里面的js文件渲染有问题，会导致标点不可见，使用github.io这个版本提供的文件就没有问题。另外，如果本地的han.min.css有问题，也可以切换成github.io版本。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Debug</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++中将结构体放置在std::vector容器内的操作风险]]></title>
    <url>%2Fposts%2F35148%2F</url>
    <content type="text"><![CDATA[有一组长度不固定的参数需要传输，且参数形式为结构体，那么一个比较简单的方法是将这些参数作为一个std::vector。例如 1void f(std::vector&lt;struct ExampleStruct&gt; data); 由于C++是采用值传递的方式，每次对std::vector进行元素的存取操作时，都会对涉及的结构体进行复制。如果结构体的数量比较多，或者结构体的体积比加大，那么这种方式对于计算和内存资源的浪费就比较大了。 那么，折中的办法是在std::vector中存放指针。例如 1void f(std::vector&lt;struct ExampleStruct *&gt; data); 不过，这就给指针的生命周期管理带来了很大的挑战，而且可能会引入非常多耦合性很强的代码。如果函数是state-less，即只对输入参数进行计算，而不更改其他的状态变量，问题倒不是很严重。反之，就会存在很多比较大的漏洞。 由于局部变量存在作用范围的限制 1234567&#123; struct ExampleStruct a; // ... data.push_back (&amp;a); // ... f (data);&#125; 当离开调用f的函数的作用域时，a就会被释放，后续在其他地方访问data时，对应的指针指向的内存区域已经被释放掉了，对其进行访问会导致错误。使用new来讲结构体创建在堆内存上可以解决这个问题，但是这意味着后续这一数据已经利用完之后，要确保此处申请的内存被恰当地释放掉。随着业务逻辑的复杂化，要准确做到这一点会非常困难，强行实现也会带来很多强耦合的代码，扩大引入bug的风险。 我们剩下的选择，就是使用智能指针std::shared_ptr自动管理堆内存的声明周期。就是形式有点复杂了： 1void f(std::vector&lt;std::share_ptr&lt;struct ExampleStruct&gt;&gt; data);]]></content>
      <categories>
        <category>编程研究</category>
      </categories>
      <tags>
        <tag>Debug</tag>
        <tag>ns3</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何自己搭建一个Time Machine服务器]]></title>
    <url>%2Fposts%2F14680%2F</url>
    <content type="text"><![CDATA[如何在Ubuntu上搭建一个简洁的Time Machine服务器呢？网上找到的教程说的都比较杂，这里整理一个刚刚经过实践检验的方法来供大家参考。目标系统是Ubuntu 16.04 LTS。 1. 安装需要的工具 1sudo apt-get install netatalk avahi-daemon 2. 创建一个用于专门用来运行Time Machine进程的用户 1useradd -c "Time machine" -m -s /bin/bash tm 我这里命名为tm，你可以替换为任何你定的名字，但是最好不要使用root用户。 接下来给新用户设定密码 1sudo passwd tm 3. 准备文件夹 12mkdir -R /home/tm/TimeMachineFoldersudo chown -R tm /home/tm/TimeMachineFolder 4. 设置netatalk 首先我们将原有的配置文件备份 1sudo mv /etc/netatalk/AppleVolumes.default /etc/netatalk/AppleVolumes.default.old 然后创建一个新的配置文件 1sudo touch /etc/netatalk/AppleVolumes.default 使用你偏好的编辑器（vim，nano之类）向这个配置文件中加入如下内容 12:DEFAULT: options:upriv,usedots/home/tm/TimeMachineFolder "My Time Machine" options:tm volsizelimit:500000 allow:tm 注意将第二行的文件夹路径设定为你再第三步中创建的文件夹的路径。另外，第二行中的volsizelimit设定了Time Machine将会使用的最大硬盘空间，单位是MB。 5. 重启netatalk服务来应用更改 1sudo service netatalk restart 6. 在Mac上连接到Time Machine 首先直接尝试在Time Machine中选择这个服务器（会显示在可用磁盘下面，名字显示为第四步中你netatalk设置文件中指定的名字）。 如果你无法找到，那么打开Finder并按下⌘+K，在弹出来的窗口中，于服务器地址一栏输入afp://IP.of.your.server/，然后点连接。如果提示需要输入用户名和密码来登录，那就输入第二步中你设定的用户名密码即可。 示意图 ref：Concisest guide to setting up Time Machine server on Ubuntu Server 12.04, 14.04 &amp; Debian | Dae’s blog]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>macOS</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[键盘上的符号的英文读法]]></title>
    <url>%2Fposts%2F20487%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930! 叹号 exclamation mark/bang ? 问号 question mark , 逗号 comma . 点号 dot/period/point : 冒号 colon ; 分号 semicolon ” 双引号 quotation marks/double quote ‘ 单引号/撇号 apostrophe/single quote ` 重音号 backquote/grave accent * 星号 asterisk/star + 加号 plus sign - 减号/横线 hyphen/dash/minus sign/ = 等号 equal sign / 斜线 slash \ 反斜线 backslash/escape | 竖线 bar/pipe/vertical bar _ 下划线 underline/underscore $ 美元符号 dollar sign @ at at sign # 井号 crosshatch/sharp/hash % 百分号 percent sign/mod &amp; and/和/兼 and/ampersand ^ 折音号 circumflex/caret ~ 波浪号 tilde &#123;&#125; （左右）花括号/大括号 (left/right|open/close) braces [] （左右）方括号/中括号 (left/right|open/close) brackets () （左右）圆括号/小括号 (left/right|open/close) parentheses &lt;&gt; 尖括号 angle brackets &lt; 大于号 less than &gt; 小于号 greater than]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC: @rpath的坑]]></title>
    <url>%2Fposts%2F21028%2F</url>
    <content type="text"><![CDATA[Problem 这篇文章的缘由是我在尝试使用ns3带的NetAnim程序时，显示了下面这个错误： 1234dyld: Library not loaded: @rpath/QtGui.framework/Versions/4/QtGui Referenced from: /path/to/ns-allinone-3.28/netanim-3.108/./NetAnim Reason: image not found[1] 86663 abort ./NetAnim 这是一个动态链接的错误，所以没法通过编译的时候添加LDFLAGS来解决。不过错误里面的@rpath这个东西倒是挺有意思，显然并不是环境变量。我在网上查了很多，但是大多数是围绕xcode讨论的，不太适用于我面临的场景（命令行）。不过这些文章（如这篇)能够大致阐明@rpath的用途。简而言之，@rpath是一个类似Shell中的PATH的变量，程序在执行时会从@rpath指定的路径中寻找动态链接库文件。那么剩下的问题就是我们如何操作这个变量了。 Solution 通过otool我们可以查看一个程序的动态链接文件搜索地址，例如我要用的NetAnim： 123456$ otool -L ./NetAnim./NetAnim: @rpath/QtGui.framework/Versions/4/QtGui (compatibility version 4.8.0, current version 4.8.7) @rpath/QtCore.framework/Versions/4/QtCore (compatibility version 4.8.0, current version 4.8.7) /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 400.9.0) /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4) 而我们可以通过install_name_tool来对这些地址进行操作。 12$ install_name_tool -hUsage: /Library/Developer/CommandLineTools/usr/bin/install_name_tool [-change old new] ... [-rpath old new] ... [-add_rpath new] ... [-delete_rpath old] ... [-id name] input 对我而言，我需要将Qt4的动态链接库添加到NetAdmin的搜索路径中去，可以使用如下的命令： 1install_name_tool -add_rpath /usr/local/Cellar/qt@4/4.8.7_3/lib ./NetAnim 大功告成。]]></content>
      <categories>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>Debug</tag>
        <tag>ns3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo文章置顶/置底方法研究]]></title>
    <url>%2Fposts%2F42846%2F</url>
    <content type="text"><![CDATA[这篇文章讨论如何在Hexo中方便地实现文章置顶功能。 最初我采用了Hexo文章置顶的方法。这个方法还是非常简单有效，不过存在一个问题：即不支持使用负数的top值将文章放在末尾。因此我做了 一点修改。 原始方法 原始方法的核心思想是在Front-Matter中添加一个自定义的top字段，然后在hexo-generator-index中使用这一字段来实现排序。具体操作为，修改文件node_modules/hexo-generator-index/lib/generator.js，添加 如下代码： 1234567891011posts.data = posts.data.sort(function(first, second) &#123; if (first.top &amp;&amp; second.top) &#123; // 两篇文章top都有定义 return first.top == second.top ? second.date - first.date : second.top - first.top //若top值一样则按照文章日期降序排, 否则按照top值降序排 &#125; else if (first.top &amp;&amp; !second.top) &#123; // 以下是只有一篇文章top有定义，将有top的排在前面 return -1; &#125; else if (!first.top &amp;&amp; second.top) &#123; return 1; &#125; else &#123; return second.date - first.date; // 都没定义top，按照文章日期降序排 &#125;&#125;); 更改后的完整代码如下： 123456789101112131415161718192021222324252627'use strict';var pagination = require('hexo-pagination');module.exports = function(locals) &#123; var config = this.config; var posts = locals.posts.sort(config.index_generator.order_by); posts.data = posts.data.sort(function(first, second) &#123; if (first.top &amp;&amp; second.top) &#123; // 两篇文章top都有定义 return first.top == second.top ? second.date - first.date : second.top - first.top //若top值一样则按照文章日期降序排, 否则按照top值降序排 &#125; else if (first.top &amp;&amp; !second.top) &#123; // 以下是只有一篇文章top有定义，将有top的排在前面 return -1; &#125; else if (!first.top &amp;&amp; second.top) &#123; return 1; &#125; else &#123; return second.date - first.date; // 都没定义top，按照文章日期降序排 &#125; &#125;); var paginationDir = config.pagination_dir || 'page'; var path = config.index_generator.path || ''; return pagination(path, posts, &#123; perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: &#123; __index: true &#125; &#125;);&#125;; 然后在需要置顶的文章的front-matter中添加top字段。top值越大，则文章越靠前。top值一样的文章则根据日期排序。front-matter设置的一个例子如下： 1234567891011title: Hexo文章置顶方法研究date: 2019-06-26 22:51:15tags: - 教程 - hexoauthor: MinHowtags: - 博客 - 开源项目cover_picture: https://cloud.minhow.com/images/miho/theme/github-second.jpgtop: 1 解决“置底”的问题 无法置底的原因很简单，即在上面的js代码修改中，没有设置top值的文章的top变量是未定义的，且规定未定义top的文章总是比定义了top值的文章要靠后。我们赋予未定义top值的文章一个默认的0值，即可解决这个问题的。具体的操作是将修改代码内容替换成 123456789posts.data = posts.data.sort(function(first, second) &#123; var a = first.top || 0 var b = second.top || 0 if (a != b) &#123; return b - a &#125; else &#123; return second.date - first.date &#125;&#125;]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weekly - 1]]></title>
    <url>%2Fposts%2F25582%2F</url>
    <content type="text"><![CDATA[So what's this 每周我都会读阮一峰的每周分享，有时候也会在其他的博客平台上看见别的博主整理的这些每周资源分享文章，觉得比较有用，我也打算整理一下自己的List。 最近一年多以来，我尝试尽可能将自己的思考过程以文字的方式记录下来，这样过几天回头来看，便于我整理思路。更重要的是，这种累积会给自己带来沉甸甸的“积累感”，给自己一个强大正反馈。 这篇是这一系类的每周分享的第一篇，贵在坚持！ 新闻 树莓派4发布 树莓派4 树莓派性能对比 位于英国的教育慈善组织「Raspberry Pi 基金会」推出了它们的新一代产品：树莓派 4（Raspberry Pi 4），性能表现又上升了一个台阶，官方甚至称它「足以媲美一台入门级 x86 电脑」。树莓派的主要性能升级为： 搭载了A72架构的BCM2711芯片，主频为1.5GHz 两个micro-HDMI 支持最高4GB LPDDR4内存 802.11ac 双频Wifi 千兆以太网 蓝牙5.0 5V/3A 的USB-C供电 USB2.0及USB3.0接口 官方还承诺，会持续生产树莓派 4 至 2026 年 1 月. B站三体动画化 B站正式宣布《三体》动画化启动: 作为重磅彩蛋，刘慈欣现身B站十周年活动现场。动画由B站出品、三体宇宙和制作方艺画开天联合出品。活动现场首播的概念版PV淋漓尽致地展现三体宇宙的宏大和黑暗森林法则的残酷。 之前在B站上自己组团队做了三体动画（Minecraft版）的神游八方，也加入了动画化的主创团队。 专题页面 《游戏适龄提示倡议》 6月26日，人民网联合腾讯、网易、完美世界等10家头部游戏公司发起《游戏适龄提示倡议》，把游戏玩家分成4个年龄层级，并提出了相应的提示体系，包括游戏内容、类型和运营等方面的标准。年龄分层方面，此次倡议把游戏玩家分为18+、16+、12+、6+四级。例如6+多是休闲益智类，18+则有大量竞技、策略、棋牌类游戏。 分级标准 之前听老梁说的好，文化审查领域重要的是“自由裁量权”，而并不是挂在口头上的细枝末节的审查细节。没有分级制度，那么我想让你过你就能过，不让你过，你就不能过，随心所欲，岂不快哉？ &quot;在国民党统治时期，制定了一个新闻法，我们共产党人仔细研究它的字句，抓它的辫子，钻它的空子。现在我们当权，我看还是不要新闻法好，免得人家钻我们空子。没有法，我们主动，想怎样控制就怎样控制。&quot; -- 陈云 （孙旭培教授曾在《新闻立法之路》一文中引述） Further Reading：为什么中国没有新闻法(Backup Link) 联邦快递起诉美国政府 6月24日，联邦快递在官网发布声明称，已向哥伦比亚地区的美国地区法院提起诉讼，要求禁止美国商务部对联邦快递执行“出口管理条例”中的禁令。联邦快递认为，《出口管制条例》违反公共承运人在美国宪法第五修正案下的正当权利，因为他们不合理地要求承运人为可能违反《出口管制条例》的运品承担严格责任。 魔幻现实主义 苹果首席设计官Jonathan Ive将离职 苹果首席设计官 Jonathan Ive 将于今年后期正式离开苹果，创立独立的设计公司 LoveFrom，其好友兼著名设计师 Marc Newson 将加入。届时，苹果将成为该设计公司其中一位主要客户。 Ive 在苹果的代表作包括 iMac、iPod、iPhone 等系列产品，参与设计了苹果的「飞船」总部 Apple Park。他在新闻稿中说：「在将近 30 年和无数项目后，让我最自豪的项目是我们持续投入精力创造了同行无法比拟的苹果设计团队，流程和文化。」 上面视频里的iOS 7即是Jonathan主导的，其革命性的变化在于用扁平化的设计取代拟物化的设计 全电动飞机 Alice 在 6 月 17 日到 23 日举行的巴黎航空展上，以色列航空公司 Eviation 推出了自家首款全电动飞机 Alice。 这款用「爱丽丝」这个充满诗意的名字来命名的飞机，是全球首款全电动通勤飞机。 Eviation Alice 内部搭载了功率能达到 功率能够达到 900kW 的三台电机，以及一块可提供 900 千瓦时能量的锂电池。飞机充满一次电可以发行 1037 公里，巡航速度为每小时 407 公里。运载能力方面，Alice 飞机上有 9 个独立座位，同样也需要两名驾驶员才能驾驶。谈到 Alice 的机舱设计时，Eviation 官方表示飞机机舱做了一定的设计优化，自身能为乘客带来更好的降噪。售价方面，Alice 的定价为 400 万美元，折合约 2750 万人民币，每小时的飞行成本为 200 美元，折合约 1372 元。 巴黎航展 · Alice 华为 P30 发货量破千万 6月27日，华为消费者业务手机产品线总裁何刚在MCW2019大会上公布了一系列数据，其中华为P30系列手机仅上市85天全球发货量就达到1000万台，比P20系列提前了62天。截止今年5月31日，华为手机整体出货量实现149天破亿。 华为 P30 发货量破千万 果粉表示真香，想买。以及，辣鸡KOL 典故与梗 不作安安饿殍，效尤奋臂螳螂 这句话，我一直理解反了意思。开始我以为是指不愿意做饿死鬼，即便是螳臂当车也要起来反抗的意思。结果，其原意是完全相反的。 这句话出自顾诚的《明末农民战争史》的注释中: 【22】谈迁：《北游录》，《纪闻上》，《榜购一词》条。按：此条首云“总督杨文岳嗣昌出师，榜辑剧寇张献忠”，杨嗣昌字文弱，谈迁误为文岳，又称之为总督，遂与明保定总督杨文岳混为一人。杨复吉《梦阑琐笔》载此事时更写成“保督杨文岳出师榜缉张献忠”，均误。又杨氏所载词中“兴安、平利走四方”一句作“兴安、平利走东乡”。李馥荣：《滟滪囊》卷一所载杨嗣昌榜刊《西江月》词句为：“不作安安饿殍，效尤奋臂螳螂。往来楚蜀肆猖狂，弄兵潢池无状。云屯雨骤师集，蛇豕奔突奚藏？许尔军民绑来降，爵赏酬功上上。”或系杨嗣昌所刊另一榜文。 这句话的意思是，尔等不安安静静地做一个饿死鬼，却效仿螳臂当车，自不量力（抵抗朝廷的剿灭大军）。当然，这句话可能并非杨总督本人所说，只是文人调侃他所做。不过，这句话透出的想法，杨总督脑子里大抵是有的，只不过要脸，不好说出来。对于这些统治者来捉，有这样的想法，其实不足为奇。但是，偏偏就有一些明明遇到乱世就会沦为“饿殍”的人，摆不正自己的位置。 历代造反的贫民，从陈胜吴广，到李自成，洪秀全，诚然造成了巨大的破坏，但若是不造反，又有什么活路呢？难道，做安安饿殍么？ 情绪 Youtube博主Etika自杀 Etika 2019年6月19日，Etika上传了一段疑似自杀宣言的视频，他背起书包，离开了家门。至此以后，没有人再看到Etika的任何踪迹。 6月22日，警方发现了Etika被遗弃的个人物品，在高达340英尺的大桥之上。 6月25日，纽约警方在布鲁克林大桥水域发现一具未明身份的男性遗体。今日，警方发布正式公告，遗体确为Etika本人，死因是自杀。 网友在Etika自杀地的悼念 有很多极度抑郁的人以至于要自杀的人，有时候看起来会很开心的样子。永远不要以为自己有多么了解一个人，尤其是一个你没有那么熟悉，甚至是陌生的人。 文章与言论 Oh shit, git!：作者针对一些在使用git过程中的痛点给出了解决方法 How To: Automatically Backup a Linux VPS to a Separate Cloud Storage Service：如何将VPS备份到一个云存储平台 安卓碎片化严重到什么地步？安卓本身有12个版本，如果每个版本有12个厂商，每个厂商有12个手机型号，因此安卓生态至少包含1,728种&quot;版本- 品牌 - 设备&quot;的组合。 ProSe (Proximity Services) for LTE &amp; 5G Networks: 2017-2030 - Opportunities, Challenges, Strategies &amp; Forecasts: 5G是近年来的热词了，也是这次美国对华为发难的一个重要因素。不过舆论对于5G的认识，一般是一个加强版的4G蜂窝网。其实5G中引入的Promxity Service技术，将为传统蜂窝网引入D2D的能力，这可能带来深远的影响。]]></content>
      <categories>
        <category>Weekly</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>树莓派</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
        <tag>Weekly</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python下的音频处理库librosa打开文件是显示NoBackendError的解决]]></title>
    <url>%2Fposts%2F40199%2F</url>
    <content type="text"><![CDATA[近日在django项目中采用了librosa来分析用户上传的音频，主要是对其做一定间隔的采样用于绘制波形图。在本地(MacOS)上工作正常，部署到Ubuntu服务器后，自己手动用python方式运行django的server时，工作都是正常的，然而当我用superviosr挂起之后就一直报NoBackendError的错误，反复检查了FFmpeg的安装，应该是没有问题的。网上搜了一下没有看到比较合适的解决办法，故不得不自己读源码来调试了。 由于我的程序中只采用了librosa.load这个命令，通过源代码可以发现librosa实际上是用audioread这个库的audioread.audio_open来读取音频文件的。这个函数的源代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344def audio_open(path): """Open an audio file using a library that is available on this system. """ # Standard-library WAV and AIFF readers. from . import rawread try: return rawread.RawAudioFile(path) except DecodeError: pass # Core Audio. if _ca_available(): from . import macca try: return macca.ExtAudioFile(path) except DecodeError: pass # GStreamer. if _gst_available(): from . import gstdec try: return gstdec.GstAudioFile(path) except DecodeError: pass # MAD. if _mad_available(): from . import maddec try: return maddec.MadAudioFile(path) except DecodeError: pass # FFmpeg. from . import ffdec try: return ffdec.FFmpegAudioFile(path) except DecodeError: pass # All backends failed! raise NoBackendError() 可见之前我们遇到的NoBackendError就是这里的最后一行抛出的了，由于我安装的FFmpeg，进一步进入ffdec.py这个文件中。不难发现实际打开文件的是下面这个函数： 1234567891011121314151617def popen_multiple(commands, command_args, *args, **kwargs): """Like `subprocess.Popen`, but can try multiple commands in case some are not available. `commands` is an iterable of command names and `command_args` are the rest of the arguments that, when appended to the command name, make up the full first argument to `subprocess.Popen`. The other positional and keyword arguments are passed through. """ for i, command in enumerate(commands): cmd = [command] + command_args try: return subprocess.Popen(cmd, *args, **kwargs) except OSError: if i == len(commands) - 1: # No more commands to try. raise 这里的commands是直接传入的第33行的COMMANDS变量 1COMMANDS = ('ffmpeg', 'avconv') 我这里倒腾了好几下，最终发现实际是错误的原因是没有找到ffmpeg这个命令。我们在这里将ffmpeg替换成ffmpeg的绝对路径。你可以通过下面这行命令找到。 1which ffmpeg 最终我改成了 1COMMANDS = ('/usr/bin/ffmpeg', 'avconv') Boom！一切就工作正常了。这么想起来应该是安装ffmpeg的时候的环境变量有问题，导致在command line方式下调用ffmpeg命令出错吧。]]></content>
      <categories>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>Debug</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Latex中各种各样的箭头]]></title>
    <url>%2Fposts%2F13297%2F</url>
    <content type="text"><![CDATA[Latex中提供了各种“稀奇古怪的箭头形状”。一般箭头使用在公式环境下面。 默认箭头 这里的默认指你不需要任何额外的usepackage就可以使用： 默认箭头 amssymb提供的箭头 需要\usepackage{amssymb} amssymb箭头 Further Reading LaTeX arrows]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[部署Pritunl来使用OpenVPN]]></title>
    <url>%2Fposts%2F23676%2F</url>
    <content type="text"><![CDATA[Why VPN 为什么要使用VPN？尤其是，为什么个人用户需要使用VPN呢？其实如果你只有一台电脑，其实一般用不上VPN（当然，用VPN来翻墙另说），如果你有多个电脑，甚至是服务器，这些服务器的网络情况还比较复杂，而你希望随时随地方便地访问这些机器，那么建立VPN虚拟网络将这些机器连接起来就能极大的方便访问过程。例如，如果一台服务器是在路由器后面，没有公网IP，与其在路由器上配置复杂的端口映射表，不如通过VPN网络自由地访问各个端口。又例如在一些特定的场景下，一些服务器的低位（1024以下）端口的访问会收到限制，这个也可以同VPN来解决。 当然，还有可能，你处于校园网中，而你通过种种途径有了一个无限流量服务器，通过VPN，可以让你在校园网场景下能够随时通过这台服务器上网，从而免去流量费用。另外，将这一宝贵资源分享给同学使用，用VPN也非常方便。 Why Pritunl 我试过很多VPN方案，例如PPTP，OpenVPN，IPSec等等。其实使用VPN过程中的一个痛点在于用户管理要尽可能方便，虽然我也比较多的在用命令行工具，但是使用命令行工具去管理用户体验还是非常差。Pritunl提供了OpenVPN的网页GUI管理界面。这也是我为什么推荐使用Priunl的原因。而且，Pritunl中免费用户就可以使用无数量限制的账户和设备，这对于个人用户来说足够了。 另一方面，Pritunl的客户端支持也非常全面 How to deploy Installation 官方文档在这里: Installation。事实上按照官方文档的推荐，Pritunl最好部署在企业级的Linux OS上，如Red Hat, Oracle Linux, CentOS等。不过对于个人用户，对于性能，稳定性和安全性要求没有那么严格的情况下，用Debian系的系统也未尝不可。我的Pritunl服务器就是部署在Ubuntu上的，几个月使用下来，性能和稳定性都非常好。 对于不同版本的系统，安装脚本不同。例如，Ubuntu 16.04，安装脚本如下： 1234567891011121314sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list &lt;&lt; EOFdeb https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverseEOFsudo tee /etc/apt/sources.list.d/pritunl.list &lt;&lt; EOFdeb http://repo.pritunl.com/stable/apt xenial mainEOFsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv 9DA31620334BD75D9DCB49F368818C72E52529D4sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv 7568D9BB55FF9E5287D586017AE645C0CF8E292Asudo apt-get updatesudo apt-get --assume-yes install pritunl mongodb-orgsudo systemctl start pritunl mongodsudo systemctl enable pritunl mongod Configuration 在安装完Pritunl之后，访问服务器的443端口，即可以看到配置引导界面。 配置界面 其中需要输入的主要是第一项Setup Key。数据库部分，如果你是使用上面的脚本安装的话，那么Pritunl服务本机上就已经安装运行了MongoDB，这里第二个配置MongoDB URI就不需要变动。要获取Setup Key，ssh进入部署服务器，运行pritunl setup-key即可. 完成这一步设置以后就来到管理员登录界面： 管理员登录界面 初始时用户名和密码都是pritunl，在完成第一次登录之后会被要求修改管理员的用户名和密码： 修改密码 Further Reading Pritunl的使用方法非常直观，文档可以参见Connecting.]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下OpenVPN客户端配置]]></title>
    <url>%2Fposts%2F38823%2F</url>
    <content type="text"><![CDATA[环境配置 安装OpenVPN的方法很简单： 12sudo apt-get updatesudo apt-get install openvpn 使用方法 首先你需要从OpenVPN服务提供商那里得到*.ovpn配置文件，然后在服务器上运行 1sudo openvpn --config your.ovpn 不过这个命令会在前台运行，当我们退出SSH之后就会终止。为了让OpenVPN能够在后台运行，且能够自动开机启动，我们需要借助于Systemctl的帮助。首先我们将ovpn文件复制到/etc/openvpn/client/下，将后缀直接修改为.conf。如果配置文件需要我们手动输入密码，我们需要将密码以配置文件的形式固定下来，不然自动启动会失败。在/etc/openvpn/client/新建一个account.txt文件，在其中输入： 12usernamepassword 有些OpenVPN服务端工具只会生成密码（例如Pritunl），在这里username可以随意输入一个，然后在下面一行添加密码。 然后进入配置文件，找到auth-user-pass。默认情况下这个配置条目后面是空的，我们将其修改为： 1auth-user-pass /etc/openvpn/client/account.txt 假设前面我们复制过来的配置文件的名字为default.conf。输入下面的命令以启用这个vpn： 1sudo systemctl enable openvpn-client@default 要启动这个vpn，使用下面的命令： 1systemctl start openvpn-client@default]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>linux</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Matplotlib in Virtualenv]]></title>
    <url>%2Fposts%2F30912%2F</url>
    <content type="text"><![CDATA[我使用的是macOS系统。当在虚拟环境中尝试使用matplotlib时，会出现如下的报错： 1ImportError: Python is not installed as a framework. The Mac OS X backend will not be able to function correctly if Python is not installed as a framework. See the Python documentation for more information on installing Python as a framework on Mac OS X. Please either reinstall Python as a framework, or try one of the other backends. If you are using (Ana)Conda please install python.app and replace the use of &apos;python&apos; with &apos;pythonw&apos;. See &apos;Working with Matplotlib on OSX&apos; in the Matplotlib FAQ for more informatio 根据错误信息，要么我们使用Python as Framework，要么我们更换使用的后端（backend）。Matplot专门就matplotlib的后端问题有一个网页：Working with Matplotlib in Virtual environments。文章中提到，Tk这个框架（即TkAgg后端）一般来说总是可用的，不需要额外的外部依赖。（不过在特定的Linux发行版本中可能需要安装python-tk）。要使用Tk需要做如下配置过程： 123import matplotlibmatplotlib.use("TkAgg")import matplotlib.pylab as plt 每次这么配置比较麻烦，我们可以通过~/.matplotlib/matplitlibrc文件来固化配置（如果这个文件不存在可以手动创建），文件中添加如下内容： 1backend: TkAgg 不过我在使用过程中发现使用TkAgg时会出现系统级的错误，抛出了Terminating app due to uncaught exception的错误。因此我尝试替换成其他后端。我主要选择包括： Matplotlib可用后端类型 而又因为PySide只支持比较早的python版本，因此我选择了Qt5作为后端。在这之前，我们需要安装下面的依赖 12brew install qtpip install PySide2 安装完成后配置过程和TkAgg的类似，后端的名字为QT5Agg。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Debug</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ns3 在模块中使用第三方库]]></title>
    <url>%2Fposts%2F53831%2F</url>
    <content type="text"><![CDATA[ns3使用了waf编译系统，因此在ns3中尝试引入第三方模块时，就没有make那么直接了。 其实思路的核心还是想办法最终为编译器提供-L和-I的设置。这个过程我们通过wscript中的configure函数来实现。这里我们假设模块使用的库的位置放在模块源码目录下的libs子目录。库的名字为example-lib。目录结构如下: 1234libs└── example-lib ├── include └── libexample-lib.a 其中，include文件夹内为头文件，libexample-lib.a为静态库文件。 修改wscript文件中的configure函数，如下 12345678def configure(conf): root_dir = conf.path.abspath() example_lib_dir = os.path.join(root_dir, "libs/example-lib") conf.env.append_value("LINKFLAGS", ["-L%s/" % example_lib_dir]) conf.env.append_value("LIB", ["example-lib"]) conf.env.append_value("CPPFLAGS", ["-I%s/include" % example_lib_dir, ]) 修改configure函数之后要重新运行./waf configure命令来让设置生效。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>ns3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ns3 wscript: 自动寻找需编译的源文件]]></title>
    <url>%2Fposts%2F3426%2F</url>
    <content type="text"><![CDATA[在ns3的编译体系中，每个module会包含一个名为wscript的python脚本来提供编译信息。例如，一个通过create-module.py创建的module中的wscript为 12345678910111213141516171819202122232425262728293031# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-# def options(opt):# pass# def configure(conf):# conf.check_nonfatal(header_name='stdint.h', define_name='HAVE_STDINT_H')def build(bld): module = bld.create_ns3_module('example-module', ['core']) module.source = [ 'model/example-module.cc', 'helper/example-module-helper.cc', ] module_test = bld.create_ns3_module_test_library('example-module') module_test.source = [ 'test/example-module-test-suite.cc', ] headers = bld(features='ns3header') headers.module = 'example-module' headers.source = [ 'model/example-module.h', 'helper/example-module-helper.h', ] if bld.env.ENABLE_EXAMPLES: bld.recurse('examples') # bld.ns3_python_bindings() 其中，module.source中包含需要编译的.cc源文件，而headers.source中包含对应的头文件。每次新建C++源代码文件时，都需要手动添加到这里的列表中。下面我给出一个自动从module的model, helper目录下搜索源文件的方法： 123456789101112131415161718192021222324252627282930313233343536373839404142# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-import os# def options(opt):# pass# def configure(conf):# conf.check_nonfatal(header_name='stdint.h', define_name='HAVE_STDINT_H')def _list_sources(bld, suffix): root_dir = bld.path.abspath() res = [ x for x in [os.path.join("model", y) for y in os.listdir(os.path.join(root_dir, "model"))] if x.endswith(suffix) ] res += [ x for x in [os.path.join("helper", y) for y in os.listdir(os.path.join(root_dir, "helper"))] if x.endswith(suffix) ] return resdef build(bld): module = bld.create_ns3_module('example-module', ["core"]) module.source = _list_sources(bld, ".cc") module_test = bld.create_ns3_module_test_library('example-module') module_test.source = [ 'test/mix-autonomy-test-suite.cc', ] headers = bld(features='ns3header') headers.module = 'example-module' headers.source = _list_sources(bld, ".h") if bld.env.ENABLE_EXAMPLES: bld.recurse('examples') # bld.ns3_python_bindings() 注意不要直接套用上面的范例文件，需要将&quot;example-module&quot;的名字改为你的module的名字]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>ns3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[贝塞尔曲线原理]]></title>
    <url>%2Fposts%2F50553%2F</url>
    <content type="text"><![CDATA[这是一篇转载文章。Bézier curve(贝塞尔曲线)是应用于二维图形应用程序的数学曲线。 曲线定义：起始点、终止点（也称锚点）、控制点。通过调整控制点，贝塞尔曲线的形状会发生变化。 1962年，法国数学家Pierre Bézier第一个研究了这种矢量绘制曲线的方法，并给出了详细的计算公式，因此按照这样的公式绘制出来的曲线就用他的姓氏来命名，称为贝塞尔曲线。 抛物线三切线定理 设\(P_0\)，\(P_0^2\)，\(P_2\)是一跳抛物线上顺序不同的三个点。过\(P_0\)和\(P2\)的切线交于\(P_1\)。过\(P_0^2\)的切线交\(P_0 P_1\)和\(P_2 P_1\)相交于\(P_0^1\)和\(P_1^1\)，则有如下比例成立： \[\begin{equation} \frac{P_{0} P_{0}^{1}}{P_{0}^{1} P_{1}}=\frac{P_{1} P_{1}^{1}}{P_{1}^{1} P_{2}}=\frac{P_{0}^{1} P_{0}^{2}}{P_{0}^{2} P_{1}^{1}} \end{equation}\] 抛物线三切线定理示意图 此即为抛物线的三切线定理。 二次贝塞尔曲线 当\(P_0\)，\(P_2\)固定时，引入参数\(t\)，令上述比例值为\(t:(1-t)\)，即有： \[\begin{equation} \begin{array}{l}{P_{0}^{1}=(1-t) P_{0}+t P_{1}} \\ {P_{1}^{1}=(1-t) P_{1}+t P_{2}} \\ {P_{0}^{2}=(1-t) P_{0}^{1}+t P_{1}^{1}}\end{array} \end{equation}\] 将第一，二个式子代入第三个有： \[\begin{equation} P_{0}^{2}=(1-t)^{2} P_{0}+2 t(1-t) P_{1}+t^{2} P_{2} \end{equation}\] 当\(t\)从0变到1时，\(P_0^2\)点经过的轨迹即为上图中的抛物线，也即为由三顶点\(P_0\), \(P_1\), \(P_2\)决定的一条二次贝塞尔曲线。也可以认为这条二次贝塞尔曲线是由两个前顶点\((P_0, P_1)\)以及两个后顶点\((P_1, P_2)\)决定的。 更高阶的贝塞尔曲线 类似于二次贝塞尔曲线的推导过程，我们可以推广到更高阶的贝塞尔曲线。 由四个控制点定义的三次Bezier曲线\(P_0^3\)可被定义为分别由\((P_0,P_1,P_2)\)和\((P_1,P_2,P_3)\)确定的二条二次Bezier曲线的线性组合，由\((n+1)\)个控制点\(P_i(i=0,1,...,n)\)定义的n次Bezier曲线\(P_0^n\)可被定义为分别由前、后\(n\)个控制点定义的两条\((n-1)\)次Bezier曲线\(P_0^{n-1}\)与\(P+0^{n-1}\)的线性组合： \[\begin{equation} P_{0}^{n}=(1-t) P_{0}^{n-1}+t P_{1}^{n-1} \quad t \in[0,1] \end{equation}\] 由此可以得到Bezier曲线的踢腿计算公式 \[\begin{equation} P_{i}^{k}=\left\{\begin{array}{c}{P_{i}} &amp; {k=0} \\ {(1-t) P_{i}^{k-1}+t P_{i+1}^{k-1}} &amp; {k=1,2, \cdots, n, i=0,1, \cdots, n-k}\end{array}\right. \end{equation}\] 这就是de Castelijau算法。 贝塞尔曲线原理动图 一阶贝塞尔曲线 二阶贝塞尔曲线 三阶贝塞尔曲线 四阶贝塞尔曲线 五阶贝塞尔曲线]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>processing</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker Volume的权限问题]]></title>
    <url>%2Fposts%2F25188%2F</url>
    <content type="text"><![CDATA[这里我们要解决的是使用Docker过程中常见的Volume权限问题。具体而言，当我们用-v将宿主机的路径绑定到Docker镜像的内部路径时，有时候会导致Docker镜像缺少对这个目录的访问权限，从而导致进程出错。 Why 当我们绑定宿主目录到镜像时，如果该目录不存在，Docker也会自动创建该目录。这种方式创建出来的目录的拥有者是root用户。如果该目录已经存在，那么其拥有者就取决于宿主配置的情况了。 由于Docker内部的用户空间和宿主的用户空间是独立的，如果镜像内运行进程的用户和宿主目录的拥有者不符合，就会出现权限问题。 How to solve it 由于镜像内和宿主的用户名空间是不同的，所以通过用户名的方式来变更宿主目录的所有权会失效。然而，事实上用户系统是通过uid来标识不同的用户的，我们只需要将宿主的路径的拥护者改为镜像内用户相通的uid即可。镜像内用户的uid可以通过如下方式查看，例如： 12jovyan@8fed6b266a3c:~$ iduid=1000(jovyan) gid=100(users) groups=100(users) 继而再修改宿主机上对应目录的拥有者： 1sudo chown -R 1000 /path/to/volume Further Research 上面的方法可以解决Volume访问权限的问题，不过会产生潜在的漏洞。从镜像内获得的uid在宿主上可能表示的是不同的用户，在宿主机上修改目录的拥有者会导致数据被同一服务器上的其他用户访问，带来安全性上的问题。 另一方面，如果有多个镜像需要共享一个Volume，而他们内部的运行用户的uid不同的话，就需要在宿主上进行更加复杂的用户以及组的配置。 更优雅的执行方法有下面两种： Use Named Volume Named Volumes 由容器自行配置权限问题 Reference 谈谈 Docker Volume 之权限管理（一） What is the (best) way to manage permissions for Docker shared volumes? Why Docker Data Containers (Volumes!) are Good Use volumes Different Types of Volumes]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Debug</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书破万卷,下笔如有神]]></title>
    <url>%2Fposts%2F60435%2F</url>
    <content type="text"><![CDATA[能够获得暴利的职业，都有一个共同特点：可扩展性（scaling），一次劳动可以服务成千上万的人。 软件、电影、游戏行业都具有可扩展性，作品的生产成本是固定的，但可以被消费无数次，所以有巨大的获利空间，创造出许许多多的富豪。另一方面，理发师、厨师、出租车司机一次劳动，只能服务少数几个人，就不具有可扩展性，很难获得暴利，生存得很辛苦。 最近，我读到美国一个风险投资家的文章。他说了一句发人深思的话： &quot;写作是最具可扩展性的活动。你呆在家里，不去参加活动/会议，只是在网上写下自己的想法，然后你就具有了最好的可扩展性。&quot; 我想了一下，还真是这样。你写了一篇文章，想让其他人看到，只要到处张贴就行了。每次转贴，就是扩展了一次。这比其他产品的扩展容易多了。面包师傅想要更多的人尝到自己的面包，只能多开面包店；网站要扩展，只能购买更多的服务器。相比之下，文字的扩展简直是零成本。 大公司每年花费数十亿美元用于广告，以求人们关注他们的产品。但是，一个好的作家可以免费获得这种扩展性。这就是为什么你应该把自己的想法写下来的原因，这么好的免费传播渠道，为什么不用呢？你以为，写下来不会有人看。错，其实是有人会看到的，如果他们觉得有价值，就会帮你传播出去。 这篇文章转载自阮一峰的博客。这篇文章其实说了一个非常简洁明了却价值巨大的道理，也给我们启示：我们应该如何规划自己的职业道路。只是靠出售自己的时间，即便是清北的同学，也只是能做到一个尚算富裕，但是辛苦中产阶级。要更上一层楼，还是需要手握资本。而怎么获得资本呢？其实就是靠文章里说的“可扩展性的工作”。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pandoc渲染引擎导致Hexo Tag渲染失败的临时解决办法]]></title>
    <url>%2Fposts%2F62502%2F</url>
    <content type="text"><![CDATA[在Hexo+Next: 使用Latex公式这篇文章中我发现在使用Pandoc作为Hexo的渲染引擎时，Hexo的标签功能会有问题，具体表现为Hexo的标签内部的内容会输出markdown源码，而非渲染后的html。 问题研究 经过我的研究，这是因为hexo-render-pandoc在注册自己的renderer时，只注册了异步渲染的renderer，而没有注册同步渲染的renderer，而Hexo的标签中主要是用同步renderer。以当时我使用的NexT的note标签为例。其实现代码为： 12345678910'use strict';function postNote(args, content) &#123; return `&lt;div class="note $&#123;args.join(' ')&#125;"&gt; $&#123;hexo.render.renderSync(&#123;text: content, engine: 'markdown'&#125;).split('\n').join('')&#125; &lt;/div&gt;`;&#125;hexo.extend.tag.register('note', postNote, &#123;ends: true, async: true&#125;);hexo.extend.tag.register('subnote', postNote, &#123;ends: true, async: true&#125;); 由于没有注册同步渲染器，这里的hexo.render.renderSync渲染会失败，从而返回的是content中的原本内容，也即Markdown形式的源码。 解决办法 彻底的解决办法，自然是在hexo-render-pandoc中同时注册同步渲染器。不过我自己尝试之后发现作为同步渲染器，pandoc和Hexo使用模板引擎貌似有冲突。更细致深入的修改最好还是由原作者来进行（我已经提交了Issue）。 这里我给出一个临时的解决办法：既然hexo-render-pandoc只注册了异步渲染代码，那么我们在Tag的实现代码中调用异步渲染的接口就可以了。仍然以NexT主题的note标签为例，可以将代码修改成： 12345678910111213141516'use strict';function postNote(args, content) &#123; return hexo.render.render(&#123;text: content, engine: 'markdown'&#125;) .then(function (res) &#123; return `&lt;div class="note $&#123;args.join(' ')&#125;"&gt; $&#123;res.split('\n').join('')&#125; &lt;/div&gt;` &#125;) // return `&lt;div class="note $&#123;args.join(' ')&#125;"&gt; // $&#123;hexo.render.renderSync(&#123;text: content, engine: 'markdown'&#125;).split('\n').join('')&#125; // &lt;/div&gt;`;&#125;hexo.extend.tag.register('note', postNote, &#123;ends: true, async: true&#125;);hexo.extend.tag.register('subnote', postNote, &#123;ends: true, async: true&#125;); 经过这样修改就可以了。不过这种方法仍然只是权宜之计，要是去修改每个Tag的实现，就太繁琐了。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next: 使用Latex公式]]></title>
    <url>%2Fposts%2F20215%2F</url>
    <content type="text"><![CDATA[这次更换主题的很大一个动因就是因为在NexT这个主题上，开启Latex的支持很方便。网上关于这方面的文章其实不少，但是大部分都不全面，照本宣科下来，很可能不能用。这些教程一般就给了_config.yml文件的配置以及pandoc依赖安装，但是一些关键细节缺失了。这篇文章里我梳理了一下整个流程。 0. Reference 英语好的话，其实可以尝试直接阅读官方文档。 1. Install Dependencies Next支持mathjax和katex两种渲染方式，其中katex的速度更快，但是对于Latex的支持有一定的限制。所以除非你的博客数量实在是过于庞大，不然就可以直接使用mathjax。 mathjax可以选用下面两种渲染引擎的中的任一一种 hexo-renderer-kramed hexo-render-pandoc 使用hexo-render-pandoc还需要安装pandoc渲染引擎。其安装方法可以参考 pandoc官网。如果在macOS上可以使用 Homebrew安装. 这里以pandoc为例： 123# 需要先卸载默认的渲染引擎npm un hexo-renderer-marked --savenpm i hexo-renderer-pandoc --save 替换渲染器之后会导致NexT note功能出现问题，note内的元素内容无法渲染，会输出markdown源代码。 这个问题我在hexo-render-pandoc上提了一个Issue，看原作者什么时候能够更新解决吧。 2. Configuration 配置NexT主题的_config.yml文件 12345math: enable: true ... engine: mathjax #engine: katex 很多文章都漏掉了在配置中一个重要的信息：在主题配置math下有一个名为per_page的选项，其值为true或者false。这个选项用来控制是否对每个篇文章都渲染数学公式。默认情况下是true，这意味只对Front Matter中含有mathjax: true的文章进行公式渲染。将per_page设置为false，则会对每一篇文章都尝试进行公式渲染。 由于公式渲染时一个很费时的操作，因此还是保持默认配置，通过Front Matter进行渲染控制. 3. How to use 3.1 行内嵌套公式 如：质能方程\(e=mc^2\) 1如：质能方程$e=mc^2$ 3.2 独占一行的公式 如： \[ 1=\sum_{i=0}^{m}\sum_{k=0}^{W_i-1}b_{i,k}=\sum_{i=0}^{m}b_{i,0}\sum_{k=0}^{W_i-1}\frac{W_i-k}{W_i}=\sum_{i=0}^{m}b_{i,0}\frac{W_i+1}{2}\\ =\frac{b_{0,0}}{2}\left[W\left(\sum_{i=0}^{m-1}(2p)^i+\frac{(2p)^m}{1-p}\right) + \frac{1}{1-p}\right] \] 12345如：$$1=\sum_&#123;i=0&#125;^&#123;m&#125;\sum_&#123;k=0&#125;^&#123;W_i-1&#125;b_&#123;i,k&#125;=\sum_&#123;i=0&#125;^&#123;m&#125;b_&#123;i,0&#125;\sum_&#123;k=0&#125;^&#123;W_i-1&#125;\frac&#123;W_i-k&#125;&#123;W_i&#125;=\sum_&#123;i=0&#125;^&#123;m&#125;b_&#123;i,0&#125;\frac&#123;W_i+1&#125;&#123;2&#125;\\=\frac&#123;b_&#123;0,0&#125;&#125;&#123;2&#125;\left[W\left(\sum_&#123;i=0&#125;^&#123;m-1&#125;(2p)^i+\frac&#123;(2p)^m&#125;&#123;1-p&#125;\right) + \frac&#123;1&#125;&#123;1-p&#125;\right]$$ 更多latex的使用方法，请参考官方文档]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[清华GPA事件备份:2019.04.16]]></title>
    <url>%2Fposts%2F34235%2F</url>
    <content type="text"><![CDATA[大图预警]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Haproxy支持Ipv6]]></title>
    <url>%2Fposts%2F12489%2F</url>
    <content type="text"><![CDATA[Haproxy Haproxy is a reliable, high performance TCP/HTTP Load Balancer 这是官网对于Haproxy的介绍，其作用的类似于Nginx，是一个均衡负载的服务器。其相比于Nginx的好处是其代理TCP流量的功能配置起来非常的简单。我这里主要拿Haproxy来配置Shadowsocks的跳板机。 前一段时间，GFW的墙好像又加高了，很多时候在教育网外连接服务器不是很可靠。所以我考虑干脆在教育网环境下做一个跳板服务器，这样在外面可以先跳到教育网，然后再从教育网过墙。 教育网的另一个好处是有IPv6。貌似IPv6上面的拦截比较弱，而且，绝大多数的高校对于IPv6都是免流量费的。因此，我们可以从IPv4公口进，然后走IPv6出。 How to 不过，问题是通过apt安装的haproxy是不支持IPv6的！ 我们只能自己动手从源码编译了： 12345wget http://www.haproxy.org/download/1.7/src/haproxy-1.7.2.tar.gztar -xzf haproxy-1.7.2.tar.gzcd haproxy-1.7.2make TARGET=linux2626 USE_GETADDRINFO=1sudo make install]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[政史:珍珠港事件前日方决策过程梳理]]></title>
    <url>%2Fposts%2F10462%2F</url>
    <content type="text"><![CDATA[在知乎上看到的比较好的回答，作为备份放在这里： 原文链接：https://www.zhihu.com/question/306368870/answer/639051842 archive.is上的备份网页：http://archive.is/4dOL3 珍珠港俯视图（1941年10月30日） 以下是原文内容： 因为再不突袭，日本人这大东亚战争就算是白打了。 咱们这里需要补充一个小知识，在20世纪30年代末，日本的能源结构是这样的：80%的石油来自美国，10%的石油来自东印度群岛，只有7%左右的石油可以自给。那么问题来了，日本从918开始折腾到40年，找到能替代美国的石油生产地了么？ 没有。不仅石油高度依赖美国，铁和各种军需物资都严重依赖美国，甚至可以这么说，要是没有美国人提供的这些物资，日本这侵华战争就根本打不起来。 1937年美国对日出口总值为2.89亿美元,其中石油、精炼油、废钢铁、原棉这四项战略物资就达1,42亿美元,约占二分之一。以石油一项而论,日本所需石油来自美国的份额,1937年占80%,1939年占85%。——齐世荣.绥靖政策研究.,北京：首都师范大学出版社,1998：413 据统计，1937－1938年，日本从美国进口的军需品占其军需品总进口额的55%。1937年，美对日废钢铁的出口量是1931年的40倍之多。——杨玉圣.中国人的美国观.上海: 复旦大学出版社，1997：152 （1937、1938年日本）从美国输入铁合金为77.53%和82.71%,铜的比例高达95.18%和90.89%,煤油及其产品为6.271%和65.57%,汽车及零件为9.241%和64%,飞机及零件为70.19%和7.692%,金属工作母机为69.53%和67.09%。——沈庆林.中国抗战时期的国际援助.上海人民出版社,2000：53 这就是二战中最讽刺的地方，美国人是日本人在二战前期最主要石油来源国，而且没有之一。日本人觉得不能任由老美这么掐着自己的脖子，于是1934年出台了《石油工业法》表示要加强本国石油产业建设，效果……一般吧；然后37年又搞了个《合成油法案》，表示要开动大日本帝国先进之科技手段以煤改油，效果……更一般。 考虑到1937年日本的财政收入才47亿日元，而以当时的汇率来看大概3日元可以折合1美元，大家可以感受一下每年日美之间几亿美元的进口额意味着什么。而更倒霉的是虽然侵华战争开始以后日军进展极其顺利，然而中国是个贫穷的农业国，重工业基础极其薄弱，而工业建设又是个耗时巨大、烧钱极多的活儿……所以日本人十分郁闷地发现自己这仗是越打越大，然而钱却都进了美国人的兜。 这就是为什么37年日本人在扬子江上炸了美国船，罗斯福把这事按下去的原因之一——顺便一提，日本人为了平事掏出来了2214007.36刀，1937年的两百万美元啊……日本人在占领区甚至搞了一次“抵制美货”的闹剧，然而美国人对此并不在意：有本事你抵制我的石油啊？ 美国国内群众此时对日本人的反感情绪已经是十分强烈了，甚至有几百名学生代表参与了焚烧日本丝绸的行动。等到了1938年美国政府觉得实在不能再这么容忍日本人了！必须上点手段了！于是政府向上百家工厂写信：建议不要跟日本人做生意。 这就是赫赫有名的“道义禁运” 6月11日,赫尔在记者招待上公开谴贵对和平居民的空袭轰炸,随后他写给美国148家注册出口飞机和飞机部件的厂家,表示:政府强烈反对把飞机和航空设备出售给世界上任何对和平居民进行轰炸的国家——赫尔回忆录·第一卷：569 道义禁运的效果极其明显，立竿见影，日本人37年从美国进口的飞机及部件达到248.4万美元，38年为1745.4万美元，增长了7倍。 这么拖拖拖一直拖到39年重庆轰炸，美国人民一看艾玛这太惨了，咱们真的不能再卖给日本人石油了，罗斯福表示那不成啊，你不卖给他石油了他狗急跳墙去打英荷东印度群岛怎么办？为了避免战争扩大咱们还是继续做生意吧…… 对日本人来讲，事情非常尴尬——你要是想继续从美国人手里拿到物资，就必须按照美国人的意思，控制战争规模；而你想控制战争规模又控制不下来，TG在敌后遍地开花，老蒋死活就不投降，你占领的地方地大物博可就是没有好用的石油，重工业基础又弱到不行。所以日本人思前想后，最后还是向东南亚伸出了魔爪。 1939年2月，日本占领海南岛；3月，日本人又搞定了距马尼拉700英里的南沙群岛；6月，派兵封锁天津英租界，7月强迫英国人跟自己一起建设“东亚新秩序”，正在欧洲被希特勒搞得焦头烂额的英国人几乎没怎么犹豫，就在7月24号跟日本人签订了“有田——克莱琪协定”，承认了日本在中国有“特殊需要”。 这下美国人终于坐不住了，7月26号美国政府正式通知日本没，咱们那个美日商约即将在六个月后废止——半年时间，你自己想想清楚，到底还要不要铁和石油了。日本人终于发现这自己扛不住啊！赶紧还是跟美国人谈谈吧，于是9月25日，海军稳健派、熟悉米英鬼畜内部动向之大将野村吉三郎任专职外相，开始跟美国进行谈判，美国人说这事好办，你们开放长江下游、尊重我们在华权利，有钱大伙一起赚嘛！只要你们肯把中国的利益让出来一点，咱们这个商约还是可以再签的。 未果。 这期间的态势十分有趣，日本人在诺门坎吃了大败仗，彻底打消了北进的念头；敌后大规模扫荡、扫荡、再扫荡，八路就是扫不干净；正面战场进入相持状态，长沙会战、随枣会战都没能达成预定的战略目标，日本国内的经济开始遭不住了。 美国人此时反而比较克制，由于罗斯福担心“再进一步就会激怒日本”，所以1940年1月日美商约失效之后两国的贸易竟然还在诡异的继续着，然而谁也不知道这样的日子会持续多久。 对日本来说，他们必须做出选择了。 1940年3月，日本拟定了军需物资自给自足计划，将更多的精力投入到了东南亚 日本政府深切关怀足以改变荷属东印度群岛现状的任何事态——1940年4月15日,外相有田八郎讲话,太平洋战争史·第二卷：21 日本人在东南亚的脚步越来越快，而美国人则在抓紧时间，卖出自己的最后一份石油。所以一方面是日趋紧张的局势，而另一方面则是不断攀升的石油贸易，美孚石油在7月18日向国务院报告，说日本人提出要买下他们的全部产量！美国政府内部已经吵到不可开交，罗斯福接到的报告说假如我们再不限制日本人购买航空汽油，我们自己军队就可能出现6到9个月的汽油供应不足！ 在巨大的压力面前罗斯福终于决定对日本进行禁运，经过漫长的扯皮与大撕逼之后，政府官员们最终达成了一致，在7月26日宣布对航空发动机燃料及润滑油和第一号高熔度的废钢铁实行出口管制。先总统 蒋公激动地浑身颤抖，跟美国大使表示艾玛你们太够意思了！ 总统和国务卿的伟大而辉煌的举动，减轻了中国自卷入冲突以来面临的极严峻的危机。——先总统 蒋公 在这个后来被无数人称颂的禁运限制里，国务院表示辛烷值87以上的航空汽油都必须禁运！ &gt; 日本人：解释解释，什么叫“辛烷值87以上的航空汽油都必须禁运”？ &gt; 国务院：难道你不懂什么叫禁运？ &gt; 日本人：我要你解释解释，什么叫他妈的“辛烷值87以上的航空汽油都必须禁运”？ &gt; 石油公司：87号以上禁运的意思，就是他妈的87号以下不！禁！运！，还有，往86号航空汽油里加铅可以他妈的提高辛烷值！你懂了没有！？ &gt; 日本人：哦大哥，原来这就是他妈的禁运啊！小弟明白了！ 于是1940年7月到12月，日本从美国进口的86号航空汽油同比增加了550%。 此时日本的经济已经开始在崩溃的边缘上晃悠了，国家总动员法的条款几乎已经全都实施了，结果40年日本西部和朝鲜还遭遇了旱灾，粮食收成不好，好多人连吃大米都成了问题。关键是此时日本的外汇储备也接近枯竭，再这么拖下去用不了多久你想买都买不成了！最后高层达成一致，再不对东南亚下手咱们就得先完蛋了。于是1941年7月2日，御前会议最终制定了《适应形势变化的帝国国策纲要》，表示就算是跟米英鬼畜开战，咱们也得南进！7月24日，日本出兵印度支那南部。 然后罗斯福炸了：老子不禁运你石油就是为了不让你打那边，你自己心里没点数么？于是26号冻结了日本在美的全部资产；英国人表示弟儿你说的对，我们也禁运，然后切断了日本在婆罗洲的石油供给。27号荷兰人跟进，冻结日本资产。这下子事情再也没有回转的余地了。 日本人的精神一下子紧张了起来（……为什么才紧张！？），军方此前一直认为我把印度支那南部这么一占，你们这些米英鬼畜还不得乖乖坐下来跟我和谈么？咱们这和平近在眼前啊！ ……以此确保东亚的战略要地。由此或可使英美荷死心不再压迫日本,并给重庆政府以打击,以找到解决日中战争的突破口,进而或许有助于打开日荷谈判。所以只有尽快抓住时机实行“战略上先发制人之措施”,才能避免同英美作战,此即不战而胜之上策——信天清三郎,日本外交史·下册：668 1941年11月，两艘日本油轮自洛杉矶附近海域空载而归。大怒的日本人……切断了英美使馆的取暖油供应。（……我是一直没搞懂日本人的脑回路）而在此之前，8月份美国人已经提出了自己的条件：日本从中国撤军、各国在中国机会均等以及日本改变三国同盟，这个条件被日本人毫不犹豫地拒绝了。9月6日，日本御前会议批准了《帝国国策施行要点》，指出10月上旬外交依然没有进展，则准备开战。 日本人最开始的计划是咱们先赶紧在东南亚占地盘，然后建立个防御圈——考虑到东南亚还有个美属菲律宾，那美国人妥妥是要来跟咱们打的，到时候咱们舰队决战，拼个你死我活！ 然后联合舰队的指挥官山本五十六对此表示了不同意见——美国人啥工业能力？你什么工业能力？心里没点数么？既然已经料到要打，那为什么不趁着美国人还没有完全动员的时候直接先下手为强？要知道，海军要想重建，那难度可比陆军难多了。咱们一鼓作气消灭美国的太平洋海上力量，然后趁着美国人重建海军无暇的关口逼他就范，承认咱们大日本帝国在亚洲的霸权那是十分合理的！ 11月20日，日本向美国提出最后一个谈判方案，日本人表示这绝对是自己最后的底线了 1.日本政府和美国政府都保证,除了目前己驻有日军的法属印度支那以外,不向东南亚和南太平洋地区的任何地方进行任何武装进军。 2.一俟日本和中国之间恢复和平,或在太平洋地区建立了公正的和平,日本政府保证撤走目前驻扎在法属印度支那的军队。同时,日本政府宣布在本协议(以后将包含在最后协议中)订立时,准备把现驻法属印支南部的军队移驻该地区北部. 3.日美两国政府将进行合作,以保证两国在荷属东印度群岛取得所需要的货物和商品。 4.日本政府和美国相互保证把通商关系恢复到日方资金被冻结前的状态.美国政府将按日本所需的数量供应石油。 5.美国政府保证不采取任何措施和行动,不利于日本和中国之间为谋求全面和平所作的努力。——United States Department of State.Papers relating to the foreign relations of the United States, Japan, 1931–1941, Volume II 美国人对此表示难以置信，并回复了一份由国务卿起草的备忘录，基本上重申了自己在8月份提出的要求。美国人所不知道的，是在自己做出这个回复以前，一支规模空前的舰队已经在单冠湾集结完毕了，那上面的飞行员此前曾反复地练习过如何低空投放鱼雷和炸弹。罗斯福此时还在犹豫要不要向日本示好，以挽回两国之间的关系，11月22日美国国务院远东司甚至接到命令，起草一份新的草案，有限度地恢复对日本的石油、食品及药物供应。然而由于中国及英国的强烈反对，这份草案最终也没能实施。 1941年12月1日，日本御前会议做出了决定：与美国开战。 1941年12月7日，珍珠港事件爆发，美国太平洋舰队遭到重创。 1942年，日本军队逼近东印度群岛的巴厘巴板炼油厂，1943年第一季度，日本的石油危机大大缓和。 石油问题已经基本得到解决——东条英机·1943 以上。 后记：这篇文章的作者设置了禁止转载，不过我这博客也没什么人看，我放在这里也是为了备份，也许将来某天知乎挂了或者作者决定退出知乎了删除了这篇问答？另外，作者的这篇文章里面还是有一些戏谑口吻的地方，我打算围绕着作者写的主干，做一做考据，让这篇文章能够成为之后“键政”的有力资料。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>政治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[996 License 1.0]]></title>
    <url>%2Fposts%2F12613%2F</url>
    <content type="text"><![CDATA[Copyright (c) 996 License Version 1.0 (Draft) Permission is hereby granted to any individual or legal entity obtaining a copy of this licensed work (including the source code, documentation and/or related items, hereinafter collectively referred to as the &quot;licensed work&quot;), free of charge, to deal with the licensed work for any purpose, including without limitation, the rights to use, reproduce, modify, prepare derivative works of, publish, distribute and sublicense the licensed work, subject to the following conditions: The individual or the legal entity must conspicuously display, without modification, this License on each redistributed or derivative copy of the Licensed Work. The individual or the legal entity must strictly comply with all applicable laws, regulations, rules and standards of the jurisdiction relating to labor and employment where the individual is physically located or where the individual was born or naturalized; or where the legal entity is registered or is operating (whichever is stricter). In case that the jurisdiction has no such laws, regulations, rules and standards or its laws, regulations, rules and standards are unenforceable, the individual or the legal entity are required to comply with Core International Labor Standards. The individual or the legal entity shall not induce or force its employee(s), whether full-time or part-time, or its independent contractor(s), in any methods, to agree in oral or written form, to directly or indirectly restrict, weaken or relinquish his or her rights or remedies under such laws, regulations, rules and standards relating to labor and employment as mentioned above, no matter whether such written or oral agreement are enforceable under the laws of the said jurisdiction, nor shall such individual or the legal entity limit, in any methods, the rights of its employee(s) or independent contractor(s) from reporting or complaining to the copyright holder or relevant authorities monitoring the compliance of the license about its violation(s) of the said license. THE LICENSED WORK IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN ANY WAY CONNECTION WITH THE LICENSED WORK OR THE USE OR OTHER DEALINGS IN THE LICENSED WORK. 版权所有（c） 反996许可证版本1.0 在符合下列条件的情况下，特此免费向任何得到本授权作品的副本（包括源代码、文件和/或相关内容，以下统称为“授权作品”）的个人和法人实体授权：被授权个人或法人实体有权以任何目的处置授权作品，包括但不限于使用、复制，修改，衍生利用、散布，发布和再许可： 个人或法人实体必须在许可作品的每个再散布或衍生副本上包含以上版权声明和本许可证，不得自行修改。 个人或法人实体必须严格遵守与个人实际所在地或个人出生地或归化地、或法人实体注册地或经营地（以较严格者为准）的司法管辖区所有适用的与劳动和就业相关法律、法规、规则和标准。如果该司法管辖区没有此类法律、法规、规章和标准或其法律、法规、规章和标准不可执行，则个人或法人实体必须遵守国际劳工标准的核心公约。 个人或法人不得以任何方式诱导或强迫其全职或兼职员工或其独立承包人以口头或书面形式同意直接或间接限制、削弱或放弃其所拥有的，受相关与劳动和就业有关的法律、法规、规则和标准保护的权利或补救措施，无论该等书面或口头协议是否被该司法管辖区的法律所承认，该等个人或法人实体也不得以任何方法限制其雇员或独立承包人向版权持有人或监督许可证合规情况的有关当局报告或投诉上述违反许可证的行为的权利。 该授权作品是&quot;按原样&quot;提供，不做任何明示或暗示的保证，包括但不限于对适销性、特定用途适用性和非侵权性的保证。在任何情况下，无论是在合同诉讼、侵权诉讼或其他诉讼中，版权持有人均不承担因本软件或本软件的使用或其他交易而产生、引起或与之相关的任何索赔、损害或其他责任。 https://link.zhihu.com/?target=https%3A//github.com/kattgu7/996-License-Draft/]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OC和Swift混编Frameowork优雅指南]]></title>
    <url>%2Fposts%2F56606%2F</url>
    <content type="text"><![CDATA[本文主要参考了优雅地开发Swift和Object C混编的Framework。不过实际发现，完全按照文章里面”优雅的解决方案“里面的说法操作，还是没法成功。我这里根据实际情况作出了调整。 参考的文章中在“优雅的解决方案”这个section之前的内容都是好用的，你可以用用来创建一个兼容OC和Swift的Cooca Touch Framework。 这里说的“优雅”，指的是控制OC部分接口保留的问题（详情可以参考原文部分） 原文里面只说了具体的操作步骤，没有高屋建瓴地说出这种方法的实际思路：事实上，采用module.modulemap的方法是将OC部分打包成一个可以使用Swfit语句进行导入(import)的模块。以这个视角，我们再来梳理一下操作步骤： 新建一个module.modulemap文件 文件里的内容如下： 12345module OCSource [system] &#123; //由于module.modulemap和OCSource.h是在同一个文件夹的，如果不是同一个，路径要写全 header &quot;OCSource.h&quot; export *&#125; 有一个容易犯错的问题是将这里的模块名字, OCSource命名为了Cocoa Touch Framework的名字。这样会导致编译出错，错误信息会提示你Module名字重复定义。这里的名字要区别的Framework的名字，具体是什么可以自己自由选择。不过推荐和头文件的名字一致 后一步操作是把module.modulemap的路径添加到Build Settings的Import Paths中，这是为了让我们在Swift里面import这个module的时候能够找到目标. Import Paths in Build Settings 那么，这里的$(SRCROOT)/MixFramework其实就是指的module.modulemap的路径。 将OCSouce.h文件的权限改为project Header Visibility Settings 这可以让OCSource.h不再对外可见。 然后，删除MixFramework.h(umbrella header)中#import 的OC header。 原文的内容到此结束，但是其实还是不够的。这时候如果编译，会发现你在Framework内部的Swift使用OCSource的地方都会报错说OCSource不存在。因为将OCSource.h从umbrella header中删除之后Swift就无法看到这个文件了。然而，通过module.modulemap文件我们将OCSource.h及相关的OC文件打包成了了一个Swift模块，因此我们可以在Swift代码中import进来： 1import OCSource 在报错的Swift文件中添加这个导入，就可以解决这个问题了.]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>ios</tag>
        <tag>swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Universal(Fat) Framework for Swift Projects]]></title>
    <url>%2Fposts%2F28461%2F</url>
    <content type="text"><![CDATA[Cocoa Touch Framework 最近在给朋友做一个项目，要求将涉及到的算法内容整理成一个单独的framework，这样可以隐藏算法细节，方便交付。这个需求可以很容易地通过Cocoa Touch Framework实现。不过在交付的时候存在一个头疼的问题：默认情况下，Xcode在编译Cocoa Touch Framework时只会编译出支持模拟器或者真机的Framework，而无法编译出同时支持模拟器和真机的Framework，即Universal(Fat) Framework。这一需求还需要进一步地利用一些系统脚本来实现。 这里假设你已经有了一个能够正常工作，编译的包含Cocoa Touch Framework的工程。我这里实现时使用的是Xcode10.2。 事实上我在调研中发现了很多不同的实现编译Universal Framework的教程，但是他们并不总是有用，我这里只遴选了我自己测试通过没有问题的思路。这一思路通过Archive过程来打包输出framework 首先从Xcode左上角选择Cocoa Touch Framework的默认scheme，然后点击Edit Scheme Edit Scheme 在Archive的post-action中添加一个运行脚本(New Run Script Action) New Run Script Action 脚本内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748exec &gt; /tmp/$&#123;PROJECT_NAME&#125;_archive.log 2&gt;&amp;1UNIVERSAL_OUTPUTFOLDER=$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-universalif [ "true" == $&#123;ALREADYINVOKED:-false&#125; ]thenecho "RECURSION: Detected, stopping"elseexport ALREADYINVOKED="true"# make sure the output directory existsmkdir -p "$&#123;UNIVERSAL_OUTPUTFOLDER&#125;"echo "Building for iPhoneSimulator"xcodebuild -workspace "$&#123;WORKSPACE_PATH&#125;" -scheme "$&#123;TARGET_NAME&#125;" -configuration $&#123;CONFIGURATION&#125; -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 6' ONLY_ACTIVE_ARCH=NO ARCHS='i386 x86_64' BUILD_DIR="$&#123;BUILD_DIR&#125;" BUILD_ROOT="$&#123;BUILD_ROOT&#125;" ENABLE_BITCODE=YES OTHER_CFLAGS="-fembed-bitcode" BITCODE_GENERATION_MODE=bitcode clean build# Step 1. Copy the framework structure (from iphoneos build) to the universal folderecho "Copying to output folder"# 这行是在我参考的脚本的基础上添加进去的。脚本在运行过程中有一个问题：在试图将# archive过程中生成的device framework拷贝进来时，总是拷贝的framework文件夹# 的内容，而非整个文件夹，所以我们这里手动创建这个文件夹mkdir -p "$&#123;UNIVERSAL_OUTPUTFOLDER&#125;/$&#123;FULL_PRODUCT_NAME&#125;"cp -R "$&#123;ARCHIVE_PRODUCTS_PATH&#125;$&#123;INSTALL_PATH&#125;/$&#123;FULL_PRODUCT_NAME&#125;" "$&#123;UNIVERSAL_OUTPUTFOLDER&#125;/$&#123;FULL_PRODUCT_NAME&#125;"# Step 2. Copy Swift modules from iphonesimulator build (if it exists) to the copied framework directorySIMULATOR_SWIFT_MODULES_DIR="$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/$&#123;TARGET_NAME&#125;.framework/Modules/$&#123;TARGET_NAME&#125;.swiftmodule/."echo "SIMULATOR_SWIFT_MODULES_DIR: $&#123;SIMULATOR_SWIFT_MODULES_DIR&#125;"if [ -d "$&#123;SIMULATOR_SWIFT_MODULES_DIR&#125;" ]; thencp -R "$&#123;SIMULATOR_SWIFT_MODULES_DIR&#125;" "$&#123;UNIVERSAL_OUTPUTFOLDER&#125;/$&#123;TARGET_NAME&#125;.framework/Modules/$&#123;TARGET_NAME&#125;.swiftmodule"fi# Step 3. Create universal binary file using lipo and place the combined executable in the copied framework directoryecho "Combining executables"lipo -create -output "$&#123;UNIVERSAL_OUTPUTFOLDER&#125;/$&#123;FULL_PRODUCT_NAME&#125;/$&#123;EXECUTABLE_PATH&#125;" "$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/$&#123;EXECUTABLE_PATH&#125;" "$&#123;ARCHIVE_PRODUCTS_PATH&#125;$&#123;INSTALL_PATH&#125;/$&#123;EXECUTABLE_PATH&#125;"# Step 4. Create universal binaries for embedded frameworks#for SUB_FRAMEWORK in $( ls "$&#123;UNIVERSAL_OUTPUTFOLDER&#125;/$&#123;TARGET_NAME&#125;.framework/Frameworks" ); do#BINARY_NAME="$&#123;SUB_FRAMEWORK%.*&#125;"#lipo -create -output "$&#123;UNIVERSAL_OUTPUTFOLDER&#125;/$&#123;TARGET_NAME&#125;.framework/Frameworks/$&#123;SUB_FRAMEWORK&#125;/$&#123;BINARY_NAME&#125;" "$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/$&#123;SUB_FRAMEWORK&#125;/$&#123;BINARY_NAME&#125;" "$&#123;ARCHIVE_PRODUCTS_PATH&#125;$&#123;INSTALL_PATH&#125;/$&#123;TARGET_NAME&#125;.framework/Frameworks/$&#123;SUB_FRAMEWORK&#125;/$&#123;BINARY_NAME&#125;"#done# Step 5. Convenience step to copy the framework to the project's directoryecho "Copying to project dir"yes | cp -Rf "$&#123;UNIVERSAL_OUTPUTFOLDER&#125;/$&#123;FULL_PRODUCT_NAME&#125;" "$&#123;PROJECT_DIR&#125;"open "$&#123;PROJECT_DIR&#125;"fi 上述脚本的内容主要来自于export-fat-swift-dynamic-framework，我在这里根据实际情况进行了更改 此时执行archive操作(Product-&gt;Archive)完成后会自动弹出Finder窗口显示新生成的framework的位置（应当就是位于项目根目录下）。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>ios</tag>
        <tag>swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时局图：论扛着红旗反红旗]]></title>
    <url>%2Fposts%2F8446%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>政治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS:图像截取部分(Image Cropping)]]></title>
    <url>%2Fposts%2F2543%2F</url>
    <content type="text"><![CDATA[Cover 这里我们讨论的图像截取部分是指从一个完整的大图中截取一小部分出来。当然，使用js实现。 这边文章基本整理自Cropping images with Javascript， 添加了一些我的评论 例如，我们要从这样的大图中： 大图 截取出 小图 使用H5中的canvas可以简单地解决这个问题。 1. 载入原图像 1234567891011121314var loadTimer;var imgObject = new Image();imgObject.src = 'images/fozzie.jpg';imgObject.onLoad = onImgLoaded();function onImgLoaded() &#123; if (loadTimer != null) clearTimeout(loadTimer); if (!imgObject.complete) &#123; loadTimer = setTimeout(function() &#123; onImgLoaded(); &#125;, 3); &#125; else &#123; onPreloadComplete(); &#125;&#125; 注意这里我们为了演示是读取的图片文件内容，实际上除了图像文件，这里的“图像”还可以是其他形式，例如video元素，别的canvas等。 2. 当图片完成载入以后，重新绘制你要截取的那一部分 123456function onPreloadComplete()&#123; //call the methods that will create a 64-bit version of thumbnail here. var newImg = getImagePortion(imgObject, 120, 150, 150, 80, 2); //place image in appropriate div document.getElementById("images").innerHTML = "&lt;img alt="" src=""+newImg+"" /&gt;";&#125; 这个onPreloadComplete函数会在图像载入完成以后调用。在这个函数中我们会调用实际完成图片截取的函数getImagePortion 3. 图像截取 123456789101112131415161718getImagePortion(imgObj, newWidth, newHeight, startX, startY, ratio)&#123; /* the parameters: - the image element - the new width - the new height - the x point we start taking pixels - the y point we start taking pixels - the ratio */ //set up canvas for thumbnail var tnCanvas = document.createElement('canvas'); var tnCanvasContext = canvas.getContext('2d'); tnCanvas.width = newWidth; tnCanvas.height = newHeight; /* use the sourceCanvas to duplicate the entire image. This step was crucial for iOS4 and under devices. Follow the link at the end of this post to see what happens when you don’t do this */ var bufferCanvas = document.createElement('canvas'); var bufferContext = bufferCanvas.getContext('2d'); bufferCanvas.width = imgObj.width; bufferCanvas.height = imgObj.height; bufferContext.drawImage(imgObj, 0, 0); /* now we use the drawImage method to take the pixels from our bufferCanvas and draw them into our thumbnail canvas */ tnCanvasContext.drawImage(bufferCanvas, startX,startY,newWidth * ratio, newHeight * ratio,0,0,newWidth,newHeight); return tnCanvas.toDataURL();&#125; 上面的函数时原作者给出的方法，他先将图像完整地画到一个canvas(bufferCanvas)上，再将这个canvas对应的目标区域画到tnCanvas上，根据注释来看，似乎是出于性能或者适配方面的考虑。不过就我在开发桌面端网页时，可以直接将imgObj画到tnCanvas上。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转载】IOS的一些设计规范]]></title>
    <url>%2Fposts%2F23804%2F</url>
    <content type="text"><![CDATA[转载自BIGD团队。]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac: 将APP打包成dmg]]></title>
    <url>%2Fposts%2F62609%2F</url>
    <content type="text"><![CDATA[创建一个新的文件夹，将APP放到这个新文件夹中 打开Disk Utility &gt; File &gt; New Image &gt; Image from Folder.（中文的话，是磁盘工具 &gt; 文件 &gt; 新建映像 &gt; 来自文件夹的映像...） 在弹出的窗口中，选择在第一步中新建的文件夹 选择输出dmg文件的存储位置，然后点击保存按钮]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转载】在小米电视和小米盒子上看YOUTUBE]]></title>
    <url>%2Fposts%2F5827%2F</url>
    <content type="text"><![CDATA[使用小米电视和小米盒子看YouTube上的视频，是很多中国电视用户很想做的事情，下面，我就介绍一种很简单的方法，不用ROOT小米电视或小米盒子，不用重装系统，几分钟的设置就可以在小米电视和小米盒子上看YouTube的方法。 首先需要下载两个APK应用，第一个是SmartYouTubeTV，点击这里下载最新版SmartYouTubeTV，将其复制到U盘。第二个是Shadowsocks，访问apkmirror网站，搜索Shadowsocks，找到最新版后，下载universal的apk到U盘即可。 之后，打开小米电视或小米盒子，在“设置-账户与安全”里，选择“允许安装未知来源的应用”。插入U盘，将上述两个apk文件安装到电视上。 最后，在Shadowsocks上设置好服务器地址，打开SmartYouTubeTV，选择第一个，然后可以选择登陆Google账号，登陆的时候，会让用户在手机上访问 youtube.com/activate 来登陆激活，登陆好了后，电视即可和电脑浏览器的YouTube同步了。 Smart YouTube TV里登陆Google账号后，你会发现，YouTube里的订阅、上传、历史什么的功能全部可以正常使用了，完美支持小米遥控器控制，观看视频体验极佳，完全不亚于官方的应用。 当然，用户也可以选择安装官方的YouTube应用，但必须安装Google框架等一堆东西，使用体验可能还未必好。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>转载</tag>
        <tag>翻墙</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在普通网络环境下上北邮人]]></title>
    <url>%2Fposts%2F54288%2F</url>
    <content type="text"><![CDATA[在学校里看剧、电影，下载破解游戏基本都靠北邮人。一方面资源比较全，另一方面是走IPv6，不需要走计费的校园网IPv4流量。不过由于北邮人只支持IPv6，而国内IPv6基本只有校园网有。问题来了，怎么在校外的纯IPv4环境下使用IPv6 Only的北邮人呢？ 从IPv4到IPv6 这是最重要的一步。你首先需要一个支持IPv6的VPS。国内目前支持IPv6的好像只有阿里云？，即便支持，国内的IPv6 VPS又贵又难用（需要申请）。因此最好的方案是采用海外的VPS。听起来用海外的VPS会很慢？其实海外的VPS主要是延时高，其实速度还是挺快的，而且P2P传输业务受到延时的影响挺小的，实测利用我的VPS可以达到5MB/s的P2P下载速度（在服务器上看上下行都是5MB/s，基本跑满了100M的带宽）。我用的VPS是Digital Ocean的旧金山节点。价格是$5一个月。平均下来每天一块钱吧。注意创建Droplet的时候要自己勾选IPv6（添加IPv6是免费的）。 选择IPv6 在服务器上我部署了Shadowsocks服务。SS服务器可以直接无痛支持IPv4到IPv6的转换。关于如何部署Shadowsocks，这方面的教程文章网上汗牛充栋，我这里就不提供了。 设置 首先需要将北邮人的网址bt.byr.cn添加到Shadowsocks客户端的代理列表。 Shadowsocks选项 点击Shadowsocks小飞机，选择“编辑PAC用户自定规则”。在弹出的框中输入||bt.byr.cn： 编辑PAC用户自定规则 然后你就能在IPv4网络环境下打开北邮人的网页啦。 接下来是设置下载客户端uTorrent的网络设置。打开uTorrent的设置(Preferences)，进入到Network。进行如下设置： uTorrent设置 注意：上面的Socks5设置中，端口会与你的Shadowsocks设置有关。如果你没有动过相关设置的话，应该就是1086端口。 查看你的Shadowsocks客户端Sock5代理端口设置的方式是单击Shadowsocks小飞机，选择偏好设置，在弹出的窗口中点击“高级”，其中“本地Socks5监听端口”即为应该填写到uTorrent设置中的代理端口。 大功告成！_(:з」∠)_]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SimpleOpenNI在Processing导出应用中的库引用问题]]></title>
    <url>%2Fposts%2F65501%2F</url>
    <content type="text"><![CDATA[在Processing中使用SimpleOpenNI时，如果尝试将本来能够正常运行的pde文件导出成应用，那么在运行时会出现java.lang.UnsatisfiedLinkError这个错误。详细信息如下： 1234567891011121314Can&apos;t load SimpleOpenNI library (libSimpleOpenNI.jnilib) : java.lang.UnsatisfiedLinkError: Can&apos;t load library: /SimpleOpenNI/library/libSimpleOpenNI.jnilibVerify if you installed SimpleOpenNI correctly.http://code.google.com/p/simple-openni/wiki/Installationjava.lang.UnsatisfiedLinkError: SimpleOpenNI.SimpleOpenNIJNI.swig_module_init()V at SimpleOpenNI.SimpleOpenNIJNI.swig_module_init(Native Method) at SimpleOpenNI.SimpleOpenNIJNI.&lt;clinit&gt;(SimpleOpenNIJNI.java:290) at SimpleOpenNI.ContextWrapper.&lt;init&gt;(ContextWrapper.java:54) at SimpleOpenNI.SimpleOpenNI.&lt;init&gt;(SimpleOpenNI.java:253) at Sketch.settings(Sketch.java:28) at processing.core.PApplet.handleSettings(PApplet.java:954) at processing.core.PApplet.runSketch(PApplet.java:10786) at processing.core.PApplet.main(PApplet.java:10511) at Main.main(Main.java:7) 根据错误信息，是在读取libSimpleOpenNI.jnilib这个库文件时失败导致的。奇怪的是，程序尝试读取的路径是：/SimpleOpenNI/library/libSimpleOpenNI.jnilib。这是一个很奇怪的绝对路径。也有人尝试直接将库文件复制到这个全局路径的位置，可以让程序运行起来。可是这种方法也太不优雅了。 为什么会出现这种现象？ 通过IntelliJ可以打开SimpleOpenNI.jar查看代码细节。可以看到SimpleOpenNI.class中确定载入库文件路径的方式如下： 1234567891011121314151617181920212223242526272829303132static &#123; String var0 = System.getProperty("os.name").toLowerCase(); String var1 = "SimpleOpenNI"; String var2 = System.getProperty("os.arch").toLowerCase(); if (var0.indexOf("win") &gt;= 0) &#123; // ... &#125; else if (var0.indexOf("nix") &lt; 0 &amp;&amp; var0.indexOf("linux") &lt; 0) &#123; if (var0.indexOf("mac") &gt;= 0) &#123; var1 = "lib" + var1 + ".jnilib"; nativLibPath = getLibraryPathLinux() + "/SimpleOpenNI/library/"; nativDepLibPath = nativLibPath + "osx/"; &#125; &#125; else &#123; nativLibPath = "/SimpleOpenNI/library/linux"; if (var2.indexOf("86") &gt;= 0) &#123; var1 = var1 + "32"; &#125; else if (var2.indexOf("64") &gt;= 0) &#123; var1 = "lib" + var1 + "64.so"; nativLibPath = getLibraryPathLinux() + "/SimpleOpenNI/library/"; nativDepLibPath = nativLibPath + "linux64/"; &#125; &#125; try &#123; System.load(nativLibPath + var1); &#125; catch (UnsatisfiedLinkError var5) &#123; System.out.println("Can't load SimpleOpenNI library (" + var1 + ") : " + var5); System.out.println("Verify if you installed SimpleOpenNI correctly.\nhttp://code.google.com/p/simple-openni/wiki/Installation"); &#125; _initFlag = false; &#125; 注意到在生成库文件路径时，/SimpleOpenNI/library/libSimpleOpenNI.jnilib，前面应该会添加getLibraryPathLinux()的结果。 123456789101112public static String getLibraryPathLinux() &#123; URL var0 = SimpleOpenNI.class.getResource("SimpleOpenNI.class"); if (var0 != null) &#123; String var1 = var0.toString().replace("%20", " "); int var2 = var1.indexOf(47); boolean var3 = true; int var4 = var1.indexOf("/SimpleOpenNI/library"); return -1 &lt; var2 &amp;&amp; -1 &lt; var4 ? var1.substring(var2, var4) : ""; &#125; else &#123; return ""; &#125; &#125; 我尝试了在不同环境下,SimpleOpenNI.class.getResource(&quot;SimpleOpenNI.class&quot;)下运行的结果。发现： 在pde运行时，获取到的是独立的SimpleOpenNI.jar下的路径，例如：/Users/lena/Documents/Processing/libraries/SimpleOpenNI/library/SimpleOpenNI.jar!/SimpleOpenNI/SimpleOpenNI.class 在导出应用中运行时，获取到的是打包后应用内的，例如.../MySketch/application.macosx/MySketch.app/Contents/Java/SimpleOpenNI.jar!/SimpleOpenNI/SimpleOpenNI.class 在函数getLibraryPathLinux中，程序会定位/SimpleOpenNI/library这个字符串，然后取出这个子字符串前的内容构成的路径。上述第二种情形内，SimpleOpenNI.jar被打包到应用内后，不在处于/SimpleOpenNI/library这个前缀目录下，所以导致定位失败。 如何解决这个问题。 在无法直接修改SimpleOpenNI的源代码的情况下，要修复这个问题，就要想办法把SimpleOpenNI.jar放到SimpleOpenNI/library目录下。我使用的macOS系统，下面的方法都是在Mac下测试。不过基本思路可以迁移到Windows上。 在生成的App上右键选择显示包内容。可以查看其内部结构： 123456789101112131415161718192021222324252627282930.├── Info.plist├── Java│ ├── Sketch.jar│ ├── NiTE2│ ├── SimpleOpenNI.jar│ ├── SimpleOpenNI32.dll│ ├── SimpleOpenNI64.dll│ ├── core.jar│ ├── data│ ├── gluegen-rt-natives-macosx-universal.jar│ ├── gluegen-rt.jar│ ├── javamp3-1.0.3.jar│ ├── jogl-all-natives-macosx-universal.jar│ ├── jogl-all.jar│ ├── jsyn-20171016.jar│ ├── libSimpleOpenNI.jnilib│ ├── libSimpleOpenNI64.so│ ├── osx│ ├── sound.jar│ ├── win32│ └── win64├── MacOS│ └── Sketch├── PkgInfo├── PlugIns│ └── jdk1.8.0_181.jdk└── Resources ├── en.lproj └── sketch.icns 可以看到SimpleOpenNI.jar位于Java目录下。我尝试过直接在此处创建目录SimpleOpenNI/library并把SimpleOpenNI.jar放进去。但是运行提示无法找到SimpleOpenNI.jar。这需要在APP运行时进一步指定CLASSPATH。有一种方法是直接在Info.plist文件里面添加-Djava.class.path运行属性，或者添加ClASSPATH环境变量，但是这种方法会要求你手动填写所有需要使用的jar依赖，甚至是包括processing的jar文件。这对于后续维护和修改很不利。所以这里我采取了另一种取巧的办法。 进入Contents/MacOS目录，删除原来的Sketch文件(你看到的应该是和你的Processing程序同名的文件，我这里用Sketch来代替)。新建一个同名的空白的文本文件，然后在文件中添加如下内容： 1234567891011121314151617181920212223242526#!/bin/bashcd "$(dirname $&#123;BASH_SOURCE&#125;)"cd ../..APP_ROOT=$(pwd)cd Contents/JavaJAR_LIBS=$(ls *.jar | tr "\n" ":")# 添加SimpleOpenNI.jarJAR_LIBS=$&#123;JAR_LIBS&#125;./SimpleOpenNI/library/SimpleOpenNI.jarAPP_NAME=$(basename "$&#123;BASH_SOURCE&#125;")# 注意：如果你内嵌的jdk的版本不同，要把jdk1.8.0_181.jdk替换成对应的版本# 如果你没有在app内部内嵌jdk，这里修改成JAVA_BIN=java，使用系统全局的java即可JAVA_BIN=$&#123;APP_ROOT&#125;/Contents/PlugIns/jdk1.8.0_181.jdk/Contents/Home/jre/bin/java$&#123;JAVA_BIN&#125; \-Djna.nosys=true \-Djava.ext.dirs=$APP_ROOT/Contents/PlugIns/jdk1.8.0_181.jdk/Contents/Home/jre/lib/ext \-Xdock:icon=$APP_ROOT/Contents/Resources/sketch.icns \-Djava.library.path=$APP_ROOT/Contents/Java \-Dapple.laf.useScreenMenuBar=true \-Dcom.apple.macos.use-file-dialog-packages=true \-Dcom.apple.macos.useScreenMenuBar=true \-Dcom.apple.mrj.application.apple.menu.about.name=$&#123;APP_NAME&#125; \-classpath $&#123;JAR_LIBS&#125; $&#123;APP_NAME&#125; 为这个文件添加可执行权限 1chmod +x ./Sketch 将~/Documents/Processing/libraries/SimpleOpenNI整个文件夹拷贝进导出APP的Contents/Java目录下。然后就可以运行了。]]></content>
      <categories>
        <category>processing</category>
      </categories>
      <tags>
        <tag>processing</tag>
        <tag>Debug</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shadowsocks中继:从IPv4到IPv6]]></title>
    <url>%2Fposts%2F6289%2F</url>
    <content type="text"><![CDATA[最近墙又双叒叕加高了。在春节前就发现自己的VPS无法连接，后来发现还好只是端口被封禁，换成其他的端口就能使用了。不过这才撑了半个月新的端口访问又不太稳定了。如果再换端口，或许也可以。但是不是长久之计。不过我的VPS是支持IPv6的，一般来说，墙对于IPv6流量的拦截比较弱。或许可以想办法先把自己的流量转换成IPv6然后再出去。 我也设想过要不要给代理添加混淆的功能，处于以下几方面的考虑，还是选择了流量转换的方案： 1. 手机端部分ss应用不支持混淆； 2. 未来混淆还是可能被针对性的拦截。但是IPv6则不会。GFW拦截还是拦截大鱼不拦截小鱼的。国内目前IPv6的使用范围仍然非常小，而且基本只限于教育网。因此IPv6在未来的很长一段时间内不会成为GFW的针对目标 我们这里使用HAProxiy来完成这一功能。 安装HAProxy 1234wget http://www.haproxy.org/download/1.7/src/haproxy-1.7.2.tar.gztar -xzf haproxy-1.7.2.tar.gzmake TARGET=linux2826 USE_GETADDRINFO=1sudo make install 注意，在倒数第二行的make命令中，TARGET需要根据你的内核版本来选择。USE_GETADDRINFO的作用是使得HAProxy可以对域名采用DNS查询来获取IP。使用包管理器安装的HAProxy是不带这个功能的。 设置 123456789101112131415161718global ulimit-n 51200 daemon # run as daemondefaults log global mode tcp option dontlognull timeout connect 1000 timeout client 150000 timeout server 150000frontend ss-in bind *:port # 跳板机监听端口 default_backend ss-outbackend ss-out server server1 vps_host:vps_ss_port maxconn 20480 设置文件位于/etc/haproxy/haproxy.cfg。在完成设置后，使用sudo haproxy -f /etc/haproxy/haproxy.cfg来运行。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转载】无人机击落客机只是时间问题]]></title>
    <url>%2Fposts%2F48586%2F</url>
    <content type="text"><![CDATA[我是一个无人机集群技术的研究者，从最近开始我打算集中整理发布一些无人机，尤其是无人机集群技术的新进展以及评论文章。 原文链接：It’s only a matter of time before a drone takes down a passenger plane Cover 2018年12月，英国第二大机场盖特威克机场，发现有一架无人机飞过机场，不得不关闭一天，几十万旅客受到影响。目前还不知道这架无人机是谁操作，为什么要飞入机场。 这个事件表明，无人机对商业航空已经构成威胁。更严重的是，&quot;反无人机&quot;技术起不了多大作用。无人机已经变得太便宜，太强大，客机将不可避免地受到影响。无论是开枪、无线电干扰、或者其他措施，都无法可靠地保护客机。这可能听起来危言耸听，但我们对无人机真的缺乏办法。 现在，消费者可以买到的最便宜无人机，只需要25美元。这些产品接受遥控器的无线信号，相对容易防范，只要干扰它们的无线电信号，就可以了。稍微昂贵的无人机有 GPS 芯片，这种无人机可以编程设置一个&quot;地理围栏&quot;，防止它们飞入指定的地理坐标范围内。 但是，上面的这些措施，只能防住普通消费者从正规渠道买到的无人机。对于具有中等技术水平的人来说，制造一架无人机很容易，自制无人机也不需要 GPS 芯片。它们也不一定需要与操作员通信，才能保持飞行，这使得无线电干扰无效。而且，强度太大的干扰信号，反而可能会影响到本来要保护的客机。 可以肯定的是，一架无人机攻击一架客机，成功机会不大。这是因为在起飞和着陆时（最容易遭遇无人机的阶段），客机的移动速度非常快，通常在每小时150到200英里之间，很少有无人机能够以50~70英里/小时的速度飞行，所以客机应该可以避开无人机。此外，飞机的设计可以承受鸟撞，如果一架无人机意外撞到客机，客机可能只会受到轻微损坏，很可能还是能够安全降落。 但是，如果无人机成群飞行，事情就会发生变化。虽然单个无人机很难攻击飞机，但是在客机的飞行路径上放置30架无人机，就可能会发生变化。考虑到无人机的价格，多架无人机群体攻击是很容易的。如果通过编程，找出客机的引擎（通过红外传感或通过图像），然后无人机携带少量爆炸物，撞击可能会致命。 总之，对于那些蓄意攻击客机的半自动或全自动无人机集群，根本就没有好的技术对策。]]></content>
      <categories>
        <category>科技新闻</category>
      </categories>
      <tags>
        <tag>无人机</tag>
        <tag>科技新闻</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Netlink:用户空间与内核空间交互]]></title>
    <url>%2Fposts%2F2348%2F</url>
    <content type="text"><![CDATA[Reference 1 什么是Netlink Netlink is a socket family that supplies a messaging facility based on the ++BSD socket interface++ to send and retrieve kernel-space information from user-space. Netlink is portable, highly extensible and it supports ++event-based notifications++. 从这段描述来看Netlink可以提供类似socket接口，这意味着我们能够传输比较大量的，结构化的数据。另外，Netlink还提供了基于时间通知的功能，也适合我们时刻监控系统动态。 Netlink是一种面向数据表(datagram-oriented)的连通用户空间和内核空间的__++消息系统++__。同时，Netlink也可以用于进程间通信(InterProcess Communication, IPC)。我们这里只关注前者。Netlink构筑与通用的BSD scoket基础设施之上，因此支持使用socket(), bind(), sendmsg(), recvmsg()和其他通常的socket polling操作。 一般的BSD socket使用的是固定格式的数据结构(如AF_INET或者AF_RAW)。Netlink则提供更加可扩展的数据格式。 2 Netlink的典型应用场景 当前Netlink主要应用场景是网络相关应用，包括： advanced routing IPsec key management tools firewall state synchronization uesr-space packet enqueuing border gateway routing protocols wireless mesh routing protocols 这个应用场景与我们的需要时契合的 3 Netlink总线 Netlink允许最多32条内核空间总线。一般来说每个总线都关联到一个内核子系统中（多个子系统也可以共享一个总线）。总线共享的例子包括： nfnetlink：所有防火墙相关子系统共享 rtnetlink：网络设备管理，路由和队列管理 关于Netlink总线，我发现了一个内核的patch，其中提到，&quot;This patchset aims to improve this situation by add ing a new NETLINK_DESC bus with two commands...&quot; 4 Netlink通信类型 Netlink支持两种通信类型： Unicast：一对一通信，即一个内核子系统对应一个用户空间程序。这种通信模式一般用来发送命令，或者获取命令执行的结果。 Multicast：一对多通信。通常的场景是一个内核态模块向多个用户态监听者发送消息。这种监听者被划分为多个不同的组。一条Netlink总线可以提供多个组，用户空间可以订阅到一个或者多个组来获取对应的信息。最多可以创建 个组。 Example scenario of unicast and multicast Netlink sockets 上图给出了Unicast和Multicast的图示。注意这里unicast是同步的，multicast是异步的。 5 Netlink消息格式 一般来说，Netlink消息对齐到32bit，其内部数据是host-byte order. 一个Netlink消息总由一段16bytes的header组成，header的格式为struct nlmsghdr（定义在&lt;include/linux/netlink.h&gt;中） Layout of a Netlink message header header包含如下字段： 消息长度（32bits, 包含header的长度） 消息类型（16bits）。消息类型的划分有两大类别：数据消息和控制消息。其中数据消息的类型取决于内核模块所允许的取值。控制消息类型则对所有Netlink子系统是一致的。控制消息的类型目前一共有四种。 NLMSG_NOOP: 不对对应任何实质操作，只用来检测Netlink总线是否可用 NLMSG_ERROR：该消息包含了错误信息 NLMSG_DONE：this is the trailing message that is part of a multi-part message. A multi-part message is composed of a set of messages all with the NLM_F_MULTI flag set. NLMSG_OVERRUN：没有使用 消息标识(16bits)。一些例子如下： NLM_F_REQUEST: 如果这个标识被设置了，表明这个消息代表了一个请求。从用户空间发往内核空间的请求必须要设置这个标识，否则内核子系统必须要回复一个invalid argument(EINVAL)的错误信息。 NLM_F_CREATE: 用户空间想要发布一个命令，或者创建一个新的配置。 NLM_F_EXCL: 通常和NLM_F_CREATE一起使用，用来出发配置已经存在的错误信息。 NLM_F_REPLACE: 用户空间想要替换现有配置。 NLM_F_APPEND: 想现有配置添加配置。这种操作一般针对的是有序的数据，如路由表。 NLM_F_DUMP: 用户应用想要和内核应用进行全面重新同步。这中消息的结果是一系列的multipart message。 NLM_F_MULTI: this is a multi-part message. A Netlink subsystem replies with a multi-part message if it has previously received a request from user-space with the NLM F DUMP flag set. NLM_F_ACK: 设置了这个标识后，内核会返回一个确认信息表明一个请求已经执行。如果这个flag没有返回，那么错误信息会作为sendmsg()函数的返回值同步返回。 NLM_F_ECHO: if this flag is set, the user-space application wants to get a report back via unicast of the request that it has send. 注意通过这种方式获取信息后，这个程序不会再通过事件通知系统获取同样的信息。 Sequence Number (32bits): The sequence number is used as a tracking cookie since the kernel does not change the sequence number value at all 可以和NLM_F_ACK一起使用，用户空间用来确认一个请求被正确地发出了。 Netlink uses the same sequence number in the messages that are sent as reply to a given request For event-based notifications from kernel-space, this is always zero. Port-ID (32bits): 包含了Netlink分配的一个数字ID。Netlink使用不同的port ID来确定同一个用户态进程打开的不同socket通道。第一个socket的默认port ID是这个进程的PID(Process ID)。在下面这些场景下，port ID为0： 消息来自内核空间 消息发送自用户空间，我们希望Netlink能够自动根据socket通道的port ID自动设置消息的port ID 以上是通用Netlink header格式。一些内核子系统会进一步定义自己的header格式，这样不同的子系统可以共享同一个Netlink socket总线。这种情形成为GetNetlink。 6 Netlink负载 6.1 Type-Length-Value(TLV)格式 An example of a hypothetical Netlink payload in TLV format Netlink的消息格式由TLV格式的属性组成。TLV属性分为Length, Type和Payload三部分。这种格式具有很强的可扩展性。在内核中，TLV属性的header定义如下: 12345678910111213/* * &lt;------- NLA_HDRLEN ------&gt; &lt;-- NLA_ALIGN(payload)--&gt; * +---------------------+- - -+- - - - - - - - - -+- - -+ * | Header | Pad | Payload | Pad | * | (struct nlattr) | ing | | ing | * +---------------------+- - -+- - - - - - - - - -+- - -+ * &lt;-------------- nlattr-&gt;nla_len --------------&gt; */struct nlattr &#123; __u16 nla_len; __u16 nla_type;&#125;; nla_type：属性的取值很大程度上取决于内核空间子系统定义。不过Netlink预先定了两个重要的比特位： NLA_F_NETSTED: 是否是嵌套属性。即在payload部分，以TLV的格式存储了更多的属性。 NLA_F_NET_BYTEORDER: payload内容的字节顺序（是否是network byte order(1)) nla_len: 注意，尽管payload部分会按照32bit进行对齐，这里的长度内容是不包含对齐补全的bit的。另外，这里的长度值包含了header。 7 Netlink错误消息 Layout of a Netlink error message Netlink提供了一种包含了Netlink error header的消息类型，其格式如上图所示。这个header定义为struct nlmsgerr (&lt;include/linux/netlink.h&gt;) 12345678910111213struct nlmsgerr &#123; int error; struct nlmsghdr msg; /* * followed by the message contents unless NETLINK_CAP_ACK was set * or the ACK indicates success (error == 0) * message length is aligned with NLMSG_ALIGN() */ /* * followed by TLVs defined in enum nlmsgerr_attrs * if NETLINK_EXT_ACK was set */&#125;; error: 错误类型。定义在error.h中，可以用perror()解析。 Netlink消息，为触发此错误的消息内容。 &gt; With regards to message integrity, the kernel subsystems that support Netlink usually report invalid argument (EINVAL) via recvmsg() if user-space sends a malformed message 8 GeNetlink 前文我们提到过GetNetlink了。这一技术是为了缓解Netlink总线数量过少的问题。GeNetlink allows to register up to 65520 families that share a single Netlink bus. Each family is intended to be equivalent to a virtual bus。其中，每个family通过一个唯一的string name and ID number来注册。其中string name作为主键，而ID number在不同的系统中可能不同。 9 Netlink开发 Netlink开发涉及到内核空间和用户空间双边的开发。Linux提供了很多帮助函数来见过Netlink开发中重复性的解析，验证，消息构建的操作。 9.1 用户空间开发 从用户空间这一侧来看，Netlink sockets实现在通用的BSD socket接口之上。因此，在用户空间开发Netlink和开发TCP/IP socket应用是很类似的。不过，同其他典型的BSD socket应用相比，Netlink存在以下的不同之处： Netlink sockets do not hide protocol details to user-space as other protocols to. 即，Netlink会直接处理原始数据本身，用户空间的开发也要直接处理原始数据格式的负载。 Errors that comes from Netlink and kernel subsystems are not returned by recvmsg() as an integer. Instead, errors are encapsulated in the Netlink error message. 唯一的例外是No buffer space error (ENOBUFS)，这个错误是表明无法将Netlink消息放入队列。标准的通用socket错误，同样也是从recvmsg()中以integer形式返回。 涉及用户空间的Netlink开发的有两个库：libnl和libmnl。这些库都是用C开发，用来简化Netlink开发。Netlink用户空间的进一步开发可以参考这两个库的例子和教程。 原始API的文档：https://www.systutorials.com/docs/linux/man/7-netlink/ 9.1.1 打开socket 下面来阐述一下用户空间的Netlink开发的重要事项。前面提到Netlink使用了BSD socket的接口。一般而言，创建socket的接口长这样子（socket接口）： 1int socket (int family, int type, int protocol); 第一个参数family是socket的大类。在开发TCP/IP应用的时候，这里总是AF_INET。而在Netlink中，这里总是设置为AF_NETLINK。 type可以选择SOCK_RAW或者SOCK_DGRAM。不过Netlink并不会区分这两者。 protocol为Netlink场景下定义的具体协议类型，现有的主要协议包括： 123456789101112131415161718192021222324#define NETLINK_ROUTE 0 /* Routing/device hook */#define NETLINK_UNUSED 1 /* Unused number */#define NETLINK_USERSOCK 2 /* Reserved for user mode socket protocols */#define NETLINK_FIREWALL 3 /* Unused number, formerly ip_queue */#define NETLINK_SOCK_DIAG 4 /* socket monitoring */#define NETLINK_NFLOG 5 /* netfilter/iptables ULOG */#define NETLINK_XFRM 6 /* ipsec */#define NETLINK_SELINUX 7 /* SELinux event notifications */#define NETLINK_ISCSI 8 /* Open-iSCSI */#define NETLINK_AUDIT 9 /* auditing */#define NETLINK_FIB_LOOKUP 10 #define NETLINK_CONNECTOR 11#define NETLINK_NETFILTER 12 /* netfilter subsystem */#define NETLINK_IP6_FW 13#define NETLINK_DNRTMSG 14 /* DECnet routing messages */#define NETLINK_KOBJECT_UEVENT 15 /* Kernel messages to userspace */#define NETLINK_GENERIC 16/* leave room for NETLINK_DM (DM Events) */#define NETLINK_SCSITRANSPORT 18 /* SCSI Transports */#define NETLINK_ECRYPTFS 19#define NETLINK_RDMA 20#define NETLINK_CRYPTO 21 /* Crypto layer */#define NETLINK_INET_DIAG NETLINK_SOCK_DIAG 我们可以直接使用NETLINK_USERSOCK供自己使用，或者自己定义一个新的量。 这里的protocol应当对应的是1.1.3中提到的总线。推理过程如下： 1. https://lwn.net/Articles/746776/ 这个链接中提叫的patch描述中称：This patch set aims to improve this situation by adding a new NETLINK_DESC bus with two commands 2. 在参考文献中谈论Netlink总线时，聚到了rtnetlink这个例子。根据rtnetlink的man page， #include &lt;asm/types.h&gt; #include &lt;linux/netlink.h&gt; #include &lt;linux/rtnetlink.h&gt; #include &lt;sys/socket.h&gt; rtnetlink_socket = socket(AF_NETLINK, int socket_type, NETLINK_ROUTE); 9.1.2 绑定socket地址 在打开了一个socket之后，我们需要为socket绑定一个本地地址。Netlink的地址格式如下： 1234567struct sockaddr_nl&#123; sa_family_t nl_family; /* AF_NETLINK */ unsigned short nl_pad; /* zero */ __u32 nl_pid; /* process pid */ __u32 ; /* mcast groups mask */&#125; nladdr; 这里的nl_pid可以通过getpid()这个函数来获取当前进程的pid来进行赋值 如果要在一个进程的多个线程中打开多个socket，可以用如下公式生成nl_pid： 1pthread_self() &lt;&lt; 16 | getpid(); struct socketadd_nl中的nl_groups为bit mask，代表了广播分组。当设置为0时代表单播消息。 确定地址后可以将其绑定到socket 12// fd为socket()返回的句柄bind(fd, (struct sockaddr*)&amp;nladdr, sizeof(nladdr)); 9.1.3 发送Netlink消息 为了发送Netlink消息，我们还需要创建一个struct socketaddr_nl作为发送的目的地址。如果消息是发送给内核的，那么nl_pid和nl_groups都要设置为0。如果这个消息是一个多播消息，那么需要设置nl_groups的对应比特。设置好目的地址之后，我们可以开始组装sentmsg()API需要的消息格式 123struct msghdr msg;msg.msg_name = (void *)&amp;(nladdr);msg.msg_namelen = sizeof(nladdr); 上面是socket的通用header，我们还需要设置Netlink自己的Message header这里struct nlmsghdr定义为： 12345678struct nlmsghdr&#123; __u32 nlmsg_len; /* Length of message */ __u16 nlmsg_type; /* Message type*/ __u16 nlmsg_flags; /* Additional flags */ __u32 nlmsg_seq; /* Sequence number */ __u32 nlmsg_pid; /* Sending process PID */&#125;; 在1.5中我们队各个字段的含义有了详细的介绍。按照对应的含义进行设置。 Netlink的消息由Netlink header和payload组成。因此我们需要一次性创建包含header和payload的内存块。 12345struct nlmsghdr *nlh = (struct nlmsghdr *)malloc(NLMSG_SPACE(MAX_PAYLOAD)); memset(nlh, 0, NLMSG_SPACE(MAX_PAYLOAD));nlh-&gt;nlmsg_len = NLMSG_SPACE(MAX_PAYLOAD);nlh-&gt;nlmsg_pid = getpid();nlh-&gt;nlmsg_flags = 0; 此处使用的NLMSG_SPACE宏定义是Netlink提供的工具，其定义如下： 12#define NLMSG_LENGTH(len) ((len) + NLMSG_HDRLEN)#define NLMSG_SPACE(len) NLMSG_ALIGN(NLMSG_LENGTH(len)) 这个宏做了两件事： 在长度上加上header的长度 将Payload进行32bit对齐 设置好负载内容后（负载数据段可以通过NLMSG_DATA(nlh)来获取），就可以发送了： 123456789struct iovec iov;iov.iov_base = (void *)nlh;iov.iov_len = nlh-&gt;nlmsg_len;msg.msg_iov = &amp;iov;msg.msg_iovlen = 1;sendmsg(fd, &amp;msg, 0); 9.1.3 接收Netlink消息 接收过程是类似的。接收程序需要提前分配一个足够的buffer来接收Netlink消息： 123456789101112struct sockaddr_nl nladdr;struct msghdr msg;struct iovec iov;iov.iov_base = (void *)nlh;iov.iov_len = MAX_NL_MSG_LEN;msg.msg_name = (void *)&amp;(nladdr);msg.msg_namelen = sizeof(nladdr);msg.msg_iov = &amp;iov;msg.msg_iovlen = 1;recvmsg(fd, &amp;msg, 0); 9.2 内核空间开发 9.2.1 创建新的Netlink协议类型 除非要复用内核既有Netlink协议类型，不然最好定义一个自己用的总线类型 1#define NETLINK_TEST 31 这个定义可以加在netlink.h中，或者放在模块的头文件里。 9.2.2 创建socket 在用户态，我们通过socket()接口来创建socket，而在内核中，我们使用如下的API： 12struct sock *netlink_kernel_create(struct net *net, int unit, struct netlink_kernel_cfg *cfg); net一般固定为全局变量init_net unit即为协议类型，我们在这里填上NETLINK_TEST cfg为Netlink的内核设置 123456789struct netlink_kernel_cfg &#123; unsigned int groups; unsigned int flags; void (*input)(struct sk_buff *skb); struct mutex *cb_mutex; int (*bind)(struct net *net, int group); void (*unbind)(struct net *net, int group); bool (*compare)(struct net *net, struct sock *sk);&#125;; 其中input是必须要设置的，是socket在接收到一个消息后的回调函数。回调函数的一个例子如下： 1234567891011121314151617181920212223242526272829303132333435static void hello_nl_recv_msg(struct sk_buff *skb)&#123; struct nlmsghdr *nlh; int pid; struct sk_buff *skb_out; int msg_size; char *msg = "Hello from kernel"; int res; printk(KERN_INFO "Entering: %s\n", __FUNCTION__); msg_size = strlen(msg); nlh = (struct nlmsghdr *)skb-&gt;data; printk(KERN_INFO "Netlink received msg payload:%s\n", (char *)nlmsg_data(nlh)); pid = nlh-&gt;nlmsg_pid; /*pid of sending process */ skb_out = nlmsg_new(msg_size, 0); if (!skb_out) &#123; printk(KERN_ERR "Failed to allocate new skb\n"); return; &#125; nlh = nlmsg_put(skb_out, 0, 0, NLMSG_DONE, msg_size, 0); NETLINK_CB(skb_out).dst_group = 0; /* not in mcast group */ strncpy(nlmsg_data(nlh), msg, msg_size); res = nlmsg_unicast(nl_sk, skb_out, pid); if (res &lt; 0) printk(KERN_INFO "Error while sending bak to user\n");&#125; 9.2.3 从内核向用户态程序发送消息 正如在用户空间的发送流程那样，发送消息需要先设置一个socket接收地址。设置接收地址需要通过NETLIN_CB宏访问skb从control buffer中存储的netlink参数（struct netlink_skb_parms）。 123456789struct netlink_skb_parms &#123; struct scm_creds creds; /* Skb credentials */ __u32 portid; __u32 dst_group; __u32 flags; struct sock *sk; bool nsid_is_set; int nsid;&#125;; 其中重要的参数时dst_group和flags。 如果要发送的数据包是单播数据包，发送方式为： 12NETLINK_CB(skb_out).dst_group = 0; /* not in mcast group */res = nlmsg_unicast(nl_sk, skb_out, pid); 这里的目标pid可以通过接收到的消息nlh-&gt;nlmsg_pid获取 如果要发送的数据包是多播： 1res = nlmsg_multicast(nl_sk, skbout, own_pid, group, flags); 此处的own_pid是传输自己的pid来纺织消息传递给自己。因此内核态在这里填写0 NETLNK_CB(skb_out).dst_group会在发送函数内设置。 10 Further Reading Kernel Korner - Why and How to Use Netlink Socket https://gist.github.com/arunk-s/c897bb9d75a6c98733d6]]></content>
      <categories>
        <category>kernel</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用iptables和route来建立起Linux的网关设置]]></title>
    <url>%2Fposts%2F32824%2F</url>
    <content type="text"><![CDATA[本文翻译自：Setting Up Gateway Using iptables and route on Linux。 网络资源的分享是非常重要的，而建立起一个网关来进行网络分享是一个比较好的解决方案。在Linux系统中创建和设置网关非常简单，成本低廉，而且性能可靠。 1 Linux网络设置 假定我们要处理的Linux有如下的配置： NIC1: eth0, ip: 192.168.0.1，连接到局域网(LAN) NIC2: eth1, ip: 1.2.3.4, 连接到公网 网络拓扑图 现在我们希望将分享这台机器的网络连接给LAN网络上的其他电脑(ip: 192.168.0.0/16) 2 设置网关 下面提到的所有操作都需要root权限来执行。 2.1 操作IP路由表 1234ip route add 192.168.0.0/16 dev eth0# or# route add -net 192.168.0.0/16 dev eth0 2.2 启用Linux IP 转发(IP Forwarding) 1234sysctl -w net.ipv4.ip.forward=1# or# echo 1 &gt; /proc/sys/net/ipv4/ip_forward 你也可以直接编辑/etc/sysctl.conf来持久化这一设置： 1net.ipv4.ip_forward = 1 2.3 通过iptables设置源地址映射(SNAT) 将（其他电脑发送的）包的源地址修改为网关的源地址。iptables会自动将响应包的目的地址替换成正确的IP地址。 1iptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o eth1 -j SNAT --to-source 1.2.3.4 除了使用SNAT，也可以使用MASQUERADE: 1iptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o eth1 -j MASQUERADE 注意，对于静态IP而言，SNAT的方式要更好一些。根据iptables man page: This target is only valid in the nat table, in the POSTROUTING chain. It should only be used with dynamically assigned IP (dialup) connections: if you have a static IP address, you should use the SNAT target. Masquerading is equivalent to specifying a mapping to the IP address of the interface the packet is going out, but also has the effect that connections are forgotten when the interface goes down. This is the correct behavior when the next dialup is unlikely to have the same interface address (and hence any established connections are lost anyway). 你还需要确保其他iptables不会阻拦对应的连接。如果你有这方面的问题，可以尝试： 123iptables -Fiptables -t nat -Fiptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o eth1 -j SNAT --to-source 1.2.3.4 上面的代码可以允许所有的接入连接。不过这会存在一些安全性问题。 3 客户端配置 客户端配置主要是把网关设置成192.168.0.1。例如如下命令 1234ip route add default via 192.168.0.1 dev eth0# or# route add default gw 192.168.0.1 eth0]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>linux</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派上搭建视频流服务的方法尝试]]></title>
    <url>%2Fposts%2F28769%2F</url>
    <content type="text"><![CDATA[最近实验需要在树莓派上搭建一个简单的视频服务，而且，希望画质一定的情况下，消耗的带宽越少越好。关于带宽的问题，其实开始并没有考虑太多，但是在尝试用uv4l工具创建mpeg流的时候发现，尽管分辨率很低（720p）不到，需要的数据率却达到了大约5MB/s。我们待测试的通信层不具备这样高的传输传输能力。因此需要想办法把数据率降下来。综上，我们需要产生一个编码后的视频流，如H264。 幸运的是我发现了h264-live-player这个项目。这个项目是基于Node.js的工程，利用Websocket传输H264编码数据，在客户端用Broadway解码，而服务端的H264流通过raspivid产生。 在接下来的部分，我先简要介绍一下Raspivid的使用，然后介绍一下h264-live-player的情况。如果只是想上手使用，可以直接拉到最后。 Raspivid raspivid是一个在树莓派上用于捕捉视频数据的命令行工具。在h264-live-player中，lib/raspivid.js文件调用了这个命令来产生H264的视频流。在这个文件中使用的命令是： 1raspivid -t 0 -o - -w WIDTH -h HEIGHT -fps FPS 其中，-t 0表示捕捉的时间不限。-o -表示将H264流输出到stdout。后面的-w, -h, -fps则分别是制定画面的宽高还有帧率。在raspivid命令产生H264流后，h264-live-player会通过一系列的回调函数通过Websocket将H264数据发送给前端。 h264-live-player 关键代码解析。 注意，原作者的工程里面存在一些问题，其中重点是客户端刷新后视频流解析会出现异常。我在我的fork中修复了这些问题，还做了一些其他的改进。因此这里的介绍都以我的fork中的代码为准。 后端 首先还是要看lib/raspivid.js这个文件。RpiServer这个类继承于Server，Server中预留了get_feed给子类实现，器作用是产生视频流。 12345678910111213141516get_feed() &#123; if (this.streamer !== undefined) &#123; this.streamer.kill(); &#125; var msk = "raspivid -t 0 -o - -w %d -h %d -fps %d"; var cmd = util.format(msk, this.options.width, this.options.height, this.options.fps); console.log(cmd); var streamer = spawn('raspivid', ['-t', '0', '-o', '-', '-w', this.options.width, '-h', this.options.height, '-fps', this.options.fps, '-pf', 'baseline']); streamer.on("exit", function(code)&#123; if (code) &#123; console.log("Failure", code); &#125; &#125;); this.streamer = streamer; return streamer.stdout;&#125; 这个函数返回的是raspivid子进程的stdout流，也即H264流。 然后我们来看lib/_server.js文件中_Server的定义。注意start_feed这个函数： 12345678910start_feed() &#123; if (this.readStream) &#123; this.readStream.end(); &#125; var readStream = this.get_feed(); this.readStream = readStream; readStream = readStream.pipe(new Splitter(NALseparator)); readStream.on("data", this.broadcast);&#125; 这个函数在客户端发起播放流的请求后调用。这里Server调用子类实现的get_feed函数获取视频流，然后视频流上注册data事件的回调函数。 这里需要解释一下readStream = readStream.pipe(new Splitter(NALseparator));这行代码。这里我们为视频流增加了一个Splitter，生成Splitter的参数为一个Buffer。 1const NALseparator = new Buffer([0,0,0,1]);//NAL break 在H264规范中，帧中间的会插入00 00 00 01作为帧间隔标识。这里插入的Splitter的作用是，在每次遇到NALseperator形式的字符流时，将之前收到的数据作为一个chunk，调用data事件的回调函数。 再来看看broadcast函数。在视频流收到一定的函数时会调用这个函数： 12345678910111213141516broadcast(data) &#123; this.wss.clients.forEach(function(socket) &#123; if (socket.readyState !== WebSocket.OPEN) &#123; return; &#125; if(socket.buzy) return; socket.buzy = true; socket.buzy = false; socket.send(Buffer.concat([NALseparator, data]), &#123; binary: true&#125;, function ack(error) &#123; socket.buzy = false; &#125;); &#125;);&#125; 这里的代码非常简单，核心就是通过socket.send将数据发送给客户端。注意这里的数据的内容是Buffer.concat([NALseperator, data])。这是因为Splitter会截断分隔符。 前端 前端的代码集中在vendor/wsavc/index.js中。重点是下面这段代码： 12345678910111213141516171819202122232425262728293031323334var framesList = [];this.ws.onmessage = (evt) =&gt; &#123; if(typeof evt.data == "string") return this.cmd(JSON.parse(evt.data)); this.pktnum++; var frame = new Uint8Array(evt.data); //log("[Pkt " + this.pktnum + " (" + evt.data.byteLength + " bytes)]"); //this.decode(frame); framesList.push(frame);&#125;;var shiftFrame = function() &#123; if(!running) return; if(framesList.length &gt; 10) &#123; log("Dropping frames", framesList.length); framesList = []; &#125; var frame = framesList.shift(); if(frame) &#123; this.decode(frame); &#125; requestAnimationFrame(shiftFrame);&#125;.bind(this);shiftFrame(); 在接收到服务器发送的数据时，数据会被转换成Uint8Array，然后压入到一个队列中。而在shiftFrame这个函数会周期性的调用，从队列中取出数据进行解码。解码后会触发Broadway解码器的onPictureDecoded回调，在这个回调中canvas中的图像会被更新。 h264-live-player的部署和使用 安装Node.js到树莓派 SSH登录到树莓派，然后运行 12345sudo apt-get updatesudo apt-get dist-upgradecurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -sudo apt-get install -y nodejs 使用下面的命令来验证安装成功： 1234$ node -vv8.14.1$ npm -v # npm是Node.js的包管理器6.4.1 安装h264-live-player 123456# 下载仓库git clone git@gitlab.vlionthu.com:tdma-uav/raspberry-pi-video-stream.git playercd player# 安装依赖npm install 运行 12cd playernode server_rpi.js 上面的运行方法会在terminal中启动服务脚本。如果要这个程序常驻后台，可以尝试使用pm2 12345678910sudo npm install -g pm2 # 安装pm2，这里的-g表示安装到全局环境下cd player # cd to player folder# 启动pm2 start ./server-rpi.js \ -i 1 \ --name "video-stream" \ -o "/home/pi/player/stdout.log" \ -e "/home/pi/player/stderr.log" 在网页端访问摄像头 1http://rasp_ip:8080 可以通过添加/?r的query参数来上下翻转画面。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>折腾</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dependency Injection in Node.js | 2016]]></title>
    <url>%2Fposts%2F30333%2F</url>
    <content type="text"><![CDATA[在上一篇文章中我们初步讨论的Dependency Injection的一些理念。在这篇文章中，我翻译了awilix模块的作者Jeff Hansen的文章：Dependency Injection in Node.js - 2016 edition。原文包含三个部分，我在这里直接整理成为一篇完整的文章。 在翻译中我以传到核心思想为主，故不会太拘泥于一些细节问题。对于一些插科打诨的话，如果不是特别有意思的话，也许不会翻译。 作者Jeff Hansen Part I 在2015年，RisingStack写了一篇关于Dependency Injection(缩写为DI)的文章，解释了什么是DI，以及如何手动实现。如果你还没有阅读这篇文章，我强烈建议你先阅读以下那篇文章。这样你对于本文的一些概念会有更加清晰的理解。 这里提到的RisingStack的文章的中文版可以在我的博客里找到: Node.js | Dependency Injection。 在这一系列文章中，我会扩展一下手动实现的DI，为什么这种做法是糟糕的，以及我们如何最终能够让DI的现实变得优雅 -- 甚至比require/imports方式要更好。我将要证明Node中使用DI可以不像之前的做法那样沉闷。这都要归功于在ES6中引入的新特性：Proxies（直译就是代理）。 我100%肯定作为一个Node的开发者，你会见过某种形式的DI。借鉴一下RisingStack文章中的例子: 1234567var express = require('express')var app = express()var session = require('express-session')app.use(session(&#123; store: require('connect-session-knex')&#125;)) session needs a store! - 这种存储的具体实现方式是多样的 ：redis，MySQL。Express本身并不关心背后的实现。我们来看下面的这个例子 -- 非DI实现： 1234567import db from '../mydatabase'export default &#123; getToDos: () =&gt; &#123; return db.query('select * from todos') &#125;&#125; 在这个例子中我们直接导入了db模块，因此这个文件就依赖于db模块在磁盘上的具体存储位置，以及依赖于特定的是方式。在大多数场景下这并不算一个大问题。不过这种方式让测试变得更加困难 -- 不至于无法进行测试，但是无论如何都变得更加地困难了。另外，这个模块还假定db模块已经准备好了（例如：数据库连接已经建立起来了）。 如果我们进一步将上面的代码转化成为对于测试友好的DI实现方式： 1234567export default function makeTodosService (&#123; db &#125;) &#123; return &#123; getTodos: () =&gt; &#123; return db.query('select * from todos') &#125; &#125;&#125; 那么上面两个例子有什么区别呢？在下面的DI实现的例子中我们不是export出一个对象，而是export出一个生成这种对象的函数。这个函数同时阐明了为了创建此种对象所需要的依赖。 如果你熟悉在其他语言中的DI实现，如Java, C#，还有PHP。下面这个使用ES6的类实现的例子可能更受你喜欢一些： 12345678export default class TodosService &#123; constructor(&#123; db &#125;) &#123; this.db = db &#125; getTodos() &#123; return this.db.query('select * from todos') &#125;&#125; 不过从个人角度我还是更喜欢函数的方法：不用担心this的上下文的问题。 测试上面这个基于DI的例子非常简单 -- 你不再需要担心对require进行修修补补来替代数据库模块从而连接到测试数据库。 12345678910111213describe('Todo Service', function () &#123; beforeEach(() &#123; subject = makeTodosService(&#123; db: testDatabaseSomehow &#125;) &#125;) it('work', async function() &#123; const todos = await subject.getTodos( expect(todos.length).to.equal(3) ) &#125;)&#125;) Part II 在这个部分我们来构思一个Todo APP。 在我们开始折腾API框架和其他乱七八糟的部分之前，我们来大致搭建一下项目的骨架 -- the service and data access。为了可读性的考虑我在这里使用了ES7的async-await机制。 然我们来开始我们的Todos Service - 这个模块来负责处理所有的业务逻辑。 我会在下面的代码片段那种使用不同的风格（函数式或者是面向对象的）来证明，这些具体的代码风格并不本质，你可以使用任何你喜欢的方式。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162// todosService.jsimport assert from 'assert'// Using object destructring to make it look goodexport function makeTodosService (&#123; // "repository" is a fancy term to describe an object // that is used to retrieve data from a datasource - the actual // data source does not matter. Could be a database, a REST API, // or some IoT things like sensors or what ever todosRepository, // We also want info about the user that is using the service, // so we can restrict access to only their own todos. currentUser&#125;) &#123; assert(todosRepositry, 'opts.todosRepository is required.') assert(currentUser, 'opts.currentUser is required.') return &#123; // Gets todos for the current user getTodos: async(query) =&gt; &#123; const todos = await todosRepository.find(&#123; // can be ALL, INCOMPLETED, COMPLETED filter: query.filter, userId: currentUser.id &#125;) return todos &#125;, createTodo: async (data) =&gt; &#123; const newTodo = await todosRepository.create(&#123; text: data.text, userId: currentUser.id, completed: false &#125;) return newTodo &#125;, updateTodo: async (todoId, data) =&gt; &#123; const todo = await todosRepository.get(todoId) // verify that we are allowed to modify this todo if (todo.userId !== currentUser.id) &#123; throw new Error('Forbidden') &#125; const updatedTodo = await todosRepository.update(todoId, &#123; text: data.text, completed: data.completed &#125;) return updatedTodo &#125;, deleteTodo: async (todoId) =&gt; &#123; const todo = await (todoId) const todo = await todosRepository.get(todoId); if (todo.userId !== currentUser.id) &#123; throw new Error('Forbidden') &#125; await todoRepository.delete(todoId) &#125; &#125;&#125; 代码有点长，但是并没有什么太fancy的东西。我们并没有依赖于外部库（除了自带的assert模块用于输入检验）。不过，我们导出的函数其实有两个依赖： todosRepository -- 给予todos数据库访问的对象（我们并不关心具体的实现细节）。 currentUser -- 正在使用这个服务的用户。注意我们并不知道这个对象从何处生成，也不关心这些细节。 我们继续往下走，给出todos repository的一个不错的实现方式： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// todosRepository.js// Let's do an in-memory implementation for now.const _todos = []export default class TodosRepository &#123; // Making all methods async makes them return promises! async find(query) &#123; const filtered = _todos.filter((todo) =&gt; &#123; // Check the user id if (todo.userId !== query.userId) &#123; return false; &#125; // check the filter if (query.filter === "COMPLETED") &#123; return todo.completed === true &#125; if (query.filter === "INCOMPLETED") &#123; return todo.completed === false &#125; return true &#125;) return filtered &#125; async get(id) &#123; const todo = _todos.find(x =&gt; x.id === id) return todo &#125; async create(data) &#123; const newTodo = &#123; id: Date.now(), text: data.text, userId: data.userId, completed: data.completed &#125; _todos.push(newTodo) return newTodo &#125; async update(id, data) &#123; const todo = await this.get(id) Object.assign(todo, data) return todo &#125; async delete(id) &#123; const todo = await this.get(id) _todos.splice(todo, 1) &#125;&#125; 上面的代码只是todos repository的一个in-memory实现。任何时候我们准备好的时候，可以替换成MySQL，Rethink，MongoDB等存储后端，只要具有同形式的API就可以了。Typescript和Flow在这里可以发挥很大的作用。 把系统粘合起来 在我们进入到RESTful API之前，让我们先把上门两个模块在测试中整合起来。下面的方法被称为“穷人式的DI”，不过别担心，在后面我们会展示更加fancy的做法。 1234567891011121314151617181920212223242526272829303132333435363738394041import makeTodosService from './todosService'import TodosRepository from './todosRepository'describe('Todos System', function () &#123; it('works', async function() &#123; // This is how DI is done manually const todosService = makeTodosService(&#123; todosRepository: new TodosRepository(), // Let's fake it til we make it! currentUser: &#123; id: 123, name: 'Jeff' &#125; &#125;) // Todos Service already knows who's creating it! const created = await todosService.create(&#123; text: 'Write Medium article' &#125;) expect(created.userId).to.equal(123, 'user id should match currentUser') const todos = await todosService.getTodos(&#123; filter: 'ALL' &#125;) expect(todos.length).to.equal(1) await todosService.update(todo.id, &#123; completed: true &#125;) const incompleteTodos = await todosService.getTodos(&#123; filter: 'INCOMPETED' &#125;) expect(incompleteTodos.length).to.equal(0) const completedTodos = await todosService.getTodos&#123; filter: 'COMPLETED' &#125; expect(completedTodos.length).to.equal(1) &#125;)&#125;) 看到上面的代码你可能会想：“这里的代码不是已经知道了两个模块了么？”。没错，在一个真实的APP中（下文中我们会提及），还是需要有一个知道所有使用的模块的单一置信源（source of truth）。在我们倒腾DI黑科技的时候，我们把这个部分的代码称为：组合根（The Composition Root，译者按：这个名字放在中文下太绕口了）。这是在应用中将所有的模块胶合在一起的地方。Composition Root可能长这个样子： 12345678910111213141516cosnt currentUser = &#123; id: 123, name: 'Jeff'&#125;const todoRepository = new TodosRepository()const todosService = makeTodosService(&#123; todosRepository, currentUser&#125;)export default &#123; todosService, todosRepository&#125; 看到这个代码，我知道你一定在想：“我现在还不知道这个currentUser具体是指哪个用户呢！我要构建的是一个Web应用，这种方法根本没用！”。你说的对。有两种方法来手动解决这个问题： 为所有需要currentUser的方法手动传递这个参数 -- 这也太坑了。 将实例化过程推迟到你拥有了所有的数据之后（译者按：即在已知了currentUser之后再调用工厂函数初始化todosService）-- 这种方法也不好，你需要在很多的地方重复地进行实例化。 为了进一步解释以下第二点，下面给出一个例子。例子中使用到了Koa Router 123456789101112131415161718192021const router = new KoaRouter()router.get("/todos", async (ctx) =&gt; &#123; const todosService = makeTodosService(&#123; todosRepository: new TodosRepository(), currentUser: ctx.state.user &#125;) ctx.body = await todosService.getTodos(ctdx.request.query) ctx.status = 200&#125;)router.post("/todos". async (ctx) =&gt; &#123; const todosService = makeTodosService(&#123; todosRepository: new TodosRepository(), currentUser: ctx.state.user &#125;) // ...&#125;)// and so on 这还只是涉及到两个模块。想象一下要是需要处理10个模块（这还只是对于小型的应用）。没错，第二种方法也是很糟糕的。 Part III Angular曾经是在JavaScript世界中第一个引入了DI的大型框架。他们的做法是使用函数的字符串表达来提取使用的模块名称。在当时这是唯一的做法。 有一些人尝试将DI功能从Angular中独立出来做成一个独立模块。但是问题是，大多数DI模块要求你的所有代码都要围绕着特定的DI系统来开发，这位违背了DI设计理念的初衷。 DI的作用是减少程序模块之间的耦合程度，提高代码的可维护性。在这种目标下，DI系统的设计应当尽可能减少对于其它业务代码的影响。如果为了使用DI要对业务代码结构进行大范围的改动的话就得不偿失了。 我们希望能够在不改动我们的service和repository模块的情况下使用DI机制。 关于Awilix - The DI container you deservce 如果你不知道DI容器是什么，下面是一个简短的解释。DI容器的功能是将系统中的模块整合起来，从而让开发者不再需要太关注这些DI的实现细节问题。在前面两个Part中我们给出的示例代码：实例化services和repositories，确保service获取repository对象。这些工作都将由DI容器来完成。 Awilix就是这样的一个容器，其实现是基于ES6 Proxies，这一意味着不再需要对函数的参数进行字符串解析。 现在让我们回到开头的todo应用。让我们使用Awilix来将各个模块整合起来。我们将会使用Koa 2来实现Web API。先让我们来安装这些依赖： 1npm install -S koa@next koa-router@next awilix awilix-koa 这里的awilix-koa模块让Awlix和Koa的搭配更加易用。现在让我们从composition root开始 123456789101112131415161718192021// configureContainer.jsimport &#123; createContainer, asClass, asFunction &#125; from 'awilix'import makeTodosService from './todosService'import TodosRepository from './todosRepository'export default function configureContainer () &#123; const container = createContainer() // Ordering does not matter container.register(&#123; // Notice the scoped() at the end - this signals // Awilix that we gonna want a new instance per "scope" todosService: asFunction(makeTodosService).scoped(), // We only want a single instance of this for the apps // lifetime (it does not deal with user context) // so we can reuse it! todosRepository: asClass(TodosRepository).singliton() &#125;) return container&#125; 这看起来已经非常不错了。不过如果你有超过100个服务需要注册，Awilix提供了自动化的工具。 现在让我们来配置Koa应用 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667// server.jsimport Koa from 'koa'import KoaRouter from 'koa-router'import &#123; asValue &#125; from 'awilix'import &#123; scopePerRequest, makeInvoker &#125; from 'awilix-koa'import configureContainer from './configureContainer'const app = new Koa()const router = new KoaRouter()const container = configureContainer()// This installs a scoped container into our// context - we will use this to register our current userapp.use(scopePerRequest(container))// Let's do that now!app.use((ctx, next) =&gt; &#123; ctx.state.container.register(Value)(&#123; // Imagine some auth middleware somewhere... // This makes currentUser available to all services currentUser: ctx.state.user &#125;) return next()&#125;)// Now our handlers will be able to resolve a todos service// using DI!// P.S: be a good dev and use multiple files. ;)const todosAPI = (&#123; todosService &#125; =&gt; &#123; return &#123; getTodos: async (ctx) =&gt; &#123; const todos = await todosService.getTodos(ctx.request.query) ctx.body = todos ctx.status = 200 &#125;, createTodos: async (ctx) =&gt; &#123; const todo = await todosService.createTodo(ctx.request.body) ctx.body = todo ctx.status = 201 &#125;, updateTodo: async (ctx) =&gt; &#123; const updated = await todosService.updateTodo( ctx.params.id, ctx.request.body ) ctx.body = updated, ctx.status = 200 &#125;, deleteTodo: async (ctx) =&gt; &#123; await todosService.deleteTodo( ctx.params.id, ctx.request.body ) &#125; &#125;&#125;)// Awilix magic will run the above function// every time a request comes in, so we have// a set of scoped services per requestconst api = makeInvoker(todosAPI)router.get('/todos', api('getTodos'))router.post('/todos', api('createTodos'))router.patch('/todos/:id', api('updateTodo'))router.patch('/todos/:id', api('deleteTodo'))app.use(router.routes())app.listen(1337) 上面的代码还只是一个简单的雏形，不过你现在已经有了构建大规模项目的基础。 结论 DI是一个很有用的东西，不过手动去实现DI是一件糟心的事情。这也是Awilix这种DI容器扮演作用的地方。]]></content>
      <categories>
        <category>形而上</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js | Dependency Injection]]></title>
    <url>%2Fposts%2F61013%2F</url>
    <content type="text"><![CDATA[Dependency Injection这个概念是我之前在实习的时候做Java开发的时候接触的。Dependency Injection可以大大降低模块之间的耦合度，提高系统的可扩展性和鲁棒性，不过这个概念对于新人来说理解起来还是存在比较大的障碍。由于当时实习的时间比较短，对于这个概念我并没有吃透。这次学习Node.js的时候，又在awilix这个库里面遇到了这个概念。以此为契机就来好好学习一些Dependency Injection和其后的设计逻辑与方法。 下面的内容翻译自：Dependency Injection in Node.js。这篇文章浅显地介绍了Dependency Injection的基本理念。选择这篇文章是因为我在阅读awilix模块作者关于Dependency Injection的系列文章中时，作者在开篇提议阅读此文。 不过这篇文章毕竟是2015年的文章，在js的一些语法和模块细节上和今时今日的有些不同，但是并不妨碍我们对于其核心理念的理解。 使用Dependency Injection的理由 解耦 (Decoupling) Dependency Injection使你的模块耦合度降低，从而提升代码的可维护性。 更简单的单元测试 比起需要硬编码的依赖关系，你可以将依赖关系传输进入你要用的模块。在大多数场合下使用这种范式你不必要使用proxyquire这样的模块。 这一段作者写的比较含糊。其实意思是在使用Dependency Injection场景下，我们在独立测试一些单元功能的时候，对于其他模块可以通过注入Mock对象，从而将待测试的模块独立出来进行测试。 更快速的开发 在使用了Dependency Injection的场景下，在接口定义好了以后，开发会更加容易，Merge conflict会更少。 如何在Node.js中使用Dependency Injection 下面我们来看看如何在不适用Dependency Injection的前提下开发应用，然后看看如何进行转化。 不使用Dependency Injection的例子 下面是一段简单的没有使用Dependency Injection的代码： 12345678// team.jsvar User = require('./user');function getTeam(teamId) &#123; return User.find(&#123;teamId: teamId&#125;);&#125;module.exports.getTeam = getTeam; 对应的测试可能是： 1234567891011121314151617// team.spec.jsvar Team = require('./team');var User = require('/user');describe('Team', function() &#123; it('#getTeam', function* () &#123; var users = [&#123;id: 1, id: 2&#125;]; this.sandbox.stub(User, find, function() &#123; return Promise.resolve(users); &#125;) var team = yield team.getTeam(); expect(team).to.eql(users); &#125;)&#125;) 在上面的代码中我们做的是创建了一个名为team.js的模块，该模块可以返回属于一个team的用户列表。为了实现这一功能，我们导入User模块，然后我们再调用其find方法返回用户列表。 看起来不错，是吗？但是当我们需要进行测试时，我们必须要使用sinon的test stubs. 在测试文件中，我们需要引入User模块，为其stub一个find方法。注意，我们在这里要使用sandbox功能，这样我们不需在测试完成后回复find的原函数。 注意：如果原始对象使用了Object.freeze，那么stubs将不会起作用。 使用Dependency Injection的例子 123456789101112// team.jsfunction Team(options) &#123; this.options = options;&#125;Team.prototype.getTeam = function(teamId) &#123; return this.options.User.find(&#123;teamId: teamId&#125;);&#125;function create(options) &#123; return new Team(options);&#125; 你可以使用下面的这个文件来进行测试 12345678910111213141516171819202122// team.spec.jsvar Team =- require('./team');describe('Team', function() &#123; it('#getTeam', function* () &#123; var users = [&#123;id: 1, id: 2&#125;]; var fakeUser = &#123; find: function() &#123; return Promise.resolve(users); &#125; &#125; var team = Team.create(&#123; User: fakeUser &#125;) var team = yield team.getTeam(); expect(team).to.eql(users); &#125;);&#125;); 那么，使用了Dependency Injection的版本同之前的版本有什么区别呢？首先你可能注意到的是这里使用了工厂模式：我们使用这种设计模式来将options/dependencies inject到新创建的对象中 - 这里是我们注入User模块的方法。 在测试文件中我们还需要创建一个fake model来代表User模块，然后将这个伪造的模块传递给工厂函数。很简单，不是吗？ Dependency Injection in Real Projects 你可以在非常多的开源项目中发现Dependency Injection的例子。例如，你在日常工作中常常用到的Express/Koa的大部分中间件都使用了这种技术。 Express Middlewares 1234567var express = require('express');var app = express();var session = require('express-session');app.use(session(&#123; store: require('connect-session-knex');&#125;)) 上面的代码片段使用了基于工厂模式的Dependency Injection：对应session中间件我们传递了一个connect-session-knex模块。这个模块需要实现session模块调用需要的借口。 在这个例子中，connect-session-knex模块需要实现下面的方法： store.destroy(sid, callback) store.get(sid, callback) store.set(sid, session, callback) Hapi plugins Dependency Injection的概念还可以在Hapi中找到。下面的例子中，handlebars模块被作为view engine注入给Hapi使用: 1234567server.views(&#123; engines: &#123; html: require('handlebars`) &#125;, relativeTo: __dirname, path: 'templates'&#125;)]]></content>
      <categories>
        <category>形而上</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gitlab|安装-迁移-删除]]></title>
    <url>%2Fposts%2F25664%2F</url>
    <content type="text"><![CDATA[1 安装 1.1 Omnibus package installation 这是Gitlab官网推荐的安装方式。官网文档链接位于Gitlab Installation。不过，现在直接去官网默认给出的是企业版，即gitlab-ee的安装方式（付费的），而个人版其实用gitlab-ce就够了。gitlab-ce安装方式如下 1.1.1 安装并配置依赖 1sudo apt-get install -y curl openssh-server ca-certificates 然后安装Postfix来启动邮件提醒功能。（如果你使用了第三方的邮件服务，可以跳过这一步并且参照配置外部SMTP服务器）。 1sudo apt-get install -y postfix 在接下来的配置过程中，选择'Internet Site'选项。使用你的服务器的域名来作为'mail name'。如果还有后续的选项，输入Enter直至安装完成。 1.1.2 安装Gitlab-EE 添加Gitlab Package仓库： 1curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash 注意这里安装的是CE版本，故是gitlab-ce，企业版对应的是gitlab-ee 接下来安装Gitlab： 1sudo EXTERNAL_URL="http://gitlab.example.com" apt-get install gitlab-ce 这里的EXTERNAL_URL是你的Gitlab服务要使用的域名。如果你只使用http，或者后续要使用已有的Nginx，可以在这里使用http。如果使用https，gitlab会调用Let's encrtpy的服务为你的网站添加ssl证书。 1.1.3 登录Gtilab 进入你在安装阶段的域名，你会被重定向到密码重置界面。在这个页面你要设置管理员账户的密码，然后回到登录界面。在这个登录界面，使用root用户名和上一步设置的密码登录。 1.2 使用已有的Nginx 这个章节我们参考官方文档给出使用已有的Nginx的方法。 1.2.1 禁用Gitlab自带的Nginx 编辑/etc/gitlab/gitlab.rb文件，设置 1nginx['enable'] = false 1.2.2 设置外部服务器的用户 这一步是为了保证外部服务器用户能够访问gitlab。使用Nginx时，可以通过/etc/nginx/nginx.conf文件查看到nginx用户。一般情况下这个用户名是www-data。修改/etc/gitlab/gitlab.rb： 1web_server['external_users'] = ['www-data'] 然后使用sudo gitlab-ctl reconfigure来使得更改生效。 1.2.3 Trusted proxies 如果你的反向代理服务器和gitlab不是在同一台机器上，那么你还需要设置Trusted proxies。 1gitlab_rails['trusted_proxies'] = ['192.168.1.0/24', '192.168.2.1', '2001:0db8::/32'] 1.2.4 Nginx示例配置文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162# gitlab socket 文件地址upstream gitlab &#123; # 7.x 版本在此位置 # server unix:/var/opt/gitlab/gitlab-rails/tmp/sockets/gitlab.socket; # 8.0 位置 server unix:/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket;&#125;server &#123; listen *:80; server_name gitlab.example.com; # 请修改为你的域名 server_tokens off; # don't show the version number, a security best practice root /opt/gitlab/embedded/service/gitlab-rails/public; # Increase this if you want to upload large attachments # Or if you want to accept large git objects over http client_max_body_size 250m; # individual nginx logs for this gitlab vhost access_log /var/log/gitlab/nginx/gitlab_access.log; error_log /var/log/gitlab/nginx/gitlab_error.log; location / &#123; # serve static files from defined root folder;. # @gitlab is a named location for the upstream fallback, see below try_files $uri $uri/index.html $uri.html @gitlab; &#125; # if a file, which is not found in the root folder is requested, # then the proxy pass the request to the upsteam (gitlab unicorn) location @gitlab &#123; # If you use https make sure you disable gzip compression # to be safe against BREACH attack proxy_read_timeout 300; # Some requests take more than 30 seconds. proxy_connect_timeout 300; # Some requests take more than 30 seconds. proxy_redirect off; proxy_set_header X-Forwarded-Proto https; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Frame-Options SAMEORIGIN; proxy_pass http://gitlab; &#125; # Enable gzip compression as per rails guide: http://guides.rubyonrails.org/asset_pipeline.html#gzip-compression # WARNING: If you are using relative urls do remove the block below # See config/application.rb under "Relative url support" for the list of # other files that need to be changed for relative url support location ~ ^/(assets)/ &#123; root /opt/gitlab/embedded/service/gitlab-rails/public; # gzip_static on; # to serve pre-gzipped version expires max; add_header Cache-Control public; &#125; # error_page 502 /502.html;&#125; 2 迁移 2.1 备份 迁移首先要做的是备份。在git学习------&gt; Gitlab如何进行备份恢复与迁移？这篇文章中详细讲述了备份的问题。我们这里介绍的是最为直接和简单的步骤。如果要更加详细的信息请阅读这篇参考。 备份使用如下命令： 1gitlab-rake gitlab:backup:create 备份会生成在/var/opt/gitlab/backups目录下。名称类似于1502357536_2017_08_10_9.4.3_gitlab_backup.tar。下面这些配置信息，没有包含在backup文件里面。需要手动迁移。 /etc/gitlab/gitlab.rb 配置文件须备份 /var/opt/gitlab/nginx/conf nginx配置文件 /etc/postfix/main.cfpostfix 邮件配置备份 备份命令的执行 2.2 在目标机器上安装gitlab 迁移过程中要求源机器和目标机器上安装的gitlab版本是相同的。如果不同，其实最好的做法是先将源机器上的gitlab升级到最新的版本。然后再生成备份。 如何查看Gitlab版本 2.3 上传备份 使用scp命令将备份文件上传到目标机器的/var/opt/gitlab/backups。 如果scp上传目标文件文件夹的权限不够，可以先上传到自己的home目录下，然后ssh登录到服务器使用sudo进行移动。 2.4 应用备份文件 首先为了避免潜在的权限问题，将备份文件的权限设置为777 1chmod 777 1502357536_2017_08_10_9.4.3_gitlab_backup.tar 然后停止gitlab的相关数据连接服务 12gitlab-ctl stop unicorngitlab-ctl stop sidekiq 然后用下面的命令读取备份： 1gitlab-rake gitlab:backup:restore BACKUP=1502357536_2017_08_10_9.4.3 在后续出现的所有询问中输入yes，等待执行完毕，即完成了迁移过程，接下来再次启动gitlab 1sudo gitlab-ctl start 3 删除 下面的删除过程在Ubuntu 16上得到验证： 3.1 移除gitlab服务 1sudo gitlab-ctl uninstall 3.2 清楚Gitlab产生的数据 1sudo gitlab-ctl cleanse 3.3 删除Gitlab生成的系统账户 1sudo gitlab-ctl remove-accounts 3.4 删除gitlab 1sudo dpkg -P gitlab-ce 3.5 其他文件的删除 除了上述操作，Gitlab使用的其他文件夹还需要手动删除，包括： /opt/gitlab: 包含了Gitlab的应用代码和依赖 /var/opt/gitlab: 包含了应用的数据和配置信息(gitlab-ctl reconfigure的写入内容) /etc/gitlab: omnibus gitlab的配置信息。这里的文件是唯一允许你手动编辑的部分 /var/log/gitlab: 日志文件 在你完成了开始的四个步骤后，这里的四个文件夹可以安全地手动删除。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>gitlab</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCP:拥堵控制]]></title>
    <url>%2Fposts%2F60823%2F</url>
    <content type="text"><![CDATA[网络数据包如果一次发送太多，就会造成网络拥堵；如果发送太少，就浪费了带宽，延长了通信时间。TCP 协议有一个拥堵窗口机制，负责动态调整每次发送数据包的数量。本文通俗地解释了这种算法的细节。 本文翻译自Intro to Congestion Control 这个夏天，我一直在思考更好地解决网络拥塞问题的方法。在这篇文章中，我将会讨论为什么网络拥塞问题会出现，以及一些传统的解决办法。如果你有更深厚的兴趣，这个Juptier notebook包含了我用来获取相应结果的代码，以及对这些结果的分析。 什么是TCP 在我们开始正文讨论之前，我来先简要介绍一些信息在网络上流通的细节。 TCP协议被用来将信息从一台电脑经过英特网传输给另一台电脑。这个协议也是这篇文章所关注的协议。把TCP协议同其他协议（如UDP）区分开来的特征是，TCP确保了100%的传输成功率。也就是说如果你从一台电脑上发送了100kb的数据，那么你会在接收端准确地收到这100kb的数据。 TCP的这个特性非常强大，而这一特性也是很多网络应用采用TCP协议的原因。现有的Web应用和Email都是构筑于TCP协议之上。 TCP实现所有数据的可靠传输的核心原理是，对于从A端发送到B端的数据，B端会发送回一个ACK(Acknowlegement)信息给A端来告知自己收到了对应的信息。 TCP传输 另外还值得注意的是，TCP工作在IP协议之上，IP协议最多允许在一个包中包含1500个字节的数据，因此要发送100kb的数据，需要拆分成多个分段。根据TCP协议，每个分段都会收到对应的ACK。 如果发送者没有收到一个数据分段的ACK，其会重新发送这个分段。 什么时候会还产生拥塞 拥塞（Congestion）问题是由于网络传输延时导致的。信息传输速率会收到物理信道，如以太网线，蜂窝网络等，的制约。在因特网中，大部分独立设备都连接到这些信道上。 下图是一个典型场景： 拥塞产生的场景 在上面的示意图中，两个发送者要各自要传输1GB的数据。然而这两个发送者最终接入到了一个1GB的链接中。第二个链接的传输能力无法匹配上前两个链接的输入，故而不得不丢弃一部分数据包。如果发送者不主动调整自己的发送速度，那么会产生非常坏的情况。在TCP协议中，如果发送者发现一个数据分段没有送达，会重新发送这个数据包。那么拥塞情况会持续，两个发送者会无法完成发送过程。 为了让两个发送者能够成功传输各自的数据，他们需要共同减少发送数据的速率。如果只有一个发送者减少了发送的数据，而另一个仍然维持1GB的发送量，那么仍然会产生拥塞。在因特网的架构中，不会有一个中央控制系统来协调两者的发送速率。 迂回：什么是链接(link)？ 在我们深入到这个问题的解决方案前，我还想进一步讨论链接（link）的属性。关于网络链接，有下面三个重要的细节问题你需要知道： 延时（毫秒）：一个包从链接的一端发送到另一端需要的时间 带宽（mb/s）：链接每秒能够通过的比特数 队列：在链接正在工作时，等候发送包的队列的长度，以及在队列满时管理队列的策略 如果把链接比喻成水管，那么延时可以理解为管道的长度，带宽就是水管的周长。 链接模型 关于链接还有一个重要的统计参数时带宽延时积（bandwidth-delay product, BDP）。这个参数表现了体现了停留在链接中的数据量，可以理解为管道本身的容量。当链接中传输的数据量达到了BDP时，就可以说链接被充分利用了。如果发送端尝试发送比BDP更多的数据，那么链接的队列将会填满，并最终开始丢包。 方法 在给出方法之前，我们要思考一个问题：发送者如何知道产生了拥塞呢？如同我们之前提到的，因特网是一个分布式的系统，故而并没有一个位于中央的协调者来在下游链接产生拥塞的时候提醒发送者要减慢发送速度。 主要有两个指标：丢包率和传输往返时间。在拥塞发生时，链接的队列逐渐填满，开始发生丢包。如果一个发送者注意到了丢包现象，这就很可能意味着发生了丢包。另一个队列满负荷的现象是数据包在队列中等待的时间增加了，这会导致传输往返时间，即发送包到收到ACK的时间增加。 今天的一些拥塞控制机制考虑了上面两个指标，不过在一些比较早期的设计中，只使用到了丢包率这一个指标。 还需要注意的是，发送者可能并不提前知道传输链接的特性参数。例如，如果你访问&quot;http://www.google.com&quot;，那么你发送的数据包可能要经过很多不同性质的链接才能到达Google的服务器，而你的传输速率是收到其中最慢的链接的制约的。 因此，出了规避网络拥塞的能力，拥塞控制机制还需要能够探索可用带宽的具体大小。 拥塞窗口（Congestion Window） 理解任何拥塞控制机制的关键在于理解拥塞窗口的概念。拥塞窗口指的是在收到一个ACK前发送者能发送的包的数量。如果一个发送者的拥塞窗口被设置为2，这意味着在发送了两个包之后，它必须等到接收端回复的ACK之后才能继续发送。 拥塞窗口越大，发送者就能在相通的时间间隔内向接收端发送更多的数据包。为了更加直观的理解，假设网络传输的延时是88ms，拥塞窗口设置为10，那么在一轮往返传输（88 * 2 = 176ms）时间内可以发送10个数据包。而如果拥塞窗口设置为20，则相同的时间间隔内可以发送20个数据包。 不过当然，提升拥塞窗口的大小，也会提高发生拥塞的概率。拥塞控制算法的目标，就是计算出合适的拥塞窗口大小。 从理论角度来看，拥塞窗口的大小应当就是链接的BDP。 TCP Tahoe TCP Tahoe是在80年代设计出来的拥塞控制算法。那是拥塞问题才刚刚在因特网上出现。算法本身非常简单。增加拥塞窗口分为两个阶段： 第一阶段： Slow Start：算法的开始状态是Slow Start。在这个阶段拥塞窗口在每收到一个ACK就增加1。这种机制有效地在每轮往返传输成功后，将拥塞窗口的大小翻倍。如果拥塞窗口的大小是4，那么在同时会有4个包在传输路途中。当每个包的ACK返回时，拥塞窗口加一，即当这四个包的ACK都收到后，拥塞窗口会翻倍成为8。这个过程会一直持续到拥塞窗口达到阈值，ssthresh。 第二阶段：Congestion Avoidance：当拥塞窗口达到阈值ssthresh时，进入Congestion Avoidance阶段。在这一阶段，每轮往返传输后拥塞窗口加一。也就是说，在上面的例子中，当所有4个包的ACK收到后，拥塞窗口只会加1. 在这个阶段拥塞窗口的大小会大大减小。 当Tahoe检测到丢包后，会把ssthresh设置为当前拥塞窗口的一半，然后将拥塞窗口设置为1，算法重新回到Slow Start阶段。 丢包检测与快速重传 TCP发送端有两种方法来检测丢包现象： 发送端超时。发送端会给每个发送出去的数据包设置一个超时。如果在超时时限达到时尚未收到该包的ACK，则认为发生丢包，并重传改数据包，将拥塞窗口设置为1. 接受者发送回重复的ACK。在TCP中，接收端只会接收按照顺序发送的包。如果收到了不合顺序的包，接收端会返回他收到的最后一个符合顺序的包的ACK。例如，接收端收到了1，2，3，其后又收到了包5，那么接收端会再次回复3的ACK。在Tahoe中，如果发送端检测到重复的ACK，就意味着发生了丢包。这种机制被称为快速重传(Fast Retransmit)，因为这种机制不一定要等待到传输超时。 一些思考 在开头提到的Jupitor Notebook中，我实现了Tahoe，下图是拥塞窗口随着时间变化的曲线： Tahoe的拥塞窗口曲线 注意到上图的中变化曲线存在锯齿形的行为。开始的突增为Slow-Start阶段，后面的平缓部分为Congestion Avoidance阶段。急遽掉落到1则是由于丢包导致的。 为什么Tahoe要如此工作？ Tahoe在工作过程中不断增加拥塞门限的原因是因为网络条件会随着时间不断变化。例如如果另一个发送者开始在同一个信道上发送数据，这会导致可用带宽的降低，其他的发送者需要按照实际情况调整。相反，如果有一个发送者停止发送数据了，可用带宽会增加，这也需要其他发送者根据实际情况来调整。 这种方法其实还是存在很多问题，这也是Tahoe目前已经基本没人使用了。特别的，Tahoe需要很长的时间，尤其是在高带宽网络上，才能全面有效地利用可用带宽。这是因为在拥塞窗口增长到Slow Start门限以后，其增长就变得非常缓慢了。 另外一个问题是，发生丢包并不一定意味着网络发生了拥塞，例如Wifi信道下，本身信道就是可能发送丢失的。对于丢包产生剧烈的将拥塞窗口砍到1并不总是合适的做法。 最后一个问题是，Tahoe使用丢包这个因子来作为判断是否发生丢包的依据。然而由于拥塞发生了丢包，此时调整拥塞窗口已经太晚了。 其他的方法 80年代以后，涌现了不少新的算法来解决上面这些问题。我会在将来的文章中详细讨论这些方法： CUBIC：这个算法在2005年实现，目前是Linux系统的默认拥塞控制算法。如同Tahoe，这个CUBIC也是用丢包作为判断拥塞是否发生的依据。不同的是，CUBIC在高带宽网络下的性能要远高于Tahoe。不同于Tahoe在每一轮往返传输后将拥塞窗口增加1的做法，CUBIC如同其名，使用一个立方函数来确定窗口大小，从而实现拥塞窗口的快速增长。 BBR(Bufferbloat)：这是最近才被Google提出的新的算法。不同于CUBIC和Tahoe，这个算法使用延时来作为判断拥塞是否发生的标识。这背后的思路是延时是拥塞在导致丢包前就能起作用的判断因子。在实际丢包发生前就开始减少发送速率能够带来更高的吞吐率。 公平性 在研究拥塞控制算法时，一个有意思的问题是考虑不同的算法对于同一网络链接上的各个发送者是否公平。如果一个算法在发生拥塞时，没有缩减发送规模，而是按照之前相同的速率继续发送，那么这个算法就是不公平的。在这个结果中，如果同一个链接上 有一个发送者没有采用拥塞窗口控制，而另一个发送者使用Tahoe。从结果可以看到，在一分钟的时间内，Tahoe发送者几乎没法发送任何数据，因为它没有机会增加它的拥塞窗口。而固定窗口的发送者全占了发送信道。 尽管固定窗口发送者是一个不好的情形，这种算法可能具有对其他的算法的不公平地位，从而占据更多带宽。由于缺乏中央控制这，可能有贪婪的发送者蓄意采用固定窗口来谋取更大的带宽。这就是需要从博弈论的角度来研究拥塞控制算法了。 结论 拥塞控制算法是互联网的基础，同时也是在有限信息条件下进行分布式决策的一种迷人的实践。]]></content>
      <categories>
        <category>形而上</category>
      </categories>
      <tags>
        <tag>翻译</tag>
        <tag>网络</tag>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Make|自动生成依赖关系]]></title>
    <url>%2Fposts%2F56042%2F</url>
    <content type="text"><![CDATA[Make一般是在Unix环境下使用的自动化编译工具。他本身不是编译器，而是将众多C/C++源文件组织起来，确定其编译方式和编译顺序的工具。一旦我们写好的Makefile配置文件，那么无论多么复杂的工程我们都可以用一条make命令来解决。事实上，尽管通常和C/C++搭配起来使用，make也能应用到其他的编程语言之中。 在使用make过程中的第一个核心问题是处理文件依赖的问题。例如： 12foo.o : foo.c defs.h # foo模块 cc -c -g foo.c 这里foo.o依赖于foo.c和defs.h。当后面两个文件发生变化时，make会自动运行cc -c -g foo.c命令更新foo.o文件。但是，随着项目扩大。这种文件之间的依赖关系会变得非常复杂，一个小的改动可能会涉及到众多依赖关系的修改。因此有必要在项目的开始就引入自动构建依赖关系的工具链。 在跟我一起写Makefile:书写规则这篇教程中，提到了编译器的一个特性：大多数的C/C++编译器都支持一个&quot;-M&quot;的选项，即自动寻找源文件中包含的头文件，并生成一个依赖关系。例如如果我们执行 1cc -M main.c 其输出是： 1main.o: main.c defs.h 注意如果你用的是GNU的C/C++编译器，你得用&quot;-MM&quot;参数，不然，&quot;-M&quot;参数会把一些标准库头文件也引入进来。 这篇教程里面详细阐述了如果在Makefile中使用这一特性的方法，综合而来就是： 123456# 对于每个.c源文件，建立一个描述其依赖关系的.d依赖文件%.d: %.c @set -e; rm -f $@; \ $(CC) -M $(CPPFLAGS) $&lt; &gt; $@.$$$$; \ sed &apos;s,\($*\)\.o[ :]*,\1.o $@ : ,g&apos; &lt; $@.$$$$ &gt; $@; \ rm -f $@.$$$$ 上述命令中sed命令的作用是在依赖关系对中，在左侧加上.d文件本身。即 将 12&gt; main.o: main.c defs.h&gt; 转换成 12&gt; main.o main.d : main.c defs.h&gt; 然后将生成的依赖关系文件include进来 12sources = foo.c bar.cinclude $(sources:.c=.d) 在教程中还提到，这个include要放在默认目标之后，避免include载入的文件的目标替换了默认目标。 走完上面的流程，会得到一个类似的如下内容的文件： 1234567891011121314151617%.d: %.c @set -e; rm -f $@; \ $(CC) -M $(CPPFLAGS) $&lt; &gt; $@.$$$$; \ sed &apos;s,\($*\)\.o[ :]*,\1.o $@ : ,g&apos; &lt; $@.$$$$ &gt; $@; \ rm -f $@.$$$$sources = main.c foo.c bar.cobjs = $(sources:.c=.o)include $(sources:.c=.d)main: $(objs) $(CC) -o main $(objs).PHONY : cleanclean: @rm -f *.d *.o @rm -f ./main 不过按照这个Makefile第一次执行的时候会产生一个问题：第一次执行时，.d文件尚未生成，这里的include导入的文件不存在，会产生如下的错误信息 12Makefile:8: main.d: No such file or directormake: *** No rule to make target 'main.d'. Stop. 最后是通过面向google的debug找到了Autodependencies with GNU make这篇2001年的文章，细致地阐述了这个问题。解决的关键在于在include前面添加一个dash（-），其作用是：如果include的对象不存在，make继续执行，后续make会自动生成.d文件，然后执行include。这篇新的教程提供的完整Makefile示例如下（和前面的形式有不同，但是思路是一致的）： 1234567891011121314151617OBJS := foo.o bar.o# linkproggie: $(OBJS) gcc $(OBJS) -o proggie# pull in dependency info for *existing* .o files-include $(OBJS:.o=.d)# compile and generate dependency info%.o: %.c gcc -c $(CFLAGS) $*.c -o $*.o gcc -MM $(CFLAGS) $*.c &gt; $*.d# remove compilation productsclean: rm -f proggie *.o *.d]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>make</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于无神论者的笑话两则]]></title>
    <url>%2Fposts%2F39480%2F</url>
    <content type="text"><![CDATA[## 一 一个坚定的无神论者去世了，突然发现自己在一个昏暗的过道里。过道里有一个牌子，上写“通向地狱”。没办法，那就进地狱吧。他开门进去，几乎不敢相信自己的眼睛：阳光明媚，暖风宜人，白沙滩，棕榈树，每一百米一个酒吧，到处都是欢快的人们。他沿着沙滩漫步，突然发现一个长着马脚和尾巴的家伙坐在一个沙滩躺椅里。他走上前去问，你是魔鬼吗？魔鬼回答说是，并热烈欢迎新人到地狱。不久，想了解一下地狱的无神论者，两个沙包之间看到一个很大很深的坑，便好奇地往里看，结果吓坏了：坑底烧着熊熊大火，到处是哭天喊地的人，撒了疯的怪物披头盖脸地往人身上打。 无神论者疑惑地跑回魔鬼身边，痛心地问：后边沙包那里那个坑是怎么回事？魔鬼说：噢，他们哪，都是基督徒。他们非要这样，我也没什么办法…… 二 一个忠诚的共产党员死了，上帝不愿意在天堂接受无神论者的灵魂，于是把他送到地狱。一个月后，魔鬼大汗淋漓跑来说“你赶紧把那人带走吧，他差不多把我所有小鬼都发展成了少先队员！” 上帝就接受了。 又过了一月，魔鬼幸灾乐祸地问上帝“那共产党员怎样了？”上帝说：“首先请叫我同志” 非常惭愧，只讲了两个微小的笑话，谢谢大家 来源：https://www.zhihu.com/question/27030419/answer/121040045 续 宗教逻辑]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>宗教</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[酵素]]></title>
    <url>%2Fposts%2F25658%2F</url>
    <content type="text"><![CDATA[今天在朋友们的群里又看到有朋友在谈论吃酵素的事情。这让我想到了2017年二月，我去东京交流访问，参观了日本最大的酵素生产商之一：中原株式会社。有意思的是，这家公司虽然是日本的公司，却是中国人创立的。之所以公司的名字叫做中原，是因为创始人是郑州人。当时接待我们的人中，有一个负责做产品研发的生物博士，筑波大学毕业，也是中国人。他带我们参观了公司总部顶楼的一个小型的检测间。有一个随行的朋友很实诚地问道：“酵素这个东西到底有没有用。”那名生物学博士倒也没直接回答，而是笑着说：”大家都是学工科的，都懂“。 酵素这个东西，其实就是酶的另一种说法。吃酵素的风气，也是从日本舶来的。不过在日本那边，酵素是作为”保健食品的“，因此，在酵素包装上面，是不能声称任何疗效的。日本的酵素从业者，不得不利用各种渠道在宣传刊物上宣传酵素成分的一些益处（还不能直接说产品），然后在包装上注明这些成分，以此来吸引消费者购买。不过在中国，法规不是这么健全，因此中国的酵素商家，宣传起酵素功效来，宛如过去街头卖大力丸一般，怎么牛逼怎么来。 某厂商的酵素宣传 其实，酵素就是酶，也就是蛋白质，进入到肠胃，也都被分解成氨基酸，和鸡蛋，肉类无异。故，吃酵素还不如吃鸡蛋，同等营养的情况下，鸡蛋更便宜。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
        <tag>智商税</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS绕过SIP安全机制限制的一种办法]]></title>
    <url>%2Fposts%2F36948%2F</url>
    <content type="text"><![CDATA[SIP(System Security Protection)是苹果在OSX EI Capitan及其后版本的操作系统中引入了一种新的安全机制。望文生义就可以看出，这个安全机制是用来维持系统的完整性，保护系统免收恶意软件的篡改。具体来说，SIP限制了root账户的权限范围，限制了root用户在对一些系统保护目录即其中文件的操作能力。 SIP的保护范围包括下列路径： /System /usr /bin /sbin OSX的预装应用 第三方应用可以继续操作的目录包括： /Applications /Library /usr/local 但是任何对于安全性加强都意味着对灵活性的削弱。例如，在SIP保护下，类似proxychains-ng的程序无法再给受保护的目录下的程序添加网络钩子(hook)。 proxychains ng (new generation) - a preloader which hooks calls to sockets in dynamically linked programs and redirects it through one or more socks/http proxies. 一般来说，很多解决方案都建议关闭SIP功能（例如proxychains-ng的issue中给出的方法：# issue78）。不过这样也意味着丧失了SIP提供的保护功能。这篇文章给出了一个妥协的做法。在保留SIP的保护的同时，为保护目录下的程序应用proxychains-ng（其他类似的应用场景也可以使用这个办法）。这个解决方案的思路其实很简单：既然保护目录下的程序我们不能动，那么我们把保护目录下的程序复制一份到其他目录下运行就可以。 首先创建一个新的文件夹： 1mkdir ~/.unprotected_apps 然后将这个路径添加到PATH环境变量的头部： 12# 可以添加到shell的配置文件中，如~/.bashrc或者~/.zshrcexport PATH="~/.unprotected_apps:$PATH" 然后将需要添加钩子的应用复制到这个目录下就可以了，例如： 12cp $(which ssh) ~/usr/bin/sshcp $(which curl) ~/usr/bin/curl]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shadowsocks上手配置]]></title>
    <url>%2Fposts%2F37347%2F</url>
    <content type="text"><![CDATA[Shadowsocks配置的一个非常便利之处在于，Shadowsocks支持将配置信息导出成二维码再在其他机器上导入。这节约了很多沟通成本。所以在开始这篇教程之前，你需要有一个Shadowsocks的配置信息。可以是具体参数，或者是一个配置二维码。 1. 客户端准备 Shadowsocks提供了绝大多数平台的客户端支持，甚至包括智能路由器。我们这里介绍最为常见桌面端的平台上的配置。 这里我提供了mac和win这两个主要平台截止到目前为止最新版的客户端下载： macOS客户端下载; win客户端下载. 其中，mac文件下载下来解压缩后，直接拖拽进入Application文件夹（应用文件夹），然后双击打开使用就可以了。win端的文件解压缩后是一个可以直接运行的绿色版（不需要安装）。将解压缩文件移动到一个稳妥的位置，然后双击打开Shadowsocks.exe文件就可以了（此时右下角会出现一个小飞机图标） 更加丰富的客户端下载：https://shadowsocks.org/en/download/clients.html 2. 导入配置 写这篇文章的时候我使用的是mac，因此后面的配置方法过程都以mac为例。mac和win上客户端的使用都是相通的。不同的是小飞机图标在mac中位于顶部，而在win中位于底部。 ShadowsocksX-NG右键菜单截图 右键点击小飞机图标可以看到如上图所示的菜单。其中 第一个section中，负责控制Shadowsock的开启和关闭，我这里显示的是已经开启了Shadowsocks，如果你的客户端代理还没有启动，点击一下&quot;打开 Shadowsocks&quot; 第二个section中，可以设置Shadowsocks的代理模式。其中PAC模式是最为常用模式。在这种模式下，Shadowsocks会根据一张预先订好的表，来判断你当前访问的网址是否被墙了。如果是就会通过代理访问这个网站，否则照常直接连接网站就可以了。与之相对的，全局模式是让所有的网站都通过代理进行访问。 第三个section中，可以进行服务器的配置。 如果你是使用二维码进行配置，那么，将二维码用预览打开，确保这个预览窗口位于最上层可见，然后点击菜单中的“扫描屏幕上的二维码”就可以导入服务器配置了。 如果你是使用详细配置信息进行配置，那么需要进入服务器 -&gt; 服务器设置，手动填写各个参数进行添加。 第四个section是用来配置本地代理和PAC的，对于这部分的详细讨论超出了这篇文章的范畴，我们会在后续的文章中进行讨论。 3. 手机端配置 由于政策原因，手机端APP，尤其是iOS的手机端APP的审查情况非常严重，基本上很少有APP能够长期屹立不倒。因此手机端APP的选择要实时来看。我自己使用的SuperWingy这个应用已经下架了（不过从已购里面还是可以下载的）。因此，大家发现还有什么可以用的手机端应用，就更新在评论里把。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源对象存储服务(OSS) Minio 及其在Hexo中的使用]]></title>
    <url>%2Fposts%2F5440%2F</url>
    <content type="text"><![CDATA[研究对象存储服务(OSS)是因为考虑到将来可能会有在博客上放出一些可供分享的文件下载的服务需求，直接使用现有图床，容易混杂乱。因此我考虑重新建立一个独立OSS存储服务。直接Google搜到了Minio这个框架，10k+的Star，就决定选择这个了。Minio框架有如下几个优势： 可以Docker部署，非常省事 文档完善 全面的平台支持 多种客户端语言支持（有完善的JS SDK） ## 1. Minio部署 使用Docker部署可以说是非常方便省事了。我的部署命令如下： 1234567docker create -p 9000:9000 \-e "MINIO_ACCESS_KEY=your-access-key" \-e "MINIO_SECRET_KEY=your-secret-key" \--name=minio \-v /path/to/minio/data:/data \-v /path/to/minio/config:/root/.minio \minio/minio server /data 其中的访问秘钥对需要替换成你自己设置的值。这一对值稍后会用于网页端的登录。然后用 1docker container start minio 来启动镜像。完成后就可以在http://domain.com:9000中访问到了，输入docker命令中的秘钥对来登录。 登录界面 而后你可以按照Lychee图床教程中的做法，添加Nginx反向代理和HTTPS支持。 2. Hexo中使用 部署完成后我才发现一个问题，那就是Minio生成的外链是强制有过期时间的，而且长度最多只七天。那我就不能像直接复制粘贴外链来使用了，同时，手动来每七天更新一次链接也是不可接受的。因此用Hexo脚本来自动实现了利用Minio的API接口来更新下载链接。脚本内容如下： 1234567891011121314151617181920212223'use strict';const Minio = require('minio');var hexo = hexo || &#123;&#125;;var fs = fs || require('fs');var yaml = yaml || require('js-yaml');var minio_client = minio_client || new Minio.Client(yaml.safeLoad(fs.readFileSync(__dirname + "/minio_key.yml", 'utf8')));hexo.extend.tag.register('minio', async (args, content) =&gt; &#123; var bucket = 'default', resource_name = ''; if (args.length == 1) &#123; resource_name = args[0]; &#125; else &#123; resource_name = args[1]; bucket = args[0]; &#125; var file_url = await minio_client.presignedGetObject(bucket, resource_name); return `&lt;a target="_blank" href="$&#123;file_url&#125;"&gt;$&#123;content&#125;&lt;/a&gt;`;&#125;, &#123;async: true, ends:true&#125;); 在博客工程的根目录下创建一个文件夹scripts,在其中创建一个js文件，如index.js，然后将上述脚本内容粘贴进去。然后在这个目录下创建设置文件，minio_key.yml，文件中需要包含如下信息： 1234endPoint: 'minio.domain.com'accessKey: 'your-access-key'secretKey: 'your-secret-key'useSSL: true # 是否使用https 然后还需要安装依赖 1npm install --save minio 至此我们完成了脚本的安装。脚本为我们提供了一个标签插件，其使用范例如下： 123&#123;% minio 'bucket_name' 'resource_name' %&#125;下载链接&#123;% endminio %&#125; 在使用Hexo进行静态页面渲染时，这部分内容会被自动渲染成下载链接： 1&lt;a target=&quot;_blank&quot; href=&quot;download_url&quot;&gt;下载链接&lt;/a&gt; 不过这种方法还是有一个显而易见的缺点：你需要是一个非常勤奋的作者，每周都来发布一次文章，不然旧文章的链接还是会失效。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Hexo</tag>
        <tag>Minio</tag>
        <tag>OSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shadowsocks持续优化]]></title>
    <url>%2Fposts%2F35429%2F</url>
    <content type="text"><![CDATA[## Fast TCP开启 如果双端都支持FastTCP，那么可以通过开启FastTCP来降低延时。服务端设置方法有两种，要门在config.json中添加fast_open为true，要么在执行ssserver带上--fast-open。然后在命令行中运行 1echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen 进一步优化 这个优化方法适合所有的shadowsocks版本，具体方法如下。创建文件/etc/sysctl.d/local.conf，并在文件中添加如下内容： 123456789101112131415161718192021222324252627282930313233343536373839404142434445# max open filesfs.file-max = 51200# max read buffernet.core.rmem_max = 67108864# max write buffernet.core.wmem_max = 67108864# default read buffernet.core.rmem_default = 65536# default write buffernet.core.wmem_default = 65536# max processor input queuenet.core.netdev_max_backlog = 4096# max backlognet.core.somaxconn = 4096# resist SYN flood attacksnet.ipv4.tcp_syncookies = 1# reuse timewait sockets when safenet.ipv4.tcp_tw_reuse = 1# turn off fast timewait sockets recyclingnet.ipv4.tcp_tw_recycle = 0# short FIN timeoutnet.ipv4.tcp_fin_timeout = 30# short keepalive timenet.ipv4.tcp_keepalive_time = 1200# outbound port rangenet.ipv4.ip_local_port_range = 10000 65000# max SYN backlognet.ipv4.tcp_max_syn_backlog = 4096# max timewait sockets held by system simultaneouslynet.ipv4.tcp_max_tw_buckets = 5000# turn on TCP Fast Open on both client and server sidenet.ipv4.tcp_fastopen = 3# TCP receive buffernet.ipv4.tcp_rmem = 4096 87380 67108864# TCP write buffernet.ipv4.tcp_wmem = 4096 65536 67108864# turn on path MTU discoverynet.ipv4.tcp_mtu_probing = 1# for high-latency networknet.ipv4.tcp_congestion_control = hybla# for low-latency network, use cubic instead# net.ipv4.tcp_congestion_control = cubic 然后运行 1sysctl --system 应用上述设置。最后在启动脚本中，于ssserver前添加 12ulimit -n 51200 这个设置方法，会消耗比较多的内存，但是会换来速度的大幅上升。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shadowsocks：多用户账号独立，并限制用户连接数]]></title>
    <url>%2Fposts%2F7835%2F</url>
    <content type="text"><![CDATA[自己搭建了一个SS服务器以后，自然而然的会同身边的朋友共享。自然，身边的朋友一起用，大部分服务器配置都可以毫无压力的支撑。但倘若一传十十传百，最后成百上千的人一起用一个服务器，那就撑不住了。 当然你可以隔一段时间换一次密码，但是后面的麻烦事也不少（要同步更新不同设备上的设置，身边的朋友来问你新设置）。 几天我研究了一下，为ss服务器增加了多用户即为每个用户设置独立的连接数限制的方法，这样能够比较完美的解决同朋友共享服务器的问题了。 这里默认你已经知道怎么按照通常的方法安装和配置SS了。如果你不了解的话，网络上的文章很多的。 多用户的实现 多用户的实现比较简单，Python和Go实现的服务器自带多用户支持。通常的配置我们一般是这么写 123456&#123; "server": "::", "server_port": "8888", "password": "yourpassword" // Other configs&#125; 只需要将配置文件按照下面的方式进行修改就可以实现多用户了。 123456789&#123; "server": "::", "port_password": &#123; "8881": "password1", "8882": "password2", "8883": "password3" &#125; // other configs&#125; 就可以了。之后不同的用户可以通过不同的端口访问，而每个端口都有独立的密码。 Further Reading: Reference 限制用户连接 我在网上调查了一下实现限制用户连接的方法，很多都提到了通过iptables来进行设置。但是这种方法太过复杂，很容易出问题。后来我找到一个ss的补丁，可以比较好的解决这个问题。补丁地址是falssen/PySocket。 这个工程提供了一些其他的功能，但是我们这里只关注Limit_Clients文件夹下的socket.py这个文件。这个文件的原理是利用Python包导入的机制，用自定义的socket.py来替换默认的socket包，并在socket接口中植入一些新的功能。 按照READMe.md的提示安装好socket.py文件 &gt; 有很多朋友不知道这里要怎么处理socket.py文件。其实并不复杂。用which命令查看一下ss脚本安装的位置，一般情况下是/usr/local/bin/，那么你只需要把socket.py文件放到/usr/local/bin下面就行。这一操作的原理是，python在导入包时总是先检查当前目录。注意，如果修改了socket.py文件，需要重启进程才能生效。 然后修改文件中white_list和black_list两个变量。例如我自己使用的1017端口，我不希望添加限制，则将white_list设置为 1white_list = [1017] 我给朋友们用的是[1018]端口，我希望这个端口的连接数不要超过40个，则将black_list设置为 1black_list = &#123;1018:40&#125; 注意 注意方法的实质是限制接入的客户端IP数量，因此，处在同一路由器下面的多台设备也会被识别为一台。 更多阅读 Shadowsocks中继：从IPv4到IPv6: 目前防火墙越加越高，遇到重大事件的时候，很多梯子都会挂掉。不过，有个好消息是，因为IPv6网络在国内的普及率还不高，因此IPv6还没有被特别针对。如果你有IPv6资源（一般教育网支持IPv6），可以将Shadowsocks通信从IPv4转化成IPv6再出去，会更加安全可靠一些。 Shadowsocks性能优化]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自建图床: Lychee]]></title>
    <url>%2Fposts%2F65048%2F</url>
    <content type="text"><![CDATA[之前用的图床sm.ms的图片突然挂了。不知道为何，图片还是能够上传，但是访问图片的链接会出ERR_SPDY_PROTOCOL_ERROR的错误。 ERR_SPDY_PROTOCOL_ERROR错误示意图 正好我自己的翻墙服务器的硬盘长期富余。虽然只有十几个G，搭建一个自己图床还是够用的。更重要的是，Dogital Ocean的服务器的流量非常多（我买的$5的服务器的流量有一个T）。我选择的开源图床框架是Lychee。这个框架支持Docker安装，可以省很多事情。 1. Docker安装Lychee 常规的安装方法可以参考官方文档。我这里只介绍Docker方式。如果你没有什么特别的需求，Docker方式应该是非常适合你的。 注：这篇教程只是对于我的操作过程的一个记录，因此对于一些依赖环境的安装没有面面俱到。这些问题，都可以面向google进行解决。 1.1 Docker环境准备 首先你要安装一个Docker环境。在Ubuntu上，安装非常简单： 12$ sudo apt update$ sudo apt install docker-io 有时还需要将你当前用户加入到docker组中，这样每次执行docker命令不需要加sudo了。这个操作可能在安装过程中自动完成了，如果你发现docker命令执行时提示有权限相关的问题，可以运行 1$ sudo adduser user docker 注意确保一下docker-compose也安装完毕了。我们需要通过docker-compose来将Lychee和数据库组装在一起。 12$ docker-compose -vdocker-compose version 1.17.1, build 6d101fb 1.2 安装Lychee 首先创建好目录树： 12345lychee|-- config|-- db|-- pictures|-- docker-compose.yml 其中，config和pictures分别用来存储Lychee的设置和图片文件。db文件夹则是用于数据库，这三个文件夹需要你手动创建。docker-compose.yml文件内容如下： 123456789101112131415161718192021version: '1'services: lychee: image: linuxserver/lychee links: - lychee-db:lychee-db volumes: - /path/to/lychee/config:/config - /path/to/lychee/pictures:/pictures ports: - 8000:80 lychee-db: image: mariadb:10 volumes: - /path/to/lychee/db:/var/lib/mysql environment: - MYSQL_ROOT_PASSWORD=&lt;choose root password&gt; - MYSQL_DATABASE=&lt;db name&gt; - MYSQL_USER=&lt;username&gt; - MYSQL_PASSWORD=&lt;username&gt; 目前我没发现lychee的这个镜像支持用环境变量来配置数据库信息。所以上面对应的数据库信息后续需要在网页端手动输入。 然后在这个文件夹下运行 1$ docker-compose up -d 然后访问http://yourdoman.com:8000就可以访问了。 1.3 Lychee配置 在访问上述网页之后，Lychee会提示我们输入数据库信息。 Lychee 配置 注意这里的Database Host要填写lychee-db。其他的设置与上面的docker-compose.yml文件中的一致即可。 而后按照提示创建登录账户： 创建账户 2. Lychee Advanced 2.1 使用Nginx进行反向代理 Nginx配置文件如下： 12345678910111213server &#123; server_name imgs.codewoody.com; client_max_body_size 50M; location / &#123; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8000; &#125;&#125; 2.2 启用HTTPS 目前来看，Let's encrypt仍然是个人建站启用HTTPS的不二之选。其使用教程可以说是非常简明了，具体参考certbot。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这个博客是如何建立起来的]]></title>
    <url>%2Fposts%2F53793%2F</url>
    <content type="text"><![CDATA[在博客问题上我可是折腾了很多回了，先是尝试了wordpress（来来回回很多次），不过wordpress使用起来，感觉还是太“重”，很多东西配置起来非常麻烦(包括主题设置，甚至是Markdown支持)。后来迁移到简书上面，被国家政策教做人(一篇关于Shadowsocks的文章被屏蔽了，有种吃苍蝇的感觉)。思前想后，还是自己host自己的博客好。最终我是选择了Hexo + Github的方案，好处如下： 对Markdown支持比较好 不需要自己折腾服务器 用Git管理非常方便 在这篇文章里，我整理一下整个博客的搭建过程。 1. Hexo Setup Hexo是一款基于Node.js的静态博客框架，可以生成静态页面部署在Github和Heroku上面。Hexo的搭建过程如下： 申请域名 创建Github仓库 安装Hexo及其依赖 绑定域名 1.1 申请域名 虽然部署在Github上Github会提供一个免费的域名，但是如果有自己的独立域名的话，网站会更像&quot;博客&quot;一点。申请域名的地方有很多，我的域名是选用的阿里云的。传送门：阿里云-为了无法计算的价值。 1.2 创建Github仓库 在Github中创建一个名字为username.github.io的仓库，注意这里的username需要替换为你自己的用户名。例如我的仓库名字为huangy10.github.io。 &gt; 你可以尝试在这个仓库中添加一个名为index.html的文件，在其中接入hello world。然后访问http://username.github.io 就可以看到这个页面了。 &gt; 不过注意尝试之后删除这个仓库重新创建。后面我们在部署Hexo的时候最好让这个仓库是空的。 &gt; 1.3 安装Hexo及其依赖 1.3.1 安装Git，并配置好SSH秘钥 这里Github有全面的教程，传送门：https://try.github.io/ 1.3.2 安装Node.js Mac平台下面安装Node.js非常简单，可以通过Homebrew进行安装: 1brew install node 如果没有安装Homebrew，可以在Terminal中输入下面这个命令快速安装： /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 安装完成后可以通过node -v来验证安装是否成功，并查看安装版本。进一步通npm -v来检查npm也正确安装了。 1.3.3 安装Hexo 使用npm来安装Hexo： 1npm install -g hexo-cli 完成安装以后，挑选一个合适的路径，然后运行 1hexo init blog 这个命令会在当前文件夹中创建一个名为blog的文件夹。博客相关的文件都会存储在这个文件夹中。cd进入这个文件夹，然后运行 1234# 生成静态文件hexo g# 在本地运行一个测试服务器来伺服静态文件hexo s 然后在浏览器中访问http://localhost:4000 就可以访问自己的网站了。 博客初始页面 我们来看一下Hexo博客项目下的目录结构： Hexo目录结构 其中比较重要的是： _config.yml是整个项目的配置文件，YAML格式； public是发布的静态文件内容。注意这个文件会在hexo g命令后重新生成，其中内容会被重置； source是工程源文件，其中的_posts文件夹存储了博文的Markdown文件。其中的其他文件，则会在hexo g命令的作用下发布到public文件夹中； themes存储了博客的主题。在各个主题自己内部也有自己的_config.yml文件，用来定制化模板的参数。 1.4 Hexo部署 我们选择将Hexo部署到Github上。打开博客项目根目录下的_config.yml文件，跳到最后，修改 1234deploy: type: git repo: git-repo-path(ssh方式，不要用https) branch: master(不出意外就填写master) 保存退出。 然后我们需要安装一个git部署的工具: 1npm install hexo-deployer-git --save 然后运行 123hexo cleanhexo ghexo d 三个命令，就可以逐步完成清理之前的生成，重新生成静态文件，将静态文件部署到Github上。全部完成后访问username.github.io 。就可以看到站点了。 2. Hexo Advanced 2.1 自定义域名 使用github提供的免费域名还是不够fancy，我还是希望使用自己的域名。首先进入域名管理后台，添加两条记录。分别是 yourdomain.com 添加一条A记录，指向username.github.io对应的ip地址。（这个ip地址可以通过ping命令看到） www.yourdomain.com 添加一条CNAME记录，指向username.github.io 然后在本地博客工程中的public文件夹下，添加一个CNAME文件，文件中写入自定义的域名www.yourdomain.com。重新三连： 1hexo clean; hexo g; hexo d 这是输入https://www.yourdomain.com就可以访问自己的网站了（可能需要等一段时间让dns刷新） 2.2 更换主题 自己搭建博客的乐趣之一就是各种更换主题。Hexo有自己的主题市场：Themes。我选择的主题是laughing。这个主题比较简洁，而且支持响应式布局。不过，这个主题支持的多说这个评论平台已经关闭了。其安装过程如下（其他的主题的安装方式大同小异）： 首先安装主题依赖的pug模板引擎: 1npm install hexo-renderer-pug --save 然后将主题文件夹下载到themes目录： 12cd themesgit clone git@github.com:BoizZ/hexo-theme-laughing.git 最后修改博客项目根目录下的_config.yml文件： 1theme: hexo-theme-laughing 主题的配置方式可以参考主题的Github文档。需要注意的是，文档中所说的_config.yml文件是指的主题文件夹中的配置文件，而非博客项目根目录下的配置文件。 2.3 插件 Hexo提供了很多插件来增强博客的功能。这个部分我也正在研究。这里我列出一下目前我安装了的插件： hexo-addlink: 在文章末尾中添加本文的链接 hexo-generator-feed: 生成rss订阅 hexo-generator-sitemap: 生成站点地图]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2FREAMDE.html</url>
    <content type="text"><![CDATA[Woody Huang的个人博客 https://www.codewoody.com]]></content>
  </entry>
  <entry>
    <title><![CDATA[categories]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[知识库🛠]]></title>
    <url>%2Fknowledge-base%2Findex.html</url>
    <content type="text"><![CDATA[我希望用我的博客能够整理出一些呈体系话的知识库体系。这个页面是这个知识库的入口。以下是目录。注意因为知识还在不断的完善中，所以这些页面也是经常地处于WIP状态。这里的文章除了我自己撰写/翻译的内容外，还会转载一些优秀的博文。 News 这个部分主要整理日常中我见到的引起舆论广泛关注的新闻/案件 见闻(总纲) 学术不端现象 刑事案件 严重事故 其他 Collection 收藏乱七八糟的东西，好玩就行。 Downloading Resources 下载资源汇总 Programming How to install 这里给出了多种软件的安装方法 python apt使用和配置的一些信息 Linux Shell Linux命令行使用指北 Academic 智能交通系统 WLAN 通信原理 History 中国近现代史部分的史料 中国中古代部分的史料 宗教史 南美历史梗 Science 生物学 Military 军事技术 美国现役通信系统 GIG JTRS NetOps WIN-T TCNO CANES 备份集]]></content>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[博客更新]]></title>
    <url>%2Fupdate%2Findex.html</url>
    <content type="text"><![CDATA[2019.12.01 在根目录下面创建了一个shell脚本文件link_posts.sh，用于创建从pages发布到posts的链接。测试发现Hexo不能识别软链接，所以这里创建的都是硬链接。 按照原理来说git应该不能管理硬链接。所以这里我们创建一个shell脚本，用于将来出现问题之后批量恢复这些链接。 2019.09.19 将展示的代码的字体从14pt降低到13pt。 2019.09.17 添加了一种增加脚注的方法，表现形式为： 脚注字体较小，为红色。通过自定义脚本（根目录下scripts文件夹下utils.js文件）实现： 123456789hexo.extend.filter.register('before_post_render', function (data) &#123; var config = this.config; if (data.footnote !== true) &#123; return data; &#125; data.content = data.content.replace(/【~([^】]+)】/g, '&lt;span class="foot-note-span"&gt;【$1】&lt;/span&gt;') return data;&#125;) 2019.08.02 Reference部分文字渲染时不使用标准汉字标准格式的em渲染样式。方法为在_layout.swig中运行 12document.getElementById("refs") .setAttribute("lang", "en_US"); 2019.06.29 在标题前方添加Emoji 2019.06.28 修改了内容宽度 具体方法为修改文件themes/next/source/css/_variables/Pisces.styl 1234// $content-desktop-large = 1160px$content-desktop-large = 960px// $content-desktop-largest = 73%$content-desktop-largest = 960px 启用了Han Support 在menu中添加update项目 字体修改为思源宋体：关于如何在网页中引入思源字体：漫谈Typekit 思源宋体 2019.05.20 困扰很久的VS Code引入莫名其妙添加的不可见08和05等控制字符的问题，最后可以通过“Remove backspace control character”这个插件解决。在VS Code的设置中将editor.formatOnSave设置为true来自动处理文件。 2019.05.15 修复了搜索和Feed的问题：文章中存在不可见字符，导致atom.xml和search.xml的格式出错 替换了字体服务器的CDN，从//fonts.googleapis.com修改为//fonts.css.network 20190507 2 修改了Reference的样式。方法是在themes/next/source/css/_custom/custom.styl文件中添加如下内容： 12345678div#refs &#123; font-size: 13px; line-height: 1.1;&#125;div#refs p &#123; margin: 0;&#125; 1 通过上标提供短的参考信息的方法： 1&lt;sup title="Hover Text"&gt;?&lt;/sup&gt;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fknowledge-base%2Facademic%2Findex.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[备份集]]></title>
    <url>%2Fknowledge-base%2Fbackups%2Findex.html</url>
    <content type="text"><![CDATA[这个部分的作用是备份我在网上看到的好文章，避免因为“种种问题”文章消失不见了。 2019 你永远不可能成为中国的朋友 劳斯莱斯占用医院应急通道 同济沈海英 为什么中国没有新闻法？ 佛罗里达大学博生生自杀事件 中消协给老回发出的回复函]]></content>
  </entry>
  <entry>
    <title><![CDATA[佛罗里达大学博生生自杀事件]]></title>
    <url>%2Fknowledge-base%2Fbackups%2F%E4%BD%9B%E7%BD%97%E9%87%8C%E8%BE%BE%E5%A4%A7%E5%AD%A6%E5%8D%9A%E7%94%9F%E7%94%9F%E8%87%AA%E6%9D%80%E4%BA%8B%E4%BB%B6.html</url>
    <content type="text"><![CDATA[The Hidden Story Behind the Suicide PhD Candidate Huixiang Chen]]></content>
  </entry>
  <entry>
    <title><![CDATA[为什么中国没有新闻法]]></title>
    <url>%2Fknowledge-base%2Fbackups%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%AD%E5%9B%BD%E6%B2%A1%E6%9C%89%E6%96%B0%E9%97%BB%E6%B3%95.html</url>
    <content type="text"><![CDATA[原文链接 这个世界没有绝对的自由。新闻和出版管制这事古今中外的政府都在干。焚书坑儒告诉人们：总有些东西政府不让你看，如果你一定要看就砍掉你的头。 中国几千年来都是皇上说禁什么就禁什么，到了近代才慢慢走上法制轨道。中国第一个正式的出版法是 1906年《大清印刷物专律》，后来还有1908年大清报律、1914年出版法、1937年修正出版法等。1949年新中国成立，《中华人民共和国宪法》确认了公民有言论和出版自由，但中国大陆至今没有专门的《出版法》和《新闻法》。这在世界各国中是非常罕见的。 为什么新中国成立六十多年也没有《新闻法》和《出版法》，不能连满清政府也不如吧？这主要是因为宪法已经规定了言论和出版自由，如果制定《新闻法》，新闻自由就是一个绕不过去的坎。任何法律都不能违宪。但如果《新闻法》确定新闻自由，那中宣部就无法命令各大媒体了。中共中央不会容许这种情况出现。 中国新闻立法推动人之一的孙旭培教授曾在《新闻立法之路》一文中引述了中国共产党老一辈革命家陈云的一句话：&quot;在国民党统治时期，制定了一个新闻法，我们共产党人仔细研究它的字句，抓它的辫子，钻它的空子。现在我们当权，我看还是不要新闻法好，免得人家钻我们空子。没有法，我们主动，想怎样控制就怎样控制。&quot;陈云的谈话反映了中央高层一部分人对新闻立法的态度。 当然，也可以制定一个中国特色的《新闻法》，规定一切媒体听党指挥。理论上这么做没问题，但在全世界都推崇新闻自由、保障媒体监督的时候，中国推出这样一个反潮流的《新闻法》，在国际上岂不贻笑大方？人多少还是要点脸的。 我们都知道，新闻和出版法事关言论自由，是最重要的法律之一，在国际法律界素有“第二宪法”之称。但因为以上所述的原因，《新闻法》和《出版法》在中国难产了几十年，短期之内也看不到制定这两部法律的希望。中国政府陷入了两难，制定不是，不制定也不是，干脆就拖着吧。2016年3月10日，在第十二届全国人大四次会议新闻发布会上，有记者问“新闻法立法有无具体的议程”，发言人干脆拒绝回答这个问题。 既然“第二宪法”没指望，那我们就回头来看看宪法，它明文规定了言论和出版自由。中宣部对媒体管得那么死，岂不是违反宪法？令计划下令全国媒体不准报导法拉利事件，岂不是也违反宪法？理论上确实如此，但中国的宪法基本只是摆看的，它不具备可诉性。 中国宪法明文规定了全国人大是宪法唯一的监督机构。全国人大有一堆委员会，教科文卫委、财经委等等，唯独没有最重要的宪法委员会。我们中国也没有宪法法院。所以，当出现违宪案件，比如中央禁止报导法拉利事件，如果哪位记者发飙了要起诉，他会发现无处可告，没有任何法院或机构受理违宪案件。我们既没有《新闻法》也没有《出版法》，加之《宪法》也被架空，所以新闻和出版自由在中国就只是一句空话。]]></content>
  </entry>
  <entry>
    <title><![CDATA[中消协给老回发出的回复函]]></title>
    <url>%2Fknowledge-base%2Fbackups%2F%E4%B8%AD%E6%B6%88%E5%8D%8F%E7%BB%99%E8%80%81%E5%9B%9E%E5%8F%91%E5%87%BA%E7%9A%84%E5%9B%9E%E5%A4%8D%E5%87%BD.html</url>
    <content type="text"><![CDATA[前情提要：三星在2017、2018年曾经发生过多起手机自燃、爆炸的现象，当时引起舆论轰动，三星对于事件的不作为和打压舆论态度，对三星的在华手机业务带来了毁灭性的影响。老回当时是一起自燃时间的亲历者。并且在这之后的一两年里针对三星进行了长期的维权斗争。这里备份的是2019年5月5日中消协就S7edge所出现的70余起自燃事故向中国消费者协会提交线索所提供的回复（老回于7月10日发布在知乎专栏上）。 回某某先生： 2019年4月25日，您向我会反应，您个人在网上搜集到自2016年至今三星S7edge手机在国内发生过超过70余起爆炸自燃的信息。手机爆炸自燃涉及消费者人参财产安全，我会非常重视，已经将有关情况提供给三星公司，要求三星公司对照进行自查分析。我会也将继续关注此问题。 中国消费者协会欢迎您及全社会各界共同参与消费维权工作，我会非常重视您所提供的信息，但我们也明确提示您，就现有材料而言，我会向三星公司进行查询，不直接等同于我会支持您的任何主张，也不直接等同于对您所提供信息真实性的认可。我会做出上述判断，是基于一下原因： 一、因三星S7edge手机上是时间长，涉及进货渠道、是否正常使用、是否存在假冒配件等问题，您现在才去的网上搜集70余例网民信息的方式，并不一定具有内在必然关系，不一定能分析出可心付的统计结论。 二、您自2016年Note7电池爆炸事件起一直以通过诉讼、帮助其他可能的三星手机受害者维权为名，向法院、市场监督局（原工商局）、消协组织主张权益，近期您的个人诉讼请求已经被法院判决驳回。根据您再主张权益期间采取的过激方式等，我们有理由认为，您在涉及三星的案件中，对消费维权存在理解偏差，且有很强的个人因素。 三、我们了解到您不断搜集三星手机爆炸方面的信息，且通过自建网站以及未经同意强行到中消协办公场所采取网络直播等方式扩大影响。对于广大正常消费者而言，如果发布不实信息，造成不必要的恐慌和担心，是对广大消费者的不负责任。 四、监督侵犯消费者权益的行为是消费者的权利，但是在监督的同时，应尊重事实，客观表述，如果损害经营者的合法权益，如商业信誉，也需要承担相应的法律责任。 中国消费者协会坚定维护消费者的合法权益，如在三星手机的问题上，在2016年三星Note7电池爆炸事件中，中消协所提出的9项主张全部被三星公司接受，中国消费者整体权益得到维护。在该案件中，我会也坚决不支持您个人为自己所提出的要求，您在广州的败诉结果，证明了我会对您的主张不予支持的定性是准确的。再次强调，中国消费者协会是保护消费者合法权益的组织，不是个别人为谋取私利（包括财产权益或者成为网红等）的工具。 鉴于您长期、多次向有关机关及领导反应、现场投诉等方式强烈主张自己的诉求，我会在此明确表示，欢迎你通过合法途径及手段对我会的维权工作进行监督。 此答复是对您的善意且慎重的一对一答复，不建议您对外。如果您执意对外公布或提供此答复，请全文发布或提供，以便广大消费者及社会各界能全面了解事实。 还是老问题，我国的司法制度，既不支持集体诉讼，也不支持惩罚性赔偿。遇到这种质量问题，顶天了，无非就是给一笔小钱，就算罚个十倍又如何？ 不够有倒是有个疑问：消费者有什么「合法途径」可以监督中消协的工作呢？]]></content>
  </entry>
  <entry>
    <title><![CDATA[劳斯莱斯占用医院应急通道]]></title>
    <url>%2Fknowledge-base%2Fbackups%2F%E5%8A%B3%E6%96%AF%E8%8E%B1%E6%96%AF%E5%8D%A0%E7%94%A8%E5%8C%BB%E9%99%A2%E5%BA%94%E6%80%A5%E9%80%9A%E9%81%93.html</url>
    <content type="text"><![CDATA[原文链接 8月14日，一段“女子开劳斯莱斯堵妇产医院门口”的视频热传。 记者了解到，这一幕发生在14日早上9点左右，在北京市朝阳区的北京妇产医院（东院区）。一女子与医院工作人员发生言语冲突后，将自己驾驶的劳斯莱斯轿车堵在了医院应急通道。交警赶到后，女子的车辆被其家属移开。目前，有关部门正在对此事进行调查。 8月14日上午，有网友爆料称，一女子开车堵在了北京妇产医院东院区的应急通道口，警察到达现场后女子依然不肯挪车，并且她与医院工作人员和交警相继发生言语冲突。 网传视频显示，一辆劳斯莱斯堵在门口，交警表示希望女子配合工作，尽快将车从医院门口移开，不要妨碍其他人的车辆通行。女子则声音沙哑，情绪激动，不断与交警争执。 画面中，一名应是医院工作人员的人向女子解释，“你影响到其他人了，这是救护车通道。” 随后该女子表示：“你该报警报警，该处罚处罚。我已经影响了，我认了。（是）你们不讲道理。”其间，女子还质问医院工作人员，为什么她前面的私家车就可以进救护车通道，而自己却不可以进。 医院工作人员表示，已经进去的车辆有别的原因。 14日上午10时30分许，记者在事发的北京妇产医院东院区门前看到，秩序已恢复正常。据了解，女子的劳斯莱斯轿车已经被其家属挪走。 据现场的一名保安介绍，事情发生在上午9时许，该名女子驾驶劳斯莱斯试图从应急通道进医院，被执勤保安拦下后，遂将车停在应急通道，导致进院车辆发生短暂交通拥堵。 执勤保安对记者表示，进医院看病的车辆都要在医院东侧的社会车辆通道排队，按顺序进入。该女子直接从机动车道拐入应急通道，被拦下后，与保安发生言语争执，于是赌气将车停在了医院入口处的应急通道。 据了解，有关部门正在对此事进行调查。]]></content>
  </entry>
  <entry>
    <title><![CDATA[同济沈海英]]></title>
    <url>%2Fknowledge-base%2Fbackups%2F%E5%90%8C%E6%B5%8E%E6%B2%88%E6%B5%B7%E8%8B%B1.html</url>
    <content type="text"><![CDATA[原贴地址：关于小三师姐和小三女AP关联事件的总结 这篇帖子是我在检索学术圈五大蛊王的过程中找到的，下文后面提到的「美女教授」就是主人公之一的同济·沈海英。 这些八卦丑闻缺少确切的来源，还希望看官自行甄别。 几天看了个八卦，这几天风起云涌的，特别逗，八卦故事是这样的： 有个女的跟老公谈了11年恋爱，然后5月份登记了，买了房，自己在家装修，男的回到美国继续读书，两人计划今年6月办婚礼，然后女的F2出国。结果 女的发现老公出轨了，这个发现的过程比较有新意，并不是捉奸在床，而是女的登录男的博客空间，发现了男的写给她的一封信，在信里，男的用长篇大论剖白了自 己的出轨心路历程。 主要有那么几点，首先呢，男的说最近吵架找茬都是他故意的，因为他出轨了，没法面对很矛盾，就只好吵架了。第二呢，出轨对象师姐性格很好，几个月来 的相处让他很有感觉，然后俩人去出差的时候，定了一个房间两张床，结果酒店非常配合的只给安排了一张床，在师姐主动诱惑下，他坚持了15分钟之后就从了。 第三他就开始反思自己的这个婚姻，觉得如果离婚对女方也是个解脱，因为女的要F2过来之后还得读书，再找工作，然后生娃买车买房子，他没信心了。然后表示 说，可以给女方一些补偿，云云。 女的就崩溃了，跑网上哭来了，一边哭一边回忆了过去11年的爱情之路。大家就很同情啊，一边安抚她一边给她出主意。这女的一边回忆过去，一边更新进 展，其中包括她打电话给她老公，说还是希望到美国来弥补婚姻，没想到呢，那边师姐已经早早的move in了，老公小声接电话的时，师姐就在旁边听着呢。然后这女的急了，要求跟师姐对话，百般忸怩之后师姐接了电话，表达了她的意思，她的意思呢就是，她知 道自己 这么横刀夺爱不太好，可是她本身对道德底线就没有很高的要求，所以她觉得自己这么做也没什么。然后呢，她就是很喜欢这男的，所以她不打算放手，倒是 劝这个当老婆别闹了，因为男的最近要考qualify。 这下网上就炸了窝了，大家从同情转成气愤，纷纷说这师姐可太不要脸太嚣张了哇，怎么能这样呢？于是就有人张罗着把这事儿曝光。很快，有能人根据已有 的信息，翻出了师姐的facebook主页，八民们迅速瞻仰了师姐的花容月貌，接着又找出了男的的主页，得出结论说，“这俩人，男的长的象女的，女的长的 象男的”。还有人回帖说：“请师姐赶紧去刮刮小胡子吧…” 客观的说，这个师姐长的是比较彪悍粗壮，据说是山东人，的确体型五大三粗的，有人顺着把她的space也给翻了出来，里面许多出去玩的照片，让人看的更清楚。而男的呢，傻不垃圾在自己学校的主页上，还放着自己的婚纱照，对比之下，真是让人无限唏嘘。 其实我私下觉得，正室和这男的11年感情，中间的确有许多问题，他们登记前就出现很多波折，加上登记之后还分居两地，这男的说的话，虽然十分混蛋， 但估计也是出于他真心的对现实考虑。这个正室自己也说，这么多年来，她一直对老公很push，而这老公上来第一句说师姐就是：“她的性格特别好…” 想必就是蚊子血和米饭粒的纠结。这些都是现实，现实嘛总是血淋淋的，也不排除别的可能，师姐和师弟就真的幸福的生 活在一起了呢？人家就真的真爱无敌了呢？ 后来这事儿闹大了，师姐弟俩开始删主页，删照片，正室出面请求大家偃旗息鼓，不要再追究了，这事儿就让它随风去吧… 话说随风去吧这个，让我想起几年前加拿大的一个类似的事儿，忘记主角名字了，就是一个女的，写和老公多少年周年纪念，写了好多篇，真是特别的动人， 又生动又有趣。结果才过半年吧，忘了这女的是回国了还是怎么的，总之，她忽然就发现老公在加拿大和师妹出轨了，也是那种血淋淋的真爱，真是爱的天雷动地火 那种。然后她老公还两边都不舍得放手，痛苦的死去活来。当时是在哪儿啊我忘记了，文学视界还是哪儿， 简直轰动一时。然后这女的迅速回去展开婚姻保卫战，折 腾了好一阵，大家都痛苦的没法活了，就是那男的根本没治了嘛，次次都说悔改，可是悔改之后次次都要回到真爱小师妹身边。但是最后，听说这女的和男的和好 了，生了个孩子，然后一家人海归了 。当年这个看的我真是唏嘘的要死。 Whatever。好玩的在后面。 写累了，我先歇会儿。 这之后事态的发展啊，就真的出人意料了，要不我怎么起这么个题目呢？真是世事难预料，世事难预料哇。 咱们中国人最喜欢最习惯的是啥？那就是组织啊。虽然大家总是会说组织的坏话，说组织这不好那不好，可是到了国外，还是会习惯性的向组织靠拢，没组织 也要搞出个组织来。所以，当遇到这种国内惯常称为“生活作风问题”的时候，就有人自然而然的想到了“找组织”。可是国外的组织哪儿找去呢？有人一拍脑袋 瓜，简单啊，找导师，找学校，举报了他们！ 在这里我得说，这种做法特别傻逼。 HOWEVER，就有人顺藤摸瓜下去了。之前在正室的一个帖子里说到过，说在affair暴露以前呢，他们夫妻俩是很感激师姐的，因为师姐帮了他们 一个忙。这个忙就是救了这男的于水火。这男的以前的导师很tough，很mean，很push，然后师姐说她的导师很好，就帮着这男的转了实验室，调到了 和她一个实验室。当然，这也为培养他们俩的真爱提供了便利的温床。 于是有人根据这个线索，找到了一个链接，打开这个链接，首先跳出来的是一个美女教授，点开美女教授的研究介绍，才会看到一张很小的照片，照片上有 7，8个人，最右边的那个，就是男事主。这真是非常非常偶然的发现，因为美女教授整个的个人主页上，没有一个字提到男事主，她的current students, graduated students里面，也没有男事主的名字，男事主就象一个幽灵，漂浮在这张照片右边的角落上。 而美女教授本人，却引起了猥琐男们更浓厚的兴趣，大家开始津津有味的评价美女教授的风姿，首先夸她好看，长的漂亮，然后气质也特别端庄，穿衣服也很有品位的说。几乎每个痛骂出轨男和师姐的帖子里，都要带上一句，“你们发现了吗？他们的导师长的好漂亮…” 结果，夸奖的人多了，终于惹出了后面的事端，这事儿一发变得不可收拾… 趁着还有一口气，熨衬衫的空档，我来接着八，太不容易了啊。 其实事情发展到这个时候，因为男女三方当事人都处理的比较冷静低调，这事儿本来已经有点儿消停下去了的，毕竟日子是人家的，人家要怎么过是人家的事 儿。可是忽然，在某一天半夜三更，我都快去睡觉了的时候，忽然网上出现惊天一帖，指名道姓的抓住美女教授不放。这个帖子非常的惊人，爆料人自称是美女教授 的受害者，美女教授曾经趁她在国内的时候勾搭其老公，并且利用NSF funding买机票来与男方苟合，事发 之后辩称是出于真爱，因为虽然美女教授早早2006年就嫁为人妇，可那只是出于身份的需要，真正的感情和身体的渴望，其实全都交付给了这位的老公。这事儿刺激的爆料人得了心脏病，一提这事儿就犯病，而看到网上异口同声的夸美女教授好正，她怒向胆边生，于是跳出来爆 料，并且赌咒发誓自己说的一切都是真的。 这下，事情可就闹的大条了。因为美女教授不仅仅是插足，还是出轨，更严重的是爆料中提到的“用NSF funding买机票” 来做私事，而且还是这样的私事，这简直是足以毁掉一个人的指证。有人一听就跳了起来，这还了得？这，这，这简直是杀人不用刀啊。 八民们开始行动，找出美女教授的个人主页，发现这个美女教授果真了得，短短几年内拿了5个NSF的funding，更了不起的，是她还拿了MS的一 个大奖，million奖呀～～～多少奋战在申请funding一线的AP那心口都在淌血，有AP家属到网上哭诉说，她家老公看了这个之后，立刻收拾包去 学校实验室干活了，说以后没有娱乐事件了，周末也要加班，一定要争一口气。 话说这个NSF funding，真是很不太好拿的，据说前几年有个哈佛小牛，写过一篇blog，抱怨说自己那么勤奋，中funding的几率还是那么小，真是好想找块豆 腐把自己撞死。大家挖出这个小牛，发现该小牛其实真的挺牛的，也有大牛支持他说，这事儿就是这样的，科学的道路上，除了勤奋还需要运气，所以你不要抱怨 了… 而美女教授的背景并不是那么strong，虽然她本科毕业于同济，可是来美之后，就读于一个名不见经传的学校，拿到PhD之后，去了阿肯萨大学，然 后跳到Clemson，看起来真的不是很strong耶，那么美女教授靠的是啥呢？八民们一下就high了，开始七嘴八舌的进行热烈的讨论。 不幸的是，这个时候美女教授得悉了自己“出名了”这个惊天“喜讯”，迅速的采取了行动。她的行动之一，是发表了一个声明，声明包括三点，1，她不认 识那个爆料的人，请爆料人自己主动出来受死，不要罗嗦。2，大家不要再唧唧歪歪了，在事态发展到不可收拾之前就闭嘴吧。3，我忘了。 声明最早出来的时候，大家怀疑是有人冒充美女教授出来搅混水的，别说，真的常有这种人，动不动就喜欢跳出来说：“其实我就是…” 来吸引眼球。另外一个怀疑的原因，实在是让人哭笑不得，因为美女教授的这份声明，是用英文发的，而这个英文水平呢，真是惨不忍睹，其中第二条，她写的 是：I will ask an lawyer to handle this thing if the thing goes too far。这下大家都乐了，this thing, the thing, 到底 是什么thing啊？还有好事的人拍着身边八民的肩膀说，别怕，接着八吧，因为压根没有an lawyer这个东西呀。 可是很快有人根据发表声明的ID，找到了她以前的旧帖，发现几年前这个ID的确在问找教职的问题，而且的确在2006年询问了绿卡婚姻该怎么办，若干证据证明，这个ID，就是美女教授的真身。 神奇的是，在美女教授的真身现身之后没多久，神秘的爆料人也现身了，她一反前一天愤怒激情的状态，非常卑微怯懦的也发表了一个声明，声明大意说，她发表了不实的言论，对美女教授造成了声誉伤害，十分后悔，请斑竹删贴，并且收回自己的话。 说到这里，不得不提前一天晚上，该爆料人临走前发的帖子，她大概发了几十个帖子，前面大部分都是在爆料，而后面几个都是在问怎么删贴，说自己好不容易保住了婚姻，现在冷静多了，不想再闹了，老公在苦苦哀求她闭嘴，所以请问大家如何息事宁人。 这个中间很有趣的有两点，第一点，爆料人当初是在A网站上爆料，被人转到B网站上，可是美女教授和爆料人都只跑到B网站上发表声明。第二点，上午美 女教授还声明说自己不认识爆料人，不知道谁在扯淡，下午才过几个小时，爆料人就主动献身，吸引火力，承认自己造谣。不知道是美女教授的感召能力太强大，还 是爆料人太傻查。还是说，其实美女教授根本心知肚明 ，紧急联络了爆料人老公，令其迅速灭火… 总之，这俩声明反而把火越扇越旺了，八民们无惧an lawyer的威胁，开始深挖狠挖… 所以这个“躺着也中枪”的第一主角，其实就该算这位美女教授了。本来根本没她什么事儿，她其实只不过就是前面那位男事主的前导师而已（就是那个被男 事主说很mean很tough很push的那个），本来一点儿关联都没有，一个关键词都没有，只不过是因为被夸貌美有气质，结果被扯出这么大一个屎盆子。 然而这事儿没完。 首先，八民们发现美女教授的简历有点问题，她把自己从大学到硕士到博士的学习经历，全部列出GPA4.0，然后还说，rank No 1。八民们说，哪儿有AP这么写自己简历的呀？有鬼。 挖下去之后发现，美女教授声称自己毕业于同济计算机系，是同年级第一名身份毕业。可是事实情况，她其实是同济旁边一个什么职教学校的中专，可是这个中专在某一年被同济合并，所以她碰巧拿到了同济的毕业证书，但是不是和正牌毕业生的一样？就不知道了。而rank #1也是扯的，因为她根本不是计算机系毕业的。至于GPA4.0就更扯了，有人把她当年职教班的成绩单都给翻出来了… 其实说实话呢，这都不算什么，毕竟人家现在都AP了，当初大学那点儿事儿，who cares。你说她cheat了，可是十几年都过去了，人博士也拿到了，眼瞅着tenure也如掌中之物，那些陈年老账，再怎么翻，也翻不了天去。 但是美女教授不舒坦，她先关闭了自己的个人网站，然后开始不断修改自己的简历。与此同时，A网站上出现若干马甲，顶旧帖的顶旧帖，搅混水的搅混水， 有的马甲专门负责为美女教授鸣不平，有的则不断试探八民的钻研成果，这边八民们找出一个破绽，那边个人网站上就迅速补上，有的八民一看，一怒之下，跟美女 教授死磕起来，她每次更新个人简历都给她截屏贴出来，两边不断斗法，斗了个不可开交。 既然旧事不宜再提，不爽的八民们开始把目光放在新事上，首当其冲的，就是那5个NSFfunding。有人开始研究美女教授的publication，有人开始读她的proposal，我说这些人的精神也真是可嘉。这些proposal到 底水平如何，有人说很弱，有人说还行，但是为啥给她不给别人呢？反正读完了之后回来有几个结论，就是这几个funding中，有2个吧至少，是没有经过 reviewers评审，而是直接由director决定给的。 更悲摧的是，有人匿名跳出来说了，这个美女教授我知道，当年她想跳出来找教职的时候，也申请了我们学校的，然后我们都深深的被她震撼了，一方面是她 的背景如此之weak，另一方面她的achivement又如此之强大，当然的确她的英文不是很好，但是令人 印象最为深刻的，是她提供了一封推荐信，这封 推荐信的推荐人非常非常非常的强…所以她进入了我们第一轮的面试，虽然没有进入第二轮… 于是有人问了，那XX年到XX年的XX专业的这个director是谁呢？立刻，就有人贴出了这个director的主页，是一个台湾人，male。而这个人的主页被贴出来之后不到15分钟，主页上的照片就被迅速删除了。 好好一个桃色事件变成了学术圈丑闻，到这里又隐隐套上了桃色的罩子，大家对“躺着”也中枪有了新的认识。对不起，我mean了。 这几天下来，我对这事儿的兴趣都快淡了，可是八民们却八性正旺，说到这会儿我都有些不落忍了，有的人把美女教授老公也给翻出来了，把她家也给翻出来 了，具体是不是真的，我不知道。更惨的是，有人到ratemyprofessor.com上，把她的学生的评价给找了出来，学生们的普遍评价是，nice heart, but really bad English，听不懂她上课说什么，而且也别指望office time，你们还是自求多福以看书自学成才吧。 美女教授的马甲跑去找站方要求删贴，没想到，A网站的站方比B网站的站方要硬气，拿出站规说，除非你能证明你是当事人，不然没有权力要求删贴。美女教授真是气了个半死。 到目前为止，不断的还有新的讨论，各种说法其实都挺逗的。有人说，前面那个affair的女事主应该去告师姐弟的老师，哪儿那么抠啊，出去开会还只 给一个房间的钱，这是侵犯人权嘛。有人说，美女教授怎么读PhD的时候没有文章，一毕业了哗哗的都出来，而且大部分都是独立作者，只有很少的部分挂了自己 的学生，她百忙之中还要自己coding吗？有人说，一般来说毕业后混的特别好的也有，可是大多都是靠导师的connection，可是显然美女教授混的 比她导师还好很多很多啊… 这件事的最新进展，是大家挖出了MS那个大奖，前提要求申请人必须是在tenure track的第一阶段，换句话说就是，在美女教授跳槽到现任学校之前，不能是tenure track的教授，如果是，她就不qualify这个奖项。然而看起来，她在跳槽之前的旧学校，就已经是tenure track的教授了，不然她不qualify其中一个或者几个NSF funding的申请。所以至少证明了一点，就是那个百万微软大奖，美女教授不符合申请资格。当然具体的 我不懂，我都是看来的，看来的。 有人说了，这事儿不能怨她，得怨MS自己，申请不申请是美女教授的事儿，给不给，审查她是不是合格是MS的事儿，就算她不合格，可是还是给了她，那就不能怪她了，天上掉馅饼难道你还能不接着还踢一边儿去么？ 不幸的是，还真的有好事的人，在张罗着收集这些材料，准备写信给MS投诉，要求他们重新审核这个奖项（有人冷不丁的说，那个NSF的 director是有MS的connection的）。甚至有好事的人在商量着写信给NSF，要求他们重新审核那几个funding。有人说，MS那个也 就算了，可是如果真的证实了NSF funding给的有猫腻，那整个NSF也会受到牵连，那才是真的，真的躺着也中枪啊。 好了，我回去接着熨衬衫了，这事儿接下来会怎么发展，我也不知道啦。]]></content>
  </entry>
  <entry>
    <title><![CDATA[你永远不可能成为中国的朋友]]></title>
    <url>%2Fknowledge-base%2Fbackups%2F%E4%BD%A0%E6%B0%B8%E8%BF%9C%E4%B8%8D%E5%8F%AF%E8%83%BD%E6%88%90%E4%B8%BA%E4%B8%AD%E5%9B%BD%E7%9A%84%E6%9C%8B%E5%8F%8B.html</url>
    <content type="text"><![CDATA[原文地址 瑞士《世界周报》10月16日刊登了对美国哲学家、经济学家、数学家、乐评人大卫·保罗·戈德曼的采访。戈德曼是香港英语媒体《亚洲时报》的联合拥有者，时常以“斯宾格勒”为笔名对西方危机大声疾呼（其笔名取自《西方的没落》的作者奥斯瓦尔德·斯宾格勒）。荷兰作家莱昂·德温特认为戈德曼作品有意思的程度排在世界前列。翻译本文的目的一是呈现一个有意思的视角，二是展现一个聪明、体面的对手如何看待中国，不代表观方翻译同意其立场。 《世界周报》：当前，美国正处于动荡之中。总统可能被弹劾，这是美国历史上第四次发生这样的事。你对此怎么看？ 戈德曼：对特朗普来说，真正的麻烦不在于弹劾，而在于中国和（美国国内的）经济问题。目前看来，特朗普政府跟中国的较量很像是在“自摆乌龙”。 *《世界周报》：为什么说是“自摆乌龙”？ 戈德曼：因为关税给美国经济造成的影响至少跟它对中国经济的影响一样糟糕。美国的出口订单断崖式锐减。美国当前工业数据处于自2009年6月以来最弱的水平。美联储承认美国制造业正在衰退。美国工厂产量正在萎缩。2016年特朗普之所以能赢，是因为他拿下了宾夕法尼亚、俄亥俄、密歇根和威斯康星等制造业关键州。这次他犯下的错误可能导致他输掉下一届选举。与这种真实的危险相比，弹劾好比一场假面舞会，走走过场而已。虽然中国也蒙受了损失，但似乎损失不如美国惨痛。 《世界周报》：你曾经把中国对美国的挑战比作1258年蒙古人对巴格达的围攻和征服。 戈德曼：蒙古人靠自己没法突破巴格达十二英尺厚的城墙。但他们雇佣了上千名中国攻城工程师，后者三周之内便突破了城墙，然后蒙古骑兵冲进去进行屠城。 《世界周报》：那么谁是今天要突破美国要塞的中国攻城工程师呢？ 戈德曼：华为就像是长枪的枪尖，因为在中国经济扩张以及发展成为世界经济强国的过程中，宽带网络是通往其他一切的钥匙。 华为是一家人才济济的公司。十年前，如果你问别人“你买了什么中国制造的产品？”，对方可能一个品牌都说不出来。但现在每个人都知道华为。他们生产的智能手机是全世界最棒的。他们毫无疑问主导了5G网络。但华为作为一家公司并没有很强的中国属性，反而更具有帝国性。 这个帝国公司比我们更优秀，因为它吸引了许多国家的人才。华为工程师有一半是外国人。他们击垮竞争对手，招纳对方的人才。他们有五万名外籍员工，而外籍员工负责研发工作的比例超乎寻常的高。 我是跟华为打过交道的。曾经有几年我在香港某个中资精品投行工作，当时我跟华为的工作人员有业务往来，帮他们跟外国政府牵线搭桥。华为对自己的目标非常明确。比方说他们会对墨西哥政府说，“你们的全国性宽带网络让我们来建。只要接入宽带，你们就可以开展电子商务和电子金融业务，然后我们可以提供配套的物流和融资方案，让你们融入世界市场。” 中国现在已经成为地球上互联互通程度最高的社会之一。当前，中国是全世界电商渗透率最高的国家，中国的电子支付系统和电子银行比任何其他地方都先进得多。 《世界周报》：美国国务卿迈克·蓬佩奥今年夏天访问瑞士时接受了我的采访，他发出了强烈的警告：“瑞士应该远离华为。”美国人在欧洲四处传递同样的信号。那么到目前为止，美国阻止欧洲伙伴与华为合作的努力究竟有多成功？ 戈德曼：意第绪语（译注：戈德曼是德系犹太人）里有句话，叫做 Soll ihr gor nischt helfen（爱莫能助）。美国围堵华为的战役是一场耻辱的失败，实际上，这恐怕算得上美国有史以来最彻底的政策失败之一。 不久前，美国一名内阁级高官告诉我，在我们还没摸清门道的时候，中国人就已经遥遥领先了，但现在我们开始奋起直追了。他这个说法犯了两个错误。首先，他们仍然没有摸清门道。其次，他们并没有缩小差距。两年前，美国情报界意识到5G不仅将极大助长中国的经济实力——中国经济实力本身就是美国的国家安全关切——而且它还会在未来几年内瓦解美国在信号情报领域的优势。 《世界周报》：怎么个瓦解，能解释一下吗？ 戈德曼：其实7月份我就在《亚洲时报》的文章里抛出了这个观点。许多其他媒体也就此展开了讨论。中国人在量子通信方面处于领先地位，这门通信技术利用远距离量子纠缠效应来产生通讯信号。量子通信系统有个特点，如果你以任何方式干扰它，通讯信号就会消失，量子态就会被破坏。就好比一封信，当你看到它的时候它就消失了。所以从理论上说，你不可能用技术手段入侵这种通信系统。5G带宽的无比强大之处在于，它可以在普通5G通信中引入量子通信并使其成为标准。 我们了解到，中国人已经在境内利用光缆使用量子通信技术传输敏感数据。若干个大团队正致力于将量子通信嵌入5G网络。韩国的SK 电讯、日本的东芝都在做这方面的努力。据说英国布里斯托大学的一个研究团队也取得了不错的成果。那么结果就是，两三年后美国将失去窃听其他人的能力。 《世界周报》：尽管美国人反复告诫“不要用华为的5G技术。”但最终西方国家的客户还是需要5G技术的。对欧洲人而言，除了华为之外还有其他的选择吗？ 戈德曼：嗯，目前没有。这就是为什么美国喊破喉咙也没什么用。华为的某位高管曾经对我说：“我们搞不懂美国为什么不让思科去收购爱立信，给我们增加一个竞争对手。”为什么？因为那会拉低思科的股价，在美国，任何降低股价的事我们一概不做。 《世界周报》：那么政策方面应该怎么做呢？ 戈德曼：正确的政策他已经说出来了，就是让思科和爱立信合并，让微软或谷歌参与其中。美国有很多公司可以有效地参与竞争。政府可能需求给它们一些补贴，税收补贴，或者直接对研发进行补贴。你得把各大公司的总裁们都召集到白宫椭圆形办公室，然后对他们说：“你们要实现这一目标，需要我们怎么配合？”我认为欧洲国家应该都更愿意跟美国而不是中国合作，哪怕这意味着5G网络全面铺开需要推迟。但问题是美国人拿不出替代方案，所以欧洲人只能干着急。 《世界周报》：许多欧洲人的看法是，美国人对德国总理默克尔实施监听，而且根据爱德华·斯诺登的爆料，他们还从全球各地窃取数据。反正给美国人偷去也是被偷，给华为偷去也是被偷，那我们还担心什么呢？ 戈德曼：好吧，哈哈。中央情报局前负责人曾经对我说，问题的关键在于窃取大家数据的究竟是我们还是中国人。在我们和中国人之间，你们难道不是更情愿让我们把数据偷走？ 《世界周报》：大多数人应该会说：“我们不希望任何人侵犯我们的隐私。” 戈德曼：好吧，不过我觉得这个问题本身已经没什么意义，因为加密技术——特别是量子加密技术——的发展反正都会瓦解美国的监听能力。我认为现在所发生的一切，只不过是美国情报机构的缓兵之计，想拖延5G网络铺开的时间，直到找出应对方案。他们现在只能在困境中挣扎。 要知道，我们每年向情报部门投入800亿美元。这笔钱绝大部分用于信号情报。（信号情报是指外国目标使用电子信号和电子系统所产生的情报，例如通信系统、雷达和武器系统。）而突然之间，美国国安局大大小小的屏幕都要关掉了，他们的权力将大大被削弱。 《世界周报》：这样一来中国的全球影响力将迅速提升，我们得好好想想，这背后掩藏着中国的什么大战略？ 戈德曼：在过去一千年里的大部分时间，中国都是世界上占主导地位的制造业大国。直到大约200年前西方开始工业革命时，中国的地位才掉下去了。中国人认为这只是暂时的异常现象，他们想重新树立中国的卓越地位。他们认为中国只要在创新和控制世界主要市场方面建立起技术优势，就等于握住了通往繁荣富强的钥匙。 要知道，中国历史上有很多王朝因为饥荒、瘟疫和异族入侵等原因而覆灭。这个国家历史上不算很稳定。现在这些中国人是第一代不需要担心挨饿的中国人。这样一来，中国基本上消除了整个国家体制脆弱性的主要来源。而如今，中国把目光投向外部世界，开始在全球范围内行使权力。电信、物流、电子金融、电子商务以及人工智能等其他技术应用，都是中国扩张的手段。 中国人把每个智能手机都看作一个数据采集器。它将收集关于医疗健康、消费交易、环境交通等方面数据。所有这些数据都可以上传到云中，交给计算机处理，这会在工业控制、卫生系统、环境、城市规划以及社会和政治控制等领域给中国带来巨大的优势。 《世界周报》：自公元800年以来，中国的边界几乎一直保持不变。我看不出中国人有什么扩张的打算。 戈德曼：这一点我同意。 《世界周报》：那么，他们的战略是什么？他们究竟想要什么？ 戈德曼：他们想让所有人向中华帝国交租。他们想控制关键技术、金融和物流，让大家都依赖他们。基本上，就等于把其他人变成佃农。 《世界周报》：那他们现在进展如何？ 戈德曼：现在还属于很初级的阶段，现在中国想做的基本上就是用自己的转型方式改造其他国家。这不是件容易的事。你会遇到政治障碍、文化障碍。例如，中国在巴基斯坦这样的国家巨额投资，但这里文盲率接近50%，政治高度动荡，基础设施赤字巨大。短期内没人能把巴基斯坦建设成中国。又比方在像巴西这样的国家，中国在考虑建设全国性宽带网络。还有整个东南亚国家——越南、马来西亚、柬埔寨、泰国——它们都可能被改造成中华帝国的经济附属国。如果把印度尼西亚算在里面，东南亚地区就有6亿人口。 《世界周报》：当中国人的目标实现之后，他们会在政治和意识形态上压迫这些“佃农”吗？ 戈德曼：我认为，中国人对蛮夷如何自治毫不关心，只要他们在经济和技术上都附属于中国。中国人是世界上最不讲意识形态的民族，他们是最务实的。 许多美国朋友跟我说，当下的问题在于邪恶的党压迫着善良的人民。我认为那纯属胡扯。在我看来，中共就是中国古代官吏体制的化身，而中国自公元前三世纪统一以来一直接受这套体制的统治。 拿俄国人做个对比，俄国人开设间谍学校，补贴（境外）地方共产党组织等等做了许多事，中国人对这些东西完全没兴趣。白邦瑞（华盛顿智库哈德逊研究所的中国战略中心主任）等批评人士过于夸大了中共的意识形态野心。但我这样说并不代表中国就不危险，也不代表它对我们不构成挑战。 《世界周报》：亨利·基辛格是西半球最杰出的中国问题专家。他在《论中国》一书中说，中国人的行为模式就像是一种三维象棋，他们好像管它叫围棋。 戈德曼：没错。 《世界周报》：那岂不是说中国人有超级大脑？ 戈德曼：这样说未免太夸张了。中国之所以凝聚成一个国家，全靠官吏体制的雄心。历史上中国疆域内集结了许多民族、许多语言，它们之间差异非常大。中华帝国通过官吏体制从各省招募最聪明的人，使他们的利益与中央政府保持一致，以此维系整个国家。 《世界周报》：你认为西方对中国最大的误解是什么？ 戈德曼：最大的误解是认为中国有着邪恶的政府和善良的人民。三千年来，中国的政府和人民一直在相互塑造。事实上，西方最接近中国体制的机构是西西里黑手党。它里面得有个capo di tutti capi（头领中的头领），只要有他坐镇小头目们就不会自相残杀。他们自相残杀，因为他们是天然的无政府主义者，不喜欢任何形式的政府。他们忠于家族。所以皇帝是一种必要的恶。民主体制里面最根本的东西是公共信任和个体行事优先（subsidiarity）原则，而中国人对这些概念是完全陌生的。 《世界周报》：现在已经没有皇帝了，究竟是什么力量把无政府主义者团结在一个国家里？ 戈德曼：上世纪50年代流传下来一个关于美国前总统艾森豪威尔和以色列前总理本-古里安的老笑话：艾森豪威尔对本-古里安说，“给美国2亿老百姓当总统真是太难了。”本-古里安则回答道，“给以色列200万个总理当总理才叫难上难。” 而中国，则是一个由14亿名皇帝组成的国家。每个人都想当皇帝。每个人都努力为自己和家族捞权力。他们不懂什么叫Res publica（公共事务）。他们没有那种奥古斯丁式的共同的爱，所以国家不是靠友爱共同体团结在一起的。使国家团结在一起的是人们的抱负。因此，选贤任能制度务必做到公平公正，这是最重要的。 在中国，不论你是什么达官贵人，只要你孩子高考分数不够，北京大学的门就不会对你敞开。 《世界周报》：只要中国精英还让子女去美国常春藤盟校念书，西方就还有希望，对吗？ 戈德曼：创新可能是我们唯一比中国人擅长的事。正如我所说，华为公司的创新非常依赖来自西方国家的外籍员工。我不是说中国人不会创新。唐朝被认为是中国艺术和文化的黄金时代，那时候中国人已经掌握了时钟、指南针、火药、印刷术等技术，几乎涵盖了发起工业革命的全部要素。然而，中国的选贤任能机制是以标准化考试为基础的，这并不是维持精英领导制度最好的办法。阿尔伯特·爱因斯坦当年就是因为谋求不到大学教职，才跑去瑞士专利局坐班的…… 《世界周报》：……然后他用私人时间搞研究提出了相对论…… 戈德曼：对。这在中国是不可想象的。如果你问中国人最担心什么，很多人会说：“为什么我们得不到诺贝尔奖？”其实已经有八名中国人在科学领域得到了诺贝尔奖，但他们大都是美籍华人。 中国的制度很难辨别筛选那些不合群的怪人，他们往往能做出根本性的贡献，比如爱因斯坦。我们在这方面要强得多。西方人认为人类个体里有潜在的神性，这就是所谓的神圣火花，而这种概念在中国根本不存在。因此，我认为我们在与中国人竞争中还是有机会的。 《世界周报》：美国总统唐纳德·特朗普一直说：“我们必须阻止中国人窃取我们的创新和思想。”他这样说对吗？ 戈德曼：这种说法既有对的地方，也有错的地方。中国的崛起当然对西方的繁荣与安全构成了威胁，特朗普呼吁西方留意自然没错。倒是前副总统乔·拜登出于维护自己儿子的利益，说无需对中国人多虑。这种说法非蠢既坏。我们当然得堤防着中国人。如果中国人在下一波工业应用中占据了主导地位，我们的穷日子就来了，安全环境也会恶化。我们将对他们产生依赖性，我可不喜欢那样。 不过，我不认为中国人意图侵略我们，或者按中共模式在美国成立美国共产党。 《世界周报》：你认为中美两国短期内不会进行军事对抗吗？ 戈德曼：我觉得不会。研究一下中国武装力量的配置你就会发现，它有点头重脚轻的感觉。中国单兵装备花费约1500美元，基本上就是一杆枪、一顶头盔、一双靴子。美国单兵装备花费18000美元。我们有强大的空运能力。我们的步兵技术含量非常高。中国陆军装备和作训水平还比较落后。他们的强项在于导弹、卫星、潜艇等方面，极其强大。 《世界周报》：中国的军事战略核心在于控制国境线。 戈德曼：控制南海。他们海军陆战队和机械化部队兵力可能达到10万，而且可能不久后就能部署在台湾。但除了维护领土完整之外，他们对其他东西没有表现出任何兴趣。当然，他们在吉布提有海军基地。未来中国可能会向海军投入更多资源，因为美国对波斯湾安全的兴趣正在减弱。我认为，中国在波斯湾的存在必然会增强，因为它要维护基本的经济利益。但这跟投射帝国军事力量完全是两码事。中国不是苏联。 《世界周报》：有人认为美国跟中国对抗的策略是错误的，两个国家应该成为朋友。中国人对友谊看法跟我们一样吗？ 戈德曼：中国人没有朋友。作为个人没有朋友，作为国家更没什么朋友。 《世界周报》：譬如中国农村的某个农民，你能说他没有朋友吗？ 戈德曼：我在中国工作时，当地同事告诉我，当你上小学一年级时，你左右看看同班同学们，他们都是你要甩开的对手。在中国人的观念里，家庭最重要，除此之外就是上级和下级。没有什么平级关系。没有人自发地聚集结社，以平等身份共事。一般而言，你有一个上级，几个下级。这里没有亚里士多德那种政治友谊的概念。 《世界周报》：难道人与人之间不存在友谊吗？ 戈德曼：人们私下当然有朋友。但中国人没有西方那种政治友谊的概念，这种理念可以追溯到亚里士多德。中国讲利益不讲友谊。有个源于意大利南部的概念叫做“非道德的家庭主义”，人们以无关道德的方式与世界打交道，但在家庭内部又有另一套标准。这也很符合中国社会的特征。 《世界周报》：中国在极力展示其“友好”的一面，这显然符合其利益。他们有庞大的公关战略，在西方媒体上购买栏位来宣传自己，力图让大家觉得中国是个友好的巨人。 戈德曼：但他们外宣效果显然不怎么样。 《世界周报》：为什么会产生这样的结果？ 戈德曼：因为中国人完全不懂得西方人的情感，所以很难以西方的方式进行对话。我最不担心的就是中国针对西方的外宣。他们在通过金钱和技术获取影响力方面倒是一把好手。 《世界周报》：你的意思是他们无法赢得人心？ 戈德曼：对，因为对西方人而言中国体制完全是异质的，跟他们的需求和期望相差太远，以至于根本无法产生吸引力。 《世界周报》：作家吉卜林曾写道，“东方是东方，西方是西方，两者永不聚！”现在看来这么说似乎也没错？ 戈德曼：西方和中国永远不可能成为朋友。当然，我们必须得和中国做生意。谁都不可能把聪明勤奋的14亿人隔绝起来，那太荒谬了。但是，西方要想成功地和中国打交道，自己必须处于实力地位上。 《世界周报》：特朗普总统采取的策略是威胁对手和展示实力。这对中国人有用吗？ 戈德曼：就目前来看，我认为没什么用，因为他常常雷声大雨点小。伊朗就是个很好的例子。“填弹完毕，锁定目标，随时准备攻击伊朗。”这样的话你可以说，但实际上我们不会打伊朗。因为如果我们攻击伊朗，波斯湾石油供应将受到严重干扰。另一方面，中国人对美国这根弦绷得特别紧。有段时间史蒂夫·班农四处散布言论，试图动摇中国政治体制的稳定，中国很多高官都认为班农的言论代表特朗普私下的意思，其实根本不是这样。 《世界周报》：你的意思是，特朗普在经济上对抗中国的策略很失败。 戈德曼：我认为这是个彻头彻尾的失败。上次选举时我把票投给了特朗普，这次我应该还会投给他。我希望他能连选连任，但他最大的敌人可能是他自己，这也是令我感到苦恼的一点。 他号称要重振美国工业，这是他竞选的前提。制造业是美国经济最薄弱的部门。而特朗普能否连任取决于他拿不拿得下几个制造业关键州。由于关税伤害了制造业，他这次连任比较悬，本来可以更稳的。 而且，我前面也说了，美国说服其他国家不购买华为5G设备的企图已经完全失败了。今年华为的5G供应量是60万个基站，而且整个生产过程可以不使用任何美国组件。 我们发明了半导体，发明了显示器，发明了光纤网络，数字经济的每个组成部分都是美国发明的。结果我们的产量少得可怜，有些东西完全不生产，这是美国的耻辱。 因此，特朗普提出“不能再这样下去了”，他说的很对。但我认为他选择的方法是无效的，甚至适得其反。 《世界周报》：美国输了吗？还能扳回来吗？ 戈德曼：当然可以。但怎么才能扳回来现在还很难讲。里根政府时期，我曾经给美国国家安全委员会做顾问。当时美国联邦政府斥巨资直接补贴研发项目，换做今天的美元相当于3000亿，约等于GDP的1.5%。每个大公司都有实验室，都聘有几千名科学家。为现代数字经济奠基的全部发明都来自五角大楼的一个项目。其影响之深远，大大超出了我们的预期。 1976年，美国国防部希望让战斗机飞行员能够在驾驶舱里进行天气预报。他们需要一种高速、轻便的计算机芯片。他们开发出来的产品被立即应用于俯视雷达。俯视雷达需要计算机成像，美国无线电公司实验室研制的芯片使这成为可能。国防部预料到了这一点，此项技术使我们在冷战期间对俄国人有了决定性的优势。 如果我们真能像过去那样调动资源，相信我们将取得高于预期的成果。目前的当务之急是恢复创新文化，动员人力和企业资源来实现这一目标。 《世界周报》：什么样的战略能够使美国赢过中国？ 戈德曼：我举个例子。半导体是中国目前最大的投资方向。中国是世界最大的半导体进口国，每年进口半导体总值超过2000亿美元。中国今后打算大部分半导体都实现国产。因此，它对各大芯片制造厂商投入了大量资金。芯片制造昂贵得不得了，台积电新开一间工厂要300亿美元。现在有种制造半导体的自组装技术，芯片不用压，让它自己长出来。 如果我们能采用一些实验阶段的技术，并使它们发挥作用，这将抵消掉中国投入半导体制造工厂的1000亿美元。我建议瞄准关键技术，以创新引发行业剧变，抵消中国现有投资的价值。 《世界周报》：你认为中国的弱点在哪里，什么会给它的未来造成实质性问题？ 戈德曼：中国好些弱点。首先，它的人口老化速度非常快。和所有老龄化国家一样，中国需要出口资本并雇用其他国家的年轻人，靠他们来支付本国人的养老金。德国也这样做。这算是中国部分战略动机。未来中国抚养老年人的负担将十分沉重，它希望通过自动化、高效医疗等方式来解决这一问题。 中国更大的问题是年轻人的抱负。中国每年有上千万人参加高考，其中三分之一读了工程学。这些学生期望未来获得机会。如果中国在技术上失去优势，落后于西方，那么政权稳定性将面临重大挑战。 不要指望靠在人权问题上指责中国来实现这一目标。美国当然会抱怨，但这毫无作用。中国人只尊重实力，而我们的实力在于创新。如果美国能在创新上赢过中国，在关键技术领域拉开差距，自然会取得政治优势。 (完)]]></content>
  </entry>
  <entry>
    <title><![CDATA[历史]]></title>
    <url>%2Fknowledge-base%2Fhistory%2Findex.html</url>
    <content type="text"><![CDATA[虽然这个部分的题目时历史，但是显然我一己之力无法写个世界通史出来。这一部分的文章的目的，在于梳理，汇总一些对中外历史上一些经常被拿出来讨论的点做一些探究。因此与其说是“历史”，其实不如说是历史梗集。]]></content>
  </entry>
  <entry>
    <title><![CDATA[学术地震：饶毅教授一口气举报“三位大咖”学术不端]]></title>
    <url>%2Fknowledge-base%2Fbackups%2F%E9%A5%B6%E6%AF%85%E6%95%99%E4%B8%BE%E6%8A%A5%E4%B8%89%E4%BD%8D%E5%A4%A7%E5%92%96%E5%AD%A6%E6%9C%AF%E4%B8%8D%E6%96%AD.html</url>
    <content type="text"><![CDATA[本文备份自https://mp.weixin.qq.com/s/bbQclP4xqSbZ4JNcL7MFHA 今天，微信圈突然流传我国著名科学家饶毅教授实名举报向某基金委举报2位院士+1位重量级人物：武汉大学李红良院士、上海生命科学研究院生化细胞所裴钢院士、上海药物所耿美玉研究员（即近期填补世界空白的阿尔兹海默GV971中国首款该类药物主要研究者）造假。目前，这个消息尚未得到证实，饶毅教授本人也尚未作出公开声明及报道。以下是两则流传的截图： 饶毅，男，1962年出生于江西省南城县，现任首都医科大学校长，北京生命科学研究所资深研究员、学术副所长，未来论坛咨询委员会委员，《知识分子》主编 。 1983年江西医学院本科毕业后考入上海第一医学院研究生。1991年获加州大学旧金山分校神经科学哲学博士。1991年进入哈佛大学生物化学和分子生物学系做博士后，研究脊椎动物神经诱导的分子机理。1994年在圣路易斯华盛顿大学解剖和神经生物学系任教并领导独立的实验室。2004年起任（美国）西北大学医学院神经科教授、（美国）西北大学神经科学研究所副所长。2007年饶毅决定回国，受聘出任北京大学讲席教授、生命科学学院院长，2013年9月卸任。2015年饶毅在北京大学本科生毕业典礼上作为教师代表致辞，文章含标点535字，赢得9次场热烈掌声，获得网友转发评论超过10万次。2015年1月，未来论坛咨询委员会委员。2015年9月，饶毅和鲁白、谢宇联合创办《知识分子》，并担任《知识分子》主编。2018年4月，任西湖大学创校校董会成员。2019年6月，任首都医科大学校长。 “牛”教授回国 饶毅是中国改革开放以来在美国取得终身讲席教授职位后第一个全职回国工作的生命科学领域的科学家。早在1995年，饶毅就开始帮助中国的生命科学发展，在中科院上海神经所的创建和后来的北京生命科学研究所的建设中都做出了重要贡献。 2007年，饶毅辞去美国教职、用尽可能快的速度关闭实验室，然后全职回国担任北京大学生命科学学院院长。 时年45岁的饶毅在美国期间，可谓顺风顺水，哈佛大学博士后、美国西北大学神经科学研究所副所长，不久升任讲席教授。或许是因为正值北京奥运会开幕一年倒计时，饶毅的回国又被赋予了“中国梦”的色彩。他自己也自觉或不自觉地为这样的情绪添柴点火——毅然决定放弃美国国籍。此举甚至引起《纽约时报》的重视，该报以饶毅和施一公（著名结构生物学家、清华大学生命科学学院院长）为对象，对中国科学家回国潮进行了报道与点评。 但在美国留学、工作长达22年的饶毅早已习惯了美国式的直接。早在全职回国之前，他就多次对中国的教育科技问题提出直言不讳的批评，在国内形成了一定的影响力。 2004年，饶毅等11名学者联名给中国政府高层写信，反对中国科研界的“大科学”趋势。所谓“大科学”项目，就是国家投入巨大、有关方面认为意义重大的科学项目。一般说来，大科学项目的投入在1亿元人民币以上，需要动用大量人力。但关于某个大科学项目的意义是否重大，科学界常存在争议。这封联名信认为，大型的生物医学计划科研项目不但没有达到预定目标，反而阻碍了良性竞争，扼杀了科学家的创造性，也严重妨碍了人才培养。 院士落选 很明显，这个平日里以在实验室埋头研究为乐的科学家，很难彻底弄清中国的科学同仁们是如何争夺资源的。 2011年，中科院院士增选，314位有效候选人，饶毅和施一公均位列名单之上。同年8月17日上午，中国科学院院士增选初步候选人名单在媒体公布，选出初步候选人145位。让人颇感意外的是，此前呼声极高的饶毅出局。不过，施一公仍然上榜。这一消息在科学界知名网站科学网上挂出不到1个小时后，饶毅在科学网实名博客上予以回应，标题直截了当：“从今以后不候选中国科学院院士”。 水土不服 2011年12月9日，新增院士名单出炉，51名新院士和9名外籍院士产生，施一公最终也落选。 新增院士名单出炉的同日，饶毅便撰写了一篇4000余字的博文，标题为《解剖“逆淘汰”社会现象的一只麻雀》，为施一公的落选鸣不平。他认为，院士评选中，重视的“不是学术水平、年龄、学术年资、在国内科学贡献大小”，而是“在有些人面前低头排队的时间，有时可以起很大的作用”。 有人推测，就学术水平而言，施、饶二人完全有资格当选院士，而落选原因猜测或是由于两人曾撰文批评中国科研经费分配体制及科研文化。饶毅和施一公联合在2010年9月3日出版的美国《科学》杂志上发表了一篇题为《中国的科研环境》的文章，讨论中国科研基金分配体制及科研文化问题，引起社会关注。 文章称，“中国政府投入的研究经费以每年超过20%的比例增加，从理论上讲，它应该能让中国在科学和研究领域取得真正突出的进步，与国家的经济成功相辅相成。而现实中，研究经费分配的严重问题却减缓了中国潜在的创新步伐。” 文章还指出了中国科研界的“潜规则”：“在中国，为了获得重大项目，一个公开的秘密是：做好的研究不如与官员和他们赏识的专家拉关系重要。” 时间来到了9月3日，北大校方宣布饶毅卸任生命科学学院院长，美国加州大学洛杉矶分校吴虹教授(女)将出任新一任院长。当天，北大党委组织部宣读关于生命科学学院新一届行政领导班子的任命决定，原班子成员自然免职。饶毅就是原行政班子的成员，属“自然免职”...]]></content>
  </entry>
  <entry>
    <title><![CDATA[复旦李敏]]></title>
    <url>%2Fknowledge-base%2Fbackups%2F%E5%A4%8D%E6%97%A6%E6%9D%8E%E6%95%8F.html</url>
    <content type="text"><![CDATA[本文备份自复旦女博士崩盘记：以爱之名，追逐名利，注定身败名裂 我一贯认为对网上的这些材料要批判性地看待，至少要做到看其中哪些是事实论述，哪些是观点论述。这篇文章的协作特别的网文八卦风，对于作者带节奏的观点，大可以一笑了之。但是其中提到的事实线索，或许是真实的，可以作为下一步查证的索引。 原创作者：杨小小 大型情感婚姻话题第24篇：当功与名可以走捷径，努力就成了笑话。 当翟天临博士论文造假，背后就可能寒了千万学子努力的心。 最近，一位复旦大学的女博士李敏，惊出了大家新高度，利用感情，同时周旋在4个男人之间，均都是博士级别的高知识分子。 对于这一切，李敏无非就是为了功与名。 这桩丑陋的事件得以曝光，则是因为复旦大学附属中山医院内分泌代谢病科硕士生导师陆炎以绝望自杀来捍卫自己被抛弃的尊严。 陆炎应该是一位情感比较单纯的男医生，在与李敏相处时，两个人擦出了“爱的火花”。 显然，陆炎以为遇到了真爱，却不知道李敏只是在利用他的真爱巧取豪夺。 “恋爱”期间，陆炎追求真爱，抛家弃子，跟老婆离婚，一心想要迎娶李敏，这更像是一个成熟男人对精神灵魂伴侣的终极追求。 在陆炎的眼里，爱情才是无价的，散尽千金，为李敏购买房、车、衣服、包包、首饰、礼物等等。 在陆炎的眼里，真爱是可以为对方付出一切的，不知道连续熬了多少个夜晚，查找了多少国内外的学术文章，多少经验的积累和心血的凝聚，陆炎为李敏发表了5篇SCI文章。 根据专业人士的解读，一般博士生只要有一篇SCi文章就足以顺利博士毕业。 陆炎写的5篇SCI文章，行业内有人粗略统计了一下，李敏（实为陆炎所写）的五篇SCI有一篇10分＋（共一），三篇3＋，一篇2＋，总价至少80w~130w以上，而且这种高分SCI给作者带来的受益远远不止这个数字。 对于拥有SCI文章的博士来说，进相关医院，可以获得不菲的薪资待遇；进相关普通211高校，甚至可以直接评上副教授。 也就是说，光从陆炎那边得到的利益，已经不能仅仅用金钱来衡量，有些博士辛苦一辈子才能获得的荣誉，92年还不到30岁年纪轻轻的李敏就可以轻而易举的获得。 如果不是背后的秘密被曝光，或许李敏在外界看来就是一个年轻有为、博学多才的年轻漂亮的复旦女博士。 一直被蒙在鼓里的陆炎，默默的付出，天真的以为自己付出这么多，李敏没有理由拒绝和抛弃自己的爱。 付出的越多，当爱情的泡沫越吹越大的时候，泡沫的破灭，对于陆炎来说，是无法承受之痛。 李敏的一句轻描淡写“结束了，不爱了”，瞬间击碎了陆炎憧憬的美好爱情。 失望至极的陆炎没有做出伤害李敏的事情，却把一切罪责都推给自己，一时想不开的陆炎服下了30颗安眠药，想要摆脱这糟糕的一切，与李敏玉石俱焚。（根据目前的消息，据说陆炎自杀未遂，已经抢救过来，谢天谢地） 我可以背叛全世界，对你不离不弃”，但是万万没想到的是：“我以为全世界都会抛弃我，只有你不会，可惜是自欺欺人”。 1、掉入名利的陷阱，或源于李敏原生家庭的影响 西游记中唐僧师徒四人历经九九八十一难才取得了真经。 孙猴子脑子里一直想不明白一件事情，自己一个精斗云就可以去往灵山，腾云驾雾，直接背回经书岂不是省时又省力。 唐僧的身世很惨，还未出生，父亲就已经过世，母亲为了保护唐僧，只好抛弃他，任其自身自灭。 唐僧深感人间疾苦，所以才立志历经十万八千里，拜佛求经，普渡众生。 孙悟空骨骼精奇，天赋异禀，拜师菩提老祖，尽得真传。 成长环境的不同，对求取真经的方法和理解也就不同。 据说，李敏贫民出身，相貌并不算出众，好在肤色白皙、性格活泼，深受周围人的欢迎。 一边是穷怕了，对功名有着极其执着的追求；一边可能是能力有限，担心吃苦耐劳收成甚微。 功名从来不会轻而易举，李敏显然不是甘心屈服的那种，是前辈经验还是无师自通，总之，李敏掌握了一套利用感情，利用男人进击功名的捷径。 年轻肤白、活泼可爱对于这样的李敏，在博士圈内，估计也算是一种稀缺资源。 在大众的印象里，学术能够修炼到博士的，智商一般都不是常人所能及的，他们可能会投入大量的精力和时间专注于自己的学术研究。 结果，得此失彼，一心专注科研，却忽略了男女情感的修炼。 在网友的认知里，有这样一种默认，学历越高的人，直男越多，在感情里面越单纯。 或许，这才是李敏有机可乘的bug。 不用专注学术研究，每天还有不同的男人嘘寒问暖，不是送房就是送包包，甚至送SCI论文。我想，李敏的博士生活应该比较轻松和惬意。 那些背后默默付出的男人，每天都在专注自己的研究或者工作，李敏则可以游刃有余的安抚好她们。 只是，李敏万万没想到的是，一句“不爱了”伤害了那个为自己付出最多的男人陆炎，毁了别人，同时也把自己拉入了深渊，恐怕永不得翻身了。 对于李敏，我们自然觉得是咎由自取，活该。 只是，从她的身上，我感受到了原生家庭的糟糕，对于一个人的影响有多么的深远。 2、骨子里，我们或都被原生家庭所控制 最近，一直在看心理学方面的书籍，看多了，就在不断纠结自己身上的一些人性的缺点。 很多人身上有很多有优秀的品质，但是在思考了自己的一些行为之后，我忽然觉得，这些行为背后可能深受原生家庭的影响，似乎有一种神奇的潜意识在控制着我。 人民名义赵德汉那句“穷怕了”，估计震撼了很多人的内心。 1、原生家庭的穷，让我们对钱可能失去了原则 因为小时候家里也很穷，以至于我一度怀疑自己，如果我是赵德汉，我也会成为那样的赵德汉。 赵德汉有很多不义之财，他不敢花，但是他看着他就安心，这是内心对于安全感的一种极度贫乏。 哪怕自己每天吃着萝卜咸菜，但是内心却充满安全感，然而事实却是极度的不安全。 穷，让我们丧失了自信，这种自信在很多地方都会有体现。 一次，跟一个老板聊天，奇怪他为什么强调多招河南、安徽等地的员工，他说了一句让人“痛彻心扉”话。 因为同等能力之下，他们的工资的要求会比经济发达地区的人少。 赤裸裸的剥削人性的弱点有没有？ 找工作的时候，我也会有一种潜意识的觉得，譬如有一份过万的薪资好像就超出了自己巨大的预期，开心的不得了。 跟朋友出去玩，朋友总是客气的喜欢请客买单，就觉得自己占了好大的便宜，就觉得省下了百来块，还可以美美的大吃一顿，虽然心有内疚，但总还是觉得赚到了。 如果一起去吃饭，最后发现是AA，内心不自然的有埋怨，甚至觉得这种无效的社交，浪费感情又浪费钱。 因为小时候经历了贫穷，以至于现在，我依然不明白，为啥有时候因为一点小钱就会闹情绪。 也会因为一点小钱去做一些违心的事，却自我安慰，都是小事，不必内疚，但是却违背了某些基本的道德和职业原则。 经常会有这种感觉，如果缺钱，内心就会极度的焦虑，缺乏安全感，总感觉没钱天就要塌下来。 所以，当经历过穷怕了的人，更容易在巨大的名利诱惑面前失去原则。 李敏，或许也是如此吧。 2、缺爱，让我们失去了爱的能力 很多来自农村的80、90后都有感触，从小可能就是留守儿童，在爷爷奶奶的照顾下长大。 缺少了父母的关爱，往往也让我们失去了爱别人的能力。 我不知道怎么关爱女人，因为我从来没见过父亲有什么关爱母亲的表现，打架倒是很多，让我觉得，即使打了老婆，她也不会轻易的离开。 很少人知道，谈恋爱有五个阶段，互相吸引阶段、不确定阶段、排他性阶段、亲密阶段、同居阶段。 没有体会过爱的人，往往并不知道在恋爱的排他性阶段，我应该只专注爱一个人，而不是追求A的时候，又在跟B撩暧昧。这往往会让对方觉得，我并不爱她。 爱一个人的时候，我需要把所有的爱都给予她，这样才能从排他阶段走向亲密阶段。 当我的父亲从来不用做家务，而母亲忙里忙外的时候，我觉得这是女人应该做的，也是女人最基本的家庭道德。 成家之后，当老婆请求我做家务的时候，我会本能的拒绝，我一度怀疑，凭什么赚钱是我，做家务还是我？ 如果，从小我们生活在缺爱的环境中，自己谈恋爱结婚的时候，你就会发现，自己的某些行为深受原生家庭的影响。因为太过于习惯，如果你没有仔细留意过，你仍然不知道自己做错了什么。 李敏或许也是一个缺爱的可怜人，她觉得别人爱她，就应该理所当然的不求回报的付出，即使被她抛弃了，也不应该有任何的怨恨。 李敏可能没办法理解，爱一个人是有排他性的，陆炎为了爱可以放弃家庭，李敏不懂，她可以同时周旋4个，幻想功成名就之后，再挑一个最钟意的，可惜，她大错特错了。 李敏，以爱的名义，巧取豪夺，追逐名利，身败名裂是注定的。 至于如何摆脱原生家庭的影响，大家平时除了需要多做自我反省，也需要多读一些心理学方面的书，了解自己，才能做更好的自己。 ---end---]]></content>
  </entry>
  <entry>
    <title><![CDATA[Weird Collections]]></title>
    <url>%2Fknowledge-base%2Fcollections%2Findex.html</url>
    <content type="text"><![CDATA[互联网上搞怪的东西很多，这里是一个收藏列表 有趣的网站 bruno simon：一个很酷的个人主页，全3D实现，用户开着小车浏览网站。 有趣的文章 有趣的软件]]></content>
  </entry>
  <entry>
    <title><![CDATA[香港问题中的一些谣言和误解]]></title>
    <url>%2Fknowledge-base%2Fbackups%2F%E9%A6%99%E6%B8%AF%E9%97%AE%E9%A2%98%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B0%A3%E8%A8%80%E5%92%8C%E8%AF%AF%E8%A7%A3.html</url>
    <content type="text"><![CDATA[这篇文章是备份文章，原文地址为： 原链接 注意：下面的插图还是使用的原文的图床，尚未备份。 香港问题中，无论大陆媒体（自媒体）还是香港媒体都传出过不少假新闻。 相关媒体可能觉得放出一些夸大的消息，更容易证明自己是对的，更容易在舆论以及道德高地上压倒对方。 但事实上越是夸大事实的谣言，越会加大大陆和香港青年间的误解，互相把对方越推越远。 这是所有人都不愿意看到的。 我简单整理了一些，有的是恶意谣言，有的是误传，有的则真的只是误解。 因为信息有限，肯定不全。 香港媒体方面 香港有两百万人参加反修例游行 香港示威活动最高峰为6月16日大游行，也是至今为止最大规模的游行。 关于这场游行的人数，一直是双方争论的焦点。 游行的组织者认为一共有超过200万人参与了游行，相当于700万香港市民除去老人小孩，有近一半都上街参与了游行。 而警方公布的数据则是33.8万人。 双方是怎么算人数的呢？ 警方是在集会进行期间，派员于多个高点作出观察，以及点算某一时段在不同区域所聚集的人数，从而评估参与集会的人数。 组织者则会派出三批义工团在天桥等高点观察，计算每横排的人数，最后相加估算。 两者都是估算，都不会准确，加上双方都是利益相关方，所以其实这个问题其实很难得出一个真正的答案，但我查到香港大学的叶兆辉和得克萨斯州立大学(Texas State University)的邹之乔和当地科技公司C&amp;R Wise AI的黄君保合作，从2004年开始用人工智能，为香港的各种游行测算人数。 他们采用这种识别手段，远比人眼观察来得准确： 他们准确测算了7月1日的游行，结论是26万人参与了游行，而组织者“估算”的数字是55万人。 对于6月16日游行的人数，他们没有给出具体的数字，但说明了是数十万人参与了游行，也远远小于组织者号称的数字“两百万人”。 所以我认为组织者所说的“两百万人”参与了游行是夸大的假新闻。 撑警察反港独集会只有几千人参加 假新闻，看这张图也不止几千人。 电视上播有三名示威者去世 在冲击立法院的新闻后，有FB的大博主放了这么一张图，表示已经有三个人去世了。 但其实这个字幕是后来加上去的，原来的字幕是这样的： 是彻彻底底的造假： 除此之外，还有很多消息已经被我们的大媒体辟谣过了。 包括但不限于元朗大叔打孕妇； 驻港部队混入香港警队； 驻港部队要对香港进行戒严； 警察扣学生眼睛； 警察猥亵女示威者故意脱她裤子； 警察对平民开枪。 都是辟谣过的假新闻，各位可以自行去查，在此就不展开说了。 大陆社交媒体方面 示威者用钳子夹断警察手指，疑似CIA行为 这个消息最早是由一个微信公众号“警魂”传出来的，当时那篇文章的标题就叫《港独暴徒钳断香港警察手指，这是CIA惯用手段》 他的配图是这样： 但其实这张图来自于2015年中新网的新闻： 包括这张“暴徒手持钳子”的照片，其实手持的也不是钳子。 确实有警察在冲突中断指，但是被一名港大的闹事学生咬掉的，而不是被CIA用钳子钳掉的，两者性质完全不同，不知道你们能不能理解。 一个是美国相关势力直接进入香港问题，这事情就大了，一个则是香港无知学生在闹事时的不择手段，那该走法律程序走法律程序，该坐牢坐牢。 万幸的是，受伤警察的手指已经接回，希望早日康复： 香港供水/供电/供吃的都是靠内地输血 这也是一个误解。 首先，香港的食物大部分并不靠内地输血，根据工业贸易署的说法，香港的大米只有不到10%来自内地： 香港的猪肉则只有20%，牛肉只有不到5%来自内地，大部分进口自南美和北美洲。 其次，供水确实多数来自内地，但香港也付钱了，说白了这是一个你情我愿的交易。 香港离了大陆确实会比现在过得差得多，没有大陆的广阔市场作为支撑，香港金融业确实也无法在过去几十年内发展得如此迅速。 这是事实。 但香港是中国不可或缺的组成部分，也对大陆这些年的发展作出了非常大的贡献： 所以我建议各位不要带着“我们有恩于你”，“我们是你的救世主”的优越感，而把对方当成一个可以平等对待的交易伙伴。 优越感无益于缩小距离，平等和理解才能做到。 所有参加游行的都是港独，诉求是独立香港 这是一个很可怕的误解，因为如果真的有这么多人的诉求是“独立香港”，那有问题的一定不只是他们自己。但现在这个误解广泛存在于微博/微信/知乎上，很多爱国者以此来证明香港人很坏，都坏到骨子里了。 6.16游行的目的很清楚，是反修例，就只是反修例而已。在修例暂缓后的游行，诉求也最多是要求成立独立调查队，调查游行冲突中的乱象。 确实有傻逼港独份子在闹事，跳的最凶的也确实是他们。 但自始至终，没有任何一次大型游行的诉求是“独立香港”。 你看新闻，有香港本地知名人士悬赏港币捉拿侮辱国旗暴徒的，有香港市民自发升起国旗唱国歌的，我这次去爬富士山认识的一名香港人还去了尖沙咀升国旗的仪式，表达了对国旗的敬意。 建议“爱国者”们不要妖魔化香港普通市民。这无助于大家互相理解，也对停止现在的骚乱没有任何帮助。 某些微博“爱国人士”，热爱给正常人扣上港独的帽子然后网络暴力，这其实是在把这个人越推越远而不是越拉越近。 最后希望警察早日将暴乱份子绳之以法，香港能早日恢复平静和秩序。]]></content>
  </entry>
  <entry>
    <title><![CDATA[见闻]]></title>
    <url>%2Fknowledge-base%2Fnews%2Findex.html</url>
    <content type="text"><![CDATA[2019.11 华为251事件 网易暴力裁员事件 2019.10 大连 10 岁女孩疑被 13 岁男学生杀害 上海普陀区金沙江路车祸 王思聪被限制高消费 2019.08 河南淇县瓜农拽到偷瓜贼反要倒赔300元 安徽死者器官被假捐献 寿光开锁公司收消防救援车300元被顶格处罚 北京朝阳劳斯莱斯占用医院应急通道 重庆保时捷帽子女被「反杀」 安徽死者器官被假捐献 上海迪士尼查包被告，后迪士尼拒绝调解仍然坚持查包 2019.07 河南36名村医集体辞职 新城控股董事长王振华涉嫌猥亵女童 河南永城玛莎拉蒂酒驾追尾 京都动画第一工作室遭遇纵火 章莹颖案宣判：无期徒刑 复旦女博士劈腿致情夫自杀事件，及学术圈五大蛊王梳理 2019.06 湖南怀化新晃一中操场埋尸案]]></content>
  </entry>
  <entry>
    <title><![CDATA[编程]]></title>
    <url>%2Fknowledge-base%2Fprogramming%2Findex.html</url>
    <content type="text"><![CDATA[未分类资源(待读) 编程思想 易于修改原则 分布式系统领域经典论文翻译集 专业领域 阮一峰·Python异步编程入门 容错，高可用和灾备: 与云计算有关 React Hook 的原理 GraphQL相对REST的优势 阮一峰·如何识别文件的真假 HTTPS背后的「安检员」：CA认证如何让网络世界更安全 DNS基础知识与dig命令 [x] 恶意的 SSH 访问分析 Web 图标指南 Optimizing images for the web - an in-depth guide [x][Swift学习数据科学指南](https://www.analyticsvidhya.com/blog/2019/10/comprehensive-guide-learn-swift-from-scratch-data-science/) Web 缓存投毒攻击 微软Azure架构设计文档 HTTP 协议基础 MacOS, Windows, Ubuntu 性能比较 CSS 伪元素的罕见用例 Karatsuba算法: Karatsuba 是1960年发现的一种快速相乘算法，可以大大减少大整数相乘的计算步骤。 微软 REST API 设计指南 工具 draw.io: 流程图绘图工具 YubiKey: 一款硬件秘钥工具指南 awesome-naming - 编程命名 onefetch：这个工具可以显示Git仓库的信息 SearX: 开源的搜索代理 加密信息写入图片工具 有趣的网站 Bruno Simon: 一个全3D的个人主页，酷毙了。 中文独立博客列表]]></content>
  </entry>
  <entry>
    <title><![CDATA[下载资源]]></title>
    <url>%2Fknowledge-base%2Fresources%2Findex.html</url>
    <content type="text"><![CDATA[开发 iOS/Mac相关 Command Line Tools: 需要登录Apple Developer账户 书本]]></content>
  </entry>
  <entry>
    <title><![CDATA[科学]]></title>
    <url>%2Fknowledge-base%2Fscience%2Findex.html</url>
    <content type="text"><![CDATA[这里我们汇总一些好玩的科普知识内容，也许会涉及一些非常硬核的内容。]]></content>
  </entry>
  <entry>
    <title><![CDATA[智能交通系统🚗]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Findex.html</url>
    <content type="text"><![CDATA[智能交通系统是将先进的信息技术、通讯技术、传感技术、控制技术及计算机技术等有效率地集成运用于整个交通运输管理体系，而创建起的一种在大范围内及全方位发挥作用的，实时、准确及高效率的综合的运输和管理系统。美国、日本、欧洲率先展开相应的研究并成为ITS发展的三强，此外加拿大、中国、韩国、新加坡、澳大利亚等国家的研究也具有相当规模。 现有的智能交通系统通信标准 WAVE(Wireless Access in Vehicular Environments) 研究话题 编队系统 路由协议 移动组网路由协议梳理]]></content>
  </entry>
  <entry>
    <title><![CDATA[UWB]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fuwb%2Findex.html</url>
    <content type="text"><![CDATA[UWB - Ultra WideBand: 超宽带技术，是一种具备低功耗和高速传输的无线通信技术。UWB不采用连续的正弦波，而是采用时域上极窄（纳秒（ns）至皮秒（ps）级）的脉冲信号。时域上极窄意味着频域上极其宽。由于带宽非常宽（可以达到几个G的带宽），故对其进行阻塞干扰也就非常困难。超宽带的传输距离一般极短，大多在10米以内。 上世纪60年代，UWB原本用于军事用途，直到2002年美国联邦通讯委员会（FCC）才发布商用化规范。]]></content>
  </entry>
  <entry>
    <title><![CDATA[卡尔曼滤波]]></title>
    <url>%2Fknowledge-base%2Facademic%2F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2.html</url>
    <content type="text"><![CDATA[简介 卡尔曼滤波(Kalman Filter)是一种高效率的递归滤波器（自回归滤波器），它能够从一系列的不完全以及包含噪声的测量中，估计动态系统的状态【这里的估计，可以是对将来的估计（预测），对现在的估计（滤波）以及对过去的估计（插值）】。卡尔曼滤波会根据各测量在不同时间下的值，考虑各时间下的联合分布，再产生对此未知变量的估计，因此会比只以单一测量为基础的估计方式要准确。 卡尔曼滤波得名自主要贡献者之一的鲁道夫·卡尔曼 卡尔曼滤波的算法是二步骤的程序。在估计步骤中，卡尔曼滤波会产生有关目前状态的估计，其中也包括不确定性。只要观察到下一个量测（其中一定含有某种程度的误差，包括随机噪声）。会透过加权平均来更新估计值，而确定性越高的量测加权比重也越高。算法是迭代的，可以在实时控制系统中执行，只需要目前的输入量测、以往的计算值以及其不确定性矩阵，不需要其他以往的资讯。 使用卡尔曼滤波不用假设误差是正态分布，不过若所有的误差都是正态分布，卡尔曼滤波可以得到正确的条件几率估计。 卡尔曼滤波的一个典型实例是从一组有限的，包含噪声的，通过对物体位置的观察序列（可能有偏差）预测出物体的位置的坐标及速度【雷达就是这种应用场景】。在很多工程应用（如雷达、电脑视觉）中都可以找到它的身影。同时，卡尔曼滤波也是控制理论以及控制系统工程中的一个重要课题。 基本动态系统模型 卡尔曼滤波建立在线性代数和隐马尔科夫模型上。其基本动态系统可以用一个马尔科夫链表示，该马尔科夫链建立在一个被高斯噪声干扰的线性算子【可以理解为一个矩阵】上。系统的一个状态可以通过一个向量表示，随着离散时间的递增，这个线性算子就会作用在当前状态上，产生一个新的状态，并且也会代入一些噪声。同时，系统的一些已知控制器的控制信息也会被加入。。同时，另一个受噪声干扰的线性算子产生出这些隐含状态的可见输出。 根据上面的描述，我们要在卡尔曼滤波的框架下建立模型，对于每一步\(k\)【离散时间】，我们需要定义矩阵\(\textbf{F}_k, \textbf{H}_k, \textbf{Q}_k, \textbf{R}_k\)，有时也需要多定义一个矩阵\(\textbf{B}_k\)，如下： 卡尔曼滤波模型假设\(k\)时刻的真实状态是从\((k-1)\)时刻的状态演化过来，符合下式： \[\begin{equation} \mathbf{x}_{k}=\mathbf{F}_{k} \mathbf{x}_{k-1}+\mathbf{B}_{k} \mathbf{u}_{k}+\mathbf{w}_{k} \end{equation}\] 其中： \(\textbf{F}_k\)是作用在\(\textbf{F}_k \textbf{x}_{k-1}\)上的状态变化模型。 \(\textbf{B}_k\)是作用在控制器输入\(\textbf{u}_k\)上的输入--控制模型。 \(\textbf{w}_k\)是过程噪声，并假设其服从均值为0，协方差为\(Q_{k}\)的多元正态分布。]]></content>
  </entry>
  <entry>
    <title><![CDATA[UWB定位]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fuwb%2F%E5%AE%9A%E4%BD%8D.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[南美的一些历史典故]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E5%8D%97%E7%BE%8E%2Findex.html</url>
    <content type="text"><![CDATA[如何分类还是一个浩杂的问题，先不做分类，将所有的资料整理集中到这里，按照时间进行排序： 1987 - 戈亚尼亚事故 1985年，巴西的一家民营癌症医院搬迁，用于癌症放射性治疗的一个放射源没有及时拆除，一直放在废弃的旧医院里。 1987年9月13日，两个窃贼躲过警卫，偷走了放射源，他们不知道这个东西极其危险。 第二天，一个窃贼开始出现腹泻和头晕，左手肿胀，有烧伤痕迹。他去医院，医生让他回家多休息。后来，他截去了几个手指。 另一个窃贼继续努力拆除设备，最终将铯胶囊从设备取了出来。他用螺丝刀刺破了胶囊，看到了里面发出深蓝色光线。他把发光物质倒了一些出来，以为这可能是一种火药，试图点燃它，但粉末无法点燃。后来，他由于长时间接触放射性物质，导致右前臂溃烂，需要截肢。 过了几天，这个窃贼把这些东西卖给了附近的废品回收站。回收站的老板注意到胶囊发出蓝光，认为这是很神奇的东西，就把它带回了家。接下来的三天里，他邀请朋友和家人观看这种物质。 他的兄弟取走了一些发光材料，带回家后，给自己6岁的女儿看。小姑娘正在吃三明治，觉得很好玩，就把这些蓝色粉末涂在自己身上，还有一些粉末落在她正在吃的三明治上，这导致她受到的辐射超过了致命剂量。 一周后，回收站的老板把这些东西卖给了第二家回收站。再过了一周，1987年9月28日，当地一个医生注意到身边很多人同时患上严重疾病，她采样了一些物质带回了医院。至此，外界开始知道，这里发生了严重的发射物质泄漏事故。 消息公开后，11万多人接受了放射性检查，其中250人确认受到辐射污染，需要治疗。其中四人死亡，分别是两名回收站员工，老板的妻子和那位6岁的小女孩。 那个小女孩埋葬在公共墓地，为了防止辐射蔓延，她的棺材里面衬了铅板。入葬那天，墓地聚集了2000多人，担心她的尸体会毒害周围的土地，发生了骚乱，人们试图通过扔石块阻止她的埋葬。尽管受到这种干扰，她仍被埋葬。 最终，这一小撮铯产生了3000立方米的污染废物。这些废物被埋在城郊两个绿色土丘中。而这片土地要经过300年的时间才可以重新使用。]]></content>
  </entry>
  <entry>
    <title><![CDATA[基督教的各种教派及其区别]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E5%AE%97%E6%95%99%2F%E5%9F%BA%E7%9D%A3%E6%95%99%E7%9A%84%E5%90%84%E7%A7%8D%E6%95%99%E6%B4%BE.html</url>
    <content type="text"><![CDATA[东正教、天主教以及新教的分野 一神论和三维一体论]]></content>
  </entry>
  <entry>
    <title><![CDATA[宗教史]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E5%AE%97%E6%95%99%2Findex.html</url>
    <content type="text"><![CDATA[本部分的内容索引如下： 基督教的各种教派 一神论和三位一体教理的战争]]></content>
  </entry>
  <entry>
    <title><![CDATA[高技术人才长期羁押问题]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E4%B8%93%E9%A2%98%2F%E9%AB%98%E6%8A%80%E6%9C%AF%E4%BA%BA%E6%89%8D%E9%95%BF%E6%9C%9F%E7%BE%81%E6%8A%BC.html</url>
    <content type="text"><![CDATA[近期华为一位工程师在获取离职赔偿之后被公司诬告，导致他被羁押了251天的事情再次带来了社会舆论对于技术人才遭遇的这种司法不公的关注。似乎在这种问题上，我国的取保候审制度似乎就成了摆设。 2019年12月2日更新： 血淋淋的案例 华为·李洪元·251天 11月28日一份刑事赔偿决定书在网上流传，一位华为离职员工李洪元索要2N赔偿之后，被华为控告敲诈勒索，于2018年12月16日被拘留，法院认定犯罪事实不清，证据不足，不符合起诉条件，关押251天后李洪元重回自由。 在法院的宣判文中，深圳龙岗法院表示：深圳市公安局移送审查起诉的犯罪嫌疑人李洪元涉嫌敲诈勒索罪一案退回公安机关第二次补充侦查。深圳市公安局于7月10日提交了《补充侦查报告》，反映了其在与李洪元商谈离职补偿问题时，李洪元根本不存在敲诈勒索的行为。为此，鉴于李洪元的行为根本不构成犯罪或者依法不应追究刑事责任的实际情况，依照《刑事诉讼法》第一百七十三条第一款及第一百七十一条第四款之规定，对华为该员工作出法定不起诉的决定。 经本院审查并通过补充侦查，仍然认为深圳市公安局认定的犯罪事实不清，证据不足，不符合起诉条件。于2019年8月22日决定对李洪元不起诉。对赔偿请求人李洪元予以国家赔偿，包括人身自由损害赔偿金79300.94元，精神损害抚慰金27755元，两项合计107522. 94元。向李洪元原工作单位、其父亲李洪元所在的工作单位发函、为其消除影响、恢复名誉。 从宣判文中可见： 李洪元2005年入职华为担任工程师，离职前在逆变器销售管理部工作，2018年1月31日离职，在华为工作13年之久，主动离职与辞退离职尚未知晓。 离职过程中，因为补偿金额发生争议，商议后补偿33万元左右。 2018年3月8日，李洪元离职近40天后，华为向其转款补偿金，注意是通过私人账号，同时备注转款原因离职经济补偿。 李洪元得以免除牢狱之灾，还是因为其妻子提供了当时李洪元同HR的谈判录音，才最终证明了李洪元通过私人转账获得的几十万是离职赔偿，而非诈骗款。这么看来，当初HR要以私人账户转33万给李洪元，难道不是提早做局么？ 到目前为止，华为的公关部门广泛在网上删帖屏蔽这一消息，知乎上3000万热度的问题，转眼就没了。微信公众号的文章，也有不少被和谐的。 更多阅读： [转载]传华为13年老员工离职索要赔偿被关押251天 华为离职员工索要2N赔偿，被告敲诈勒索，羁押251天无罪释放！ 潍坊中微·孙夕庆·1277天 近日，历经4年114次庭审，遭羁押1277天的清华海归博士孙夕庆向澎湃新闻表示，11月7日他已拿到了国家赔偿决定书。审理该案的山东潍坊市高新区法院作出决定：向孙夕庆支付人身自由赔偿金和精神损害抚慰金合计54万余元，并为其在侵权行为影响范围内消除影响、恢复名誉、赔礼道歉。 澎湃新闻此前报道，2003年，在美国工作的清华博士孙夕庆动员7名海外博士回国，并到潍坊创立中微光电子（潍坊）有限公司（以下简称：潍坊中微），孙夕庆担任董事长兼总裁。但他没有想到，自己多年之后会因为这家企业而陷囹圄。 潍坊中微成立后，曾一度发展很好，成为全球LED灯具市场上发货量最大的制造商之一，是当地的明星企业。 2014年7月底，潍坊中微发生董事会纠纷，之后孙夕庆被免去董事长和总裁的职务。一个多月后，公司一名董事向公安机关举报孙夕庆利用职务便利侵占公司财产。很快，孙夕庆被公安机关刑事拘留。 2015年11月，孙夕庆被当地检方提起公诉，被指控的罪名为虚开增值税发票罪和职务侵占罪。法庭上，孙夕庆坚称自己无罪，同时认为自己是遭到构陷。 此案经过一审判决，之后发回重审。庭审笔录显示，这个案件4年来经历114次庭审。 2019年5月9日，潍坊市高新区法院对该案作出刑事裁定书。裁定书显示，当天，开发区检察院以证据发生变化为由，向法院申请撤回对被告单位潍坊中微、被告人孙夕庆，及该案另一被告人乐成文的起诉。 8月12日下午，潍坊市高新区检察院检察官向孙夕庆宣读了《不起诉决定书》。决定书中称：“经本院审查并退回补充侦查，本院仍然认为潍坊市公安局高新技术产业开发区分局认定的犯罪事实不清、证据不足，不符合起诉条件。” 随后，孙夕庆提出了2.06亿元国家赔偿申请。10月18日，潍坊高新区法院作出《国家赔偿决定书》。 决定书显示，孙夕庆从2015年2月3日被刑事拘留至2018年8月2日被采取取保候审强制措施，共被羁押1277天。重审过程中，高新区检察院撤回对孙夕庆起诉并作出不起诉决定，属于发回重审后作无罪处理的情形。依照相关法律和司法解释的规定，孙夕庆有权向法院申请获得国家赔偿。 决定书中称，赔偿请求人孙夕庆被判决有罪后在重审期间按无罪处理，法院作为赔偿义务机关应依法赔偿孙夕庆支付被羁押1277天期间的人身自由赔偿金，计403455.38元（315.94元/天×1277天）。 “赔偿请求人孙夕庆因长期被羁押，精神受到损害，且因其被判决有罪，日常生活受到较大影响，社会评价降低，应当认定其精神受到损害且造成严重后果。”决定书中称，法院作为赔偿义务机关应当在侵权行为影响范围内为其消除影响，恢复名誉，赔礼道歉，并支付精神损害抚慰金141000元。 对于孙夕庆主张的刑事案件律师代理费、交通费及家属误工费，以及其主张的因其被羁押致公司业务停顿，其本人持有公司股票价值损失等，高新区法院认为不符合财产权受到损害应予赔偿的情形，驳回了其请求。 更多阅读： 清华海归博士被羁押1277天后检方撤诉 获54万国家赔偿 如何看待清华海归博士孙夕庆被羁押 1277 天后检方撤诉，获 54 万国家赔偿一事？ 李宁·超过4年至今未放 2019年6月24日有媒体报道说，中国工程院院士沈国舫致信媒体表示，中国工程院院士李宁自2014年6月20日以涉嫌贪污公款罪被羁押以来，在超过4年的时间里仍未被法院宣判，“我们很多院士都认为很是不妥”。 最近一些年，在科研经费问题上，许多科研人员、其中有些是学科带头人乃至国际知名专家都纷纷栽了跟头。李宁正是在此问题“栽”进去的又一典型案例。李宁案发当初，有报道称“包括李宁在内的7名教授，弄虚作假套取国家科技重大专项资金涉嫌2500多万元”。在李宁被捕4年多期间内，该案分别于2014年12月23日、2015年1月26日两次移送吉林省松原市检察院审查起诉，在2015年8月20日、21日于松原市中级法院开庭审理后，近3年时间里，此案再无任何下文。 院士遭羁押超4年，审而不判不正常 令狐安:不追究“逼良为娼”的科研经费报销问题 后人哀之而不鉴之 上面这些案子，肯定只是冰山一角。近年来因为维权被诬为诈骗，或者在国家漏洞百出的科研经费管理体系中被人抓辫子等等案例中，其实诬告本身不可怕，因为毕竟上面这些案子，多数最终还是还了受害者一个清白。但是这些案子的可怕之处在于，我们的司法机关可以在没有任何实质证据的情况下，以司法程序中的漏洞，将任何人羁押任意长的时间。至于我们的取保候审制度，什么时候该取保，什么时候不该取保，毫无规则，基本上司法机关说怎么办，那就怎么办。 事实上，在国内法律上并没有严格意义上的「取保候审」制度，所谓把人从公安机关处保释出来，无从谈起。然而，《刑事诉讼法》第六十四条规定，人民法院、人民检察院和公安机关根据案件情况，对犯罪嫌疑人、被告人可以拘传、取保候审或者监视居住。在法律效果上，取保候审与保释差不多。 关于取保候审的适用比例，官方没有公布过数据。实务中，犯罪嫌疑人、犯罪嫌疑人近亲属或辩护律师向办案机关提出的取保候审申请，绝大多数都是石投大海，杳无音讯。实务中，公安机关将案件呈送检察院提请批准逮捕，检察院经审查，认为案件证据不足或不构成犯罪，不批准公安机关的呈捕申请的，公安机关才会迫不得已，将刑事拘留变更为取保候审。可以说，在当前的中国，取保候审难，难于上青天。在当前的中国，逮捕是原则，取保候审是例外。 法律面前人人平等吗 其实，法律条款本身严苛与否，与法律是否公平其实是两回事。但问题在，如果李洪元去告任正非，咱们的公安机关会把任正非羁押251天吗？能羁押一天就算我输。因此我们不得不常常去怀疑司法系统有些人的动机。尽管法律规定过于严苛，存在很多漏洞，但是这些司法人员，想必也不是为了照本宣科地维护法律的字面公义吧。企业动用各种政府关系施压司法机关，司法机关做出这种骚操作的链条，实在是屡见不鲜了。 既是运动员也是裁判员 如果只是说司法机关收到来自外部的压力不得不做这些见不得人的交易，尚且情有可原。但其实很多时候在没有外部压力的情况下司法机关也会做出匪夷所思的操作。为什么呢？这其实是因为中国一个非常常见的现象：有些部门既当运动员，又当裁判员，人家怎么会自己判自己犯规呢？决定拘留人的，是公安机关，决定释放人的，也是公安机关，这不是变相要求公安机关承认自己办错案了吗?反正人被刑事拘留后，被证明没有犯罪事实或因证据不足没有批捕，最终被释放的，公安机关也不算是办错案，不用承担法律责任，不用国家赔偿，为什么要释放呢? 这就会出现一种极其离奇的现象，就是公安机关拘留某人后，发现其极其可能没有犯罪事实的，依然继续羁押，而不是主动将其释放，等到拘留期即将届满了，公安机关就将该案呈送检察院提请批准逮捕，将这个烫手山芋抛给检察院，如果检察院不批准逮捕的话，就放人;如果检察院批准逮捕的话，就将强制措施变更为逮捕。当然到检察院这里，检察院也不想担责任啊！ 既是运动员也是裁判员的滑稽之处就在于：一方面它违反人的自利天性；另一方面它造成责任不明确的现象，多个机关负责就意味着没有人负责。 既是运动员也是裁判员的现象并不罕见。我一直关注学术不端的各种新闻，中国清查学术不端的体系也是这种既是运动员也是裁判员的体系。教授出成果了各种宣传表彰的是高校，如果出了学术不端的案子，负责查的也是高校，这不是逼着高校自己打自己的脸么？ 学会保护自己 其实面对这种腐败的体系的时候，普通人一旦成为主角，实在是毫无办法。面临这种无理由的羁押，在现行法律体系下，人家还真不违法。所以李宁教授被关了四年多还不放出来，就算各方关注，就算众多院士发布公告，也毫无作用。对于那些官僚来说，舆论就算闹到天上，这事不用他们承担什么责任。反之，如果他们放人，就等于承认自己之前的羁押是错误的，到时候就有人要承担责任了吧？也许这种事情只能等相关的胥吏退休或者升职了，换上新人来操作了，才有转圜的空间。 不过好处是，这种司法乱象还只是他们陈腐僵化的体系的一种被动反应，不至于主动伪造证据，强行判处成有罪（这样做不但没有直接的好处如果日后平反还要担责任），所以大家在和任何人打交道的时候，尤其是涉及比较多金钱的时候一定要留足证据。国家补偿虽然不多，但是好歹比坐牢强多了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[军事技术科普]]></title>
    <url>%2Fknowledge-base%2Fmilitary%2Ftechnologies%2Findex.html</url>
    <content type="text"><![CDATA[本部分为军事技术相关。 内容索引： 美国现役通信系统 GIG JTRS NetOps WIN-T TCNO CANES GCCS-M]]></content>
  </entry>
  <entry>
    <title><![CDATA[严重事故]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E4%B8%A5%E9%87%8D%E4%BA%8B%E6%95%85%2Findex.html</url>
    <content type="text"><![CDATA[上海普陀区金沙江路车祸 今日(10月24日)上午，上海普陀区金沙江路和大渡河路路口发生一起严重交通事故，目前伤亡不明 目前造成2死12伤。肇事司机陈某某（男，63岁，本市人）已被警方控制。尚未排除酒驾毒驾嫌疑，具体事故原因调查中。 进一步信息：经初步了解，肇事车辆为沪ABQ838白色尼桑。当日9时20分许，该车沿大渡河路南向北行至金沙江路口是阅红灯快速过路口，撞击一辆沿金沙江路由东向北右转弯的白色路虎SUV(沪BKJ108)相推，并带倒三辆非机动车及数名行人。据人员信息比对，尼桑车驾驶员系陈立伟(男，63岁，上海人，有诈骗前科)现已被普陀公安分局控制，因肋骨骨折在普陀区中心医院就医，经刑侦总队刑技中心鉴定初步排除酒驾毒驾，事故造成5死9伤，3人身份确认2人身份待查，路人苗立兰(女，49岁，山东人)当场死亡，路虎车驾驶员邬明桦(男，34岁，上海人)，路人朱命芳(男，89岁，上海人)及另两名人员(身份待查)经送医抢救无效死亡。目前，其余伤者均在普中心救治，相关善后调查工作正在开展中。 上海普陀区金沙江路大渡河路发生严重车祸，目前情况如何？ 江苏常州奔驰车祸 7月17日上午，常州市城区晋陵路与劳动路交叉路口处发生一起车祸。从网友发布的多段视频看，一辆黑色奔驰车停在边上，多辆电动车被撞，多人被撞倒地受伤。视频拍摄到的情况看，似乎是一辆黑车奔驰车从晋陵路由南往北开行时，先是撞到路边护栏，没停下，一路往北，撞到多辆电动车，最后撞到一辆小轿车才停下。 根据肇事者供述，肇事者为夫妇，为修车厂员工。当时正开车将车辆换给车主。驾驶过程中驾驶员突然出现晕厥，口吐带血白沫，车辆失控。 以下也细节值得关注 司机（男子）穿拖鞋开车 车在撞了护栏进入非机动车道后，速度一直没有减，甚至有继续加速的迹象！ 肇事夫妇 河南永城玛莎拉蒂酒驾追尾 2019 年 7 月 3 日晚，河南省永城市一辆玛莎拉蒂来万台 「疑似」 酒驾，跟两车剐蹭后逃逸，逃逸过程中追尾一辆等红灯宝马，被撞宝马当场起火，视频中可以看见的有副驾后排两名死者已被烧焦，具体案情还需听官方通报。 情况通报 被追尾的宝马 肇事者 w &gt; 谭某某，是河南永城市茴村乡谭桥村首富的孙女，她爷爷在谭桥村开了个很多亩地的皮革厂，她爸爸据说也混的不错（我不是她们村里的，不是很清楚）标准的富二代，名牌包包鞋子一大堆，平常生活在城里，只有逢年过节的时候，可能会去她爷爷的乡村别墅里。 -- 知乎匿名用户 附注： 2012年，上海“疯狂比亚迪”司机黄世华，醉驾后与一辆桑塔纳追尾。他怕醉驾受处罚，驾车逃逸。逃逸途中撞上了路口待转的一辆QQ轿车尾部，QQ轿车又撞上前方待转的一辆悦达起亚轿车。最终导致3人死亡、3人受伤。QQ轿车油箱起火，车内一男一女卡在变形的车厢内无法逃脱，竟被活活烧死。黄世华以危险方法危害公共安全罪被判处死刑。二审维持原判。经最高人民法院核准，黄世华在2013年10月11日被执行死刑。]]></content>
  </entry>
  <entry>
    <title><![CDATA[刑事案件 2019]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E5%88%91%E4%BA%8B%E6%A1%88%E4%BB%B6%2F2019.html</url>
    <content type="text"><![CDATA[每个事件单独成篇太多了，这里集中按年份整理： 10月 大连 10 岁女孩疑被 13 岁男学生杀害 【网传大连 11 岁女孩被 14 岁男孩杀害 当地街道办：确有大连 11 岁女孩被害系刑案】近日，大连沙河口区一名 11 岁女童王某被害，她的遗体在距家仅 100 多米处的灌木丛中被家人发现。10 月24 日 11 时，当地街道办事处工作人员称，该单位了解到确有此事，但因为涉及到未成年人且属于刑事案件，主要由公安机关负责调查。遇害女孩王某的妈妈表示，女儿平时 3 点半左右到家，但 20 日当天迟迟未归，随后家人报警。其舅舅表示，事发当天王某上完校外美术班的课后，被嫌疑人骗至家中，随后遇害。 有网友反映，2019 年 10 月 20 日 15 时 20 分许，14 岁男孩蔡某某以需要帮忙为由，将美术班补课结束路过此处的受害者王某骗到家中，并对王某进行搂抱，欲与王某发生性关系。遭到拒绝后，对王某的头面部进行殴打，并将王某摁倒在地掐其脖子。当王某没有抵抗力之后，蔡某担心王某将自己的行为说出去，就用刀刺了王某上身五六次，确定王某死亡后，将王某的尸体遗弃在住处对面的灌木丛中，在移动尸体的时候，因为王某腿部和地面有接触，造成裤子滑落。事后将作案使用的刀也装到了垃圾袋中一并遗弃。现经过调查，尚未找到作案工具，其他工作还在进行之中。 凶手 8月 安徽死者器官被假捐献 15日的报道：在安徽怀远县人民医院，一名53岁的脑死亡患者进行了“器官捐献登记”，在被宣布临床死亡后，肝肾器官被摘除，家属获得20万“国家补助金”，事后证明这场“捐献”有假，是“医生的个人行为”，目前警方对此事正式立案侦查，6名医务人员以涉嫌侮辱尸体罪被逮捕。 这件事情在「睡前消息」8月16日一期中有讨论，推荐观看。]]></content>
  </entry>
  <entry>
    <title><![CDATA[美国枪击案]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E5%88%91%E4%BA%8B%E6%A1%88%E4%BB%B6%2F%E7%BE%8E%E5%9B%BD%E6%9E%AA%E5%87%BB%E6%A1%88.html</url>
    <content type="text"><![CDATA[2019 12月10日在美国新泽西州泽西市发生的枪击案中，三名行人，一名警察和两名袭击者死亡。source 12 月 6 日，佛罗里达州有4人在彭萨科拉美国海军航空基地枪击事件中死亡，枪手已被击毙。source 12月2日美国新奥尔市法国区旅游中心发生枪击案，11人受伤。source 11月加州一学校发生枪击，造成2人死亡。此前据报道，一名着黑衣的不明人员在洛杉矶以北约65公里的索格斯高中（Saugus High School）校园里开火。据推测，是一名16岁中学生开的火，他正在医院里。3名受伤的学生也被送进医院。 万圣节，10月31日晚，芝加哥一位7岁小女孩出门参加万圣节讨糖活动，却遭人持枪射击，受到重伤。报道称，这个小女孩在父亲陪同下沿着街道行走，人群中一个男子忽然掏出枪向陌生人开火，这名小女孩下颈部中枪，另有一名30岁男性左手中枪。芝加哥警方称，这名小女孩据信应是意外受害者。 当地时间10月27日，美国德州发生大规模枪击案，已致2死10多伤: 综合美联社、《达拉斯早报》27日消息称，当地时间周日(27日)凌晨，位于得克萨斯州格林维尔市的一个校园派对上发生大规模枪击事件。据当地官员和目击者称，至少造成2人死亡、十多人受伤。 当地时间10月12日 纽约布鲁克林发生枪击事件据美联社消息，美国纽约市警方称纽约布鲁克林发生枪击事件，目前已造成4人死亡，另有3人受伤。纽约警察局一名发言人说，当地时间12日上午7点前，警方接到了有关发生枪击事件的电话后赶赴现场，在现场发现有4名男子死亡，另外还有一名女子和2名男子受轻伤。 当地10月6日清晨 堪萨斯州发生枪击案，造成四人死亡。警方向CNN证实，一名嫌疑人进入一家酒吧，并开始射击，共有9人被击中。 9月19日 华盛顿特区枪击: 警方表示，距离白宫不远的华盛顿特区街道上发生枪击事件，已造成一人遇害，五人受伤。目前尚不清楚此事件中是否有一名嫌犯遭到关押，不过一名执法方面的消息人士向路透表示，这并未被认为是“活跃枪手”案。枪击事件于周四晚间在哥伦比亚高地(Columbia Heights)附近爆发，此地距离白宫约三公里。 9月3日 旧金山宣布美步枪协会为恐怖组织 9月1日 西德克萨斯州枪击案美国政府周日表示，一名横冲直撞的枪手携一支AR步枪，在西德克萨斯州杀害七人，并导致22人受伤，其中一名幼童脸部中弹；随后此人被警方击毙。 8月30日 莫比尔市枪击案: 当地时间30日晚，美国阿拉巴马州莫比尔市举行的一场高中橄榄球比赛结束后发生枪击事件，造成至少10人受伤。 8月4日 俄亥俄州代顿枪击案：造成9人死亡，枪手被击毙。 8月3日 德州埃尔帕索枪击案：造成至少二十人死亡，一白人男性被捕。 7月28日 加州年度大蒜节枪击案:四人丧生（其中一人疑似为凶手），另外有十五人手上。 7月28日 纽约布鲁克林发生枪击事件，导致1死11伤。]]></content>
  </entry>
  <entry>
    <title><![CDATA[湖南怀化新晃一中操场埋尸案]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E5%88%91%E4%BA%8B%E6%A1%88%E4%BB%B6%2F%E6%B9%96%E5%8D%97%E6%80%80%E5%8C%96%E6%96%B0%E6%99%83%E4%B8%80%E4%B8%AD%E6%93%8D%E5%9C%BA%E5%9F%8B%E5%B0%B8%E6%A1%88.html</url>
    <content type="text"><![CDATA[2019 年 11 月 26 日更新： 记者从湖南省扫黑办和怀化市委获悉，在扫黑除恶专项斗争中深挖出的历史积案新晃“操场埋尸案”（邓世平被杀案）已经彻底查清，杜少平及其同伙罗光忠被依法逮捕，并以涉嫌故意杀人罪被提起公诉；该案涉及的黄炳松等19名公职人员分别受到开除党籍、开除公职等相应党纪政务处分，其中10人因涉嫌犯罪被依法逮捕并移送审查起诉；杜少平涉恶犯罪团伙13名成员被依法逮捕并提起公诉。source 2019年10月19日更新： 10月17日的报道，湖南怀化校园操场埋尸案移送检方审查起诉。 怀化市人民检察院已向邓世平家属发出《听取意见通知书》，可见落款日期为10月9日 新京报讯6月19日，湖南怀化新晃一中操场跑道下发现一具骨骸。新晃县公安局称，已对时任校长房某及10余人采取强制措施。新晃一中办公室工作人员称，案件未对学校造成影响，仍正常上课。新晃县教育局称，正配合警方调查该事件。 据新京报此前报道，怀化公安晃州派出所民警向新京报证实，确有老师被埋跑道的案件发生，遗骸于昨晚（6月19日）在操场被挖出，怀化市公安局负责人称，案件为2003年确实有一位邓姓男子失踪，最近破获另一案件，嫌疑人交代了16年前邓世平的案件，警方顺藤摸瓜找到遗骸。 邓世平之子邓军（化名）称，父亲16年前失踪，此前曾任学校后勤保障部门职工，邓世平失踪时正在负责学校操场的修整工作。“失踪前就是去学校上班，跟平时是一样的，在我的印象中没有什么异常，我们怀疑他可能去朋友家打牌去了，但亲戚朋友都没有找到。”邓军说，邓世平失踪3天后，邓军一家报案。 2019年4月17日，新晃警方对外公布，打掉了杜少平犯罪团伙，邓军称杜少平就是当年的施工方负责人。“杜少平因为别的案子被抓了，其交代又交代了我父亲可能会被埋在那里，警察根据这个线索去侦查办案，抓住了当时几个作案人，那几个人带警方去了埋尸地点。” 邓军告诉新京报记者，新晃一中挖出的骨骸是不是自己父亲的，仍需进行进一步鉴定。 嫌疑人-杜少平 挖掘现场 这次之所以能够挖出十六年前的案子，是因为今年中央扫黑除恶第16督导组进驻湖南调查。督导组派多路人马下沉到市州地县。其中赴怀化开展督导工作的是第七小组，时间为4月18日至24日。 这种案子藏了这么多年没有出事，必然是由保护伞了。目前公布出来的后台方是当时新晃一中校长，黄炳松。杜少平与黄炳松为亲戚，是十六年前杜少平作为校长亲戚获得操场的建设承包权。死者邓世平出生于1950年，当时是在新晃一中工作，负责后勤。邓认为操场质量有问题，还偷工减料、虚报工程款，先是拒绝签字然后又向县里举报，没有多久便失踪。邓世平的弟弟表示，2003年1月22日（腊月二十）上午8点，邓世平上班，中午没回家。家属四处寻找无果后报警。 邓世平的儿子也表示，其父失踪前曾任学校操场修整工程的质监人员。他也曾怀疑父亲被埋尸操场，“那天晚上挖机冒雨作业填土，这个很反常。 涉事的新晃一中始建于1939年，可谓历史悠久。长安街知事（微信ID：Capitalnews）注意到，早在1988年，黄炳松就成为副校长，10年后升任校长。2004年2月，也就是埋尸案发生一年后，他才卸去该职务。算下来，他管理学校长达17年。 黄炳松 以下是魔幻现实主义： 魔幻现实主义：活埋 因为邓世平案件，这次还意外引发了对李尚平案件的追问。时年32岁的李尚平是湖南益阳市龙光桥镇南塘中学教师。根据《南方周末》报道，2002年4月26日，其尸体被发现在离家300米的公路边，浑身是血，后脑有个像漏斗那么大的洞，半边脸整个塌陷。警察们和法医作了一番检查后，宣称李尚平死于“一场交通事故”。目前此案仍未水落石出。 李尚平]]></content>
  </entry>
  <entry>
    <title><![CDATA[学术不端]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E5%AD%A6%E6%9C%AF%E4%B8%8D%E7%AB%AF%2Findex.html</url>
    <content type="text"><![CDATA[饶毅举报三位大咖 分别是武汉大学李红良院士、上海生命科学研究院生化细胞所裴钢院士以及上海药物所耿美玉研究员。29日，北京青年报记者从国家自然科学基金委获悉，该委目前正在调查核实此事。 在这封实名举报信中，饶毅向国家自然科学基金委实名举报，武汉大学医学院李红良多年持续学术造假，而中国科学院上海生命科学研究院生化细胞所研究员裴钢1999年发表的论文中，3张图不真实，存在造假嫌疑。此外，饶毅还在举报信中提到，今年中国科学院上海药物研究所耿美玉研究员作为通讯作者，发表的宣称可治疗小鼠阿尔茨海默症论文存在造假情况。 其中，李红良在2018年1月18日就被武汉大学千人计划专家霍文哲举报《自然·医学》上的两篇文章涉嫌造假，认为其文章有两大疑点：猴子实验周期不足、关键实验用猴数量不足。霍文哲称，“我们提供的是一剑封喉的证据。” 月29日下午，武汉大学官方微博发布了《关于李红良团队被举报学术不端的调查意见》，认为李红良团队被举报的相关内容不存在学术造假，但在论文撰写过程中存在个别疏漏。 更多阅读 首都医科大学校长饶毅实名举报3人学术论文造假 北大教授饶毅实名举报3学者学术造假？官方回应 李红良 “千人计划”专家举报武大“长江学者”论文涉嫌造假 | 调查 裴刚 南开大学校长曹雪涛论文涉嫌造假 于11月14日深夜的南开大学校长曹雪涛论文涉嫌造假的质疑持续发酵。曾在斯坦福大学工作过多年的博士伊丽莎白•比克（Elisabeth Bik）在国外学术交流在线平台PubPeer网站发文称，以曹雪涛为通讯作者或共同通讯作者的论文涉嫌不当图像复制。11月18日凌晨，曹雪涛及涉及的多位论文作者在PubPeer上回应质疑，表示复查工作已经开展，对论文得出的结论仍然“充满信心”。 被比克标记存在问题的论文主要涉及图像重复、删改或增添。据财新记者统计，截至2019年11月18日0点，被标记的47篇论文已涉及196名研究者，其中13名研究者参署名论文5篇及以上，其中包括曹雪涛的学生、现第二军医大学基础部免疫学教研室副主任、医学免疫学国家重点实验室副主任李楠（22篇），医学免疫学国家重点实验室课题负责人陈涛涌（12篇）、刘秋燕（7篇）、万涛（7篇）、王晓健（7篇）等人。 注：1989年，曹雪涛与叶天星等人曾合著论文《气功外气的抗肿瘤作用及增强免疫功能机理的实验研究》，发表于《自然杂志》。文章声称气功外气能够阻止肿瘤生长、延长荷瘤宿主存活期、提高机体免疫功能。 不过毕竟那个年代连钱学森都会出来支持气功，曹年轻的时候写这种文章情有可原。 更多阅读 如何看待曹雪涛任南开大学校长？ 南开大学校长曹雪涛团队被指造假论文增至60篇（更新） 曹雪涛院士疑似学术造假事件会对他本人造成什么影响？ 曹雪涛 上海药物所 - 耿美玉 近日，上海药物所耿美玉研究员的4篇论文出现在了PubPeer网站，这四篇论文被质疑存在图片不当裁剪、一图多用等问题。 这四篇论文分别发表在 Oncotarget（2015年）、Journal of Cancer（2017年）、Cell（2018年）、Hepatology（2019年）。其中 Cell 和 Hepatology 论文的通讯作者为耿美玉，另外两篇论文，耿美玉研究员并非关键参与者。 11月29日流传出饶毅教授实名举报三位学术大咖的消息，耿美玉就是其中一人。 学术圈五大蛊王 科大·黄秋原 同济·沈海英 东南·钱璐璐 复旦·李敏 陈路 稍后细细扒一下。 科大·黄秋原 如何评价CVPR 2019最佳论文得主－微软研究员黄秋原小姐的成人教育本科学历？是否涉嫌学历造假？ 佛罗里达大学女博士黄秋原甩了Allen-Zhu朱泽园恋上UF教授吴大鹏八卦内幕 大致背景如下： 黄秋原女士是中国科学技术大学的2007级脱产成教本科生(学号：TB07202112), 2011年以成教本科学历成功申请美国佛罗里达大学计算机专业博士, 主攻网络方向, 同时从事网络编码/社交网络/物联网等多个方向的研究,2017年博士毕业后进入美国微软研究院总部工作, 从事计算机视觉和人工智能方向的研究, 在CVPR/NIPS/AAAI等人工智能顶级会议上发表论文多篇, 先后获得包括德国海德堡获奖者论坛评选的“全球杰出科学家”和麻省理工学院评选的 “女性学术新星”等多个学术奖项和荣誉称号, 并于今年以实习生导师身份获得计算机视觉顶级会议CVPR 2019最佳学生论文奖. 图为黄秋原 主要问题有： 同济·沈海英 沈海英这个案例已经给已经比较久了。个人履历应该大概是这样？ Ph.D. - 2006, Wayne State University Computer Engineering M.S. - 2004, Wayne State University Computer Engineering B.S. - 2000, Tongji University Computer Science and Engineering Dr. Haiying (Helen) Shen is an associate professor in the Department of Computer Science, the Department of Systems &amp; Information Engineering and the Department of Electrical &amp; Computer Engineering Department at the University of Virginia. Her research interest focuses on Distributed computing including Cloud and edge computing, Big data, Information retrieval, Content delivery networks, Cyber-physical systems, Internet of things, High performance computing, Machine learning application and Social networks. She was a recipient of the TCSC Mid-career Award 2015, IBM Faculty Award 2015, the NSF CAREER Award 2013, the Sigma Xi Clemson Chapter Young Investigator of the Year Award 2013, and the Microsoft Faculty Fellowship Award 2010. (这段bio摘自其个人主页)。2019年11月此个人主页已经不能打开，我替换另一张图，图片来自沈海英在CLEMSON大学的主页 但是，这里的同济的学历貌似不是正牌的同济，而是同济合并的一个学校？有点类似成人本科学历之类的： 她上了菜园初中，然后上了个什么中专，然后从中专去了同济计算机系弄的职教班。这个职教班是直接从上海中专招的，这帮人都没有经过高考。她一直声称自己是同济CSE系毕业的。无耻吧？哦。原来是同济大学办的职教班。那种职教班就是报名交钱就可以读的吧。其实读职教班本身也没什么，但是非要装就很让人看不惯了。 -- 出处·第5074楼 (2011)关于小三师姐和小三女AP关联事件的总结 更多的详情 学术圈四大蛊王之首沈海英有人了解吗 2016年·大家还记得沈ap吗，人家跳到弗吉尼亚大学了 Haiying Shen (hs6ms) - EN-Comp Science Dept Associate Professor: 佛吉尼亚大学中的信息 沈海英在佛吉尼亚大学中的信息2 个人主页 北美华人e网关于相关事件的讨论帖子 Haiying Shen - Associate Professor of Electrical and Computer Engineering University 东南·钱璐璐 结婚三次，每次老公都是一婚。 本科是特别普通的二本，后来并入了东南大学。据说她属于很努力但不聪明的那种，考研没考上，本科毕业就结婚了。通过第一任老公去了交大读研， 又跟系草师兄好了，师兄当时也有交往几年的女票，各自劈腿结婚，在系里当时是大八卦。 caltech大牛winfree到上交访问认识了钱，一回美国就邀请钱到caltech访问了两周，所以钱的导师立马放钱毕业，因此钱三年就博士毕业了，这种毕业速度让其他同学又无语凝噎了好一阵。 后来钱璐璐和winfree结婚了。在这次婚姻之前还有两次婚姻，因此也被一些网友称为学界邓文迪（来源需要进一步考证）。 豆瓣·学术女蛊王c位当属钱璐璐把 个人主页：加州理工的AP啊~ Lulu Qian - CS+Biology - Alumni College 2016: 好歹英语不错 更多豆瓣讨论 其实钱璐璐的故事不算上『丑闻』的地步，也并没有明显的养蛊的现象。不过攀上了一个大牛老公，从此人生走上了Easy难度的快车道。不过放在学术圈子里来说，毕竟，面子上，这种裙带关系上位还是会引人不齿。 复旦·李敏 这个就是这几天爆火的复旦学术圈丑闻了。据说是和四名Ph.D同时往来，还引得以为硕导(复旦大学附属中山医院内分泌代谢病科硕士生导师陆炎)为其自杀。 复旦女博士崩盘记：以爱之名，追逐名利，注定身败名裂，备份链接 如何看待复旦女博士劈腿四个男博士，其中一硕导为其自杀一事？ 如何看待复旦陆炎和李敏事件？ 中科大·陈路 陈路是嫁给了2013年诺贝尔奖得主德国人Sudhof，后依靠丈夫的关系进入了斯坦福担任教授。 女主人公陈璐 男主人公 Sudhof 鹅们记得还有一个学术妲己叫做 陈路 的吗？: 这个链接目前看不到了。 弗罗里达大学 - 李涛 6 月 13 日，佛罗里达大学在读博士生陈慧祥（Huixiang Chen）在校园自杀身亡，此前他担任第一作者的论文刚刚入选 2019 年计算机体系结构国际研讨会（ISCA）。 这一事件在知乎、Quora 等社交媒体上引发了广泛关注和讨论。6 月 29 日，Medium 用户 Huixiang's Voice 发布了陈慧祥生前的微信聊天记录和遗书。网络信息显示，陈慧祥对好友透露导师李涛（Tao Li）纵容甚至鼓励论文造假，靠关系让他的论文入选 ISCA，并且拒绝撤稿。他认为这样的文章会对他对职业生涯造成负面影响，并在遗书中表示“我反复考虑到了所有情况，觉得真的无路可走”。 7 月 2 日，Huixiang's Voice 发布第二篇文章，称李涛已通过邮件联系账号所有者，并表示“严正要求你们立即撤销、停止散布，和澄清网络不实消息，否则，有关责任人将面临法律起诉和司法责任”。 7 月 3 日，佛罗里达大学发表声明称正对事件展开调查。 后记 Further Reading: 佛罗里达大学博生生自杀事件 翟天临不知知网 2019年1月31日，翟天临在新浪微博晒出自己获得北京大学光华管理学院博士后职位的通知书。2月，因翟曾在直播中发表言论“知网是什么东西”，被网友发现知网上无法查到其博士学位论文，并质疑其学历可能掺水或造假。翟天临就不识知网一事辩称自己当时只是在开玩笑。网友随后对翟2018年8月发表在《广电时评》杂志上的论文进行查重，发现全文存在大段抄袭现象。其中被抄袭最多的是黄立华教授2006年发表在《黄山学院学报》上的文章，亦引得原作者抨击。不久，翟天临的高考分数也遭到网友质疑。2019年2月14日，翟天临就学术风波发表致歉声明，并正式申请退出北大博士后科研流动站的相关工作。2月19日，北京电影学院发布微博表示，撤销翟天临博士学位，取消陈浥博导资格。 翟天临的学术风波导致中国各高校开始对学生的论文变得十分严格，众多院校甚至要求学生论文重复率在10%以下；网络上时有本科生研究生抱怨翟天临使得写论文不能再浑水摸鱼。同时，国内教育界将严查学术不端。 翟天临]]></content>
  </entry>
  <entry>
    <title><![CDATA[章莹颖案]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E5%88%91%E4%BA%8B%E6%A1%88%E4%BB%B6%2F%E7%AB%A0%E8%8E%B9%E9%A2%96%E6%A1%88.html</url>
    <content type="text"><![CDATA[这已经是前年的案子，不过这两天宣判了，整理事情脉络。 维基百科：章莹颖绑架案 案件经过 当地时间2017年6月9日下午，章莹颖乘坐香槟-厄巴纳公共交通区厄巴纳线城巴前往校外公寓，计划签署公寓租约，但迟到。同日下午1点39分，她向租赁中介发短信，通知他们她会在2点10分左右抵达。同日1点52分，她打算转乘另一趟巴士，但不知道公交站的地点。约四分钟后，她试图拦下一辆巴士，但车子是从反方向驶来，径直从她身边驶过。 之后，她走到数个街区外位于北古德温大道（North Goodwin Avenue）和西克拉克街（West Clark Street）拐角处的另一个公交站。该站位于该校伊利诺伊大学厄巴纳-香槟分校传媒学院的公共电视网和电视台WILL的正前方，位置交通便捷，许多工程学院的学生上课时都从这里进出。该公交站所属的公交路线能直接带她到她所租住的公寓楼，但只在秋季和春季学期才会运营，夏季则暂停运营。 监控画面显示，6月9日下午2点，一辆黑色欧宝亚特轿车从她身边经过，之后车子转回去，2点03分停在她等车的地方。和司机简单交谈几句后，她上了车，之后再也没有人见过她。失踪时，她戴着木炭色棒球帽，穿着粉红色间白色上衣、牛仔裤和白色网球鞋，背着黑色背囊。 受害人章莹颖 6月9日下午2点28分，中介向她发短信，但没有回应。随着时间的流逝，知道章莹颖去公寓楼目的的好友和联络教授愈发担心，希望她能尽快回来。同日晚上9点24分，联络教授报警。 调查过程 2017年6月30日，美国警方宣布已拘捕一名白人男子，又称章可能已死亡。嫌犯名叫布伦特·克里斯滕森（Brendt Christensen），案发前5月中旬刚拿到伊利诺伊大学物理学系的硕士学位，原本打算念博士。 被告人克里斯滕森 Brendt Christensen 7月3日，美国伊利诺伊州中部地区联邦法院对章莹颖案举行首次法庭聆讯，历时9分钟，期间嫌疑人克里斯滕森全程保持沉默。随后法庭宣布嫌疑人暂不得保释，在下次庭审前要继续收押；并确定当地时间5日下午举行第二次聆讯。 7月5日，美国联邦法院对嫌犯克里斯滕森进行第二次聆讯，并以对社区具有重大潜在危险为由，裁定拒绝嫌疑人的保释请求。克里斯滕森将继续被联邦执法机关羁押，直到7月14日的预审日，或大陪审团签发起诉书提起公诉时。 司法过程 2017年 2017年7月12日，美国联邦大陪审团正式以绑架案起诉嫌疑人布伦特·克里斯滕森，原定同月14日进行的预审取消；大陪审团先行通过表决，签发正式起诉书。起诉书指控被告克里斯滕森在2017年6月9日“故意且非法地抓走、监禁、诱骗、绑架以及掳走章莹颖，之后出于自己的利益和目的，将章莹颖困住，并在犯罪中使用了跨州手段、物品等，进行进一步侵害”。 克里斯滕森于7月20日接受法庭提审时否认指控，并表示自己正在服用镇静剂氯硝西泮，随后辩护律师安东尼·布鲁诺（Anthony Bruno）要求由陪审团审理此案。下一次审前听证会时间定于8月28日的下午，审判日期为9月12日。如果绑架罪名被判成立，被告面临最高的刑罚是终身监禁和25万美元罚款。 9月8日，联邦法庭法官科林·布鲁斯（Colin Bruce）批准了被告辩护律师团退出审讯的申请。这三名律师，汤姆·布鲁诺（Tom Bruno）、安东尼·布鲁诺和伊万·布鲁诺（Evan Bruno），是当时被告的全部辩护律师。随后法庭因被告收入过低，为其指派了公共辩护律师。这名来自华盛顿特区的律师在申明中称，其目标是阻止司法部在本案中授权使用死刑，若无法阻止死刑授权，则希望能赢得庭审。审判定于次年2月7日进行。 10月3日，斯普林菲尔德联邦大陪审团重新起诉克里斯滕森。新的起诉取代了7月12日最初的起诉，指控被告克里斯滕森三项罪名，第一项是将绑架罪升格为绑架致人死亡罪，另外两项是向联邦调查局特工提供虚假陈述。大陪审团还发布了针对第一项指控的特别调查结果通知书，指控被告故意谋杀章莹颖，称他采用特别令人发指的、残忍的或道德败坏的手段犯下罪名，酷刑或身体上严重虐待受害人，被告在实质策划和预谋后犯下罪行，导致他人死亡。两项向联邦调查局特工作虚假陈述的罪名若被定罪，可判处五年监禁。如果绑架致人死亡罪被定罪，则被告将面临死刑或终生监禁。 2018年 2018年1月初，被告辩护方对联邦法院管辖权提出异议，认为该案应完全由伊利诺伊州法庭管辖，从而完全排除联邦法院管辖权。依伊利诺伊州法，州法院无法做出死刑判决而联邦法庭可以做出死刑判决，因此若管辖权争议成立，被告即使被判有罪也不会受到死刑裁决。 1月19日，在联邦司法部长杰夫·塞申斯指令下，联邦检察官提交了寻求死刑意向书，并宣布将在本案中寻求死刑判决。在声明中，检察官还宣布他们怀疑克里斯滕森参与了2013年伊利诺伊州中部一起伤害与性侵案件，并称克里斯滕森承认“有不止一名受害者”并表示自己“渴望以杀手身份留名”。 2月初，被告辩护方申请要求负责目前此案的联邦法官科林·布鲁斯回避，但未向公众公布理由。同时，被告辩护方亦申请推迟法庭辩论至少16个月以便辩护方做准备。辩护方声称对于这样复杂的案件，推迟16个月已经是最低限度的请求。 2019年 2019年6月3日，章莹颖案在美国伊利诺伊中区联邦地区法院开庭审理。此次庭审将分为遴选陪审团成员、定罪、量刑三个阶段，预计将耗时两个月时间。 2019年6月12日，美国伊利诺伊中区联邦地区法院审理章莹颖被杀案时，凶嫌克里斯滕森被告辩护律师承认章莹颖被克里斯滕森杀害，同时凶嫌克里斯滕森女友录下的录音中，克里斯滕森承认自己使章莹颖窒息致死，并将其砍头。 2019年6月24日，美国伊利诺伊中区联邦地区法院陪审团认定凶嫌克里斯滕森绑架和谋杀罪名成立。 2019年7月18日，因陪审团无法就死刑问题达成一致，克里斯滕森被判无期徒刑且不得假释。 章莹颖的男友在接受采访]]></content>
  </entry>
  <entry>
    <title><![CDATA[新城控股董事长王振华涉嫌猥亵女童]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E5%85%B6%E4%BB%96%2F%E6%96%B0%E5%9F%8E%E6%8E%A7%E8%82%A1%E8%91%A3%E4%BA%8B%E9%95%BF%E6%B6%89%E5%AB%8C%E7%8C%A5%E4%BA%B5%E5%A5%B3%E7%AB%A5.html</url>
    <content type="text"><![CDATA[案件介绍 犯罪嫌疑人 警情通报 据悉，犯罪行为发生于6月29日下午，地点为大渡河路一家五星级酒店。被猥亵女童事后向在江苏的母亲打电话哭诉，母亲即来沪报警，王某随即被采取强制措施。目前女童已验伤情，阴道有撕裂伤，构成轻伤。 据最新消息，带女童入住酒店的女子周某也已到案。周某49岁，江苏徐州人。据其供述，事发当天，她带了两个女孩入住酒店，一个9岁，一个12岁。两个女孩的母亲为周某朋友。周某谎称带两女孩去上海迪斯尼玩，从江苏带至上海。当天王某对9岁女童实施犯罪，事后给付周某现金1万元。 7月1日，王振华因为涉嫌猥亵女童被上海市普陀区警方刑事拘留。 王振华身家3000亿的帝国 王振华的更多背景资料 据财联社7月8日报道，范凯洲、严义明两名律师昨日向证监会实名举报新城控股，直指其涉嫌证券违规。今日，范凯洲律师称，他与严义明律师已征集50名新城控股的中小股东，股份数目前还未最终统计。范凯洲还透露，今日上午，新城控股的法律顾问曾尝试联系他，后被拒，其称“为避免造成不必要的误会，现在不方便联系”。 此外，8日晚间最新的消息是，王振华已被撤销上海市政协委员资格。同时新城控股晚间发布公告称，经公司三分之一以上的全体董事提名，同意补选董事长王晓松先生任公司 、第二届董事会提名委员会委员及战略委员会主任委员，董事会并同意补选曲德君先生为公司第二届董事会董事候选人。与此同时，董事王振华、独立董事Aimin Yan辞职(source)。新城控股的官网上也移除了王振华，这一系列举措用应该是公司和王振华及时做切割。 政协委员王振华 7月10日，上海市普陀区人民检察院以涉嫌猥亵儿童罪依法对犯罪嫌疑人王某某、周某某批准逮捕(source)。 10月9日，国际评级机构穆迪发布报告，下调新城发展和新城控股的展望评级至负面，负面展望主要因为第一大股东王振华诉讼等因素以及可能面临控制权变更和资金渠道恶化等风险。与此同时，公司销售合同增长和流动性状况的改善则为其应对王振华涉诉一事提供缓冲，因而维持公司评级不变。来自新城控股的内部人士透露，公司的情况已有较大程度的好转，融资渠道逐渐恢复，同时公司的员工数量也在增加。记者向某新城控股的债务方确认，新城控股已经重获新增贷款，主要是一些城商行，有原来的合作方，也有新进入的银行(source)。 进一步阅读 知乎的讨论]]></content>
  </entry>
  <entry>
    <title><![CDATA[P2P 借贷暴雷]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E9%87%91%E8%9E%8D%E7%9B%B8%E5%85%B3%2Fp2p%E6%9A%B4%E9%9B%B7.html</url>
    <content type="text"><![CDATA[51 信用卡 51 信用卡今日(2019年10月21日)午间疑遭浙江警方调查，现场警车云集。港股 51 信用卡一度暴跌近 35%，后被港交所暂停交易。目前公司回应称经营正常，不清楚被带走人员是否为公司员工。(source)]]></content>
  </entry>
  <entry>
    <title><![CDATA[河南36名村医集体辞职]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E5%85%B6%E4%BB%96%2F%E6%B2%B3%E5%8D%9736%E5%90%8D%E6%9D%91%E5%8C%BB%E9%9B%86%E4%BD%93%E8%BE%9E%E8%81%8C.html</url>
    <content type="text"><![CDATA[近日，河南省通许县朱砂镇36名村医集体辞职信在网络上引发热议。辞职信上的内容显示，请辞原因是“我们工作压力越来越大，上级拨款越来越多，到村医手里的钱越来越少，工资发放不到位，上级层层克扣，现在我们村医已经生活不能自理 ”。现在国家大力发展基层医疗，结果连基层医生的工资都被层层的克扣，没有工资连最基本的生活没法保障，拿什么去治病救人？ 公开资料显示，朱砂镇位于河南省开封市通许县东北部7公里处，耕地面积6030公顷，辖36个行政村，54个自然村，6.33万人。 尊敬的院领导： 您们好！ 很遗憾在这个时候向医院正式提出辞职。 在过去的时间里，我们村医在医院管理下工作的很开心，医院的气氛就和一个大家庭一样，大家相处的融洽和睦，同时在医院给予的良好学习氛围，学习很多新的东西充实自己，得到很多实践经验。 我们非常重视在工作的这段时光，更非常荣幸的成为村医中的一员，在这段时间里所学到的知识也是我们一生宝贵的财富。 但由于我们工作压力越来越大，上级拨款越来越多，到村医手里的钱越来越少，工资发放不到位，上级层层克扣，现在我们村医已经生活不能自理，对此我们村医深感遗憾。 在过去的一段时间我们村医的表現不能让自己感到满意，对医院的照顾深感愧疚，且没有给医院做过贡献，更由于我们自身的能力不足，无法胜任医院的各方面需求。 特此向医院提出辞职申请，望医院给予批准。 全体乡村医生签名： 辞职人：朱砂镇全体乡村医生 2019-6-28]]></content>
  </entry>
  <entry>
    <title><![CDATA[黑历史 - 2019]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E9%BB%91%E5%8E%86%E5%8F%B2%2F2019.html</url>
    <content type="text"><![CDATA[Google 夜莺计划曝光 《华尔街日报》报道说，该计划搜集的数据包括“实验室结果、医生诊断和住院记录等，并包括完整的健康历史，以及患者姓名和出生日期”，而且谷歌可能有多达150名员工可以访问这些数据。 《纽约时报》证实了这一报道的大部分内容，并写道“数十名谷歌员工”可能有权访问敏感的患者数据，并且担心某些谷歌员工已下载了其中一些数据。 报道中透露，谷歌正在利用所搜集的数据设计软件，利用“先进的人工智能和机器学习”来定制个人患者的医疗服务。 谷歌长期以来对进军医疗领域野心勃勃。去年，谷歌聘请了一位负责医疗部门的高管来监督其许多医疗计划。大约在同一时间，他们宣布合并DeepMind Health部门，目标是创建一个“护士和医生的人工智能助手”。 此前，谷歌还被指控通过芝加哥大学医学中心不当访问数十万份医疗记录。谷歌于2017年与芝加哥大学医学中心合作开发的机器学习工具能够“准确预测医疗事件——比如病人是否住院，住院多久，以及他们的健康是否恶化，例如感染、肺炎、或心脏衰竭”。 谷歌“夜莺计划”曝光：秘密采集数百万医疗隐私数据，医生患者毫不知情 Google’s ‘Project Nightingale’ Gathers Personal Health Data on Millions of Americans]]></content>
  </entry>
  <entry>
    <title><![CDATA[其他 · 汇总]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E5%85%B6%E4%BB%96%2F2019.html</url>
    <content type="text"><![CDATA[2019-12 艺人高以翔在录制浙江卫视的节目过程中猝死 高以翔（英语：Godfrey Gao Yi Xiang，1984年9月22日－2019年11月27日），本名曹志翔，生前为加拿大和中华民国籍男演员、模特儿，身高195公分，与丁春诚、陈绍诚、蓝钧天四人被封为“时尚F4”。2019年11月27日，于录制浙江卫视真人实境秀节目《追我吧》中意外猝逝，享年35岁 2019年11月27日凌晨1点45分左右，高以翔录制浙江卫视真人实境秀节目《追我吧》将近17小时后，在“你追我逃”奔跑环节中突然减速，喊一声“我不行了”后倒地并晕倒、心脏骤停3分钟，经现场的心肺复苏15分钟后一度恢复心跳，但送至宁波市医疗中心李惠利医院急救近3个小时后仍宣告不治，享年35岁；医院宣布死因为心源性猝死；稍后经纪公司发出声明证实高以翔已经逝世，并表示“令我们震惊且悲痛万分，至今无法接受” 维基百科: 高以翔 2019-08 上海迪士尼的负面新闻 最近上海迪士尼遭遇负面新闻二连击啊，包括 上海迪士尼禁止自带饮食被大学生告了: “禁止携带食物入园”、“入园需翻包检查”等规定一直饱受争议。今年年初，华东政法大三学生小王因携带零食被园方工作人员翻包阻拦。小王查询发现，美国和法国的3处迪士尼并没有禁止消费者携带食物进园，而中国和日本的迪士尼乐园却禁止。上海迪士尼相关规定目的是提高园内餐饮业的创收，侵害了消费者的合法权益。 上海迪士尼台风天气首次闭园且不予退票 8月23日的消息，浦东消保委：上海迪士尼不接受调解 坚持翻包检查。 记者联系了迪士尼总部公共事务部，相关工作人员回复称，总部旗下每个迪士尼乐园都有自己的政策，他们没有办法回复关于上海迪士尼的问题，建议记者自行联系上海迪士尼采访。为什么迪士尼这么牛逼呢？事实上，与大部分人的印象不同，上海迪士尼其实是国资控股的。 寿光开锁公司收消防救援车300元被顶格处罚 寿光市七个五开锁中心属个体经营，经营者为马小涛。经营范围包括专业开锁服务，修锁、配钥匙服务，销售五金产品等。经营场所在城区古槐路与圣城街交叉口西100米路北。 该开锁中心于8月13日下午16时42分，接到要求开锁服务的电话，来电人称其救灾车辆在纪台镇丁家尧河村落入水沟中，导致车辆锁具故障，要求其到现场开锁。随后该中心安排服务人员到现场进行了开锁，开锁人员开锁前没有告知对方收费标准，开锁后告知这种情况应收费400至500元，考虑到救灾，收取了300元，没有开具相关票据。 寿光市市场监管局根据调查取得的证据，认为该开锁中心违反了《关于商品和服务实行明码标价的规定》第十六条“提供服务的经营者应当在经营场所或缴费地点的醒目位置公布服务项目、服务内容、等级或规格、服务价格等”的规定。根据《关于商品和服务实行明码标价的规定》第二十一条的规定，经营者不明码标价的，由价格主管部门责令改正，没收违法所得，可并处5000元以下的罚款。拟对当事人顶格处罚，已向当事人下达行政处罚告知书。 当事人表示完全接受处理决定，立即向全市人民道歉，并作出了以下承诺：（一）立即退还开锁服务费300元；（二）免费为所有参与抗灾救灾车辆提供开锁服务；（三）免费为所有受灾群众提供开锁服务；（四）免费为寿光市60岁以上老人提供开锁服务 北京朝阳劳斯莱斯占用医院应急通道 报道地址 上面是最初的报道，后来进展如下： 重庆保时捷帽子女被「反杀」 7月30日，重庆渝北区两路附近，一位驾驶红色保时捷的女子在掉头时与另一辆车的男司机发生口角，互扇耳光。当时是女方先动手，但是男方迅速还手。 保时捷女车主李月，出生于1974年11月，重庆渝北人，初中学历，无固定职业。其丈夫童小华出生于1973年10月，1997年7月参加公安工作。两人于1998年12月结婚，育有一女。童小华目前担任渝北区公安分局石船派出所所长。 事发后舆论发酵期间传出当事男司机遭人深夜敲门，受到对方威胁。目前这一消息被官方否认。同时，网络曝出李某多段视频，自称“爱飙车、经常闯红灯、扣分随意销”，引发公众强烈关注。不少网友质疑其家庭背景、收入来源、交通违法处理等背后有“猫腻”。 在最新的消息中，童小华被免职并立案调查。官方通报如下： 更多消息： 长安剑：保时捷女车主一巴掌童所长被免，冤不冤? 重庆保时捷女司机和男子互扇耳光事件最新动态警方回应：彻查 河南淇县瓜农拽到偷瓜贼反要倒赔300元 警方通报“瓜农拽倒偷瓜贼反要倒赔300元”事件，双方达成谅解，退还300元。 河南瓜农庞大哥家承包了200亩地种西瓜和玉米，经常有附近的人在瓜熟后前来偷瓜，庞大哥多次报警都未见效。近日，两个女子开着三轮车来偷西瓜，偷了满满一车，庞大哥在与她们拉扯时，一女子的膝盖擦破流血并报了警。民警协调让庞大哥赔偿300元医药费，这让他十分委屈，称“以后偷瓜都不敢拦了”。 淇县公安局@平安淇县 2日晚回应称，宋某摘了八九个西瓜，价值二十余元，因西瓜价值小，情节显著轻微，对偷西瓜二人（宋某及其女儿）进行了批评教育，同时考虑到二人受伤，经现场调解，庞某赔偿伤情300元钱。在媒体报道后，在民警的教育下，宋某及其女儿认识到了错误，并主动退还了300元，双方达成谅解。 河南淇县瓜农拽到偷瓜贼反要倒赔300元，警察已被停职，这件事大家怎么看？]]></content>
  </entry>
  <entry>
    <title><![CDATA[京都动画第一工作室遭遇纵火]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E5%85%B6%E4%BB%96%2F%E4%BA%AC%E9%83%BD%E5%8A%A8%E7%94%BB%E7%AC%AC%E4%B8%80%E5%B7%A5%E4%BD%9C%E5%AE%A4%E9%81%AD%E9%81%87%E7%BA%B5%E7%81%AB.html</url>
    <content type="text"><![CDATA[堪称二次元911。这个工作室是京都动画最重要的工作室，这里集中了大多数制作部门。监督、演出、作监、原画、中割、上色、CG、美术、摄影……我们通常看到的京都动画内部的视频/照片，也都是在这里拍摄的。 预计死亡人数会超过10人，数十人受伤。本次火灾为人为纵火。 截止到18日，已经确认33人丧生。 已有动画同行发起对京阿尼众筹捐款，并称希望帮助他们走出困境。众筹的目标金额是50万美元，目前已有超过1100名支持者，众筹金额超过25600美元。在众筹页面的评论区下面，支持者纷纷为京阿尼祈福，有人对京阿尼曾经打造的作品表示感谢，现在希望自己能够尽一份力帮助他们。]]></content>
  </entry>
  <entry>
    <title><![CDATA[编译问题]]></title>
    <url>%2Fknowledge-base%2Fprogramming%2Fcompile%2Findex.html</url>
    <content type="text"><![CDATA[Flags -fPIC 参考 PIC的含义是Position Independent Code。这个选项的设置与「共享对象」有关。共享对象可能会被不同的进程加载到不同的位置上，如果共享对象中的指令使用了绝对地址、外部模块地址，那么在共享对象被加载时就必须根据相关模块的加载位置对这个地址做调整，也就是修改这些地址，让它在对应进程中能正确访问，而被修改到的段就不能实现多进程共享一份物理内存，它们在每个进程中都必须有一份物理内存的拷贝。fPIC指令就是为了让使用到同一个共享对象的多个进程能尽可能多的共享物理内存，它背后把那些涉及到绝对地址、外部模块地址访问的地方都抽离出来，保证代码段的内容可以多进程相同，实现共享。 这里的「共享对象」，常见就是一些动态库文件。 -pipe 参考 作用在编译过程中使用pipe管道，而非临时文件。 Use pipes rather than temporary files for communication between the various stages of compilation. This fails to work on some systems where the assembler is unable to read from a pipe; but the GNU assembler has no trouble. -Wall 参考 意思是&quot;warn all&quot;。让编译器抛出所有的警告 -W 参考 启用额外的警告信息。一般更加推荐用-Wextra -Werror 将warning处理视为错误。 -Wl 参考 这个Flag是一个前缀，表示后面的Flag传递给链接器。]]></content>
  </entry>
  <entry>
    <title><![CDATA[王思聪被限制消费及其他消息]]></title>
    <url>%2Fknowledge-base%2Fnews%2F%E5%85%B6%E4%BB%96%2F%E7%8E%8B%E6%80%9D%E8%81%AA%E8%A2%AB%E9%99%90%E5%88%B6%E9%AB%98%E6%B6%88%E8%B4%B9%E5%8F%8A%E5%85%B6%E4%BB%96.html</url>
    <content type="text"><![CDATA[本轮被限制消费以及查封资产的消息始末 王思聪于 11 月 4 日被北京市第二中级人民法院列为被执行人，执行标的 1.5 亿余元。之后，中国执行信息公开网查询显示，法院已在 11 月 19 日向王思聪下达了限制消费令。 11 月 22 日，媒体从北京市二中院召开的执行主题新闻通报会上获悉，该案立案执行后，法院依法向被执行人王思聪送达了执行通知书及报告财产令，并对其名下财产进行调查。 “截止到目前，因王思聪未按执行通知书要求履行还款义务，故我院已对被执行人采取限制消费措施，并查封【《最高人民法院关于人民法院民事执行中查封、扣押、冻结财产的规定》第八条：对被执行人及其所扶养家属生活所必需的居住房屋，人民法院可以查封，但不得拍卖、变卖或者抵债。】王思聪名下的房产、车辆、银行存款等财产。”北京市二中院新闻办负责人说。 关于王思聪 王思聪（1988年1月3日－），辽宁大连人，原华人世界首富、中国首富、万达集团董事长王健林的独生子， 网红，兼任万达集团董事，北京普思投资有限公司董事长，熊猫TV创始人兼CEO。 王思聪自小被送往国外（新加坡、英国）读书，回国后在家族企业万达集团任职。2011年，王思聪成立IG电子竞技俱乐部，此后，王一直对电子竞技行业有所投资。2015年，王思聪创立视频直播网站熊猫TV并担任CEO。 Reference 11 月 22 日，王思聪房产汽车存款被查封，发生了什么？]]></content>
  </entry>
  <entry>
    <title><![CDATA[Web技术]]></title>
    <url>%2Fknowledge-base%2Fprogramming%2Fweb%2Findex.html</url>
    <content type="text"><![CDATA[html&amp;css&amp;js CSS定位详解]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何安装Python]]></title>
    <url>%2Fknowledge-base%2Fprogramming%2Fhow-to-install%2Fpython.html</url>
    <content type="text"><![CDATA[Ubuntu 安装Python python3.7 以下安装脚本在Ubuntu 16.04上测试通过，引用自How to Install Python 3.7 on Ubuntu 18.04 123456789101112sudo apt updatesudo apt install software-properties-commonsudo add-apt-repository ppa:deadsnakes/ppa# When prompted press Enter to continue:sudo apt install python3.7python3.7 -v# 这里安装后只有python3.7的命令可以用，为了使用python命令，使用如下命令sudo ln -s $(which python3.7) /usr/bin/python 在sudo add-apt-repository ppa:deadsnakes/ppa命令中可能出现/etc/apt/sources.list文件无法访问问题。如果你改用了国内镜像，其内容包含了中文的注释，那么这个错误可能是由于locale设置导致的。通过export LC_ALL=&quot;zh_CN.UTF-8&quot;可以消除这个问题。 注意，可以在安装pip的同时一并安装python3。详情见下面。 安装pip pip for python3.6 为Python3安装pip的方法如下： 12345$ sudo apt update$ sudo apt install python3-pip$ pip3 --versionpip 9.0.1 from /usr/lib/python3/dist-packages (python 3.6) 注意，按照这种方法会连通python3一起安装。如果你用上面的方法安装了python3.7，那么在运行上面的脚本以后会同时存在3.7和3.6两个版本的python. pip for python3.7 经过实验，比较保险可靠的是如下的方法： 首先按照前面的方法安装好Python3.7 执行下面的命令： 1curl -s -L https://bootstrap.pypa.io/get-pip.py | sudo python3.7 如果不需要在全局安装python3.7的pip工具，只是在虚拟环境中使用的话，直接使用python3.7创建虚拟环境就可以了，虚拟环境中的pip会自动安装。虚拟环境的创建方法范例见下： 1virtualenv -p $(which python3.7) env 注意这个方法安装的pip会强制覆盖已有的pip pip for python2 为python2安装pip的方法如下： 123sudo apt updatesudo apt install python-pippip --version 同样，上面的脚本也会自动安装python2及其他必要的依赖。 pip的国内镜像配置方法 我这里使用清华大学开源软件镜像站提供的资源。设置方法如下： 临时使用 1pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package 注意，simple不能少, 是https而不是http 设置为默认 升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置： 12pip install pip -Upip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 如果您到 pip 默认源的网络连接较差，临时使用本镜像站来升级 pip： 1pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U Reference How to Install pip for python 3.7 on Ubuntu 18? get-pip.py]]></content>
  </entry>
  <entry>
    <title><![CDATA[How to Install]]></title>
    <url>%2Fknowledge-base%2Fprogramming%2Fhow-to-install%2Findex.html</url>
    <content type="text"><![CDATA[How to Install这个章节整理了常用软件的安装方法。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux Shell]]></title>
    <url>%2Fknowledge-base%2Fprogramming%2Flinux-shell%2Findex.html</url>
    <content type="text"><![CDATA[这个章节整理Linux命令行环境的工具的使用方法 awk tee watch sed ln]]></content>
  </entry>
  <entry>
    <title><![CDATA[AWK]]></title>
    <url>%2Fknowledge-base%2Fprogramming%2Flinux-shell%2Fawk.html</url>
    <content type="text"><![CDATA[这篇文章转载自Linux三剑客老大 awk 概述 awk同sed命令类似，只不过sed擅长取行，awk命令擅长取列。（根据了解awk是一种语言，不过我们只关注他处理文本的功能，用的好的话几乎可以取代excel） 原理：一般是遍历一个文件中的每一行，然后分别对文件的每一行进行处理 用法: 1awk [可选的命令行选项] 'BEGIN&#123;命令 &#125; pattern&#123; 命令 &#125; END&#123; 命令 &#125;' 文件名 打印某几列 12$ echo 'I love you' | awk '&#123;print $3 $2 $1&#125;'youloveI 我们将字符串 I love you 通过管道传递给awk命令，相当于awk处理一个文件，该文件的内容就是I love you,默认通过空格作为分隔符(不管列之间有多少个空格都将当作一个空格处理)I love you就分割成三列了。 假如分割符号为 . ，可以这样用 12$ echo '192.168.1.1' | awk -F "." '&#123;print $2&#125;'168 如果要打印某个范围内的所有行，可以使用如下的方法： 1awk '&#123; s = ""; for (i = 9; i &lt;= NF; i++) s = s $i " "; print s &#125;' 这里可以看出为什么开头说awk是一种语言了 条件过滤 我们知道awk的用法是这样的，那么pattern部分怎么用呢？ 12345678awk [可选的命令行选项] 'BEGIN&#123;命令 &#125; pattern&#123; 命令 &#125; END&#123; 命令 &#125;' 文件名$ cat score.txttom 60 60 60kitty 90 95 87jack 72 84 99$ awk '$2&gt;=90&#123;print $0&#125;' score.txtkitty 90 95 87 $2&gt;=90 表示如果当前行的第2列的值大于90则处理当前行，否则不处理。说白了pattern部分是用来从文件中筛选出需要处理的行进行处理的，这部分是空的代表全部处理。pattern部分可以是任何条件表达式的判断结果，例如&gt;，&lt;，==，&gt;=，&lt;=，!=同时还可以使用+，-，*，/运算与条件表达式相结合的复合表达式，逻辑 &amp;&amp;，||，!同样也可以使用进来。另外pattern部分还可以使用 /正则/ 选择需要处理的行。 判断语句 判断语句是写在pattern{ 命令 }命令中的，他具备条件过滤一样的作用，同时他也可以让输出更丰富 123456$ awk '&#123;if($2&gt;=90 )print $0&#125;' score.txtkitty 90 95 87$ awk '&#123;if($2&gt;=90 )print $1,"优秀"; else print $1,"良好"&#125;' score.txttom 良好kitty 优秀jack 良好 BEGIN 定义表头 1awk [可选的命令行选项] 'BEGIN&#123;命令 &#125; pattern&#123; 命令 &#125; END&#123; 命令 &#125;' 文件名 使用方法如下： 12345$ awk 'BEGIN&#123;print "姓名 语文 数学 英语"&#125;&#123;printf "%-8s%-5d%-5d%-5d\n",$1,$2,$3,$4&#125;' score.txt姓名 语文数学英语tom 60 60 60kitty 90 95 87jack 72 84 99 这里要注意，我为了输出格式好看，做了左对齐的操作(%-8s左对齐，宽8位)，printf用法和c++类似。 不仅可以用来定义表头，还可以做一些变量初始化的工作，例如 12$ awk 'BEGIN&#123;OFMT="%.2f";print 1.2567,12E-2&#125;'1.26 0.12 这里OFMT是个内置变量，初始化数字输出格式，保留小数点后两位。 END 添加结尾符 和BEGIN用法类似 123$ echo ok | awk '&#123;print $1&#125;END&#123;print "end"&#125;'okend 数据计算 这个地方我要放大招了！上面的知识点你都记住了吗？ 1234567891011$ awk 'BEGIN&#123;print "姓名 语文 数学 英语 总成绩"; \sum1=0;sum2=0;sum3=0;sumall=0&#125; \&#123;printf "%5s%5d%5d%5d%5d\n",$1,$2,$3,$4,$2+$3+$4;\sum1+=$2;sum2+=$3;sum3+=$4;sumall+=$2+$3+$4&#125;\END&#123;printf "%5s%5d%5d%5d%5d\n","总成绩",sum1,sum2,sum3,sumall&#125;'\ score.txt姓名 语文 数学 英语 总成绩 tom 60 60 60 180kitty 90 95 87 272 jack 72 84 99 255总成绩 222 239 246 707 因为命令太长，末尾我用。。 BEGIN体里我输出了表头，并给四个变量初始化0 pattern体里我输出了每一行，并累加运算 END体里我输出了总统计结果 当然了，一个正常人在用linux命令的时候是不会输入那么多格式化符号来对齐的，所以新命令又来了 column -t（鬼知道我为什么会记得这么多乱七八糟的命令。） 图1 有用的内置变量 NF:表示当前行有多少个字段，因此$NF就代表最后一个字段 NR:表示当前处理的是第几行 FILENAME：当前文件名 OFMT：数字输出的格式，默认为％.6g。表示只打印小数点后6 位 123456$ awk -F ':' '&#123;print NR ") " $1&#125;' demo.txt1) root2) daemon3) bin4) sys5) sync 内置函数 awk定义了很多内置函数，用awk来写shell脚本倒是一个不错的选择，但是大多数我们是用不上的，以下是常用函数 123$ echo 1 2 | awk '&#123;print $1+sqrt($2)&#125;'2.41421 随机数，先设置种子再随机 rand() 0 &lt;= n &lt; 1,srand([expr])将 rand 函数的种子值设置为 Expr 参数的值，或如果省略 Expr 参数则使用某天的时间。 123$ echo 1 | awk 'BEGIN&#123;srand()&#125;&#123;print rand()&#125;'0.929885 字符串 图2 系统常用 图3 不常用算数： 图4]]></content>
  </entry>
  <entry>
    <title><![CDATA[apt使用和配置的一些信息]]></title>
    <url>%2Fknowledge-base%2Fprogramming%2Fhow-to-install%2Fapt.html</url>
    <content type="text"><![CDATA[apt国内镜像 我一般都是使用清华大学开源软件镜像站提供的资源，对于Ubuntu16.04，设置方法如下： 修改文件/etc/apt/sources.list，不过之前最好将系统自带的该文件备份。新的文件的内容为： 16.0418.0414.04测试 ``` # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse 预发布软件源，不建议启用 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse ```undefinedundefined]]></content>
  </entry>
  <entry>
    <title><![CDATA[TEE]]></title>
    <url>%2Fknowledge-base%2Fprogramming%2Flinux-shell%2Ftee.html</url>
    <content type="text"><![CDATA[简介 tee命令用于将数据重定向到文件，另一方面还可以提供一份重定向数据的副本作为后续命令的stdin。简单的说就是把数据重定向到给定文件和屏幕上。 存在缓存机制，每1024个字节将输出一次。若从管道接收输入数据，应该是缓冲区满，才将数据转存到指定的文件中。若文件内容不到1024个字节，则接收完从标准输入设备读入的数据后，将刷新一次缓冲区，并转存数据到指定文件。 使用 1tee [options] params 其中options包括： -a: 向目标文件写入时采用追加模式 -i: 忽略中断信号 params为输出文件]]></content>
  </entry>
  <entry>
    <title><![CDATA[SED]]></title>
    <url>%2Fknowledge-base%2Fprogramming%2Flinux-shell%2Fsed.html</url>
    <content type="text"><![CDATA[本文转载自linux sed命令详解 简介 sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。 sed使用参数 123456789101112131415161718[root@www ~] # sed [-nefr] [动作]选项与参数：-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。-e ：直接在命令列模式上进行 sed 的动作编辑；-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)-i ：直接修改读取的文件内容，而不是输出到终端。动作说明： [n1[,n2]]functionn1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则『 10,20[动作行为] 』function：a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！ 以行为单位的新增/删除 例如将/etc/passwd的内容列出并打印出行号，同时将第2至5行删除： 1234$ nl /etc/passwd | sed '2,5d'1 root:x:0:0:root:/root:/bin/bash6 sync:x:5:0:sync:/sbin:/bin/sync7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown 首行和尾行可以使用$来表示。例如删除第3行及之后的所有内容，可以使用 1nl /etc/passwd | sed '3,$d' 添加行的例子如下： 12345$ nl /etc/passwd | sed '2a drink tea'1 root:x:0:0:root:/root:/bin/bash2 bin:x:1:1:bin:/bin:/sbin/nologindrink tea3 daemon:x:2:2:daemon:/sbin:/sbin/nologin 如果是要在第二行的前面插入，可以使用i: 12345nl /etc/passwd | sed '2i drink tea'1 root:x:0:0:root:/root:/bin/bashdrink tea2 bin:x:1:1:bin:/bin:/sbin/nologin3 daemon:x:2:2:daemon:/sbin:/sbin/nologin 如果要插入多于一行的内容，使用\来换行： 1234567$ nl /etc/passwd | sed '2a Drink tea or ......\&gt; drink beer ?'1 root:x:0:0:root:/root:/bin/bash2 bin:x:1:1:bin:/bin:/sbin/nologinDrink tea or ......drink beer ?3 daemon:x:2:2:daemon:/sbin:/sbin/nologin 以行为单位的替换和现实 将第2-5行的内容替换： 1234$ nl /etc/passwd | sed '2,5c No 2-5 number'1 root:x:0:0:root:/root:/bin/bashNo 2-5 number6 sync:x:5:0:sync:/sbin:/bin/sync 仅仅列出第5-7行： 1234$ nl /etc/passwd | sed -n '5,7p'5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin6 sync:x:5:0:sync:/sbin:/bin/sync7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown 注意这注意这里需要加上-n这个Flag。 数据的搜寻并显示 搜寻包含root关键字的行： 1234567$ nl /etc/passwd | sed -n '/root/p'1 root:x:0:0:root:/root:/bin/bash1 root:x:0:0:root:/root:/bin/bash2 daemon:x:1:1:daemon:/usr/sbin:/bin/sh3 bin:x:2:2:bin:/bin:/bin/sh4 sys:x:3:3:sys:/dev:/bin/sh5 sync:x:4:65534:sync:/bin:/bin/sync 将搜索到的行删除： 123$ nl /etc/passwd | sed '/root/d'2 daemon:x:1:1:daemon:/usr/sbin:/bin/sh3 bin:x:2:2:bin:/bin:/bin/sh 数据的搜寻并执行命令 这里说的命令也是指的sed命令。例如我们找到包含root的行以后，把bash替换成blueshell的方式如下： 12$ nl /etc/passwd | sed -n '/root/&#123;s/bash/blueshell/;p&#125;'1 root:x:0:0:root:/root:/bin/blueshell 数据的搜寻并替换 除了整行的处理模式之外， sed 还可以用行为单位进行部分数据的搜寻并取代。基本上 sed 的搜寻与替代的与 vi 相当的类似！他有点像这样： 1sed 's/要被取代的字串/新的字串/g' 例如我们要从ifconfig中获取IP部分： 12$ /sbin/ifconfig eth0 | grep 'inet addr' | sed 's/^.*addr://g' | sed 's/Bcast.*$//g'192.168.1.100 多点编辑 一条sed命令，删除/etc/passwd第三行到末尾的数据，并把bash替换为blueshell 123$ nl /etc/passwd | sed -e '3,$d' -e 's/bash/blueshell/'1 root:x:0:0:root:/root:/bin/blueshell2 daemon:x:1:1:daemon:/usr/sbin:/bin/sh]]></content>
  </entry>
  <entry>
    <title><![CDATA[ln]]></title>
    <url>%2Fknowledge-base%2Fprogramming%2Flinux-shell%2Fln.html</url>
    <content type="text"><![CDATA[本文转载自https://wangchujiang.com/linux-command/c/ln.html，其中可能新增加批注和额外讨论。 简介 ln：用来为文件创建链接。链接类型分为硬链接和符号链接两种，默认的链接类型是硬链接。如果要创建符号链接必须使用&quot;-s&quot;选项。 注意：符号链接文件不是一个独立的文件，它的许多属性依赖于源文件，所以给符号链接文件设置存取权限是没有意义的。 语法 1234ln [选项]... [-T] 目标 链接名 (第一种格式) 或：ln [选项]... 目标 (第二种格式) 或：ln [选项]... 目标... 目录 (第三种格式) 或：ln [选项]... -t 目录 目标... (第四种格式) 选项 12345678910111213141516 --backup[=CONTROL] 为每个已存在的目标文件创建备份文件-b 类似--backup，但不接受任何参数-d, -F, --directory 创建指向目录的硬链接(只适用于超级用户)-f, --force 强行删除任何已存在的目标文件-i, --interactive 覆盖既有文件之前先询问用户；-L, --logical 取消引用作为符号链接的目标-n, --no-dereference 把符号链接的目的目录视为一般文件；-P, --physical 直接将硬链接到符号链接-r, --relative 创建相对于链接位置的符号链接-s, --symbolic 对源文件建立符号链接，而非硬链接；-S, --suffix=SUFFIX 用&quot;-b&quot;参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，预设的备份字符串是符号“~”，用户可通过“-S”参数来改变它；-t, --target-directory=DIRECTORY 指定要在其中创建链接的DIRECTORY-T, --no-target-directory 将“LINK_NAME”视为常规文件-v, --verbose 打印每个链接文件的名称 --help 显示此帮助信息并退出 --version 显示版本信息并退出 参数 源文件：指定链接的源文件。如果使用-s选项创建符号链接，则“源文件”可以是文件或者目录。创建硬链接时，则“源文件”参数只能是文件； 目标文件：指定源文件的目标链接文件。 1234none, off # 不进行备份(即使使用了--backup 选项)numbered, t # 备份文件加上数字进行排序existing, nil # 若有数字的备份文件已经存在则使用数字，否则使用普通方式备份simple, never # 永远使用普通方式备份 实例 将目录/usr/mengqc/mub1下的文件m2.c链接到目录/usr/liu下的文件a2.c 12cd /usr/mengqcln /mub1/m2.c /usr/liu/a2.c 在执行ln命令之前，目录/usr/liu中不存在a2.c文件。执行ln之后，在/usr/liu目录中才有a2.c这一项，表明m2.c和a2.c链接起来（注意，二者在物理上是同一文件），利用ls -l命令可以看到链接数的变化【应该是第二列的数字】。 在目录/usr/liu下建立一个符号链接文件abc，使它指向目录/usr/mengqc/mub1` 1ln -s /usr/mengqc/mub1 /usr/liu/abc 执行该命令后，/usr/mengqc/mub1代表的路径将存放在名为/usr/liu/abc的文件中。 扩展知识 Linux具有为一个文件起多个名字的功能，称为链接。被链接的文件可以存放在相同的目录下，但是必须有不同的文件名，而不用在硬盘上为同样的数据重复备份。另外，被链接的文件也可以有相同的文件名，但是存放在不同的目录下，这样只要对一个目录下的该文件进行修改，就可以完成对所有目录下同名链接文件的修改。对于某个文件的各链接文件，我们可以给它们指定不同的存取权限，以控制对信息的共享和增强安全性。 文件链接有两种形式，即硬链接和符号链接。 硬链接 建立硬链接时，在另外的目录或本目录中增加目标文件的一个目录项，这样，一个文件就登记在多个目录中。 创建硬链接后，己经存在的文件的I节点号（Inode）会被多个目录文件项使用。一个文件的硬链接数可以在目录的长列表格式的第二列中看到，无额外链接的文件的链接数为1。 在默认情况下，ln命令创建硬链接。ln命令会增加链接数，rm命令会减少链接数。一个文件除非链接数为0，否则不会从文件系统中被物理地删除。【从这里来看，在创建硬链接后删除最初的文件，硬链接指向的文件会仍然存在】 对硬链接有如下限制： 不能对目录文件做硬链接。 不能在不同的文件系统之间做硬链接。就是说，链接文件和被链接文件必须位于同一个文件系统中。 软链接 符号链接也称为软链接，是将一个路径名链接到一个文件。这些文件是一种特别类型的文件。事实上，它只是一个文本文件，其中包含它提供链接的另一个文件的路径名，如图中虚线箭头所示。另一个文件是实际包含所有数据的文件。所有读、写文件内容的命令被用于符号链接时，将沿着链接方向前进来访问实际的文件。 与硬链接不同的是，符号链接确实是一个新文件，当然它具有不同的I节点号；而硬链接并没有建立新文件。 符号链接没有硬链接的限制，可以对目录文件做符号链接，也可以在不同文件系统之间做符号链接。 用ln -s命令建立符号链接时，源文件最好用绝对路径名。这样可以在任何工作目录下进行符号链接。而当源文件用相对路径时，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接。 符号链接保持了链接与源文件或目录之间的区别： 删除源文件或目录，只删除了数据，不会删除链接。一旦以同样文件名创建了源文件，链接将继续指向该文件的新数据。 在目录长列表中，符号链接作为一种特殊的文件类型显示出来，其第一个字母是l。 符号链接的大小是其链接文件的路径名中的字节数。 当用ln -s命令列出文件时，可以看到符号链接名后有一个箭头指向源文件或目录，例如lrwxrwxrwx … 14 jun 20 10:20 /etc/motd-&gt;/original_file其中，表示“文件大小”的数字“14”恰好说明源文件名original_file由14个字符构成。]]></content>
  </entry>
  <entry>
    <title><![CDATA[生物学]]></title>
    <url>%2Fknowledge-base%2Fscience%2F%E7%94%9F%E7%89%A9%2Findex.html</url>
    <content type="text"><![CDATA[物种目录 雨燕]]></content>
  </entry>
  <entry>
    <title><![CDATA[WATCH]]></title>
    <url>%2Fknowledge-base%2Fprogramming%2Flinux-shell%2Fwatch.html</url>
    <content type="text"><![CDATA[watch 命令以周期性的方式执行给定的指令，指令输出以全屏方式显示。watch 是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch 可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。 过去我经常手动写 while true; do some command; sleep 1; done来做这个事情，有点傻了。 watch命令的形式非常简单 1234567891011121314151617Usage: watch [options] commandOptions: -b, --beep beep if command has a non-zero exit -c, --color interpret ANSI color and style sequences -d, --differences[=&lt;permanent&gt;] highlight changes between updates -e, --errexit exit if command has a non-zero exit -g, --chgexit exit when output from command changes -n, --interval &lt;secs&gt; seconds to wait between updates -p, --precise attempt run command in precise intervals -t, --no-title turn off header -x, --exec pass command to exec instead of &quot;sh -c&quot; -h, --help display this help and exit -v, --version output version information and exit 其中最常用的是： -n：确定调用命令的间隔，单位是秒 -d: 高亮显示输出信息的不同之处 -t: 不现实标题 注意，FreeBSD和Linux下watch命令的不同，在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果，如：watch -n 1 -d netstat -ant，而在FreeBSD下的watch命令是查看其它用户的正在运行的操作，watch允许你偷看其它terminal正在做什么，该命令只能让超级用户使用。]]></content>
  </entry>
  <entry>
    <title><![CDATA[一神论和三位一体教理的战争]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E5%AE%97%E6%95%99%2F%E4%B8%80%E7%A5%9E%E8%AE%BA%E5%92%8C%E4%B8%89%E4%BD%8D%E4%B8%80%E4%BD%93%E6%95%99%E7%90%86%E7%9A%84%E6%88%98%E4%BA%89.html</url>
    <content type="text"><![CDATA[这篇文章转载、整理自上帝的基督教会。这是基督徒自己整理的材料，自然，作者的立场会影响到文章一些客观性，这里引述只做事实性参考，对于其价值判断，要持有批判性态度。 此外，文章中的一些人名、地名翻译与大陆通行版本不同，例如，君士坦丁被翻译为康斯坦丁，尼西亚会议被翻译作尼赛亚会议等等。这里我保留了原状。 最后，文章应该是翻译自其他语言的文章，受限于原翻译者的水平，其中有部分语句存在不通顺之处。如果之后我能找到英文原文，会尝试对其进行修正。 当康斯坦丁执政的时候，他试图把自己的帝国统一在同一个宗教之下，由此他想通过基督教完成他的目的。但是他并没有意识到罗马派别不是当时的主流教派并且教会教义是反对这些教会的渊源。在两种派别之间这种混乱导致了一系列的战争，其实这两教派的教义都是错误的。错误教义的结果和通过宗教来达到政治目的的渴望成为了一场不间断的战争和长达十七个世纪的迫害。错误和矛盾将最终把星球引向毁灭。 神不朽教会/和来自尼赛亚阿利乌斯教派间的斗争 公元314年在米兰的容忍法令颁布之后,康斯坦丁皇帝力图通过基督教来达到其政治目的以支持罗马政治集团,其中他们接受了神不朽思想的熏陶,后来又接受了古代意大利人的神学理论。教会的教义地位由于诺斯提教派的干扰变得模糊不清了,而后者曾受到神秘金色小牛的影响。康斯坦丁支持建立在错误理论基础上的神不朽派别,以为它在罗马占有主要的地位,是主流派别,但是阿利乌斯派的废王运动在亚历山大的会议上最终导致了康斯坦丁的副王,利斯尼乌斯开始战争,战争爆发于公元322-323年间。 康斯坦丁一世，此塑像位于位于英国约克大教堂广场 利斯尼乌斯的胜利,最终确立了他成为唯一的皇帝的地位。公元325年他在尼赛亚召开会议巩固了神不朽派别的地位(后来的天主教)。这种信仰尼克叫做尼克的信仰，但他的指令在康士坦丁堡在318年才推行。公元451年卡而色登的会议也是以康士坦丁堡在381年的信条为主,但其目的是假如一个错误的连贯性形象,尼赛亚会议的结果最终形成了基督教的三位一体教派。公元318年康斯坦丁安排了罗马主教和使徒家族的对话,这些主教是来自耶稣基督的家族。罗马教会的回应是将他们彻底的根除。）（见：圣女玛丽亚和耶稣基督的家庭(No。232)。） 尼赛亚会议的教规信条流失了。后来真正确定下来的只有20条，这20条引入了如下的失常情况：对与女性住在一起的神职人员制定一些住宿规定，例如，独身生活；强迫接受一神教派信徒（错误地叫做阿里乌斯派）和支持里擦尼哑的人的忏悔而遭受的迫害；建立主教管区的系统，对神职人员进行一定的束缚，禁止他们借钱给他人时收利息;允许敬拜者在星期和“复活节期间”站立着祈祷。 （事实上复活节的出现替代了逾越节）。从君士坦丁堡重组的信仰本身了对三位一体论很重要的二神论理念，并且还引入了失常现象，即基督是“神父仅有的儿子”，因此排除了选民是上帝的儿子的诺言。说道，当时在场的有318位主教。阿里乌斯经常被召到议会中，该议会很可能在神不朽论者统治考而多的公元325年5月20日召开。康斯坦丁在6月14日加入议会。为了达成一致，康斯坦丁加入了一群罗马军队，捉住了几个主教，赶走了阿里乌斯派，匈奴第二次来到这里。后来阿里哑被啊那发人出卖。6月19日商定信仰的象征。在8月25日结束了统治的时期。 三个月以后，也伏字从尼克回来，他将签署信仰的命令，伏多特来自老及，也签署了命令，后来又拒绝了联合他们。 在328年，康斯坦丁认识到，神不朽论不是主要的教派只是被分离出来的部分在帝国中受到了迫害,然后他又重新召回了五位一元神论的领导者。（这是违反章程的，但是这不仅是著名的一元论）一元论的主要的问题是它在圣经上出现，但没有被各民族认定。每一个民族都有自己的领袖，宗教体系。当民族服从上帝时，他们是光荣的。帝王对罗马的教会感兴趣。因此，他们也开始建立组织，想有自己的模型。结果罗马教会体系在雅利安人和基督教之间容忍了太阳教的异教体系，这样，没有一个信圣经的人不遵守这个体系了。这就是问题的实质。这就是为什么到今天他们还诋毁圣经中开启智慧的钥匙的文章，还要如大屠杀中那样毁灭受过良好教育的反对者。 康斯坦丁从来没有在神不朽教会里受过洗礼，但是在公元329年，在他生命快要到达终点之时，他被他极度尊敬的朱理安的亲戚施了浸礼，成了一神教派信徒，进而成为了一名基督徒。在那时还没有像罗马天主教或天主教教会类似的现象，因为每个人都和教会有关系，都是天主教教徒，也就是全能的。一神派论是最早的学说派别之一，这一点是不会忘记的。达尼克人的叫父（ANF）在几个世纪里也是一神派者，（见主的早期神学(No。127)）在二神论者中还有一个新的党派，有一个新的学说，是建立在异教三个唯一的基础上的，是从罗马的阿提斯神体系中派生出来的。在381年前，教理的人和三位一体主义还没有出现。康斯坦丁II和康斯坦丁尼尔斯也是后来的三位一体主义者所称的“阿里乌斯派信徒” 或“尤斯边尔斯”的一神教派信徒。当阿里乌斯派信徒 或尤斯边尔斯否认此事时，神不朽信仰者提及了这些群体。把他的名字写入他代表的集团,降低比不朽信仰者更老、更强大的教派的全部权利和重要性似乎是神不朽信仰者的一种策略。 这个派别相信基督创造了圣灵，如果这是正确的，那它的确是错了，但从他们的著作中这并不明显。或许这个错误的信念已经深深地植入了歌特人的脑海里，到了后期在西哥特人之中，在Toldeo就导致了Filioque条款罗马天主教党派的融合的体现。 神不朽论/阿里乌斯派的争论是可以理解的，基督教有了今天的神圣的体制。人文科学和古人类学更能说明仁爱，让我们来研究这个争论。 主要的人物是亚力山大和神不朽论的创始人、分别在312---328年和328---373期间支持神不朽论信仰者的亚力山大大帝的主教、阿里乌斯派（256---336）、阿斯特乌斯诡辩者（死于341年）和支持阿里乌斯派信徒和Eusebians 的Nicomedia的Eusebius（大约死于342年）。 遗憾的是，阿里乌斯派在西班牙的历史由神不朽论的信仰者来写，因此不可能有真实性。但是罗伯特和丹尼斯写了一篇题为早期的阿里乌斯教的实用性文章：拯救的形式（Fortress Press, Philadelphia, 1981）从这一文章中我们可以建立纯粹哲学的学说；很明显的是，这两个党派都是错误的。 阿里乌斯派的塔利亚的重建,是基于他们的对手过于的单纯化。整个世纪的历史,以神不朽的观点来看,是这样进行的: 对正统的教会的拯救由基督来进行，这是和圣父和圣子来完成的，具有上帝的品质。对阿里乌斯派的拯救也由圣子来完成：这也和基督有关——服从他的意志（Gregg &amp; Groh 第8页）。 神不朽论信仰者接受了圣子的生理结构，发展了圣子和上帝之间实体论的联系，使基理所应当地成为圣子和贤人，并赋予他神圣的全能（同上，以非所书第9章）。 考察权力的统治者，可以看到一元论有很大的重要性。事实上要感谢西历伏兰克的胜利，他系统的划分了不同的意见。要感谢利己主义的领袖，歌特人和汪达尔人，合如里人，布而古人和勒泊特人。在597年盎格鲁撒克逊人皈依之后，在664年，英国人受到他们的武力强迫而签订协议，于是就在Whitby皈依宗教了（参见Stephen Neill, Anglicanism, Pelican, London, 1965）。 就像一个阿里乌斯派的国王声明的一样，在简单的术语之中可以见到矛盾。古多倍里特布古拒绝了上帝（Encyc. Of Religion and Ethics (ERE), 卷1, 页782）。这是所有意见的根源，神不朽论者也是受到米力人的压力，才一定要改变神性的概念的。伏克丝——捷克迅承认了自己以前的错误（参见Cambridge Theological Essays, 第500页），即认为野蛮人的阿里乌斯派的理论是不重要的。后来他证实到西哥特人、伦巴第族的人以及汪达而人的阿里乌斯教只不过是在日耳曼人和罗马人对基督教存在的不同观念的教会斗争中的一个阶段（见 第783页）。这是一个很重要的事实，但还未较好地被研究过。日耳曼人起源于中东，尤其源于帕提亚帝国衰败之时，这一点历史学还未真正地探讨和解释过，这是因为三位一体信仰的人对高等教育学府存有一定的偏见。 在对阿里乌斯教派和神不朽论之间争论的研究中可以看到，教会现在包括两个拼命作对的教派，他们从事政治阴谋，相互进行迫害。在罗马的政治中处于中心地位的神不朽论者通过在政治和经济上掌握撒里安伏兰克Salien Franks的权利，最终是会胜利的。斗争的过程以及随之而来的部落的迁移对理解这些民族的本性和态度很重要。 唯一神论，日尔曼部落和哥特人 学说遇到了进退两难的局面，一个是官方的国家宗教，另一个是违背了基督的指示继续行使人民和军队的权力，因此该学说必须要被公开。奥古斯丁的著作第一次全面地用圣经的理论分析了军事力量。奥古斯丁是来自北非的一名思想家，他接受了浸礼成了一名基督徒，他的学校是用迦古太基语----希伯来语的变种，和拉丁语来授课的。公元373-383年期间，他是摩尼教和柏拉图学派的哲学家，他的妾在372年为他生了一个儿子。像所有的神不朽论信仰者一样，他在387年再一次被洗礼。Theodosius和米兰的安布罗斯一起掌握了神不朽论派别的罗马教会的政权（381年）。安布罗斯和奥古斯丁的合作对奥古斯丁遵循那个信条有一定的作用，在当时这对安布罗斯来说也是一次谨慎的尝试。 神不朽论和阿里乌斯派的争论导致了两者之间的相互迫害。歌特人和汪达尔人被称为&quot;阿里乌斯&quot;（歌特人的圣经382年记载）。女皇赶走了汪达尔人支援的歌特人以镇压在427年在非洲爆发的博尼费斯伯爵的暴动，过后不久就引起了这场争论。和他们一起的还有马克西母-----唯一神论（也叫阿里乌斯教派）的领袖。在428年，奥古斯丁必须要公开防卫神不朽论教派。 大约在330年，康斯坦丁准予汪达尔人（或西林人）的东德分支在多瑙河的右岸帕挪尼亚留居。在166-181他们一直住在西里西亚，并于271年打败了Aurilian，接着便住在了多瑙河的中部流域。这些所谓的日尔曼部落包含了东部的汪达尔人、艾伦人、 Sarmations、 Suevians、阿勒曼尼人、法兰克人（或法国人）、实际上不是德国人的勃艮第人以及西部的第族人或伦巴族人。Parsons, Remnant of Japeth (1767)引用了Procopius的论述，即艾伦人、Sauromatae 和Melancleni都是歌特人，而汪达尔人和东歌德族是源于同一祖先的（见 73页）。 伦巴第人在穿着和习惯上比德国人还要贴近盎格鲁撒克逊人，他们似乎是盎格鲁撒克逊人的分部。他们占领了从奥地利到意大利中部的领土，并且融和了凯尔特部落和也占领了现在的克罗地亚及其周边地区的东哥德人。勃艮第人（443年）最终会像瑞典的西部各州那样灭亡。这些州位于Valais日内瓦湖的侏罗纪的两边以及罗那和梢那河之间Rhone and the Saone（Historians History卷XVI, 第534页包括下一页）。更大的一部分已延伸到了现代的法国，一些地方延伸到了意大利的北部。第一个勃艮第王国由于皇室的不和以及王子的不良品行在534年已大部分瓦解了（同上，见 第535页）。东哥德人的王国在战争中连续失去了5个帝王之后，也在这时灭亡了。在536年，法兰克帝王利用了他们的弱点，恢复了Rhaetia，从此控制了所有的Rhaetia和赫尔维蒂领土，也就是现在的瑞士。 阿勒曼尼人定居在瑞士北部，阿尔萨提亚和巴登—乌尔滕堡和当地的法国-凯尔特人混杂在一起，他们也是沿着多瑙河，绕国黑海，从同一个地方过来的。法兰克人就像对当时居住在现在的法国北部的辛布里人、高卢人和凯尔特人那样使阿勒曼尼人隶属于他们。伦巴第族的人继承了东歌德人，继续统治意大利，但是在建立首都为Pavia-----Benevento的南方公爵领地之后，国内只剩下了很少的人，并于774年被法兰克人击败。南公国保持了两个世纪之久的独立性（第9部，第18页）。撒克逊人从斯堪的纳维亚分离出来，并像弗里斯兰人那样被查理曼大帝（768-814年）逼迫入侵了德国联盟。但是这并不意味着瑞士在天主教的统治之下。值得注意的是，当在Clotaire II 和在628年继承他皇位的儿子Dagobert的执政期间，赫尔维蒂属于信仰天主教的领地时，主教通常是可以像神职人员以及选举他们，之后又受到国王确认的普通人那样结婚的 (同上535页)。因此，甚至在该时代的晚期修道院生活和独身生活在信仰基督教的欧洲大部分地区是被排斥的。 瓦楞斯皇帝（364—378年）对汪达尔人转成信仰一神论的基督教是提供了支持。在这一段时间里，他们接受了基督教，他们没有被宽恕，因为新的康斯坦丁法令把宗教就像当作政权一样来维护。歌特人在这好久以前就成为了基督徒，他们似乎是该部落内的基督徒，又像是逃亡者。 由于一系列的原因，遵守安息日的一神论教会应该继续在法国、北意大利和整个欧洲的部落和群众中发展。第一个原因是在325年Nicea议会闭幕之后，康斯坦丁皇帝保护了从381年留在罗马天主教的神不朽论者。他要求于318年来到罗马的Desposyni的会议和罗马的主教进行会谈。这些基督的亲属要求新审定包括安息日、圣日、和新月的法规。他们想把耶路撒冷变成什一税的中心。有着罗马人的才能的主教、罗马教皇（当礼拜式中引出该短语时，刚开始所有的主要统治者都叫教皇）命令必须要剔除该举措，于是在318年开始反对基督的直系亲属(参见圣女玛丽亚和耶稣基督的家庭(No。232))。 一神论教派让Eusebius作为他们的发言人，并于327年Nicea议会闭幕之后的两年又重新受到关注。学说被叫做阿里乌斯思想，但是Arius仅是一个长老，甚至还没有加入Nicea议会。但是他常常被召唤作为该学说的逻辑学。，所谓的阿里乌斯教的学说，也就是基督创造的圣灵，在Arius和该派别的任何文章中并未得到证实（见索齐尼主义,阿里乌斯教派和一神论(No。185)）。 康斯坦丁帝王在临死前被Eusebius洗礼，成了一名一神教派信徒。他又重新合并了他自己领导的帝国，并于331年将帝国的皇宫移到了君士坦丁堡。他的三个儿子，康斯坦丁二世、Constantius II 和Constans争夺他的王位 ，但是康斯坦丁二世在340 年，在阿克微战役中，在和他的兄弟战斗时被杀死。从340年起，帝国又被分成两部分，Constans康斯坦斯控制西部帝国，Constantius II康斯坦提乌斯控制东部帝国。 在360年，匈奴人再次入侵欧洲，他们入侵了在376年属于俄罗斯的领土。在361年，背教者Julian试图在罗马推行异教学说，但遗憾的是他并没有成功。 匈奴人就是后来的斯基台人。在公元395年西奥多西娅死后他们蹂躏了整个小亚细亚，并与此同时在阿拉瑞克领导下的西歌德人在麦西雅和色雷斯地区兴起。阿拉瑞克在公元398年成为东部伊里亚人的统治者（参见 H.H., 卷 VII, 页6）。在公元第九世纪，匈奴人沿着多瑙河沿岸进攻欧洲同时斯拉夫民族从北部压迫（同上，卷20）。一部分这些人与在欧洲的德国波斯人结为一体被认为是大雅里安人种的集合体，并且与哥特人，其他一些“雅利安“部落（或许 这是从圣经书中结选出来的问题）一起被认为是美索不达米亚欧洲最大部落的渊源。 斯基台不是一个民族，它是由众多的部落组成的整体。斯基台部落的合成是一个单独行为。在公元五世纪初匈奴王巩固了这些敌对部落并且进攻了多瑙河左岸，最终占领了整个北部欧洲。尽管如此，匈奴人在公元五世纪初留在了欧洲，并且最终在公元九世纪重新迁居到东欧，并且被那里的东部部落所合并。 在364年，罗马帝国的东部，从多瑙河到波斯边境，都属于帝王瓦联的统治，他也是一神论主义者。在那时侯，天主教、世界教会和东正教大部分都是一神教派，除了罗马的异教会和在西部崇拜阿及斯，在东部以耶稣基督的名义崇拜阿多尼斯的Hellenised体系的异教部门以外（见圣诞节和复活节的起源(No。235)）。亚特兰大的西部到非洲的西北部都由瓦联领导。后来瓦联被东哥德人战败并打死在法国。出生在西班牙的伏多西继承了他的王位，他是第一个阿发那西人。在370年，他把比克人和西克人从英国驱逐了出去，但是在383年，古罗马军团开始撤离英国。该军团在帝王马克西母的带领下穿越海峡，攻占了高卢和西班牙。 381 年前，还没有一个皇帝是信仰三位一体教理的，当时三位一体教理还在形成阶段。他们在381年前一直都是一神论主义者，但背教者Julian除外。 一神论学说是建立圣歌（45:6-7）和希伯来书（1:8-9）中所阐述的神学思想的。以前的追随者，例如以列和李奥是第二世纪的。克特人、汪达尔人、艾伦人、素维人、赫鲁丽人,伦巴敌人,日尔曼人以及所有的北部民族支持了这个学说，即所有的北方民族（见在耶稣基督出现之前(No。243)）。这一直到325年的统治者尼可之前，还有很多的其他的民族。叶里西是这些统治者之一。二元论的异端学说也是源于这个长老会。 381年在君士坦丁堡，三位一体主义宣布其是源于Nazianzus的Gregory、Nyssa的Gregory以及Cappadocians Basil的神学论的。希腊人和罗马人已开始对这信仰进行破坏了。三位一体主义者为了告诉人们他们的学说起源更早和该学说的起源是和4世纪的Arius阿里安有关，错误地、不诚实地宣称该信条属于阿里乌斯教派。在阿里安、Nicomedia的Eusebius和比阿里安资格还要老的其他主教（当时不在Nicea，若要对逻辑事项提出建议，他门就会被召去）之后，三位一体主义者开始接受从属的一神论。三位一体主义者责备阿里安人相信圣灵是圣子创造的，事实上天主教会在6世纪接受了这个学说，但是希腊人拒绝了这一观点。所有信仰这观点是属于阿里乌斯教派的人都假装不诚实或不理解他们说的是什么。 伏多西（392 - 395）重新统一了帝国，但是在395年果那里和阿而卡杰继承了他的王位，帝国又很快又被分裂了。 在382年，伏多西一世把西哥特人迁入帝国，但是他们还是一神论主义者。特别是帝王瓦联让人民信仰一神论，而不是三位一体主义。歌特人、汪达尔人、阿蓝人、宿也人、黑陆立人、都是一神论主义者，因为这几个民族出了几名主教。在8世纪以前德国一直都是信仰一神论主义的。 有一些德国的民族（从420年）占领了欧洲中部的大部分地区。一神论的基督教被传到这些民族中。他们是531年从法国出来的，并于742 年信仰天主教。波尼法人和英国的撒刻丝民族加强了天主教在法国的统治。波尼法在754年在他第三次访问的时候被打死，因为他在716年和719年完全反对三位一体主义。 有趣的是，这个民族的名称是来自古代的占星术，或者来自巴比伦的传统。他们被称做“黑而木度人”，意味是“他和她的人民”，是和这个偶像的体系想适应的。就好象凯尔特人习惯在迦南人的火神Milcolm中把男子称为马尔科姆一样，一直到今天，他们还习惯称孩子们为赫尔曼。我们将称这些人民为吴尔人。他们几乎就是阿西而-波斯人，他们也有自己的宗教体系，这在后来的罗马的宗教体系里有记载，也是一个相同的起源。德国人离波斯民族很远，就象克而多特记载的一样，是数量最多的哈节克-波斯民族。盎格鲁撒克逊人以及从中东和他们一起来的部落似乎是伟大的帕提亚帝国的剩余群众，是犹太的同盟者，他们在本时代的第二世纪以前一直处于波斯人和罗马帝国之间的中间人。他们看来是希伯来的后裔，并且宣布自己是属于以色列遗失掉的十个部落，是在722年被亚述人从阿拉克迁移过来的。新约中所指的东方三博士可能就是来源于这些人。 歌特人和汪达尔人：沉重的压力 阿里可在386年成为了国王，并入侵了希腊。按照圣经的法规他消灭了那里的异教徒，他在398年被认为是阿费人。在401 年，他们入侵意大利，直到403年才停止。在406年，古竭力克（406-428年）成为汪达尔人的国王，并于同一年建立了布勒古人的王国。这些民族都是一神论主义者。勒巴特人事实上是盎格鲁撒克逊人的亲属，只是他们在500年单独地在欧洲从北向南迁移到多瑙河的北部。他们利用战争占领了意大利的北部。 东哥德人试图也到这里来，但是在406年他们被停留在斯里兰卡。但是东哥德人在阿拉带领下立即入侵罗马，也是在这一年，他在去南方的路上去世，被埋在不接纳河底。在410年，罗马人开始保卫意大利 。 哥特人由东哥德人和西哥特人组成，他们都是古籍人（或是大多数的哥特人）。人们开始从阿卡今的北方入侵积拉的领土。入侵遭到同族人的怀疑。关于进入欧洲的决议将在别处讨论。似乎最后的一部分哥特人向里海的东部进军，届时米堤亚人会代替他们。多瑙河的早期凯尔特人被叫做基别而泊列人，他们是欧洲最早的“边境外的民族”。凯尔特人的称呼、古代的希泰族人也叫Hatti or Kalti以及希腊人也把凯尔特人叫做Keltoi，这都不是偶然的。这一点将在其他的文章中讲解，以及他们的历史、起源。丹麦人和瑞典人一直都认为丹麦人是源于斯堪的纳维亚的哥特人，他是Humelus的儿子，名叫丹。 东歌德族人在378年瓦联去世以后还侵略了今天的南斯拉夫，后来他们又进军罗马。在395年，西哥特人在阿拉力克的领导下在Moesia和色雷斯发动起义。在398年，阿拉力克成为东义理拉的国王。（见H。H, Vol。 VII p。 6）为了保卫帝国，他们被丝结立空王塔洱阻止，但此时在于395年逝世的西班牙人Theodosius的带领下，神不朽论教派统治了罗马和教会。在公元406年12月31日，汪达尔人，撒尔吗特人，艾伦人，苏为亚人和阿勒曼尼人在匈奴人的攻击下一起迁移渡过莱茵河，后来汪达尔人和苏为亚人一起从巴挪呢亚再向前走，按着高卢人向西班牙迁移，在路上，他们在海地和奥地立定居下来。西班牙已被抽签的方式割分了，苏为亚人节伏通人赢得了海地和大部分的莱索拖和卡丝几里亚。汪达尔人的草原被重新命名。西面的啊兰人被西班牙合并，得到了路几大尼亚，但是后来也被汪达尔人分裂和统治，所以他们的名字后来消失了。苏为亚人和汪达尔人曾打过两次战争，并两次和哥特人发生战争，还和布而古特人发生过战争。三位一体主义的各民族在西班牙和黑鲁哩人发生过战争。苏为亚人占领了海地和大部分的莱索托和葡萄牙。因此葡萄牙人成了德国的南部和北部的一个种族，和那里的民族混在一起。 汪达尔人占领了西班牙，因此西班牙人信仰一神派思想。西哥特人在公元416年争服了西班牙的汪达尔人的王国。因此，在北部和西部的领土上也有三位一体主义。意大利宣称其信仰三位一体教理，但经常服从一神论。在418年，法兰克人在一部分的高卢地区定居了下来。在同一年，伏奥德拉一世成为西部哥特人的国王。接近425年时，那些被称做蛮夷人的三为一体主义者大部分迁移到了罗马的领域内。汪达尔人在意大利的西部，匈奴人在巴布尼，黑卢立人在大马世革，西哥特人和苏为亚人在葡萄牙和西班牙的北部。在他们被驱逐出欧洲的470年之前，欧洲的匈奴人一直居住在了巴布尼。 如上所述，匈奴人似乎已迁移到草原，成为了哈扎尔人的邻居，并一直呆在那里，直到在公元800年之后他们得到了现在的犹太人和哈扎尔人的官方支持重新占领巴布尼为止。特兰西瓦尼亚的守安息日的人事实上是来自Khazaria 哈扎尔和 Levedia利末的亚的匈奴人的游牧部落中的成员，在整个帕提亚帝国时期一直是属于异教徒建立的东方教会的，这种可能性不应被排除。（参见Grun, The Timetable of History, 3rd ed。, Touchstone, 1991, p。 30）(还有the foreword by Cox to R。 Samuel Kohn, Sabbatarians in Transylvania, [1894], CCG Publishing, 1998) 在425年，佤连记安三世成了西罗马的帝王。哥以杰利克在同年成为汪达尔人的国王（428-477年） 在公元429年，比克被从英国的南方赶走。在457年，在可列副德战役时由特在狠可丝特的领导下征服了英国人，占领了可恩特，并在那里留下来。在429年瓦列金成了西罗马的领袖（429-454）同一年可节力克在北美洲建立了汪达尔王国。在443年，他最后统治了罗马，美洲重新被三位一体主义统治。在433年,匈奴王（死于453年）成为匈奴人的领袖。在436年，罗马的最后的一支军队离开了英国。同年匈奴人击败了布垄王国。布隆人是入侵欧洲的一部分，他们也是游牧部落。在443年，阿勒曼尼日尔曼人(瑞士日尔曼人)定居阿尔萨斯。 在453年，匈奴王去逝，伏袄多里可二世成为西歌特人的国王（453-466），在他被谋杀之前一直都是国王。杀害他的是他的兄弟（466-484），后来成为他的接班人。为此，在455年罗马遭到洗劫。事情的实质是汪达尔人成了三位一体主义者。他们消灭了言语不恭者，这些人违反了第二条戒令，是极讨厌的。汪达尔主义是从这起源的；这就是圣权要消灭言语不恭的人。 伏尧达可在471-526年成为东歌德族的国王。 在这个时期伏尧达可二世一直做东罗马的帝王（死于450年），在450-457年玛而慈做帝王。457-474年列伏一世做帝王。457-481年熙而节力克做帝王。460年法国人入侵克哩。汪达尔人也在这一年消灭了罗马人的舰队。 在整个欧洲产生斗争的起因是这块肥沃的土地应属于哪一个民族。那时侯他们都是三位一体主义者，他们被自由贪娈的人们统制，他们因此而灭亡。 这一时期西方最后的一批帝王们是：歇为里（461-465）阿费米（465-467），阿离伯里（467-473），克里裁里（473-474），由里涅朴丝（474-475），罗木而阿伏古丝图里安(475-476)。西方的帝王们由于软弱的统制而灭亡。德国人奥得克尔（433-493）夺取了俄瑞斯忒斯的权力，并将他处死，接着也把他的儿子罗穆卢斯处死，并自称是意大利的帝王。 结果，西罗马帝国在她还未建立天主教的教会，还没有一个明确的对欧洲的政策的状况下就灭亡了。 对东方教派的镇压 在474年，解侬成了东罗马的帝王。（474-491）从此三位一体学说在东欧得到很大发展，并在476年，成为柏拉图主要的思想。三位一体主义是在451年哈里次多执政时形成的。诶必比特。考扑特丝的分歧也是这时期的事。483年，教皇西母蒲离慈把权力交给了伏力可丝三世（492年）。在484年，君士坦丁堡的族长Acacius被驱逐出教会，因此第一次引发了西方和东方的三位一体教会的分裂（484-519）。 在489年，东帝王杰侬推翻了基督教的聂丝多而和爱得丝的学说，建立了教会。491年，亚美尼亚的教会和罗马建立了关系，在498年，涅丝达立人在尼几比和皮而西定居。从耶路撒冷到亚美尼亚都不是三位一体的教会，但都遵守安息日。这些教会中还有爱节丝和皮丝害德的经书，但当时它们被禁止。安息日一直被传到中国（见: 所有社会的教会的分布,安息日的遵循(No。122)）。 这时的教父是：哥拉几（492-496），安那丝二世（496-498），西吗席（498-514）。哥拉几采用了圣礼书，忏悔录，圣歌，演讲词和祝词。在499年，罗马发行了关于选教父的法规。在500年，在三位一体的教会里采用了敬神用的香-这是第一次在基督教里采用。 迫害 在476年，汪达尔人的国王克以节力克把东喜慈力哑卖给了西哥特人的国王付达力克。在汪达尔人的国王的领导下，一神论者开始反对天主教，这是一个忍耐的例子，很明显地排除了偶像崇拜。在一神论和三位一体教会中的矛盾带有了迫害的性质。 三位一体教派或天主教/东正教一开始是很弱的，而一神论者也摇摆不定。这种状况一直到获得法国的撒利文的支持后才得以改善。在481年，黑而杰利克一世去逝，他的儿子可劳为丝继承了王位。在484年汪达尔人的古涅力可国王把王位交给了自几的侄子古木德（死于496年）。在486年，可劳为丝战胜了西呀那-最后的一个罗马国王。从此罗马在法国的高卢再没有势力了。 在这之前，Vahan Mamikonian 不久便于481----484年在亚美尼亚发动了起义，这成功地保卫了亚美尼亚在政治和宗教上的自由。这种自由对定居在金牛山上的巴而立人组建遵守安息日的教会是有帮助的。此外，一直到19世纪还发现巴而立人仍停留在东方。在第一次世界大战后，他们的后代被从亚美尼亚的领土上赶走。大约一到两百万人在1927年别克嗒十宣言后被赶走。驱逐的过程一直延续到欧洲的大屠杀，到1953年，直至斯大林的去逝。 欧洲的统一 从487到493年的这段时间内东歌德族开始了对意大利的征服。伏德力克在489年战胜了德国的奥达歇尔，重新回到别龙。493年，奥达歇尔向东哥德族投降，但被伏德力克杀死，随后伏德力克就建立了意大利的东哥德族王国，后又娶了可罗为丝的妹妹。在494-534年东歌德族占领了马耳他。500年，伏拉撒母德和伏得力克的妹妹结婚，并得到了西部的西慈立亚做为嫁妆。 在这一年，日尔曼人的一支在波西尼亚的玛可罗漫人入侵巴伐利亚，由此捷克人在波西尼亚定居。 在493年，可罗为丝和布而古的公主结婚。公主在496年加入基督教。在496年，他征服了阿而邙人。后来，他被洗礼。 在506年，阿拉里克二世建立了罗马法典，但是507年在卡蒲丝的战役中他战败了，并被克罗为丝杀害。可罗为丝后来和西哥特人连盟。西哥特人王国一直延续到711年。土路丝地区成了撒白太的重要地区，也是遵守安息日的重要地区，在十字军东征时期一直在土路丝伯爵的统治之下。 西哥特人也叫吧挪叟南人，这是从圣经和历史中得来的，尧喜扶和吗利哑还有别的孩子。这是所有遵守安息日的教会的一种长期的认识，是建立在新约基础上的。教会的历史中记载了基督的四个兄弟，并且也提到了他的姐姐们（马太福音 13：55；马可福音 6：3；对比文章圣女玛丽亚和耶稣基督的家庭(No。232)）。我们有了自己的非家的关点，就能理解他们为何赞成安息日制度了。（见：所有社会的教会的分布,安息日的遵循(No。122)）西班牙的北部Sabadell撒巴节尔城也是起源于遵守安息者或Sabbatati的。 西哥特人在418年定局在阿克为塔尼哑。他们当时反对汪达尔人和阿拉安人，也加强了自己在阿拉的势力。英国人一直到664年才接受了天主教，然后开始了以下的争论： 教皇最后的逾越节是罗马基督教权力的象怔。这个决定是克而特人和伊朗人做出的；但老的克而特人的追随者不抱大的希望。他们的国王和爱独阿而的公主结了婚。（David L. Edwards, Christian England, vol I. p.57） 爱德华声名：南伊朗的大部分地区接受了新的逾越节的日期。他们以前遵守的是以色列人的逾越节和发酵饼节，关于这一点我们会在有关凯尔特人的教会的文章里见到（见：四福音书的争论(No。277)）。主教科尔曼在讨论过该事情之后，回到了Iona，虽然Chad 和 Cedd像诺森伯兰的主教Tuda----一名南爱尔兰人，和英国人Eata---曾经被Aidan培养过的Lindisfarne的修道士一样遵守国教。此外，一种错误的说法是-这只是简单的关于逾越节的日期的争论。争论是关于以色列的两次逾越节，是遵守纪念伊师塔和阿施塔特的复活节的异教徒节日还是遵守纪念占星术的女神的复活节。这个节日的主题是星期五死，星期天复活，也结合了Attis神和阿多尼斯神的春节，过后又以伊齐基尔提及的Dumuzzi 或 Tammuz的形式出现（伊斯结书 8:14）。 改变的还有住棚节和安息日。事实上改变的还有整个凯尔特人的日历和饮食法规。爱德华兹还赞成所有以前的基督教的习俗。北方的爱尔兰人还是不能放弃旧的节日日期，就像Iona在716年前不能旧的节日日期一样。（同上,参见文章：圣诞节和复活节的起源(No。235); 金牛犊(No。222) 和在上帝教会保有安息日的历史上第四戒律所起的作用(No。170)） 位克多制定的逾越节的日期事实上只被采用了一部分。高卢人在514年同意了新的体制，可能是因为一神论最终占了上风，而爱德华兹到38才意识到这一点。凯尔特人变成了他们以前竭力反对的体系的维护者，这确实很滑稽。事实上，在12世纪爱尔兰正式归属英国，目的是要绝对清除目前仍存在的守安息日的人的信仰。当时的爱尔兰国王的举措造成了这种局面，他试图要求天主教徒在北方镇压人们对圣经的信仰。参与这次阴谋的主要的人物是玛拉熙，主教阿而玛。（见：最后的教皇：占卜者和玛拉基的检验(No。288)）。 奥古斯丁于597年来到，紧接着盎格鲁撒克逊人于598年转变了信仰，于是他们受到了战争的威胁，接着便在乌托白签定了协议（见尼而 ，11页）。有10000个盎格鲁人在他们的国王爱杰里伯特的领导下在肯特在异教徒的圣诞节中转变了他们的信仰。在716年之前英国也不是完全信仰天主教的，虽然在786年第一个教皇的使节说过要恢复异教惯例。阿而古因在信中写到：有一些人认为异乎寻常的巫术就像人喝醉了酒一样，不带任何忏悔和山说话一样（见同上 爱德华声明）。 天主教采取了对西班牙的控制。全西班牙都在天主教的领导之下，这是在西哥特人国王多列涛离开西班牙之后。由于基督教和伊斯兰教的原因西班牙在13世纪之前才成为遵守安息日的以色列人的住所。（阿里乌斯教的特点是采用的日历比38年前的日历早一些，这个日历一直被采用到11世纪）。从573年该国逐渐开始统一，曾经被定义为阿里乌斯教的教派在罗马的控制和管理之下了。586年西哥特人基本上都成了天主教徒。到590年罗马抛弃了自己的帝国专制。 历史学家认为天主教的百科词典是相互矛盾的，由于北非的入侵在427-429年，当时有80000人在克些力可的领导下，但是为了抵抗427年可拉扶人的起义皇后蒲拉瓷哑还是能把西哥特人派往非洲。和他们一起的还有马克西姆---一个一神论主教。八月宣言应该在428年出版。显然歌特人和汪达尔人在罗马一直和神不朽论信仰的天主教斗争，只不过在435-439年稍微平静了些。在429年他们入侵罗马。，这很显然是由于皇后Eudoxia请求Genseric让她从她和皇上Petronius Maximus的仇恨婚姻中解脱出来而造成的。 侵略开始了，汪达尔人很早就穿过了高卢，从此时起神不朽伦信仰者和天主教教派 开始编造整个时代的神话了。汪达尔人是一神论主义者，因此他们是打破旧习的，他们蔑视罗马国内完全形成的体系中的圣像和偶像以及早期的异教仪式和雕像。在409-411年他们首先在高卢破坏了这些偶像，待到达西班牙、非洲和罗马时又一一对它们进行了破坏。他们被视为异教徒的野蛮人，因此我们得到了vandalism这个词，意即故意破坏艺术的行为，但事实上他们只是歧视信仰调和论者的偶像崇拜的偶像破坏者。 他们或许已破坏了罗马，因为他们认为那里有偶像崇拜，但是在Leo的请求中他们变得仁慈了，并未对罗马进行破坏。 比得 赫林教授（History of the Sabbath, London 1636, 部分, 第五段落, 页数73-74）在其中写到：米兰人在很早以前 就遵守安息日，他们模仿东方习俗。 在510年法国的东南部分被意大利西哥特人占领，直到563年才停止。这个事实说明为什么Sabbatati在法国的南部、意大利的北部和西班牙的北部都存在。基督教在5世纪前一直都遵守安息日。在揶里米亚时代（约420年）虔诚的基督徒在周日只做了一般的工作（在以利的 怀特主教, Treatise of the Sabbath Day, p。 219; cf。 Augustine of Hippo NPNF First Series, Vol。 1, pp。 353-354还有, 所有社会的教会的分布,安息日的遵循(No。122) 第二页）。 在511年法国的国王坷拉威丝去世，他的王国被他的四个儿子瓜分。他的儿子们浮奥达里克一世（死于534年）；合拉达蔑尔（死于524年）；西尔节别尔特一世（死于558年和合拉达罗穆（死于561年），他们在粟阿所歇，巴黎，摩特茨和相应的爱尔兰大建立了法庭。在这段时间在阿而列的斯特西塞亚建立了修道院。修道院在三位一体主义的扩展中扮演了重要的角色。 在523年。特拉撒木德，汪达窿人的国王去世，他的儿子西列接力克即位（到530年）。在524年。西哥子穆德杀掉西列接力克，及儿子克罗威撒一世。东哥德人于525年在拉文纳Cosmedin建立了所谓的阿里乌斯派的洗礼池，即当今闻名的圣母玛丽亚洗礼池。 然而，伟大的Theodoric浮奥达里克于526年去世了，并葬于拉文纳。他的女儿阿玛拉斯维达成为意大利的代表(到534年)。 在527年Justinian I成为东罗马帝国的帝王，因此一系列针对哥特人、汪达尔人以及当时的一神论教会的不好的变化和动荡出现了，直到 590年才结束。在欧洲历史上更重要的一次转折是法兰克人成了三位一体主义者，这一事实有助于在欧洲建立天主教会。没有法兰克人他们就没有任何结果。我们现在将看到该行动麻木地向前逼近，一直到590年罗马帝国宣布成立。这个帝国持续了1260个年头，直到1850年才解散。 伊斯兰教和神圣的罗马帝国的决战 在529年Justinian关闭了位于雅典的有着千年历史的希腊哲学学校。这次行动宣称是反异教的，但有效地分散了新柏拉图主义者，并逼迫学者们去波斯和叙利亚，在那里一年之后在帝王Chosroes I浩斯罗耶一世（531-579年）的带领下波斯达到了知识的更高境界。教育的中心应该转移到伊斯兰教的地方，当它在下个世纪形成时是对三位一体主义的渗透。 在532年法兰克人推翻了勃艮第王国，这个王国曾占领法国和瑞士，奥地利的领土。别里匝力元帅在君士坦丁堡镇压尼基人的起义，拯救了优斯几尼安的王位。在他由于战败而被波斯人罢黜职位之后，从第一年就被号召。在533年别里嚓里消灭了汪达尔人王国并把北非改成尼扎尽洲。在534 年克伦多成为西部哥特人王国在西班牙的一元论主义者的首都（到711年）。在535年别里嚓里占领了哥特人在意大利的王国并留在那里，直到540年这才准许谱拉汪斯从哥特人那去法国，而涅阿袍里成为了维擦基王国的一部分。 在539年到562年。拜占庭帝国与波斯发生战争。这战争使哥特人停止了在意大利对拜占庭的统治，这在540年并在541年成为国王直到552年他的叔叔黑尔结芭德去逝后。在546年多基拉进驻了罗马（在 547年 离开了西班牙。）在这一年各巴族人建立了自己新的王朝并扩大了自己在拯救河边界以外的统治。在550年多基拉重新征服罗马，一元论主义者重新掌握了政权。在那一年土耳其的阿瓦尔人重新开始向西移民，斯拉夫民族迁移到摩克联布尔克。 波兰人定居在卡里查的西部乌克兰人也同样。在那一年瓦尔人加入基督教，遵循安息日，在瓦尔斯到11世纪的时候这个制度已经消失了处于婚姻制度之中的神职工作人员。哥伦比亚伊朗的在法国和意大利的传教活动从550年开始到615年。在这一年法国第一次出现了钟，它也是三位一体影响法国的标志。 在543年禁止实行奥利克。不论奥利克有没有趋向可诺基人，他和哥克撒扑一样重要。这是反萨巴达人联盟的一种行动。女王加达拉在548年去世。 在551年拜占庭消灭了歌特人的海上舰队。哥特人的国王达基拉在第二年被在拿尔撒（从478年到573年）的领导之下的维擦基人打死。在553年拿尔撒统一了拿吧里和维擦基，他成为最伟大的民族统治者。王位也在这一年被马克西姆创立。 在558年坷拉达尔一世，克拉维斯的儿子重新统治法国王国一直到561年，当法国重新被他的儿子们哈里别尔特，孔特拉穆，斯结别尔特和西里别里克瓜分的时候。在563年，撒巴达里昂的科尔特人哥伦比亚在荷兰建立了；并开始了检查。 在565年Justinian I去世，他的侄子游丝金即位（578年去世）。伦巴第人把维擦基人从意大利北部赶到南部，留在了拉闻纳。阿浮多一那的儿子阿里播音继承了他的王位。在阿瓦尔人的帮助下消灭了歌特人的王国，在568年在意大利的北部和中部建立了伦巴第王国。 在567年，西哥特人的国王力奥为可力德（到586年）把拜占庭人从西班牙的西部赶走了，并于 585年占领了西班牙。法兰克人的的王国被分割成奥斯特拉西亚，该地区包括洛林、比利时、莱茵河的右岸和Neustria（法国）和勃艮第 在570年，穆罕默德出生，创立了伊斯兰教。在572年，在波斯人和汪达尔人之间 发生了战争，在590年-628年在奥丝罗哑二世的领导下，伊斯兰于632年被教建。在632年通过了关于最后所进行的对第三世界的战争和政治划分。 在573年，克罗达拉西里别里可的儿子们和西里捏别尔参加了战争。 在590年，Agilulf（死于615年）继承了奥地利的国王伦巴第族的人Authari的王位；伟大的Gregory I教皇继承了Pelagius II别拉里教皇的王位。他宣布了罗马帝国的成立。在591年，考力班丝（生543年）从爱而兰来到了布列塔尼。Gregory在597年派使者奥古斯丁到英国为Kent的Ethelbert施行洗礼，并且在英国建立天主教体系。 在600年，暂时停止了对西欧的入侵。在这一年，Khazars在伏尔加河的下游和顿河的下游之间建立了他们的帝国。捷克人和斯洛伐克人定居在波希米亚和摩拉维亚以及塞尔维亚的南斯拉夫。欧洲已基本稳定了。虽然这是一个很快的过程，但却在600年使意大利的金融市场上出现了易货贸易。小的漏洞从印度经过小亚细亚进入了南欧。 随着欧洲逐渐地趋于稳定，信仰三位一体教理的人借助法兰克人和盎格鲁人，以及受自己的贪婪所驱使，开始对欧洲的统治阶层进行巩固。在600年Gregory执行了一项和平转变犹太人信仰的计划，于是他把圣经替换成图画书给没有文化的人。歌特式的圣经从351年开始兴起了。圣经的价值降低了，直到1850年神圣罗马帝国解体之后圣经最终彻底地脱离了罗马的群众。在603年伦巴第族的人开始转变成信仰罗马天主教。在609年，罗马的万圣殿如圣母玛利亚圆形建筑的教堂那样被视为神圣之建筑物。 随着欧洲的稳定，三位一体论开始把目光转向小亚细亚。在欧洲和拜占庭的发展过程中，一些状况会从以伊斯兰教形式出现的反应中浮现出来。 三位一体说的基督教在十世纪末从君士坦丁堡的希腊东正教结构传入到俄罗斯。可能，这完全是一种政治手段，如果是这个作用，那么南部的Khazars哈杂人和欧洲的乌克兰人都是一神论主义者，如同犹太人和基督徒一样很重视安息日。这就是在10世纪国民战争最好的解释。这样巴伏力人，在噶扑罗尼玛八世的统制下和法国人混和。晚期的约汗特丝亩克斯在10世纪。（见，文章，(No。122)）。事实上，欧洲基督教系统的决策是建立在政治之上的，这和基督耶酥建立的以及在圣经的文章里显示的的信仰没有联系。 从590年到1850年的1260年间。罗马-天主教在虚伪的前提下，基于希腊哲学和异教徒崇拜的体系建立了自己的理论。他们采用了异教徒的历法，导致了三位一体理论与每个已阅读或研究过圣经和神的律法的人们和部落相冲突。 因此，为了维护自己的权威，它引进了国家和国际的迫害和压迫体系，导致了整个欧洲和小亚细亚（后来在美洲）中成千上万个和平遵守律法的民众的灭绝。它对中东的入侵，也就是所谓的十字军东征，激起了伊斯兰教的仇恨，以至于它在半个世界中出现了两级分化。在20世纪中我们看到了反对欧洲的和平遵守律法的民众的战争仍继续向前推进，该战争预谋灭绝和屠杀了大量的欧洲犹太人和遵守安息日的人。这个事实将在下一篇文章中探讨 大屠杀:第五印的迫害。]]></content>
  </entry>
  <entry>
    <title><![CDATA[OLSR 路由算法原理]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Frouting%2Folsr.html</url>
    <content type="text"><![CDATA[LSR LSR为基于链路状态的路由算法。如何判断链路状态呢？在无线通信的环境下，只需要节点能够收到另一节点的包，就说明链路有效。另一方面，为了建立端到端的路径，路由算法需要发现并检查一跳由多个单跳链接组成的多条链路的可用性，这就需要不断的洪泛广播(flooding)来进行。这种洪泛的方式是非常浪费的。参加下面的例子： LSR 示意图 为了在网络中同步节点状态，需要各个节点进行洪泛广播，产生大量其实是存在冗余的通信。在能源受限的移动网络中是非常不经济的。OLSR通过有选择的洪泛转发(MPR: Multi-Point Relay)来解决这个问题。 OLSR OLSR 将 LSR 中简单的路由建立与同步过程切分成两部分：将邻居信息发现与维护同路由发现独立开来。 邻居发现 OLSR通过周期性地广播Hello消息来发现邻居，建立邻居表。邻居表表中记录一跳及二跳邻居节点的信息，节点间的连接也会被记录为单向还是双向。 Hello消息中包含发送节点的所有邻居即相关的连接状态(单向还是双向)。当节点收到的Hello消息中，对方已经将自己加入到邻居列表中时，说明二者之间的连接为双向。 通过Hello广播过程可以让网络中所有的节点都能知晓距离自己两跳及以内的邻居的信息。 基于邻居信息，节点可以选择出邻居MPR节点集合。一个节点选定的MPR是负责转发此节点的广播消息的节点。通过控制MPR集合的大小可以减少洪泛的开销。MPR选择分为两步： 首先选择能够覆盖「孤立二跳邻居节点」的一跳邻居节点。这里孤立二跳邻居节点是指仅通过一个邻居节点同目标节点相连的二跳邻居节点； 在余下的一跳邻居节点中，按照覆盖二跳邻居节点的数量从高到低依次选择，直到覆盖所有的二跳邻居节点。 MPR 选择算法 如上例所示。首先我们找出覆盖「孤立二跳邻居节点」1和5的A和E，将其加入MPR列表。此时1，2，3，5都被覆盖。在剩下的一跳邻居中，覆盖二跳邻居最多的B（3个）被加入MPR，然后是E，然后是G。当G被加入MPR后，所有的二跳邻居节点都被MPR覆盖。此时的MPR即为我们要选择的MPR全集。 MPR表会通过Hello信息同步给一跳邻居节点。这样每个节点能够建立本地的MPR Selector表，此表表明节点自己应该转发来自哪些节点的广播消息。 路由发现 邻居发现过程使用了Hello消息，路由发现则使用另一种格式的消息：Topology Control消息。TC消息的作用是为节点建立起全局的路由信息。只有MPR节点才会转发TC消息【需要注明的一点是：到底是MPR节点在收到TC消息以后是原样转发还是与本地的拓扑表合并以后发送本地拓扑表还存疑】。 TC消息中包含了发送者的MPR Selector【注意MPR Selector不是指一个节点的MPR节点集合，而是一个节点作为MPR应该转发来自哪些节点的消息】信息以及一个Sequence Number。 基于TC消息的交换，各个节点可以维护一个Topology Table（拓扑表），基于拓扑表节点可以计算出路由表（通过Dijkstra算法）。拓扑表的结构如下： Destination address Destination's MPR MPR SelectorSequence Number Holding Time Markdown中表格的语法 上述四项分别为： 目标地址 目标地址的MPR节点 Sequence Number 该条目的保持时间 上面提到TC消息中包含的是发送节点的MPR Selector列表。那么当另一节点收到TC消息时，将TC条目中的MPR Selector作为目标地址，则发送节点即为其MPR节点，然后填入TC消息中的Sequence Number，已经预定义的Holding Time。 我们考虑下面这个例子： 这个例子中，A，B，C三个节点均将M选择为自己的MPR节点，那么M会建立如下的MPR Selector列表： TC Originator MPR Selector MPR Selector Sequence M A 1 M B 1 M C 1 作为MPR，M会将其MPR Selector列表通过TC消息广播出去。当Y收到M发出的TC消息时，将TC消息中包含的MPR Selector信息转化成拓扑表 (Holding Time省略)： Destination address Destination's MPR MPR SelectorSequence Number A M 1 B M 1 C M 1 ... ... ... 注意对于一个收到TC消息的节点X而言，消息流的顺序是MPR Selector -&gt; MPR -&gt; X，那么反过来如果X需要向这个MPR Selector发送消息，则链条中的MPR节点就是到达目标前的上一跳节点。所以拓扑表中的第二列也会被称为Last-hop Address。故拓扑表中的每一行其实表明了网路中的一条链路。 网络中周期性的通过TC消息保持拓扑表更新，通过拓扑表使用Dijkstra算法即可获得路由表。 Further Reading OLSR路由协议工作原理 Optimized Link State Routing (OLSR) Mobile Adhoc Network Proactive Routing Protocol: 这是一个Youtube的介绍视频，有点印度口音，通过英文字幕倒是可以听懂。讲的还不错。]]></content>
  </entry>
  <entry>
    <title><![CDATA[车辆编队体系研究]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fplatoon%2Findex.html</url>
    <content type="text"><![CDATA[前言 车辆编队(platoon)是指多辆车，借助于车载传感器，车载计算机，车间通信系统等手段排成列或者更复杂的结构。编队系统可以减少车间距，提高道路承载能力。另一方面，基于空气动力学的特点，编队内车辆的阻力(aerodynamic drag)能够降低，从而降低能耗[1][2]。 本文的主体框架基于[3]。 编队的优势 以编队方式形式有如下优势： 编队内的车间距更小，故而可以提升道路承载能力(road capacity)，缓解交通拥堵。 由于空气阻力降低，行驶的能耗也得到了降低，汽车排放量也减少了。 在先进技术的辅助下，编队形式也能提升交通安全，提升驾驶/乘坐的舒适性、 由于编队内的相对位置固定，车辆间的协作通信应用的效率能够改进，提升车联网的性能。 Platoon as VCPS 这里的VCPS是指Vehicular Cyber-Physical System，CPS一般译为“赛博物理系统”，这个概念着重强调计算机及网络系统，与物理世界中的传感器和促动器(Acturator)的互动与联合。汽车编队可以视为是一种赛博物理系统。 Platoon as VCPS 从VCPS的角度看待编队系统，可以发现汽车编队的运动性能(mobility)和网络性能(VANETs)是彼此耦合，互相影响的。 文章条目 多编队系统 基于Platoon的车间通信(V2V)机制设计 Reference [1] M. Amoozadeh, H. Deng, C.-N. Chuah, H. M. Zhang, and D. Ghosal, “Platoon management with cooperative adaptive cruise control enabled by vanet,” Vehicular Communications, vol. 2, no. 2, pp. 110–123, 2015. [2] Han-Shue Tan, R. Rajamani, and Wei-Bin Zhang, “Demonstration of an automated highway platoon system,” in Proceedings of the 1998 american control conference. ACC (ieee cat. No.98CH36207), 1998, vol. 3, pp. 1823–1827 vol.3. [3] D. Jia, K. Lu, J. Wang, X. Zhang, and X. Shen, “A survey on platoon-based vehicular cyber-physical systems,” IEEE communications surveys &amp; tutorials, vol. 18, no. 1, pp. 263–284, 2016.]]></content>
  </entry>
  <entry>
    <title><![CDATA[移动组网路由协议梳理]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Frouting%2F%E7%A7%BB%E5%8A%A8%E7%BB%84%E7%BD%91%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E6%A2%B3%E7%90%86.html</url>
    <content type="text"><![CDATA[相比于固定节点，动态网络中各个节点的位置在不断的变化，因此全局路由表也在不断地变化。现有的动态路由协议按照是否存储和维护拓扑状态信息，可以划分为 拓扑路由 和 地理路由 两个类别。 拓扑路由 在拓扑路由中，移动节点利用拓扑信息来构建路由表或直接搜索路由。通常，拓扑路由协议可以进一步分为两类，即 主动路由 和 反应路由 。 主动式路由 在主动路由中，路由信息通过网络通信的手段周期性地更新。因此，每个节点可以维护包含到其他节点的路由条目的路由表。当数据包到达中间节点时，可以通过查找路由表来选择下一跳。 主动路由的典型代表包括: DSDV (Distance-Vector Routin Protocol) : 通过维护路由表，并对路由表使用Bellman-Ford算法来获取中继路径。这一算法主要贡献在于解决了循环路由的问题(Routing Loop Problem)。 OLSR (Optimized Link State Routing): TBRPF (): 这种路由方法理论上可以得到全局最优的中继路径，但是需要比较高的同步成本，这在越大规模的网络中越是明显。另外，一轮同步需要的延时过长也会影响路由的可靠性。 反应路由 在反应式路由中，节点不维护路由表。在需要时，源节点触发路由搜索过程以发现到目的地的路由路径。ad hoc按需距离矢量（AODV）路由和动态源路由（DSR）都被称为反应路由的代表性示例。反应路由协议仅维护当前正在使用的路由，从而在任何时候仅使用所有可用路由的一小部分时减轻网络负担。 但是，它们仍有一些固有的局限性。首先，由于路由仅在使用时保持，因此通常需要在通信对等体之间交换分组之前执行路由发现。这导致第一个数据包的传输延迟。其次，即使反应式路由维护仅限于当前使用的路由，当网络拓扑频繁变化时，它仍可能产生大量的网络流量。最后，如果到目的地的路线改变，则到达目的地的途中的分组可能会丢失。 混合式路由 通过利用主动式路由和反应式路由的长处和避免弱点，提出了混合拓扑路由协议，例如，区域路由协议（ZRP），主动维护k跳路由区域并被动地触发区域间路由发现，结合了本地主动路由和全局反应路由，实现了更高水平的效率和可扩展性。然而，即使是两种策略的组合，仍然需要至少维持当前正在使用的那些网络路径，对于在给定时间量内可以容忍的拓扑变化的量有所限制。 小结 主动协议通过网络节点之间发送的一系列定期更新（hello）消息来存储和维护拓扑信息。反应协议不会定期共享网络信息，而是在需要到达特定目的地时向其他节点发送路由请求消息（尽管它们通常会存储在此过程中找到的路由以供以后使用）。虽然主动协议保证在连接网络的地方，每个节点都会预先有到达特定目的地的路由，它们还需要存储和传输频繁的更新消息，这可能导致无线介质中的问题。另一方面，反应协议不需要连续共享拓扑信息，但不能总是保证在需要时路由可用，并且每次无法找到路由时都需要传输可能昂贵的请求消息。 地理路由 地理路由是一种无状态路由，其中节点通常不保持超出其1跳邻域的拓扑信息。因此，它比拓扑路由更适合于大规模网络，这通常需要网络范围的控制消息传播。此外，地理路由需要节点处的适度内存，因为它仅维护本地信息。然而，拓扑路由在交付成功概率和路由最优性方面表现出更高的分组传输效率。 地理路由的数据包不是基于身份或逻辑地址而是基于目的地的地理位置路由到目的地。这与主动和被动路由协议形成对比。拓扑路由中所有节点都需要存储有关整个网络的详细信息，具有高维护（在存储器和通信方面）以及在动态环境中依赖静态端到端路由的缺点。除了潜在的高通信和资源成本（无论是来自例行更新还是路由请求）之外，这些信息在使用时也有可能过时。这些缺点与具有高移动性的网络特别相关，如许多ad hoc网络和一些WMN的情况 地理路由协议（在大多数情况下）通过消除节点共享和存储拓扑信息的需要（节点仅存储可通过无线电直接访问的邻居的信息）以及减少对拓扑信息的依赖来帮助避免这些缺点。这降低了与共享信息相关的成本，并有助于减少在路由决策中使用过时信息的可能性。标准地理路由的一个重要特征是缺少端到端链路。不是尝试构建然后遵循从源到目的地的单个静态链路，而是在逐跳的基础上做出路由决策。这意味着当节点收到数据包时，它将检查其邻居表并选择最合适的邻居作为下一跳（基于某些地理标准）。因此，除了不需要昂贵的拓扑维护之外，地理路由还避免使用类似的昂贵的路由请求消息。这也意味着节点不必担心路径或链路中断，因为传统意义上的路径不存在，并且从同一源发送到同一目的地的数据包可能总是采用不同的路由，具体取决于网络状态。 虽然地理路由协议不存储网络拓扑，但为了运行它们仍然必须知道其他节点在物理上位于网络中的位置。此外，与一跳邻居节点共享的信息还必须确保非本地节点能够在他们希望向其发送消息时发现其位置。大多数地理路由协议都使用某种形式的位置服务，例如提出的网格定位服务。这允许他们以分布式方式确定目标的位置。通常，位置服务将由指定为位置服务器的节点（这些节点可以是WMN中的网格节点或WSN中的接收器）组成，其负责接收和存储某些节点（通常是固定地理区域内的节点）的位置。当源节点希望找到目的地的位置时，它将查询这些位置服务器。定位服务允许使用传统的转发机制（例如泛洪或地理转发机制）路由到目的地。 贪婪转发和面部路由是最早的两种地理路由策略，它们共同构成了许多后续方法的基础。 贪婪转发 贪婪转发是概念上简单的地理路由形式，其中数据包被转发到每一跳最靠近目的地的邻居。贪婪转发既易于理解和实现，又有效。然而，贪婪的转发有一个重大缺点; 当节点无法找到距离目的地较近的邻居时，它必须丢弃数据包。这样做是为了防止分组在（物理上）向后行进的环路的。 面部路由 部路由源自Compass II算法，其中使用称为“右手规则”（有时称为左手规则）的技术遍历平面图上的面，算法记录它从源到目的地穿过连接线的所有时间。一旦覆盖了整个面部，算法就会移动到距离目的地最近的一个交叉点上，然后通过算法继续进行探索，直到它最终到达目的地。 面部路由的主要优点是它保证了交付，但是缺点包括其可能的低效率，并且它依赖于平面子图，这使得人们对其在非平面环境（即节点不位于平面上的网络）的有效性产生疑问。基本面部路由的变体包括路径矢量面部路由（PVR），其允许节点存储有限量的局部面部信息；自适应面部路由（AFR）是基本面部路由的增强，旨在将成本联系起来找到最佳路线的目的地；有界面部路径（BFR），其中搜索的面部限于包含最佳路径的椭圆形状。如果算法击中椭圆，那么它将继续检查面部，但是在相反方向上，直到它再次撞击椭圆，然后移动到下一个面。反过来，AFR和BFR可以一起应用，以允许AFR限制区域BFR搜索。 小结 基于位置的路由算法通过使用附加信息消除了基于拓扑的路由的一些限制。它们要求有关参与节点的物理位置的信息可用。通常，每个节点通过使用GPS或其他类型的定位服务来确定自己的位置。定位服务被用于通过一个分组的发送方，以确定目标的位置，并且将其包含在分组的目的地地址。然后，每个节点处的路由决定基于分组中包含的目的地位置和转发节点的邻居的位置。因此，基于位置的路由不需要建立或维护路由。节点既不存储路由表也不传输消息以使路由表保持最新。基于位置的路由支持以自然方式将分组传送到给定地理区域中的所有节点。]]></content>
  </entry>
  <entry>
    <title><![CDATA[基于Platoon的车间通信(V2V)机制设计]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fplatoon%2Fplatoon-v2v.html</url>
    <content type="text"><![CDATA[编队内通信机制 为了维持编队结构，编队内部的成员需要周期性的交换其运动参数，即Beacon message dissemination。目前车联网通信的标准是WAVE。这里我们简要叙述一下WAVE的核心特点。 我们需要关注的WAVE的最为核心的两个标准是IEEE802.11p和IEEE1609.4。其中，前者规定了MAC层和物理层的标准，后者提供了多信道仿真的规范。WAVE在物理层上拥有7个信道，包括一个控制信道CCH和六个服务信道SCH。CCH上不能用于发送IP包。一般而言，控制帧和安全相关的重要信息在CCH上传输，而SCH用于传输非安全信息。依照IEEE1609.4的规定，信道访问时间被切分为100ms长的同步间隔SI，SI内部又分为50ms的CCH访问时间和50ms的SCH访问时间。 由于通信资源有限，当车流密度增大时，信道会出现拥堵，导致通信的可靠性(广播效率，丢包率)下降，进而威胁到行程安全。由于CCH信道只有一个且用于传输重要的控制和安全信息，所以研究者一般关注CCH上的通信性能可靠性。 另一方面，当车流密度很低时，CCH信道的资源会限制，不利用充分的信道利用。 以下是解决这些问题的常见策略： 引入非竞争协议（如TDMA）来保证Beacon性能 调节网络参数来优化性能（如调整Beacon间隔，竞争窗口大小等） 引入竞争协议 引入非竞争协议后，汽车一般会被分簇，在簇内由簇头来进行同步和通信资源分配，从而确保消息在发送时，发送者对于信道的独占，这样可以最大程度地保证消息发送的可靠性。不过，这种机制的缺陷还是很明显的： 协同和资源分配的机制一般比较复杂 引入了额外的Overhead开销 在大规模网络环境下难以使用，例如涉及到多跳问题时，TDMA的同步和资源分配机制的实现复杂度会远远高于单跳场景。很多文章都是假定簇的大小不会超过单跳范围来规避这个问题。 在大规模网络环境下，另一个问题是时隙资源不够划分之后采用如何策略来保持性能和网络公平性 动态调节网络参数 这类方法通常不需要对WAVE原有的协议作出大的修改，也不需要同步和协同，可以进行本地决策。不过其缺点在于为了得到网络环境与待调节的网络参数的关系，需要使用非常复杂的数学模型工具。 基于具体业务形态的设计 很多研究都是着眼于提升网络的整体性能，而非聚焦到具体的业务场景。例如在编队场景中，为了改善网络的性能，可以考虑编队的拓扑结构。这一方面的研究还比价少，不过这类研究也比较困难，因为车联网中的具体业务还很少，如何构合理地构建业务场景其实是缺乏一个坚定的共识的。 编队间通信机制 车里编队间的通信问题是一个更加宏观的问题。在编队内部我们可以拥有一个非常稳定的拓扑结构，因而可是实现一些需要很高的协同性支持的机制。而在编队间通信问题上，我们就需要处理一些传统车联网场景关注的问题，如VANET connectivity以及链路质量。同时，数据分发过程中的路由问题也需要考虑。 VANET connectivity 目前对于车联网中车间通信的网络连接性的问题还是主要围绕着自由车辆（即非编队车辆）进行[1]，一般的结论是随着车流量的增加VANET的连通性能够得到改善。[2]中讨论了基于编队系统的车联网连通性问题。作者从VCPS的角度来讨论这个场景下的问题，这意味着对于运动和网络性能的联合分析。这也是分析网络连通性的通常做法。 双向道路上的多编队系统示意图 Platoon Dynamics 在[3]中发现，在采用predeccessor-following的控制策略，即每辆车只知道前方车辆的运动参数的情况下，越接近编队尾部的车辆的运动扰动就会越大。因此，编队内的车辆除了需要知道前方车辆的运动参数以外，还需要了解编队Leader的状态l，即predeccessor-leader策略[4]，方能维持一个比较稳定的车间距。Leader的状态可以通过VANET通信来获取。这一思路延续下来的产物是CACC[5]。 Architecture 这里介绍的是[2]中提出的架构。 基于platoon-based VCPS的角度，我们可以将问题拆解成下面两个过程： networking/communication process; the platoon mobility process. 这里要讨论的架构的主要作用，就是描述这两个过程的运作，及两者的相互作用。这里提到的相互作用可以通过下面两个例子来说明： 考虑碰撞预警应用，其中每辆车周期性的发送自己的运动信息，提醒周围的车辆避免碰撞。当编队规模小，编队间距大的时候，通信过程中的冲突和碰撞少，因此延时和丢包率性能好。反之，如果编队规模大，编队间距小，则通信情况会恶化。 考虑CACC系统，CACC依赖VANET来交换周围车辆的运动信息。这里CACC可以建模成网络控制的控制系统。当丢包率提升时，控制系统的可靠性也会下降[6]。 Architecture for platoon-based VCPSs Mobility Specification 自由车辆 我们考虑双向一车道的场景，即不存在超车的场景。编队系统由自由随机运动的交通流(Individual Random Trafic Flow)构建而来。为了建模这个自由随机运动的场景，我们选择Time Headway这个统计量来作为描述车流分布的基础统计量。 Time Headway定义为同向行驶的两辆相邻的车通过同一个观察点的时间差。一般认为Time Headway是独立同分布的随机变量。对于Time Headway的研究非常早了，也有非常多的模型可以使用。其中比较经典的是指数分布模型，正则分布模型，Gama分布，Log-normal分布。[7]中提出，在车流量大约在700到1700 (vph)之间时，Log-normal模型的比较适用。并且，在NGSIM Trajectory Data数据集中，Time Headway也是服从Log-normal分布的。因此在这里我们采用Log-normal分布来描述Time Headway: \[\begin{equation} f\left(t_{h} ; \mu, \sigma, \tau\right)=\frac{1}{\sqrt{2 \pi} \sigma\left(t_{h}-\tau\right)} \exp \left(-\frac{\left(\log \left(t_{h}-\tau\right)-\mu\right)^{2}}{2 \sigma^{2}}\right), \quad t_{h}&gt;\tau \end{equation}\] 其中，\(t_h\)是Time Headway，\(\tau\)为Time Headway的最小值，\(\mu\)为规模参数(Scale Parameter)，\(\sigma\)为形状参数(Shape Parameter)。根据这个分布可以得到均值和方差： \[\begin{equation} \mu\left(T_{h}\right)=\tau+e^{\mu+\frac{1}{2} \sigma^{2}} \end{equation}\] \[\begin{equation} \sigma^{2}\left(T_{h}\right)=e^{2 \mu+\sigma^{2}}\left(e^{\sigma^{2}}-1\right) \end{equation}\] 在交通流的稳定状态下，假设车辆速度大致相等且为常数\(V_{stb}\)，那么可以得到Distance Headway: \[\begin{equation} s_{h} \approx v_{s t b} t_{h} \end{equation}\] 显然，\(s_{h}\)也是服从Log-normal分布的。另外，我们假设结成编队以后，在一个编队内部的车辆的速度是相同的，为\(v_{stb}\)。 编队内运动 上面考虑的是自由车辆模型，考虑车辆组合成编队的情况。首先作如下的符号定义： 符号定义 其中： \(P^i\)表示第i个编队 \(C_j^i\)表示在第i个编队中第j辆车。 \(s_j^i\)为编队内的车辆\(C_{j-1}^{i}\)和\(C_{j}^{i}\)的间距 \(S_i\)为编队\(P^{i-1}\)和\(P_i\)之间的距离。 为了简便，在后面的讨论中只涉及单编队时我们隐去\(i\)上标。完整的符号表如下： 变量查询表 编队内部的运动模型最常用的是car-following model，可以有效地描述ACC-equipped编队运动[8]。在这里我们认为除了Leader之外所有的车辆都遵从car-following model。具体的，我们选择Intelligent Driver model(IDM)[9]: \[\begin{equation} \label{5} s_{j}^{*}(t)=s_{0}+v_{j}(t) T_{0}+\frac{v_{j}(t) \Delta v_{j}(t)}{2 \sqrt{a b}} \end{equation}\] \[\begin{equation} \label{6} a_{j}(t)=a\left[1-\left(\frac{v_{j}(t)}{v_{0}}\right)^{4}-\left(\frac{s_{j}^{*}(t)}{s_{j}(t)}\right)^{2}\right] \end{equation}\] 其中\(s^*_j(t)\)为与前车的目标间距。根据\(\eqref{5}\eqref{6}\)，可以推导出稳定状态（即\(a_j(t)\)为0）的车间距: \[\begin{equation} s_{s t b}=\frac{s_{s t b}^{*}}{\sqrt{1-\left(\frac{v_{s t b}}{v_{0}}\right)^{4}}}=\frac{s_{0}+v_{s t b} T_{0}}{\sqrt{1-\left(\frac{v_{s t b}}{v_{0}}\right)^{4}}} \end{equation}\] 对于编队的Leader，我们则假定他们的行驶速度处于稳定状态，即速度为恒定为\(v_{std}\)。 Networking specification 假设所有车辆的通信距离相通，为\(R\)。在网络连通性问题上，只考虑通信距离这一最主要因素。只要辆车间距小于\(R\)，两者之间的通信就被认为是是可靠的。 在[2]中，作者还进一步修改了MAC层的行为： 对于单播包(Unicast)，当发送尝试访问信道时，若信道繁忙，将发送过程推迟一段时间，这段时间由竞争窗口决定（即一轮backoff）。如果没有收到ACK，那么将竞争窗口加倍； 对于广播报，不进行重传，只进行一轮backoff。 网络拓扑方面做出如下假设：编队内的车辆可以直接进行通信，Leader负责管理编队，同时扮演网关的功能（接收前方编队的消息并转发给编队成员）。编队的Leader可能被选为Message Carrier来转发来自对向行驶的车辆信息。编队尾部的车负责和后方的编队通信。 拓扑结构 基于上述拓扑，设定对应的车辆通信行为规则： 编队内：所有消息可以直达 编队间：如果编队之间可以进行通信（即前一个编队的尾部车辆可以和后一个编队的头部车辆通信），那么直接由尾部车辆向后方广播消息即可。如果编队之间不能直接通信，那么尾部车辆会先从对向车道中选择距离后方编队最近的车辆来转发信息。如果这样的转发者也无法直接和目的节点通信，那么他会继续向其前方边度转发消息。直到无法继续转发或者被最终目的节点收到为止。这个过程如下图所示： 编队间信息传递过程示意图 Connectivity Analysis 连通性分析的核心在于得到编队间距离的分布。 编队间距离分布 为了简化分析，假设所有编队的组成都是一样的。即拥有相同的编队大小和IDM参数（此时我们可以再次略去编队上标号）。基于“符号定义”那张图，编队间距可以表示为： \[\begin{equation} S=S_{L}-L \end{equation}\] 进而有如下引理： Lemma1: Assume all platoons are formed uniformly and controlled by IDM, inter-platoon spacing is lognormal distributed in the traffic steady state with all platoon leaders driving at the same velocity \(v_{stb}\). (证明过程略) 基于这个定理即证明过程的推导可以得到下面的关系： \[\begin{equation} f_{S_{L}}(x)=\frac{1}{\sqrt{2 \pi} \sigma_{D}(x-L)} \exp \left(-\frac{\left(\log (x-L)-\mu_{D}\right)^{2}}{2 \sigma_{D}^{2}}\right), \quad x&gt;L \end{equation}\] \[\begin{equation} f_{S}(x)=\frac{1}{\sqrt{2 \pi} \sigma_{D} x} \exp \left(-\frac{\left(\log (x)-\mu_{D}\right)^{2}}{2 \sigma_{D}^{2}}\right), \quad x&gt;0 \end{equation}\] 编队间通信延时 相邻编队的时隙重叠问题 若编队内采用了TDMA的方式进行通信，那么相邻的编队之间的时隙可能发生重叠。在[10]中，作者提出了一种解决这一问题的方法，流程如下： 相邻编队的时隙分配机制设计 在[10]中，作者考虑了编队和自由车辆同时出现的场景，其中编队内发送Beacon时采用TDMA的方式，编队时隙位于CCHI的头部，自由车辆在这一段时间内不允许发送。如果相邻的编队的距离靠的太近（如上图(a)所示)，那么就可能发生时隙碰撞。在这个场景下，如上图(b)中显示，编队A和编队B的时隙分配发生了重叠。重叠时隙内的汽车发送时，会由于CSMA的退避机制导致延时增长以及碰撞。 另一个潜在的问题是隐藏终端问题。即便两辆车彼此之间不会感知到对方，但是在两者通信范围的重叠区域，两者的包会发生冲突，从而无法被重叠区域内的车辆收到。如同上图(c)中的情形，尽管A0和B0两两者互相无法感知对方，如果两者同时发包，中间重叠区域的A1 ~ A4都无法收到。 为了解决这两个问题，作者提出了一种Self-Configuring的时隙分配方式。编队的Leader需要首先确定是否在相邻的编队间出现了时隙重叠，这个确认过程如下：在每个CCHI，编队的Leader会广播一个包含了时隙分配信息的包。如果编队成员正确地收到了此包，那么他们遵循Leader的安排在对应的时隙发包。此时，在正常情况下，Leader应该受到所有成员发送的Beacon。反之，如果Leader在连续若干个CCHI（至少两个）内都发生了Beacon丢包，Leader就会推定这种丢包现象是由于时隙重叠导致的。 在Leader确认发生了时隙重叠以后，Leader会自适应地重新安排TDMA时隙，暂时选择重叠的时隙的下一个时隙。当没有重叠的时隙安排时，Leader会重置到最初的时隙安排。 上一段话中描述的重新安排重叠时隙的方式翻译自原文，不过我觉得这里有点问题： 时隙重叠是对称的，即A编队和B编队的时隙分配发生重叠时，双方的Leader都能检测到冲突，双方同时开始调整，反而使得原来的重叠时隙空出来。 “选择重叠的时隙的下一个时隙”这个做法也含糊。按照情况分析，应该是将时隙序列整体往后移动一个时隙的长度，但是发生重叠的时隙可能不止一个，而且重叠的时隙并不一定连续，那如何处理呢？ 我对这里的这个机制持怀疑态度，作者在文章中也并未从理论和仿真的角度验证这个机制的有效性。出于严谨，读者最好参阅原文中的Section V-C 我们还需要考虑下面的两个问题： 当两个编队A和B同向行驶且距离较近时，前方的编队A保持其时隙结构不变，后面的编队B将其时隙延迟到A的时隙之后（如上图(e))来避免碰撞和隐藏中断问题。这是因为在前车数据的重要性要比后车的重要性高。另一个原因是后方编队的Leader检测时隙重叠的速度更快（例如前方编队的Leader不会受到隐藏终端问题的影响）。 当编队A和B是反向行驶交会时，当两个Leader的间距小于通信距离，Leader发送的包会发生冲突。根据文章中的机制设计，在CCH信道上编队的TDMA时隙结束后的CSMA通信过程中，Leader还有一个机会发送Beacon包。此时，哪方先收到了对方的Beacon，哪方延后其时隙安排。 用混合协议解决编队间通信 这里的混合协议是指TDMA和CSMA的混合协议。 Reference [1] S. Yousefi, E. Altman, R. El-Azouzi, and M. Fathy, “Analytical model for connectivity in vehicular ad hoc networks,” IEEE Transactions on Vehicular Technology, vol. 57, no. 6, pp. 3341–3356, 2008. [2] D. Jia, K. Lu, and J. Wang, “On the network connectivity of platoon-based vehicular cyber-physical systems,” Transportation Research Part C: Emerging Technologies, vol. 40, pp. 215–230, 2014. [3] P. Seiler, A. Pant, and K. Hedrick, “Disturbance propagation in vehicle strings,” IEEE Transactions on automatic control, vol. 49, no. 10, pp. 1835–1842, 2004. [4] R. Rajamani, S. Choi, J. K. Hedrick, and B. Law, “Design and experimental implementation of control for a platoon of automated vehicles,” in Proceedings of the asme dynamic systems and control division (1998), 1998. [5] P. Fernandes and U. Nunes, “Platooning with ivc-enabled autonomous vehicles: Strategies to mitigate communication delays, improve safety and traffic flow,” IEEE Transactions on Intelligent Transportation Systems, vol. 13, no. 1, pp. 91–106, 2012. [6] C. Lei, Van EenennaamE., W. K. Wolterink, G. Karagiannis, G. Heijenk, and J. Ploeg, “Impact of packet loss on cacc string stability performance,” in 2011 11th international conference on its telecommunications, 2011, pp. 381–386. [7] D.-H. Ha, M. Aron, and S. Cohen, “Time headway variable and probabilistic modeling,” Transportation Research Part C: Emerging Technologies, vol. 25, pp. 181–201, 2012. [8] A. Kesting, M. Treiber, and D. Helbing, “Enhanced intelligent driver model to access the impact of driving strategies on traffic capacity,” Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences, vol. 368, no. 1928, pp. 4585–4605, 2010. [9] M. Treiber, A. Hennecke, and D. Helbing, “Congested traffic states in empirical observations and microscopic simulations,” Physical review E, vol. 62, no. 2, p. 1805, 2000. [10] B. Liu, D. Jia, K. Lu, D. Ngoduy, J. Wang, and L. Wu, “A joint control–communication design for reliable vehicle platooning in hybrid traffic,” IEEE Transactions on Vehicular Technology, vol. 66, no. 10, pp. 9394–9409, 2017.]]></content>
  </entry>
  <entry>
    <title><![CDATA[多编队系统]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fplatoon%2Fmulti-platoon.html</url>
    <content type="text"><![CDATA[综述 这里说的多编队系统是指研究道路上多个相邻的编队系统组成的系统。编队之间的互动，以及如何协调编队间互动与编队内互动是这一系统的主要挑战。这里的互动可以指通信层面，运动层面，或者是对二者进行联合设计。 Reference]]></content>
  </entry>
  <entry>
    <title><![CDATA[Wireless Access in Vehicular Environments (WAVE)]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Findex.html</url>
    <content type="text"><![CDATA[WAVE的全称是Wireless Access in Vehicular Environment，是目前车联网通信的标准。 WAVE协议内容及特点 WAVE标准中的Beacon性能简化分析 IEEE802.11 DCF中Basic Access和RTS/CTS机制的理论饱和吞吐率性能差异分析 WAVE中的SCH调度机制研究状况 通信范围模型探讨 ns3中的wave模块 ns3中的Attribute系统的使用 无线技术大讲堂：这是一个知乎专栏的，里面涉及到了非常多的802.11协议内容分析 CWNP系列教材下载 延时分析 动态控制发送速率 马尔科夫链在WAVE网络性能分析中的应用 三维马尔科夫链的详细调研 二维马尔科夫链的详细调研 一维马尔科夫过程的使用 更多文献调研 多信道机制调研]]></content>
  </entry>
  <entry>
    <title><![CDATA[延时分析]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Fdelay-analysis.html</url>
    <content type="text"><![CDATA[在这篇文章中，我们利用之前提到过的二维马尔可夫模型针对传输延时进行分析。这篇文章主要参考了[1]这篇文章。该文章内的马尔科夫链中的变量定义和[2]中的有点不同。我们先梳理一下[1]中马尔科夫链。 二维马尔科夫过程 对于使用IEEE802.11 DCF机制的节点的退避过程，可以用如下图所示的二维马尔科夫链表示： 二维马尔科夫链表示 其中状态变量定义为\(\{s(t), b(t)\}\)，\(s(t)\in \{0, 1\}\)代表车辆是否有包等待发送。\(b(t)\in \{0, 1,2, \dots, W_e-1\}\)代表了退避计数器的值。进而马尔科夫链的转移概率为： \[\begin{equation} \left\{\begin{array}{l}{P\{0, k | 0, k+1\}=1-p, k \in\left[0, W_{s}-2\right]} \\ {P\{0, k | 0, k\}=p} \\ {P\{0, k | 0,0\}=p\left(1-G_{t}\right) / W_{s}} \\ {P\{1, k | 0,0\}=p G_{t} / W_{s}} \\ {P\{0, k | 1, k\}=G_{s}} \\ {P\{1, k | 1, k\}=1-G_{s}}\end{array}\right. \end{equation}\] 上面的公式中除了第一行，其他情况下\(k\in \{0, 1, 2,\dots,W_s - 1\}\)。\(G_t\)和\(G_s\)为恒定，且独立的值。 \(p\)为信道被感知为繁忙的概率（probability when a busy channel is sensed）。 \(G_t\)为安全消息在非竞争段产生的概率（在此区间内改包没法马上发送），\(G_s\)为安全消息可以进行发送的概率（即在竞争段产生的概率）。由于安全消息的生成速度是均匀的，则 \[\begin{equation} G_{t}=\frac{T_{t}+T_{\mathrm{SCH}}}{T_{\mathrm{CCH}} + T_{\mathrm{SCH}}} \\ \end{equation}\] \[\begin{equation} G_{s}=\frac{T_{c}}{T_{\mathrm{C} \mathrm{CH}}+T_{\mathrm{SCH}}} \end{equation}\] 我们进一步解释一下转移概率的各行的含义： 退避计数器减一，对应感知到信道空闲 退避计数器不变，对应感知到信道繁忙 退避计数器从0到k，s(t)的值不变为0，从概率计算的形式来看，是感知到信道为繁忙，且包生成的时间在竞争段。 退避计数器从0变成k，s(t)的值从0变成1， 从概率计算的形式来看，是感知到信道繁忙，且包生成在非竞争段（这时没法立刻发送），这个包进入等待队列。 s(t)变成0，意味着原先缓存的包现在可以参与发送了。 s(t)不变，对应当前时隙仍然不允许发送。 记平稳分布为：\(b_{i, k}=\lim_{t \rightarrow \infty} P\{s(t)=i, b(t)=k\}\), \(T&#39;_{ss}\) 为平均服务时间（排队论里的概念），那么任意车辆在任意时隙里面发送的概率是 \[\begin{equation} P_{\mathrm{uns}}^{\prime}=b(0,0)\left(1-e^{-\lambda_{s} T_{\mathrm{ss}}^{\prime}}\right) \end{equation}\] 发送延时 发送延时 有如下几个部分构成： 退避延时：\(T_{\mathrm{sf}}\) 传输延时(Transmission Delay)：\(T_{st}=L / R_{d}+T_{\mathrm{DIFS}}+\delta\)，其中\(\delta\)为信道传输延时(Propagation Delay) 队列等待延时：\(T_{sq}\) 总的延时为：\(T_{\mathrm{sd}}=T_{\mathrm{sq}}+T_{\mathrm{sf}}+T_{\mathrm{st}}\)。根据上面的马尔科夫过程，我们可以得到退避延时为： \[\begin{equation} \begin{aligned} E\left[T_{\mathrm{sf}}\right] &amp;=\sum_{i=0}^{W_{s}} \frac{\left(1-G_{t}\right) p}{W_{s}} \sum_{i=0}^{W_{s}}\left(p T_{t}\right)+\sum_{i=0}^{W_{s}} \frac{G_{t} p}{W_{s}} \sum_{i=0}^{W_{s}}\left[\left(1-G_{s}\right) T_{t}\right] \\ &amp;=\frac{p T_{t}\left(1-G_{t}\right)\left(W_{s}-1\right)\left(G_{t}+p\right)}{2} \end{aligned} \end{equation}\] 对于队列等待延时部分，为了保证系统的稳定性，需要有\(\lambda_{s} T_{\mathrm{serv}}&lt;1\)，其中\(\lambda_s\)为消息生成的速率，\(T_{\mathrm{serv}}=E\left[T_{\mathrm{sf}}\right]+T_{\mathrm{st}}\)。根据Pollaczek-Khintchine定理： \[\begin{equation} T_{\mathrm{sq}}=\frac{\lambda_{s} E\left[T_{\mathrm{serv}}^{2}\right]}{2\left(1-\lambda_{s} T_{\mathrm{serv}}\right)} \end{equation}\] Reference [1] B. Liu, D. Jia, K. Lu, D. Ngoduy, J. Wang, and L. Wu, “A joint control–communication design for reliable vehicle platooning in hybrid traffic,” IEEE Transactions on Vehicular Technology, vol. 66, no. 10, pp. 9394–9409, 2017. [2] G. Bianchi, “Performance analysis of the ieee 802.11 distributed coordination function,” IEEE Journal on Selected Areas in Communications, vol. 18, no. 3, pp. 535–547, 2000.]]></content>
  </entry>
  <entry>
    <title><![CDATA[动态控制发包频率]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Fdynamic-beacon-interval.html</url>
    <content type="text"><![CDATA[在基于Platoon的车间通信(V2V)机制设计:动态调节网络参数我们也提到了这种控制理念：即根据网络的情况，动态的调整网络参数。对于Beacon包传输来说，在高负载的情况下，与其所有人仍然按照原来的发送速度，进而导致严重的冲突拖慢整体性能，不如整体所有人适当调低发送速度。 这篇文章研读总结自[1]。这篇文章主要是依据车流密度情况动态调整BSM(Basic Safety Message)的发送速率，算法被称为frequency adjustment with random epochs (FARE)。 BSM的发送 WAVE的标准中并未明确规定BSM消息的频率。不过在文献研究中，典型的BSM发送频率范围包含了1Hz [2]到10Hz [3]。 BSM信息一般放在CCH上发送。考虑到在没有进行额外的跨层优化设计时，BSM应用层无法感知底层信道状态，因此一些BSM包可能在SCHI上产生。此时MAC层会将这些包压入队列，等到CCHI时发送。如果在CCHI结束时仍然未能发送出去，这个BSM消息会被丢弃。 FARE 在FARE机制中，应用会维护一整套名为的epochs的抽象时间结构，代表了BSM传输的时间线。每个epoch对应一个BSM传输。每个epoch的长度取决于BSM的传输时间（一个250Bytes的BSM包，在3Mb/s的带宽上，需要大约1ms来传输）。在确定epoch的长度以后，每个车辆选择一个epoch来传输BSM包。这里我们选择1ms作为epoch的长度，那么一个SI（同步间隔）内的，大约有92个epoch（去掉Guard Interval）。 尽管应用层并不知晓信道状态，但是因为按照WAVE规范，SI需要对齐到UTC的秒时刻，因此应用层可以通过GPS等外源时钟来将epochs和SI的起始时刻对齐。 Epochs建立起了一套应用层的时间尺度，相比于物理层和MAC层的实际时间尺度，二者观察到的现象会有一定的区别，如下图： Example of the application-layer view of the BSM transmission activities on the MAC layer 应用层和MAC层视角的主要差别在于，应用层无法区分“信道空闲”和“信道冲突”两种现象。 从应用层感知CCHI 之前我们说到了由于缺乏跨层信道，应用层无法感知到CCHI，不知道其开始和结束。对于CCHI的开始时刻，我们可以通过利用SI与UTC秒对齐的特性来发现，而CCHI的结束时刻还需要特别的机制来发现。 在WAVE标准中确定了多种CCH和SCH访问的方式，二者长度并非总是50ms 记\(\hat{E}_{\max }\)为现在已经收到的时间轴上一个SI内最右侧的BSM的Epoch，那么设定如下的BSM发送时刻决定策略： \[\begin{equation} \label{1} e \leftarrow \mathcal{R}\left[0 \ldots \hat{E}_{\max }+1\right] \end{equation}\] 其中\(\mathcal{R}\)为随机数发生器。如果节点目前还没有任何关于CCHI的信息（无法确定\(\hat{E}_{\max }\)），那么节点干脆随机选择。这种随机散布策略有助于快速找到CCHI的右侧边缘。下面的图演示了收敛速度： BSM transmitting times fast converging to the CCHI 实际的收敛速度还取决于负载情况：负载越高，收敛越快。 估计车流密度 核心设计思路是，在\(\eqref{1}\)的随机选择Epoch方式场景下，我们可以根据下面的两个观测特征来确定指定车辆通信范围内的车辆数量： 车辆成功将BSM广播给周围车辆的概率\(P_1\)，即PDR(Packet Delivery Ratio)； 车辆在连续两个CCHI内成功发送BSM的概率\(P_2\)。 从应用层的Epochs角度，即在一个SI内，收到的BSM的数量是\(E \cdot P_1\)，其中\(E \equiv \widehat{E}_{\mathrm{max}}\)为CCHI内的Epochs总数。由于从应用层无法分辨信道空闲和碰撞，光有\(P_1\)还不够。接下来考虑\(P_2\)，有\(P_2 = P_1^2\)。 假设观测车辆的通信范围内有\(V\)辆车，所有车辆的BSM发送频率为\(f = 1 / SI\)。在CCHI内竞争获胜，即成功发出去的包的数量是\(L_1 = P_1 \cdot V\)。那么连续两个CCHI内斗发送成功的包的数量是\(L_{2}=P_{2} \cdot V=P_{1}^{2} \cdot V\)。 那么车辆数量\(V\)可以通过如下方法进行估计： \[\begin{equation} \widehat{V}=L_{1}^{2} / L_{2} \end{equation}\] 由于车辆可以连续的观测多个CCHI，使用最近观测到的\(d\)个CCHI数据来进行观测可以得到，在第\(j\)个CCHI \[\begin{equation} L_{x}=\sum_{i=j-d+1}^{j} L_{x}[i] / d, x = 1, 2 \end{equation}\] 这里我们选择\(d = 5\)。 注意上面的估计方法在满载情况下会有问题 决定最佳BSM广播频率 记\(f_{\max}\)为BSM的最大允许发送速率。当车流密度比较稀疏的时候，\(f_{\max}\)为限制BSM发送速度的唯一限制。此时Epochs大部分都是空闲的。当车流密度上升时，会有多辆车在同一个Epoch进行发送，这导致冲突，BSM发送失败。为了降低冲突的概率，车辆需要降低广播的频率。 记最佳的广播频率为\(f_{\mathrm{opt}}\)，在这个发送频率下的\(L_1\)能够达到最大值。为了决定\(f_{\mathrm{opt}}\)，我们需要开率MAC特点，Epoch选择以及发送频率调控。 我们假设Epoch的的总是是\(E\)，车辆数量为\(V\)，每辆车每个周期还惨胜一个BSM包。\(V \ge E\)。如果每辆车选择Epoch是完全随机的，那么\(k \ge 0\)辆车选择了同一个Epoch的概率是\(A_{k}=e^{-\alpha} \alpha^{k} / k !\), 其中\(\alpha = V / E\)为其平均值。我们希望\(k=1\)时对应的概率尽可能的大。即最大化\(E_{1}=A_{1} \cdot E=V e^{-V / E}\)。对其微分并令其等于0得到 \[\begin{equation} E_{1}^{\prime}=e^{-V / E}(1-V / E)=0 \Rightarrow V= E. \end{equation}\] 代入\(V=E\)的情况我们可以得到\(A_1 = e^-1 \approx 36.8%\)，即只有大约三分之一的包能够无冲突地发送。\(A_0 = A_1\)，三分之一的Epoch空闲，剩余的不到三分之一产生了冲突。 不过这里的分析没有考虑竞争过程，即产生冲突的Epoch也可能发送成功的。 因此容易得到发送速率应该为\(f_{\mathrm{target}} = E / V\)。因此我们可以得到一个可以由车辆本地执行的决定\(f_{\mathrm{opt}}\)的算法，这一算法过程如下(\(\mathcal{U}_{T}\)为被观测到的在CCHI T中发送BSM数据的车辆的集合): \(L_{1} \leftarrow \sum_{i=0}^{d-1}\left|\mathcal{U}_{T-i}\right| / d\) \(L_{2} \leftarrow \sum_{i=0}^{d-1}\left|\mathcal{U}_{T-i-1} \cap \mathcal{U}_{T-i}\right| / d\) \(\widehat{V} \leftarrow L_{1}^{2} / L_{2}\) \(f_{\text { target }} \leftarrow E / \widehat{V}\) Reference [1] Y. Park and H. Kim, “Application-level frequency control of periodic safety messages in the ieee wave,” IEEE Transactions on Vehicular Technology, vol. 61, no. 4, pp. 1854–1862, 2012. [2] Tonguz*O., Wisitpongphan*N., F. Bait, P. Mudaliget, and V. Sadekart, “Broadcasting in vanet,” in 2007 mobile networking for vehicular environments, 2007, pp. 7–12. [3] D. Committee and others, “Dedicated short range communications (dsrc) message set dictionary,” SAE Standard J, vol. 2735, p. 2015, 2009.]]></content>
  </entry>
  <entry>
    <title><![CDATA[WAVE标准中的Beacon性能简化分析]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Fperformance-analysis-of-beacon.html</url>
    <content type="text"><![CDATA[在很多使用WAVE作为车联网通信标准的文献研究中[1] [2]，在遇到Beacon时通常会简化其退避过程。由于Beacon的生命周期有限，无法接受无止限的退避。在IEEE802.11 DCF中，在一轮退避完成后节点会尝试发包，如果发包失败，则会将其竞争窗口加倍。由于发送失败需要经过ACK来确认.因此广播包只能进行一轮退避。此时Beacon的发送过程可以简化为一维马尔科夫过程。 广播包的一维马尔科夫链 [3] 非马尔科夫链方法 不使用马尔科夫链的方式整理自[1]. 这篇文章主要的贡献是设计了长度可变的CCHI。 System Model 在节点访问信道前，需要侦听信道处于空闲的时间超过DIFS。如果DIFS之后信道仍然空闲，那么节点可以立即开始发送。否则，节点需要进行一段退避(_Backoff Counter_)，Backoff Counter从\([0, W-1]\)中随机取出。\(W\)被称为退避窗口(_CW_)。Backoff Counter在每一段空闲的时隙结束后减一。当Backoff Counter递减至0时，节点开始访问信道。 考虑到： Backoff Counter的初始值不会为0； Guard Interval内信道被判定为繁忙。 因此在CCHI开始所有车辆都需要进行退避。 除了上面的描述之外，这篇文章的推导还包含如下前提假设： 完美的信道条件 通信链路对称 每个车辆的通信范围固定且相通 载波侦听范围和通信范围一致 CCH完全传输时间 假设各车退避过程独立，网络内任意节点之间的的距离不超过两跳?。 考虑概率\(P(l, n, w, k)\)表示\(n\)个车辆在CCHI开头产生了Beacon包，竞争窗口大小为\(w\)，第一次发送尝试为\(l-1\)，\(k\)辆车在第\(l\)个时隙尝试传输（\(k\leq n\)），此概率值为： \[\begin{equation} \begin{aligned} P(l, n, w, k)&amp;=\left(1-\frac{l-1}{w}\right)^{n} \cdot \left( \begin{array}{c}{n} \\ {k}\end{array}\right)\left(\frac{1}{w-l+1}\right)^{k}\left(1-\frac{1}{w-l+1}\right)^{n-k} \\ &amp;= \left( \begin{array}{c}{n} \\ {k}\end{array}\right) \cdot \frac{(w-l)^{n-k}}{w^n} \\ &amp;= \left( \begin{array}{c}{n} \\ {k}\end{array}\right) \cdot \left(1 - \frac{l}{w}\right)^{n-k} \cdot \frac{1}{w^{k}}. \end{aligned} \label{P} \end{equation}\] 考虑到Backoff Counter的最大值是\(w\)，完成所有Beacon包传输需要的平均时间为 \[\begin{equation} \label{T} T(w, n)=\sum_{l=1}^{w} \left\{\begin{array}{l}{P(l, n, w, 1)\left[T_{s}+T(w-l, n-1)\right]} \\ {+\sum_{k=2}^{n} P(l, n, w, k)\left[T_{c}+T(w-l, n-k)\right]}\end{array}\right\} \end{equation}\] 其中\(T_{s}=L / R_{d}+D I F S+\delta\)的代表了一次成功的传输持续的时间。其中\(L\)表示平均包大小，\(R_d\)表示系统的传输速率，\(\delta\)表示传输延时?。\(T_{c}=L / R_{d}+E I F S+\delta\)表示发生碰撞后的持续时间。 这里\(T_c\)的计算和我们在WAVE中提到的推导里的\(T_c\)的有点不同，这里可以认为是所有包的大小一致的特殊情形。 在\(\eqref{T}\)中，求和的第一项表示的是只有一个节点选择了最早的发送时刻，此时能够成功发送。后一项表示的是超过一个节点选择在最早的发送时刻传输，导致冲突。 记节点的总数是\(N\)，退避窗口的大小是\(W\)，则\(T(W,N)\)可以通过迭代求出。 当\(W\)和\(N\)比较小时，\(T(W,N)\)会小于50ms，那么多余的CCHI被浪费了。反之，当\(W\)和\(N\)比较大时，\(T(W,N)\)会大于50ms，那么会有包无法发送而丢失掉。 CCH丢包率 我们定义\(L(W,N)\)为在一个CCHI内发生碰撞的包的数量。则 \[\begin{equation} \label{L} L(w, n)=\sum_{l=1}^{w} \left\{\begin{array}{l}{P(l, n, w, 1) \cdot L(w-l, n-1)} \\ {+\sum_{k=2}^{n} P(l, n, w, k)[k+L(w-l, n-k)]}\end{array}\right\} \end{equation}\] 根据\(\eqref{P}\)和\(\eqref{L}\)，通过迭代计算可以给出丢包率： \[\begin{equation} \label{packet-loss-rate} P(W, N)=\frac{L(W, N)}{N} \end{equation}\] 数值计算\(P(W, N)\)的值发现，丢包率即便在通常的的\(W\)和\(N\)取值内也非常高。通过提升竞争窗口可以改善这个丢包率，但是考虑到事实上CCHI的长度是有限的，而提高竞争窗口会推高\(\eqref{T}\)的值。如果将总传输时间\(T(W,N)\)值推高到50ms以上，那么50ms后续的包都会丢掉。综上可见，丢包率的改善是有上限的，且这个上限可能并不会达到100%. 马尔科夫链方法 马尔科夫链主要参考是的是[2]. Reference [1] L. Zhang, Z. Liu, R. Zou, J. Guo, and Y. Liu, “A scalable csma and self-organizing tdma mac for ieee 802.11 p/1609. X in vanets,” Wireless Personal Communications, vol. 74, no. 4, pp. 1197–1212, 2014. [2] K. A. Hafeez, L. Zhao, B. Ma, and J. W. Mark, “Performance analysis and enhancement of the dsrc for vanet’s safety applications,” IEEE Transactions on Vehicular Technology, vol. 62, no. 7, pp. 3069–3083, 2013. [3] V. Nguyen, O. T. T. Kim, C. Pham, T. Z. Oo, N. H. Tran, C. S. Hong, and E. Huh, “A survey on adaptive multi-channel mac protocols in vanets using markov models,” IEEE Access, vol. 6, pp. 16493–16514, 2018.]]></content>
  </entry>
  <entry>
    <title><![CDATA[IEEE802.11 DCF中Basic Access和RTS/CTS机制的理论饱和吞吐率性能差异分析]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Fperformance-of-bas-and-rts.html</url>
    <content type="text"><![CDATA[性能差异分析 在Wireless Access in Vehicular Environments (WAVE)文章的3.4章节我们梳理了对IEEE802.11 DCF机制的性能推导。通过推导的结论我们发现使用了RTS/CTS机制之后，相比于Basic Access手段，饱和吞吐率的性能有了大幅度的改进，如下图： 饱和吞吐率与节点数量的关系 注意到在3.4.4中给出的一般形式的饱和吞吐率对于Basic Access以及RTS/CTS机制是一样。两种机制的主要区别在于\(T_c\)和\(T_s\)的区别，如下图所示： \(T_c\)和\(T_s\) 考虑到ACK, RTS, CTS这些包的体积非常小，因此Basic Access和RTS/CTS机制的区别在于\(T_s\)和\(T_c\)的相对大小不同。在Basic Access中两个值非常接近，而在RTS/CTS中两个值的差别非常大。 \[\begin{equation} \label{1} S=\frac{P_sP_{tr}E[P]}{(1-P_{tr})\sigma+P_{tr}P_sT_s+P_{tr}(1-P_s)T_c} \end{equation}\] 上面的式子中，\(P_{tr}P_s=n\tau (1-\tau)^{n-1}\)随着\(n\)增加而递减。\(P_{tr}\)随着\(n\)增加而趋向于1，则分母项中，随着\(n\)升高，前两项都趋向于0，后一个趋向于\(T_c\)。可见\(T_c\)的值决定了最后下降的速度。 分母的形式其实很类似于两级lerp function，即从形状上来看，分母的取值从\(\sigma\)出发，逐渐靠近\(T_s\)，最终收拢到\(T_c\)。下图有助于理解： 上图其实是bezier曲线的原理示意图，出处是贝塞尔曲线原理（简单阐述） 混合性能 这里说的混合性能是指同时存在Basic Access和RTS/CTS的情况。具体的，如果包的大小超过了阈值\(\overline{P}\)，那么采用RTS/CTS发送，否则应用Basic Access规则。 记\(F(\cdot)\)为包大小的累积概率分布，那么\(F(\overline{P})\)就为Basic Access发送的概率，\(1-F(\overline{P})\)为使用RTS/CTS发送的概率。记: \[\begin{equation} O_{\mathrm{rts}}=T_{s}^{\mathrm{rts}}-T_{s}^{\mathrm{bas}}=\mathrm{RTS}+\mathrm{SIFS}+\delta+\mathrm{CTS}+\mathrm{SIFS}+\delta \end{equation}\] 为RTS/CTS需要付出的额外传输开销。那么很容易有: \[\begin{equation} \begin{aligned} T_{s} &amp;=T_{s}(\overline{P})=T_{s}^{\mathrm{bas}} F(\overline{P})+T_{s}^{\mathrm{rts}}(1-F(\overline{P})) \\ &amp;=T_{s}^{\mathrm{bas}}+O_{\mathrm{rts}}(1-F(\overline{P})) \end{aligned} \end{equation}\] 为了进一步推导，我们做一定的简化，忽略掉超过两个包发生碰撞的概率。那么，碰撞的可能情形就被约束到下面的三个类别： 两个RTS帧碰撞，概率(条件概率)为\((1-F(\overline{P}))^2\); 两个普通帧（Basic Access）的碰撞，概率为\(F(\overline{P})^2\)； 普通帧和RTS之间的碰撞 这涉及到三种不同的\(T_c\)：\(T^{rts/rts}\), \(T^{bas/bas}\), \(T_c^{bas/rts}\)。基于上面总结的条件概率我们可以计算平均碰撞时间如下： \[\begin{equation} \begin{aligned} T_{c}(\overline{P})=&amp;(1-F(\overline{P}))^{2} T_{c}^{\mathrm{rts} / \mathrm{rts}} \\ &amp;+2 F(\overline{P})(1-F(\overline{P})) T_{c}^{\mathrm{rts} / \mathrm{bas}}+F^{2}(\overline{P}) T_{c}^{\mathrm{bas} / \mathrm{bas}} \end{aligned} \end{equation}\] 记\(O_{h}=\left(T_{c}^{\mathrm{bas}}-P-T_{c}^{\mathrm{rts}}\right)=(H-\mathrm{RTS})\)为数据帧的Header相比于RTS的额外长度。\(\alpha=H+\mathrm{DIFS}+\delta\)。在WAVE: \(T_s\)和\(T_c\)的确定中，我们已经计算得到了： \[\begin{equation} T_{c}^{\mathrm{rts} / \mathrm{rts}}=\mathrm{RTS}+\mathrm{DIFS}+\delta=\alpha-O_{h} \end{equation}\] 为了计算RTS帧和数据帧的冲突时间，考虑到RTS的大小总是小于数据帧的大小，那么上面我们定义的\(O_h\)始终为正值。故这个平均冲突时间是由Basic Acces的数据帧的平均长度决定，从而有： \[\begin{equation} T_{c}^{\mathrm{rts} / \mathrm{bas}}=\alpha+\int_{0}^{\overline{P}}\left(1-\frac{F(x)}{F(\overline{P})}\right) d x \end{equation}\] 此处\(F(x) / F(\overline{P}), x \in(0, \overline{P})\)为Basic Access发送时的包大小的条件概率。最后，对于Basic Access的数据包之间的冲突问题： \[\begin{equation} T_{c}^{\mathrm{bas} / \mathrm{bas}}=\alpha+\int_{0}^{\overline{P}}\left(1-\frac{F^{2}(x)}{F^{2}(\overline{P})}\right) d x \end{equation}\] 最终我们可以得到整体的平均冲突时间为： \[\begin{equation} \begin{aligned} T_{c}(\overline{P})=&amp; \alpha-(1-F(\overline{P}))^{2} O_{h} \\ &amp;+2 F(\overline{P})(1-F(\overline{P})) \int_{0}^{\overline{P}}\left(1-\frac{F(x)}{F(P)}\right) d x \\ &amp;+F^{2}(\overline{P}) \int_{0}^{\overline{P}}\left(1-\frac{F^{2}(x)}{F^{2}(P)}\right) d x \end{aligned} \end{equation}\]]]></content>
  </entry>
  <entry>
    <title><![CDATA[WAVE中的SCH调度机制研究状况]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Fsch.html</url>
    <content type="text"><![CDATA[WAVE协议中指定了CCH和SCH两种信道。在这个页面我们梳理一下现有的学术界对于如何调度使用SCH信道的机制研究。 在SCH上进行调度（W-HDF） 以下部分整理自[1]，这篇文章提出了一个名为W-HCF(WAVE-based Hybrid Coordination Function)的信道访问机制。该机制优化的目标是非安全类应用。 WAVE DCF机制的主要问题在于无法保证带宽和延时性能。这对于特定的应用是难以忍受的（如多媒体串流）。W-HCF机制的核心在于针对非安全类应用，区分QoS敏感和QoS不敏感的业务类型，并且针对这两种业务采取不同的SCH访问控制策略。 对于QoS不敏感的业务，W-HCF保留了WAVE标准中的特点： 简化的WBSS结构，不需要认证(Authentication)和关联(Association)过程； EDCA on SCHI 而对于QoS敏感的业务，需要一些额外的机制来保证带宽和延时性能。W-HCF提出的这些机制和WAVE完全兼容的。 对于QoS敏感的服务的提供者，其必须要知道对其提供的服务感兴趣的用户，并且有能力为这些资源预留资源。这些欲求意味着： 对服务感兴趣的用户需要显式地(explicitly)发送消息来加入WBSS； 服务的提供者需要显式地预留资源来确保相关用户访问服务时能够有无竞争的资源访问； 要有机制确保只有目标用户还在服务提供者的覆盖范围内时才进行Polling (Polling的含义见下面的过程描述第五点) 在竞争性的服务提供者之间建立协作机制，以避免无干扰的WBSS（通过使用不同的SCH信道或者是利用TDMA） W-HDF的主要过程如下： Q-WBSS初始化。在CCHI，Q-pr广播QoS-Enhanced WAVE Service Advertisements (Q-WSA) 来创建Q-WBSS。Q-WSA是对于原始WSA信息的扩展； A Gossip-based distributed CAP reservation scheme: 减少临近的Q-pr之间的干扰和冲突。这里的CAP是指controlled access period User registration and TXOP negotiation: 在SCH上，Q-users向Q-pr请求分配CAP资源； Controlled data transfer: 在SCH上，CAP阶段和竞争阶段交替。CAP的起始时间和持续时间由Q-pr控制。 基于位置的Polling：这里的Polling指由Q-pr主动，向多个用户拉取数据的过程。Q-pr会根据车辆的位置和速度来决定是否进行Polling，从而避免资源浪费（例如不要从已经不在Q-pr覆盖范围内的用户上拉取数据） 上面步骤中的缩写含义为：Q-pr: QoS Provider，Q-user: QoS User。 Q-WBSS初始化 Q-WBSS是围绕着Q-pr建立的，因此Q-WBSS的初始化实质就是Q-pr初始化的过程。Q-pr在CCH上通过EDCA的规则来尝试通过广播Q-WSA信息来占用信道。Q-WSA在原始WSA包的基础上新增了两个字段：CAP频段和4个字节的Own_SCH_Allocation字段。这一四字节字段包含两个两字节的子字段：CAP_start, CAP_duration。前者是预留的Contention-Free的CAP阶段的开始时间，后者是为了满足用户通信需求的CAP持续时间。在初始化阶段，Q-pr并不知道潜在的用户数量，因此最初的广播只包含了Q-pr自身的通信需求（主要是Beacon）。 作为广播，Q-pr在广播后不会收到任何反馈，作者在这里说可以通过多次广播来提高可靠性 Gossip-based distributed CAP reservation Reference [1] M. Amadeo, C. Campolo, and A. Molinaro, “Enhancing ieee 802.11p/wave to provide infotainment applications in vanets,” Ad Hoc Networks, vol. 10, no. 2, pp. 253–269, 2012.]]></content>
  </entry>
  <entry>
    <title><![CDATA[中国中古史]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2Findex.html</url>
    <content type="text"><![CDATA[这里说的中古史其实不是历史学家们用的专门的概念。我这里用来指自秦朝统一后至1840年两千年时间内的历史。 秦汉 三国两晋南北朝 八王之乱 永嘉之乱 十六国概况 隋唐 五代 宋辽金 元 明 清]]></content>
  </entry>
  <entry>
    <title><![CDATA[Wireless Access in Vehicular Environments (WAVE)]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Fwave.html</url>
    <content type="text"><![CDATA[WAVE的全称是Wireless Access in Vehicular Environment，是目前车联网通信的标准。 WAVE与其他车联网通信中的技术/标准之间关联 在车联网研究中常见的其他技术关键词还包括: DSRC IEEE802.11p IEEE1609.x 物理层特点 WAVE在物理层使用IEEE802.11p的标准。其物理层的一些关键信息如下。 信道划分 Slot Allocation WAVE使用的频段为5.85GHz至5.925GHz。这一频段被进一步划分为7个信道，包括1个控制信道CCH (Control CHannel), 和6个服务信道SCH(Service CHannel)，具体的信道划分如下所示: FCC规定的WAVE信道划分 5.850GHz - 5.855GHz 部分为保留部分(reserved) 信道178为CCH控制信道，带宽为10MHz 信道172, 174, 176, 180, 182, 184为SCH服务信道，带宽都为10MHz 信道174和176，信道180和182可以合并为20MHz带宽的信道 信道172和184，即最外侧的两个信道用于传输与生命财产关联的安全信息。特别的，根据FCC 06-110，信道172用于V2V的安全信息传输，信道184则是高发射功率，长距离通信，用于公共安全信息的传输，例如避免路口碰撞事故。 WAVE协议规定了SCH和CCH的划分，但是对于在不同SCH的不同业务规则的要求不是强制的。 信道类型 CCH-控制信道 CCH信道只有一个，位于整个WAVE频谱的居中位置，带宽为10MHz。 CCH信道上禁止发送IP消息，主要用来发送一些至关重要要的信息（常常是安全相关的），以及服务广告(Service advertising)消息WSA(WAVE Service Advertisement). SCH-服务信道 SCH信道共六个，主要用来发送与基于IPv6(或者WSMP)的非安全信息。SCH信道调度使用机制的研究参见WAVE中的SCH调度机制研究状况 关于信道的业务类型 WAVE协议并未对于各个信道上运行的业务的具体类型做出具体的强制要求。目前来看除了禁止在CCH上发送IP协议包以外，并未有其他更多的强制要求。例如，WAVE标准并未划分专门的安全信道。前文提到CCH上会发送安全相关的信息，SCH主要用来发送非安全信息，但是在实际使用中SCH上仍然可以用啦发送安全信息。在美国172信道甚至被视为安全信息的专用通道。管理信息同样也可以在SCH上传输。 信道协调(Channel coordination)与时间同步(Time Synchronization) WAVE中的多信道访问以IEEE1609.4为标准。 信道协调 在使用WAVE进行通信时，时域和频域资源都进行了划分。WAVE设备可以在不同的信道上切换(Alternative radio channel access)。这使得单设备节点可以在SCH信道上交换信息的同时，可以监听CCH信道。 多信道访问通过共同点时间基准来进行协调。具体而言，WAVE规定由一个CCH间隔(CCHI)，跟着一个SCH间隔(SCHI)组成一个同步间隔SI。在CCHI，所有节点在CCH上通信；在SCHI，节点在指定的SCH上进行通信。在CCHI和SCHI开头设置了一段保护间隔(GI)。在保护间隔内，设备在进行信道切换，被认为无法接收数据包。 根据IEEE 1609.4-2010标准，CCHI和SCHI的长度均为50ms，保护间隔为4ms，如下图所示 Channel Interval Structure 标准允许将信道间隔（CI）设置为可变的长度，但是并没有给出对应的实现机制。 上述的接入方式被称为Alternating channel access，除此之外，还包含了continuous channel access, immediate access, extended access。其中，immediate access允许设备在WSA消息中识别出一个应用请求时，立刻切换到SCH信道。extended access则允许设备延长访问SCH的时间。 More Channel Accessing Schemes 装备有多个通信设备的节点可以并行地访问CCH和SCH 时钟同步 各个节点的时钟同步到UTC时间的标准秒（这点在上图得到了反映）。UTC时间可以由GPS给出。 IEEE802.11-2012标准中的Timing Advertisement frame可以用于节点间的时钟同步。 注意，严格的时钟同步对于通信来说并非是必须的。信道协调只需要精确到1s的边界就可以了。不过严格的时钟同步可能对于安全目的来说是必须的。 MAC层特点 WAVE的MAC层的核心DCF(Distributed Coordination Function)技术，DCF是基于指数退避算法的CSMA/CA机制，这一机制的内容可以从以下几方面来讨论: 指数退避机制 需要发送包的节点监听信息，如果信道空闲的时间超过了DIFS (Distributed Interframe Space)，那么节点开始发送，否则如果信道繁忙，则继续保持监听信道。 当节点得以占用信道准备发送时，节点会在发送前进行一个随机的退避（Collision Avoidance），来减少和其他节点冲突的概率。另一方面，为了避免信道长时间被特定的节点占用（信道被长时间占用的现象被称为Channel Capture），一个节点在两次发包之间也要有一个随机的退避。 出于性能原因，CSMA采用了离散的退避时间。紧跟在DIFS之后的时间被划分为多个时隙，每个节点只能在每个时隙的开始的阶段发送数据包。时隙的大小\(\sigma\)，等于每个节点探测到另一个节点发送的包需要的延时。这一参数取决于物理层，包含传输延时，TX/RX切换时间，以及通知MAC层信道状态需要的时间。 在每个包传输时，退避时间在\((0, \omega-1)\)中随机选出，其中\(\omega\)被称为竞争窗口(Contetion Window)。竞争窗口的大小与传输失败的次数有关。初始时\(\omega=CW_{min}\)。每经过一次传输失败，竞争窗口的大小加倍，直到达到最大值\(CW_{max}\)。 退避的状态由一个退避计数器(backoff counter)来控制。在开始退避时，为退避计数器随机分配一个退避窗口范围内的整型值。之后每一个时隙，如果信道空闲退避计数器就递减。当检测到信道繁忙时，退避计数器的递减过程会停止。当信道再次变得空闲时，退避计数器需要检测信道空闲超过DIFS之后才会再次开始递减。当计数器递减至0时，节点会尝试发送。如果失败，竞争窗口会加倍。并重复前述过程。 ACK CSMA中并不依赖对于自己的传输的监听来检测碰撞。因此引入了ACK机制来通知包发送成功（显然只有D2D方式的通信才会有ACK，在广播包不会产生ACK）。这种机制被称为是Basic Access。接收端在收到包之后经过一段SIFS（Short Inter-Frame Space）立即发送ACK。SIFS比DIFS要短，因此在ACK发送前不会有节点能够占用信道。如果在一定事件后发送节点仍然没有收到ACK，则判断此包丢失。 RTS/CTS RTS/CTS的全称是Request To Send / Clear To Send。这套机制的作用是两方面的： 减少在传输较大体积的包过程中的冲突 解决隐藏终端问题 RTS/CTS的工作过程如下。节点在发送数据包之前，先向目标节点发送一个RTS请求，目标街点收到RTS之后判断当前是否能够进行RTS中请求的包传输，如果可以，目标节点会响应一个CTS。发送者在收到CTS之后才获准发送数据包。RTS和CTS中包含了待传输的包的长度信息，这些信息可以被周围的节点截图，从而更新其Network Allocation Vector (NAV)。 MAC层性能的理论推导 针对MAC的层的性能推导，基本源自于下面Performance analysis of the IEEE 802.11 distributed coordination function[1]. 这篇文章给出了在一定的驾驶条件下DCF机制的饱和吞吐率 饱和吞吐率 一般而言，随机接入协议的一个共同问题是，随着业务量的上升，系统的整体throughput会逐渐上升至maximum throughput，之后继续提高业务量，系统整体的吞吐率并不会继续上升，反而会下降。因此，在实际场景中，系统不可能长时间的保持在最大吞吐率的水平。最大吞吐率也不太适合用作评估接入机制性能的指标。 随着业务量的进一步上升，吞吐率会进入一个比较稳定的水平。这个水平被称为饱和吞吐率（Saturation Throughput） 饱和吞吐率 假设条件 完美的信道条件 不考虑隐藏终端问题 不考虑Channel capture 节点数量固定，且达到满载，即，在一个包发出去之后，总有另一个包等待发送 包传输概率 节点数量为\(n\)，在饱和的情况下，每个节点在每次传输成功以后都可以立即生成一个数据包以供发送。每个包在开始发送前都需要经历一个随机的退避。我们定义\(b(t)\)为节点的退避计数器状态，\(t\)和\(t+1\)表示连续的两个时隙的起始。这里的“时隙”与前面的定义不同，在前文中我们提到过，在信道状态为busy时，退避计数器的递减过程是停止的。我们在这里不将这些部分的时间纳入时隙中，时隙被定为退避计数器相邻两次递减的时间差，这意味着，slot times和系统的时钟是不同步。两个连续的时隙的起始时刻相差，并不总是​\(​\sigma\)，而且可能包含一个完整的发送过程。 由于退避计数器与传输历史有关，那么随机过程\(b(t)\)显然是非马尔科夫的。记 \[ W=CW_{min} \\ CW_{max} = 2^mW \] 然后记： \[ W_i=2^iW \] \(i\in(0,m)\)被称为退避阶段(backoff stage)。我们记\(b(t)\)为表述退避阶段在\(t\)时刻取值的随机变量。我们的一个核心的近似是一个核心的近似是，假设在对于每一次传输尝试，无论重传次数如何，每个包的碰撞概率都是 constant and independent 的，此概率值为​\(p\)​。直观的来看，这个假设在​\(W\)和\(n\)增加时会更加精确。这一概率值又可以被称为条件碰撞概率（conditional collision probability），即此概率为待发送包观察到的碰撞概率。 一旦独立性得到满足，且​\(p\)​是一个常数值，我们可以把一个二元随机过程​\(\{s(t),b(t)\}\)建模成离散时间的马尔科夫链。其状态转移图为 马尔科夫链状态转移图 概率转移矩阵中的非零元素为： \[ \left\{ \begin{array}{ll} P\{i, k | i, k + 1\} = 1 &amp; k\in(0, W_i - 2), i\in(0, m) \\ P\{0, k | i, 0\} = (1 - p) / W_0 &amp; k\in(0, W_0 - 1), i\in(0, m) \\ P\{i, k|i-1, 0\} = p / W_i &amp; k\in(0, W_i - 1), i\in(1, m) \\ P\{m, k | m, 0| = p/W_m &amp; k\in(0,W_m -1) \end{array} \right. \] 第一个等式代表在每个slot time的开头要递减backoff counter. 第二个等式代表在一次成功的传输以后，紧随一个新的packet 第三个等式代表退避完成之后信道仍然无法占用增加backoff stage。 第四个等式也是代表退避完成之后信道仍然无法占用，不过backoff stage已经最大 记\(b_{i,k}=\lim_{t\to\infty}P\{s(t)=i, b(t)=k\}, i\in(0, m), k\in(0, W_i-1)\)代表了马尔科夫链的稳态分布，下面给出该马尔科夫链的闭式解： 首先: \[ b_{i-1}\cdot p=b_{i,0} \to b_{i_0}=p^ib_{0,0},\ \ 0&lt;i&lt;m \\ b_{m-1,0}=（1-p)b_{m,0}\to b_{m,0}=\frac{p^m}{1-p}b_{0,0} \] 马尔科夫链的规律，对于每个\(k\in(1,W_i-1)\) \[ b_{i,k}=\frac{W_i-k}{W_i}\cdot \left\{ \begin{array}{ll} (1-p)\sum_{j=0}^{m}b_{j,0} &amp; i=0 \\ p \cdot b_{i-1,0} &amp; 0 &lt; i &lt; m \\ p \cdot (b_{m-1, 0} + b_{m,0}) &amp; i=m \end{array} \right. \] 在平稳情况下，考虑\(\sum_{i=0}^{m}b_{i,0}=b_{0,0}/(1-p)\)，则有 \[ b_{i,k}=\frac{W_i-k}{W_i}b_{i,0},i\in(0,m),k\in(0,W_i-1) \] 经过上面的推导，我们可以把\(b_{i,k}\)表达为\(b_{0,0}\)的函数，同时通过概率的正则化条件可以求解\(b_{0,0}\)： \[ 1=\sum_{i=0}^{m}\sum_{k=0}^{W_i-1}b_{i,k}=\sum_{i=0}^{m}b_{i,0}\sum_{k=0}^{W_i-1}\frac{W_i-k}{W_i}=\sum_{i=0}^{m}b_{i,0}\frac{W_i+1}{2}\\ =\frac{b_{0,0}}{2}\left[W\left(\sum_{i=0}^{m-1}(2p)^i+\frac{(2p)^m}{1-p}\right) + \frac{1}{1-p}\right] \] 故 \[ b_{0,0}=\frac{2(1-2p)(1-p)}{(1-2p)(W+1)+pW(1-(2p)^m)} \] 然后我们可以得到一个节点在任意时刻尝试发送的概率 \[ \tau=\sum_{i=0}^{m}b_{i,0}=\frac{b_{0,0}}{1-p}=\frac{2(1-2p)}{(1-2p)(W+1)+pW(1-(2p)^m)} \] 注意\(m=0\)是0时，即即退避的窗口是固定的时候， \[\tau=\frac{2}{W-1}\] 注意到\(p\)的含义其实是，在一个时隙中一个节点正在发送时，剩下的\(n-1\)个节点至少有一个在发送，则 \[ p=1-(1-\tau)^{n-1} \] 这里的\(\tau\)和\(p\)构成了一种非线性方程组，可以用数值方法求解。 吞吐率计算 记\(S\)为归一化的系统吞吐率，定义为信道中用于传输数据的时间的比例。在一个随机选取的时隙上，记\(P_{tr}\)为至少有一个节点尝试发送的概率，则 \[ P_{tr}=1-(1-\tau)^n \] \(P_s\)表示传输成功的概率，则 \[ P_s=\frac{n\tau(1-\tau)^{n-1}}{P_{tr}}=\frac{n\tau(1-\tau)^{n-1}}{1-(1-\tau)^n} \] 我们可以把\(S\)表示成 \[ S=\frac{E[\text{payload information transmitted in a slot time}]}{E[\text{length of a slot time}]} \] 记包的平均传输时间是\(E[P]\)，俺么在一个slot time里面用于传输的平均时间长度是\(P_{tr}P_{s}E[P]\)。slot time的平均大小是 \[ (1-P_{tr})\sigma+P_{tr}P_sT_s+P_{tr}(1-P_s)T_c \] 其中，\(T_s\)是信道检测为繁忙后的平均slot time长度（其内部包含了一整个包传输的时间），\(T_c\)为信道发生碰撞以后被识别为繁忙的时间。那么 \[ S=\frac{P_sP_{tr}E[P]}{(1-P_{tr})\sigma+P_{tr}P_sT_s+P_{tr}(1-P_s)T_c} \] 注意上面的推导过程中我们其实并未指定特定的接入机制。对于特定的接入机制，我们只需要确定与之相关的\(T_s\)和\(T_c\)。 \(T_s\)和\(T_c\)的确定 只考虑存在ACK机制下， \[ \left\{\begin{array}{l} T_{s}^{bas}=H+E[P]+SIFS+\delta+ACK+DIFS+\delta\\ T_c^{bas}=H+E[P^*] + DIFS +\delta \end{array}\right. \] 其中\(H=PHY_{hdr}+MAC_{hdr}\)为物理层和MAC层的帧头传输时间。\(\delta\)是传输延时，\(E[P^*]\)是the average length of the longest packet payload involved in a collision. 如果所有的包的大小都是一样的，那么\(E[P^*]=P\)。在更一般的情况下所有包的大小可以被认为是独立同分布的。记这个分布为\(F(\cdot)\)，则 \[ \begin{aligned} E[P^*] &amp;=E[E[\max(P_1,\dots,P_k|k]]\\ &amp;=\frac{\sum_{k=2}^{n}\left(\begin{array}{c}n\\k\end{array}\right)\tau^{k}(1-\tau)^{n-k}\int_{0}^{P_{max}}(1-F(x))^kdx}{1-(1-\tau)^n-n\tau(1-\tau)^{n-1}} \end{aligned} \] 如果忽略三个或者更多包碰撞的情况，那么上面的式子可以简化为： \[ E[P^*]=\int_0^{P_{max}}(1-F(x)^2)dx. \] \(T_c\)是由未参与到碰撞中的节点感知到的信道繁忙时间，我们忽略了两个或者更多个的碰撞节点在感知信道前需要等待ACK超时这个因素，所以实际中的\(T_c\)要不这里给出的计算结果要大。 再考虑在RTS/CTS机制下： \[ \left\{ \begin{array}{l} T_s^{rts}=RTS+SIFS+\delta+CTS + SIFS + \delta + H + E[P] + SIFS + \delta+ACK+ DIFS + \delta \\ T_c^{rts} = RTS + DIFS + \delta \end{array} \right. \] 对于Beacon包的特殊分析 很多文献中对于Beacon包的发送过程做了简化，即发送过程中只进行一轮退避，没有退避窗口的指数增长过程。此时Beacon包的发送状态成为一维马尔科夫过程。这部分问题参见：WAVE标准中的Beacon性能简化分析 结果分析 饱和吞吐率与节点数量的关系 从上图中我们可以发现，对于Basic Access方式，饱和吞吐率和节点数量呈负相关，也即和节点密度呈负相关。这意味着节点数量越少，饱和吞吐率越高。相反，对于RTS/CTS机制而言，在节点密度达到一定的程度以后，饱和吞吐率就和节点数量无关了。 这个性能差异我们在IEEE802.11 DCF中Basic Access和RTS/CTS机制的理论饱和吞吐率性能差异分析这篇文章中进行了详细的分析。 Reference [1] G. Bianchi, “Performance analysis of the ieee 802.11 distributed coordination function,” IEEE Journal on Selected Areas in Communications, vol. 18, no. 3, pp. 535–547, 2000.]]></content>
  </entry>
  <entry>
    <title><![CDATA[通信范围模型探讨]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2F%E9%80%9A%E4%BF%A1%E8%8C%83%E5%9B%B4%E6%A8%A1%E5%9E%8B%E6%8E%A2%E8%AE%A8.html</url>
    <content type="text"><![CDATA[前言 我们这里探讨对于通信模型的认识。一般来说，最简单的通信模型是截断模型，即在一定的距离范围内通信总是可靠，而超出这一范围之外丢包率变成100%. 这里我们更加细致地讨论一下更为符合实际条件的通信范围模型[1]。 System Model 在进行理论分析前有必要给出我们使用的System Model。这里的System Model与[1]中的系统模型是一致的。 注意，在这里我们整理了所有参考文章中提出的系统模型假设，不过并不是所有的假设都会用于本文的分析内容。 对于VANETS中的安全类应用，车辆会广播两种类型的信息： Warning Message (Event driven): 事件驱动的警告信息。例如前方突然发生了碰撞，周围的车辆会产生对应的warning message来警告后续的车辆； Status Message。状态信息是周期性发送的，其中包含了车辆的运行状态（位置，速度，加速度，行驶方向等）。 这里Warning message使用最高的优先级AC3(参见EDCA)，周期性播报的状态消息则使用AC0. 在我们的模型中，假设状态消息产生的速度是\(\lambda_s\)，那么同步间隔SI长度为\(1/\lambda_s\)(每个同步周期产生一个状态包). 假设所有包的大小都是一致的，为\(L\)比特。为了简化分析假设整个SI都用于传输安全信息，即CCHI=SI。每辆车会随机选择SI中的一个时隙发送状态包，warning message则随着事件的发生随机产生。 假设所有的车辆发射功率都是\(P_t\)，对于接收方来说，若接收功率达到了门限\(P_{th}\)就认为能够成功地收到数据包。由于信道衰减的随机性，接收功率也会是随机的，这意味着通信范围也是一个随机变量。通信范围的累积概率函数(CDF)\(F_R(r)\)及其期望\(E[R]\)会在后续进行推导。 变量以及缩略语表 通信范围 传输模型 VANET的信道衰减在近距离上服从Rician分布，在长距离上趋近于Rayleigh分布。通过使用Nakagami分布可以综合这两种情况。Nakagami模型的概率密度函数（PDF）如下： \[\begin{equation} \label{1} P_{z^{2}}(x)=\left(\frac{m}{P_{r}}\right)^{m} \frac{x^{m-1}}{\Gamma(m)} e^{-\frac{m x}{P_{r}}}, \quad \text { for } x \geq 0 \end{equation}\] 其中，\(x\)为接收到的信号功率，\(\Gamma(\cdot)\)为Gamma函数，\(P_{r}=P_{t} K / r^{\alpha}\)为平均接收功率，\(r\)为通信距离（米），\(\alpha\)为路径衰减指数。\(K=G_{t} G_{r}\left(C /\left(4 \pi f_{c}\right)\right)^{2}\)，其中\(C\)为光速，\(f_c=5.9 \text{GHz}\)为载波频率，\(G_t\)和\(G_r\)分别为发送者和接受者的天线增益。\(m\)为衰减系数。 当\(m=1\)时，Nakagami退化成Rayleigh分布，当\(m=(k+1)^2/(2k+1)\)时，Nakagami分布可以近似为参数为\(k\)的Rician分布（\(k\) is the ratio of power in the line of sight to the power in the non-line of sight）。 通过\(\eqref{1}\)，我们可以计算出当接收能量超过\(P_{th}\)时，通信范围的CDF： \[\begin{equation} \label{2} F_{R}(r)=1-P\left(x \geq P_{th}\right)=1-\int_{P_{th}}^{\infty} P_{z^{2}}(x) d x \end{equation}\] 将\(\eqref{1}\)代入到\(\eqref{2}\)，并记\(u=(m x) / P_r\)，CDF可以写作： \[\begin{equation} \label{3} F_{R}(r)=1-\frac{1}{\Gamma(m)} \int_{\frac{m P_{\mathrm{th}}}{P_{r}}}^{\infty} u^{m-1} e^{-u} d u \end{equation}\] 使用下面的积分变换： \[\begin{equation} \int x^{n} e^{c x} d x=\left(\frac{d}{d c}\right)^{n} \frac{e^{c x}}{c} \end{equation}\] CDF可以写成： \[\begin{equation} \label{5} F_{R}(r)=1-\frac{1}{\Gamma(m)} \sum_{i=0}^{m-1} \frac{(m-1) !}{(m-1-i) !}\left(\frac{m P_{\mathrm{th}}}{P_{r}}\right)^{m-1-i} e^{-\frac{m P_{\mathrm{th}}}{P_{r}}} \end{equation}\] 有了CDF以后，我们就可以计算通信范围的平均值\(E[R]\)了： \[\begin{equation} \begin{aligned} E[R]=\frac{1}{\alpha \Gamma(m)} \sum_{i=0}^{m-1} &amp; \frac{(m-1) !}{(m-1-i) !} \\ &amp; \times \Gamma\left(m-1-i+\frac{1}{\alpha}\right)\left(\frac{m P_{\mathrm{th}}}{P_{t} K}\right)^{-\frac{1}{\alpha}} \end{aligned} \label{6} \end{equation}\] 上面推导的是能够成功通讯的范围。对于载波侦听的范围\(E[L_{CS}]\)可以通过\(\eqref{6}\)类似的过程进行推导。这里载波侦听范围指的是节点可以感知到包（但是未必能够成功收到此包）的范围。我们认为当接收功率达到阈值\(P_{CS}\)时即可。记\(P_{CS}=\rho P_{th}\)，其中\(\rho \in (0, 1]\)。则有下面的关系： \[\begin{equation} E\left[L_{CS}\right]=\frac{E[R]}{\sqrt[\alpha]{\rho}} \end{equation}\] Reference [1] K. A. Hafeez, L. Zhao, B. Ma, and J. W. Mark, “Performance analysis and enhancement of the dsrc for vanet’s safety applications,” IEEE Transactions on Vehicular Technology, vol. 62, no. 7, pp. 3069–3083, 2013.]]></content>
  </entry>
  <entry>
    <title><![CDATA[通信原理]]></title>
    <url>%2Fknowledge-base%2Facademic%2F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%2Findex.html</url>
    <content type="text"><![CDATA[最近购入了《深入浅出通信原理》一书。该书的作者是华为著名的专家陈爱军。趁通读次数的机会，我打算梳理一下关于通信系统的一些非常基础的知识。查漏补缺，也做一个自己的体系出来。 这篇文档是整个通信原理部分的入口，我在这里梳理一下通信领域中最为基础的概念，为接下来更加深入的内容抛砖引玉。 通信系统的基本模型 广义地通信是指信息传递的过程，古时候的烽火狼烟，飞鸽传书都是通信过程。通信领域在近代以来发生革命性地进步，主要是将「电」引入了到了通信领域。电信号以光速传播，且易于处理。由于频率较高，电信号可以携带的信息可以非常庞大。 模拟通信系统 1875 年，贝尔发现电流的强弱可以模拟声音的大小，进而发明了电话。电话是最早的有线模拟通信系统。 1887 年，赫兹通过实验证明了电磁波的存在，拉开了无线通信的序幕。1894年，马可尼受到赫兹电磁波实验的启发，开始进行无线通信试验，并于1896 年发明了无线电报。1899 年首次完成了英国和法国之间的国际性无线点通话。这是最早的无线模拟通信系统。 模拟通信系统使用模拟信号进行通信，模拟信号则指使用连续的物理量表示的信号。模拟信号的缺点在于其抗干扰能力很差。在传输过程中容易发生失真。所以我们可以发现在早期的电话中，背景声音中通常充斥着噪声。这限制了通信容量和通信距离【通信距离越远，信号功率衰减越是严重，相对而言受到的干扰情况也越严重】的进一步上升。 数字通信系统 数字信号是指时间和取值都是离散的信号。数字信号可以看做是对模拟信号的采样数值进行有限位数字化的结果。数字信号一般用二进制表示，其中 0 和 1 分别代表低电平和高电平。 使用二进制并不是因为二进制在数学上有何优越性，而是因为在物理系统上实现表示两种状态的系统比较容易和稳定。前苏联曾经尝试使用能够表示三进制的电子管，但是未能推广。 数字信号有如下优点： 抗干扰能力强 便于复用传输。 便于加密。 便于存储。 用于处理数字信号的数字电路相比于模拟电路的优点： 功耗低。 集成度高，数字电路以集成电路的方式实现，带来的摩尔定律。 可靠性好。 易于设计。 通信系统基本模型 通信的过程就是信源与信宿通过信道收到信息的过程。基本的通信系统模型如下图所示： 图1. 单向通信系统模型 上面是单向的通信系统。对于具有双向通信能力的通信系统，其系统模型如下图： 图2. 双向通信系统模型 图中的各个部分的概念是直接而清晰的。 信源与信宿 信源与信宿位于通信系统两端。其中信源位于发送端，负责将原始信息转化为电信号，信宿位于接收端，负责将电信号转化为原始信息。 发信机与收信机 发信机对信源发出的信息进行必要的检错和纠错编码等处理后，将其转化成适合在信道上传输的信号。收信机的工作过程相反。 信道 信道的特性决定了信息在信道上传输的形式，而信道的特性又取决于传输媒介。按照传输媒介的不同，通信信道一般分为有线信道和无线信道。其中有线信道的媒介包括电话线，网线，光纤等等，而无线信道的传输媒介为自由空间的电磁波。不同于有线信道，在无线信道中电磁波的传播特性与其频率密切相关。因此我们对于电磁波的频谱有着细致的划分。 图3. 电磁波频谱图 在现有的无线通信系统中： 调幅广播使用长波，中波或者短波进行通信。这些波段的电磁波可以被大气的电离层反射，从而能够克服地球曲率的限制实现长距离传输。 调频广播使用 VHF 频段 87 ~ 108 MHz 频段进行通信。VHF 频段及更高频率的电磁波无法被电离层反射，因此传输距离受到地球曲率限制。为了扩展传输距离，通常会修建高大的广播塔。 电视使用 VHF 频段 48.5 ~ 92 MHz 和 167 ~ 223 MHz、UHF 频段 223 ~ 870 MHz 的微波进行通信。 Wifi使用 UHF 频段的 2.4 GHz 和 SHF 频段的 5 GHz 微波进行通信。 GSM使用 UHF 频段的 900 MHz / 1800 MHz 微波进行通信。 LTE使用 UHF 频段的 2.5 GHz 微波进行通信。 微波和卫星通信使用 SHF 和 EHF 频段的 7 ~ 38 GHz 微波进行通信。 LiFi使用可见光进行通信。 红外遥控器使用波长为 940 nm 的红外线进行通信。 通信信号处理 发信机和收信机对信号所处的处理的流程如下图： 图4. 信号变换 信源编码 对于模拟信源，一般先进行模数转换，将模拟信号数字化，然后进行压缩编码，尽量剔除冗余信息，减少对于传输带宽的占用。 例如，GSM 中先通过对 PCM 编码将模拟信号转化成 104 kbps 的二进制数字码流，然后利用 RPE-LTP 算法对其进行压缩，最终输出 13 kbps 的码流。压缩比为 8 : 1 。 信道编码与交织 通过添加一定的冗余信息，以便在接收端进行纠错处理，解决信道的噪声干扰和干扰导致的误码问题，这就是信道编码。一般的信道编码只能解决零星的误码，对于连续的误码无能为力。 我们可以看到在信源编码中，我们先去除了冗余信息，然后又在信道编码中引入了冗余信息。为什么要做这种看起来重复的操作呢？一方面，在信源中的冗余信息量太大。例如在 GSM 中我们不需要 7 倍的冗余信息用来做纠错。另一方面，信源中的冗余信息是不可控的，无法直接用于接收端的纠错。 为了解决连续误码的问题，需要将信道编码之后的数据顺序按照一定的规律打乱，这个过程称为交织。在接收端信道译码之前将顺序恢复。这样传输过程中发生的连续误码就变成了零星误码，信道译码就能正确纠错了。 脉冲成形 数字信号想要在信道中传输，必须先转化成合适的波形【所有的信道本质上都是模拟的】。最简单的脉冲形式是矩形脉冲，用高电平表示1，低电平表示-1。还有一些更加高级的脉冲形式，我们会在后续介绍。 调制 将信息承载到满足信道要求的高频载波信号上的过程就是调制。 无线通信使用空间辐射的方式传送信号的，由电磁波理论可以知道，天线尺寸为被辐射信号的波长的十分之一或者更大些，信号才能有效地被辐射。以语音信号为例，人能听见的声音频率范围是 20 Hz ~ 20 kHz，假定我们要以无线通信方式辐射一个频率为 10 kHz 的信号出去，其波长为 \[ \lambda = \frac{c}{f} = \frac{3 \times 10 ^ 8 m/s}{10 \times 10^3 /s} = 30km \] 那么为了辐射这一信号我们需要的天线的尺寸至少要几公里。这是难以做到的。 冷战时期苏联和美国建设的超大规模的远距离预警雷达确实可以做到这个尺度的天线。但是在日常生活的应用中，如此大尺寸的天线是不现实的。 另外，调制技术可以将多路不同的信号调制到不同的频段，从而实现多路频分复用（FDM）。这里的一个例子是 ADSL，即十年前比较常见的电话线拨号上网，就采用了频分复用的方式来让电话线上能够同时进行语音和 ADSL 信号的传输： 0 ~ 4 kHz: 用于传输语音。 25 ~ 138 kHz: 用于传输上行数据。 138 ~ 1.1 MHz: 用于传输下行数据。 天线技术 天线负责将信号辐射到自由空间。天线的尺寸还有形状与电磁波的波长和波形有很大的关系，而电磁波的波长和形状对于电磁波的传输能力有决定性的影响。一般来说，在传播距离相通的情况下，电磁波的频率越高，衰减越快。但是高频电磁波的集中特性更好，可以将更多的能量集中到指定的方向上。 天线是一个很复杂的问题。我们会用一个专门的章节讨论这个问题。 复用与多址 复用与多址技术主要用来解决多用户多路数据在单个信道上如何传输的问题。其中复用强调多路信号同时传输，多址强调多个用户共用一个信道。多址和复用的概念非常相似，一般并称。时分复用，频分复用和码分复用是最常见的多址复用技术。]]></content>
  </entry>
  <entry>
    <title><![CDATA[信号与频谱]]></title>
    <url>%2Fknowledge-base%2Facademic%2F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%2F%E4%BF%A1%E5%8F%B7%E4%B8%8E%E9%A2%91%E8%B0%B1.html</url>
    <content type="text"><![CDATA[这是《深入浅出通信原理》一书第二章对应的内容。在这个章节我们主要引入「信号」和「频谱」的概念，重点是要从数学模型的角度去理解信号。其中，傅里叶变换构建了我们整个信号模型的根基，将是这一章节的重中之重。傅里叶变换本质是用简单的基本信号来表示复杂的信号。 基本信号 正弦信号 正弦信号表示为 \(s(t) = A \sin (2 \pi f t + \phi)\)。其中 \(A\) 是振幅，\(f\) 为频率，\(\phi\) 为初相。余弦信号可以通过相位移动从正弦变化得到，没有本质区别。 作为基础信号，正弦信号有一些非常重要的性质: 积分特性 对一个正弦信号做积分，积分区间是信号周期的整数倍时，积分结果为 0. \[ \int_{n T_0}s(t) dt = A \int_{n T_0}\sin (2 \pi f_0 t + \phi) dt = 0 \] 正交特性 这是作为基础信号的一个非常重要的特性。在正弦信号集合 \(\{\sin 2\pi f_0 t, \cos 2\pi f_0 t, \sin 4\pi f_0 t, \cos 4\pi f_0 t, \cdots\}\) 中，其中频率最低信号 \(\{\sin 2\pi f_0 t, \cos 2\pi f_0 t\}\) 称为基波。集合中任意两个不同信号在基波周期内积分为 0 。 \[ \begin{array}{l} \int_{T_0} \sin 2m \pi f_0 t \sin 2n \pi f_0 t = 0, \quad (m \neq n) \\ \int_{T_0} \cos 2m \pi f_0 t \cos 2n \pi f_0 t = 0, \quad (m \neq n) \\ \int_{T_0} \sin 2m \pi f_0 t \cos 2n \pi f_0 t = 0 \end{array} \] 任意正弦信号与自身乘积在基波周期内的积分都为 \(\frac{T_0}{2}\)。 \[ \begin{array}{l} \int_{T_0} \sin 2m \pi f_0 t \sin 2n \pi f_0 t = \frac{T_0}{2}, \quad (m = n) \\ \int_{T_0} \cos 2m \pi f_0 t \cos 2n \pi f_0 t = \frac{T_0}{2}, \quad (m = n) \end{array} \] 正弦信号的正交特性是我们能够使用正弦信号集合作为基础信号进行信号分解的基础。 复指数信号 复指数信号可以认为是正弦信号的一种简洁表达。复指数信号的定义建立在欧拉公式的基础上。欧拉公式的形式如下： \[ e^{j\theta} = \cos \theta + j \sin \theta. \] 上面等号的右侧是一个复数，其实部为 \(\cos \theta\)，虚部为 \(\sin \theta\)。可以表示为复平面的一个点。 找到的现成的图，图里的角度用的\(\varphi\)，我们这里用的\(\theta\) 欧拉公式的推导过程比较有意思。关于复数，最为基础的定义是 \(j ^ 2 = -1\)。根据这个定义出发，我们对指数函数 \(e^z\) 做泰勒级数展开： \[ e^z = 1 + z + \frac{z ^ 2}{2!} + \frac{z ^ 3}{3!} + \frac{z ^ 4}{4!} + \cdots \] 令 \(z = jx\)，则 \[ \begin{aligned} e^{jx} &amp;= 1 + jx + \frac{(jx) ^ 2}{2!} + \cdots \\ &amp;= 1 + jx - \frac{x^2}{2!} - j\frac{x^3}{3!} + \frac{x^4}{4!} + j\frac{x^5}{5!} - \frac{x^6}{6!} -j\frac{x^7}{7!} \\ &amp;= 1 - \frac{x^2}{2!} + \frac{x^4}{4!} - \frac{x^6}{6!} + \cdots + j\left(x - \frac{x^3}{3!} + \frac{x^5}{5!} - \frac{x^7}{7!} + \cdots\right) \\ &amp;= \cos x + j \sin x \end{aligned} \] 推导中我们应用到了 \(\cos x\) 和 \(\sin x\) 的泰勒展开形式： \[ \begin{array}{l} \cos x = 1 - \frac{x^2}{2!} + \frac{x^4}{4!} - \frac{x^6}{6!} + \cdots \\ \sin x = x - \frac{x^3}{3!} + \frac{x^5}{5!} - \frac{x^7}{7!} + \cdots \end{array} \] 基于欧拉公式我们可以对复数有更加深刻的理解。在初等教育中（即高中教育）中，我们就接触了复数的概念，而那时我们引入的这个概念的方式是定义 \(j = \sqrt{-1}\)。这种定义方式显得非常的「刻意」。通过欧拉公式我们可以更加深入地理解复数在物理上的含义。 任意一个复数我们可以将其写成欧拉公式的形式：\(z = r e^{j \varphi}\)。我们将该复数与\(e^{j\theta}\)相乘得到： \[ z e^{j \theta} = r e^{j \varphi} e^{j \theta} = r e^{j (\varphi + \theta)} \] 可见复数的幅度没有变化，其角度旋转了 \(\theta\)。特别的, \(j = e^{j \pi / 2}\)。即一个数字乘以 \(j\) 等于将其在复平面上旋转 90 度。那么 \(j ^ 2\) 相当于旋转 180 度，正好能将 1 旋转到 -1。 在欧拉公式的基础上我们给出复指数信号的一般形式： \[ s(t) = A e^{j(\omega_0 t + \varphi)} \] 其中 \(\omega_0\) 为角速度，\(A\) 为幅度，\(varphi\) 为初相。在垂直复平面的方向引入时间轴，则幅信号在这个三维空间内为以螺旋曲线。其在复平面内的投影为匀速圆周运动，而进一步从复平面往实轴的投影，则变为简谐运动（正弦信号）。 。 将复信号的实部和虚部分来来看，可以认为是两路并行传输的信号。需要注意的是，复信号是一个理论性的模型，在实际传输中，虚数\(j\)无法被传递，要传递「复信号」，实际系统必须并行传输其实部和虚部。 复信号的数学特点和正弦信号类似，都表现出周期内积分为0和正交特性。 相与相位 在《深入浅出通信系统》中，作者对这一部分的概念做了非常深入的阐述。我个人认为这个部分的概念其实比较简单，实在不需要啰嗦太多。这里我们非常简要地带过。 相与相位之间有着非常微妙的概念差别。「相」比较宽泛地指信号的状态，而「相位」则是从数学角度进行抽象之后对周期信号的相对状态的描述。这里之所以要强调「相对」状态是因为相位的定义独立于信号的幅度。即相位值的是正弦信号中三角函数的因变量部分，这个部分物理上表示一个角度，故相位也称为相位角。 信号的分解与合成 傅里叶级数 将信号表示为一个直流分量和一系列复指数信号之和的过程被称为傅里叶技术展开。周期信号 \(f(t)\) 的傅里叶技术展开形式为: \[ f(t) = \sum_{k = -\infty}^{\infty}c_k ^{j k \omega_0 t} \] 其中 \(\omega_0 = 2 \pi / T\), \(T\) 为信号周期。\(c_k\) 为傅里叶系数，\(c_0\) 为直流分量。利用复指数信号的正交性，我们可以分别计算所有的傅里叶系数。计算公式如下： \[ c_k = \frac{1}{T} \int_{-T/2}^{T/2}f(t) e^{-j k \omega_0 t} dt, \quad (k=0, \pm 1, \pm 2, \cdots) \] 由于复指数信号的正交性，频率不是 \(k \omega_0\) 的信号的积分都会变成 0。同频率的积分为 \(T\)。故上述积分最后能够得到 \(c_k\)。 下面我们以方波信号\(x(t)\) 为例计算其傅里叶技术。方波信号的周期为 \(T\)，幅度为 1，脉宽为 \(\tau\)。对于方波来讲，占空比为 \(1 / 2\)，因此 \(T = 2 \tau\)。 方波信号 先来计算 \(c_0\): \[ c_0 = \frac{1}{T} \int_{-\tau / 2} ^ {\tau / 2} x(t) dt = \frac{1}{T} \int_{-\tau / 2} ^ {\tau / 2} 1 dt = 0.5 \] 即幅度为 1 的方波信号的直流分量为 0.5。然后我们来计算 \(c_k\)。 \[ \begin{aligned} c_k &amp;= \frac{1}{T} \int_{-\tau / 2} ^ {\tau / 2} x(t) e^{-j k \omega_0 t} dt \\ &amp;= \frac{\sin (k \omega_0 \tau / 2)}{k \omega_0 T / 2} \\ &amp;= \frac{1}{2} sinc \left(\frac{k}{2}\right) \end{aligned} \] 其中\(sinc\)函数定义为 \[ sinc(x) = \frac{\sin(\pi x)} {\pi x} \] \(sinc\) 函数的波形 更一般地，对于占空比为 \(1 / n\) 的矩形信号，我们可以得到 \[ c_k = \frac{1}{n} sinc \left(\frac{k}{n}\right) \] 周期信号的离散谱 将傅里叶技术画到复平面上沿系数 \(k\) 排列就能得到周期信号的离散谱。这样直接画出来的谱是三维的，为了更加直观，一般拆分成幅度谱和相位谱。 傅里叶变换 变换公式 原书中以矩形脉冲信号为例讲述了如何求非周期信号的连续谱。这个过程其实就是级数到积分的朴素思想的反映。因此我们这里跳过这些引导部分直接将傅里叶变换。 傅里叶变换的推导过程如下。对于任意非周期信号 \(x(t)\)，我们以 \(T\) 为周期，对 \(x(t)\) 进行周期性扩展，得到周期信号 \(x_T(t)\)【这里的周期性扩展是指逐次平移 \(T\) 并于原信号叠加】。对于周期信号 \(x_T(t)\) 我们可以计算其傅里叶级数： \[ c_k = \frac{1}{T}\int_{-T / 2}^{T / 2} x_{T}(t) e^{-jk\omega_0 t} dt \] 记 \(T = 1 / f_0\)，\(\omega_0 = 2 \pi f_0\)，得到 \[ c_k = f_0 \int_{-T / 2}^{T / 2} x_{T}(t)e^{-jk2\pi f_0 t} dt \\ \Rightarrow \frac{c_k}{f_0} = \int_{-T / 2}^{T / 2} x_{T}(t)e^{-jk2\pi f_0 t} dt \] 当 \(T\) 趋于无穷大时，\(f_0\) 趋于 0，此时 \(x_T(t)\) 趋向于 \(x(t)\)。则有 \[ X(f) = \int_{-\infty}^{\infty} x(t) e^{-j 2 \pi ft} dt \] 此即为傅里叶正变换。逆变换为： \[ x(t) = \int_{-\infty}^{\infty} X(f) e^{j 2 \pi ft} df \] 有时候傅里叶变化中使用 \(\omega = 2\pi f\) 作为变量，此时变化公式为： \[ \begin{array}{l} X(\omega) = \int_{-\infty}^{\infty} x(t) e^{-j \omega t} dt\\ x(t) = \frac{1}{2\pi} \int_{-\infty}^{\infty} X(\omega) e^{j \omega t} d\omega \end{array} \] 注意我们在得到傅里叶正变换的公式时，使用了傅里叶级数。\(X(f)\) 从 \(c_k / f_0\) 转化而来。所以 \(X(f)\) 也会被成为频谱密度。 非周期信号的傅里叶变换 矩形脉冲信号的傅里叶变换是 \(sinc\) 函数。反过来，\(sinc\) 信号的傅里叶变换是矩形函数。 且注意到矩形脉冲越窄，则 \(sinc\) 函数的主峰越宽。当矩形脉冲无限窄时（冲激函数），其傅里叶变换成为一个常数，即频谱上的一条无穷长的水平线。 傅里叶变换的对称性]]></content>
  </entry>
  <entry>
    <title><![CDATA[中国近现代史部分的史料]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E8%BF%91%E4%BB%A3%E5%8F%B2%2Findex.html</url>
    <content type="text"><![CDATA[中国近代史比较复杂，对于近代史认识，受到当前政治格局的影响很大，自然也有很多谬误。这里整理的材料，力图尽量为每一个史实论断提供多角度的论证依据。 以下按照时间大致分类一下。有一些纲领总括的内容单独列出。 按时间分类 晚清 北洋 民国（抗战前） 原始史料集 九一八事变前蒋张关于东北问题的讨论 常凯申微操集 民国（抗战） 民国（解放战争时期） 一共（1978年以前） 工程类 长江改道工程 淠史杭自流灌溉工程 原始史料集 朝鲜战争不同时期TIME对于周恩来的报道 二共（1978年以后） 中国近代史的一些有用的书籍史料 大陆方面 台湾方面 欧美方面 日韩及其他]]></content>
  </entry>
  <entry>
    <title><![CDATA[GCCS-M]]></title>
    <url>%2Fknowledge-base%2Fmilitary%2Ftechnologies%2F%E7%BE%8E%E5%86%9B%E7%8E%B0%E5%BD%B9%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%2FGCCS-M.html</url>
    <content type="text"><![CDATA[GCCS-M (Global Command and Control System - Maritime) 是海军的主要的战场命令和控制系统。这一项目继承自NTCS-A (Navy Tactical Command System Afloat)和JMCIS 项目1。 Reference Global Command and Control System - Maritime (GCCS-M) AN/USQ-119E(V]]></content>
  </entry>
  <entry>
    <title><![CDATA[1996年朝鲜潜艇渗透事件]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E6%9C%9D%E9%9F%A9%2F%E4%BA%8C%E6%88%98%E5%90%8E%E6%9C%9D%E9%B2%9C%2F1996%E5%B9%B4%E6%9C%9D%E9%B2%9C%E6%BD%9C%E8%89%87%E6%B8%97%E9%80%8F%E4%BA%8B%E4%BB%B6.html</url>
    <content type="text"><![CDATA[江陵潜艇渗透事件（朝鲜语：강릉지역 무장공비 침투사건／江陵地域 武裝共匪 侵透事件）是指于1996年9月朝鲜人民军特种部队为收集韩国情报，而使用鲨鱼级潜艇渗透至韩国东海岸的江陵市附近。由于渗透用的潜艇搁浅，参与行动的26名朝鲜士兵不得不弃艇，并从附近的海滩躲入附近的山林中隐藏。大韩民国国军和警察随即对他们展开时长两个多月的追捕，26名朝鲜人中仅2人存活，而韩国共有16人丧生（包括军警和百姓）、27人受伤。朝鲜的此次渗透行动虽以失败而告终，但也使外人得以一见朝鲜特种部队的训练水平和作战能力，但此次行动又使因粮食援助而渐走向缓和的朝韩关系再次走进紧张局势。 事件中搁浅的鲨鱼级潜艇 韩国军队登上朝鲜间谍潜艇 韩军组织兵力开始追捕朝鲜潜艇上的特工人员 9月18日约17时，韩国士兵到达潜艇搁浅处西南8公里的一座330米高的山顶空地上，发现11名朝鲜特工的尸体。 朝鲜11名特工自杀现场，其中的10具尸体肩并肩，排列成一条直线，而另外一具尸体（海军部金东源上校）在不远处的另一边，上校的手枪还放在枪套里。这些身亡的朝鲜人都穿便装和白网球鞋。 被俘虏朝鲜间谍潜艇舵手李光素 进一步阅读： 朝韩秘密战：96年朝鲜特种部队对韩国秘密潜入 维基百科：江陵潜艇渗透事件]]></content>
  </entry>
  <entry>
    <title><![CDATA[GIG]]></title>
    <url>%2Fknowledge-base%2Fmilitary%2Ftechnologies%2F%E7%BE%8E%E5%86%9B%E7%8E%B0%E5%BD%B9%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%2FGIG.html</url>
    <content type="text"><![CDATA[美军传统的地基、海基、空基和天基信息系统大部分都是一些专用系统，彼此之间难以兼容互通，显然，美军这种信息不能及时共享的状况大大地制约了三军联合作战效能的提升。因此，美军提出了“全球信息栅格（GIG）”计划，试图通过整合现有各种信息资源，建立起一个供美国陆、海、空三军通用的全球通信网络，并以此为中介，把美军散布在全球范围内的传感器网、计算机网和武器平台网联为一体，最终形成一个全时、全维、全频谱和全球性的用于信息化作战的立体互联网，为美军实现互联、互通、互操作奠定基础。从体系结构上看，GIG一改大多数C4ISR 系统纵向一条线或组网一个面的链接模式，按照联合作战体系结构，科学地联接成一体化的系统，建立栅格状的信息网系，以便从结构上为实现全球任意点、不同需求之间的信息沟通提供环境条件(source)。 It is defined as a &quot;globally interconnected, end-to-end set of information capabilities for collecting, processing, storing, disseminating, and managing information on demand to warfighters, policy makers, and support personnel&quot;. GIG的建设实施经历了十几年发展，为实施网络中心战奠定了重要物质和技术基础，其建设经历概念提出→实践→修正→在实践的过程，对其认识也在不断深刻和完善。其中对GIG定义经过多次完善，“GIG是由全球互联的、端到端的一系列信息能力、相关程序和人员构成，旨在根据作战人员、政策制定人员和保障人员的要求来收集、处理、存储、分发和管理信息。”“GIG包含信息、信息技术、相关的人与程序构成的信息能力，以支持国防部人员与组织完成其使命和任务，促成国防部和非官方部队使命伙伴接入、交换与应用信息和服务。”“GIG是无缝的、统一的和集成的网络中心环境”。 由此可以体会出GIG的如下核心内涵： GIG包括实现信息优势所必需的全部自有的及租用的通信和计算系统，以及服务、软件（包括应用软件）、数据、安全服务和其它相关服务； GIG为所有工作地点（基地、岗哨、营地、台站、设施、移动平台和部署的阵地）提供能力； GIG为联军、盟军及非国防部用户和系统提供接口GIG定义的“信息能力”包括信息、信息技术、相关的人与程序四个组成； GIG主要任务是提供全球互联以及端到端的信息能力，确保“在合适的时间、合适的地点、合适的人、得到合适的信息。”； GIG还强调与作战任务和军事行动紧密联系，支持各类人员和军事行动，也就是转化为战斗力； 还进一步明确了GIG将提供的是无缝的网络信息环境，为网络中心战提供物质基础，这个环境包括：无处不在的网络环境，能汇聚大量有价值的信息，高度可用的、安全的、可靠的，在该环境中用户处于主动地位，能够提取他们所需的信息，而不再依赖情报生成中心确定用户的需求，并将信息硬推给用户。 GIG的系统模型 为了推进GIG建设，确定了13项关键技术和优先发展一批共性基础项目。13项关键技术包括： IPv6 SOA基础结构技术 MANET与传感器技术 人机交互（HCI）技术 语义网技术 普适的RFID标记 超大规模数据存储于传输技术 高性能计算技术 栅格计算技术 代理技术 IA技术 黑核促成技术 数字化政策促成技术 优先发展的共性基础项目如： GIG带宽扩展工程 GIG-BE 转型卫星通信系统 TSAT 联合战术无线电系统 JTRS 网络中心企业服务 NCES 加密改装工程 CTI GIG“联盟体系结构” 全球信息栅格（GIG）可以使高度分散的美军作战单元在多维空间同时进行协同作战，其主要构成有传感器栅格、通信网络栅格、计算机网络栅格和武器平台栅格等，几乎涉及到了美军所有的作战资源。 GIG 由一个名为NetOps的构造【原词为construct，名词】来管理。NetOps定义为执行下面三类必要任务的行动框架： 环境感知 Situation Awareness (SA) 命令与控制 Command &amp; Control (C2) Commander (CDR) of United States Strategic Command (USSTRATCOM). 百度百科：全球信息栅格 美军全球网络信息栅格/GIG详解 Department of Defense Global Information Grid Architectural Vision]]></content>
  </entry>
  <entry>
    <title><![CDATA[JTRS: 联合战术无线电系统]]></title>
    <url>%2Fknowledge-base%2Fmilitary%2Ftechnologies%2F%E7%BE%8E%E5%86%9B%E7%8E%B0%E5%BD%B9%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%2FJTRS.html</url>
    <content type="text"><![CDATA[概述 目前，美军正在逐步对现役通信系统进行数字化项目改造，以适应未来数字化战场的需要，联合战术无线电系统（JTRS）就是其中的一个重要项目。它是美军唯一一种可适用于所有军兵种要求的通用新型系列（数字）战术电台，其作用主要用于逐步取代美军各军兵种现役的20多个系列约125种以上型号的75万部电台。 联合战术无线电系统（JTRS）工作频率范围（2MHz–3GHz）极宽，基本覆盖了高频/甚高频/特高频波段，型号有手持式、背负式、车载式、机载式、舰载式和固定式等，其主要特点为多频段多模式多信道、可网络互联，这使得JTRS各种型号的电台在复杂的战场环境下不仅能做到相互之间兼容互通，而且还可通过其跨频段跨时空的横向和纵向网络为分布在广阔战区内不同地域的美国陆、海、空和海军陆战队提供远程超视距且安全可靠的语音、数据、图像和视频通信，因而联合战术无线电系统（JTRS）未来有望成为美军在数字化战场中的主要通信手段。 JTRS旨在使用一套可编程的软件定义无线电(SDN)系统来取代现存的多种独立频段的的无线电台。只需要通过软件配置就可以让设备工作与普通的频段与不同的模式（波形）之下，而不需要同时安装多种不同的无线电物理终端，从而实现融合各种基于独立硬件的无线电功能。因此JTRS具有广阔的工作频段范围（2MHz ~ 2GHz）。 美国陆军【2012年7月五角大楼关闭了JTRS项目办公室，并将采购职权交给陆军(source)】在2015年六月宣布全面生产HMS项目（2015-2016年评估，2017年全速生产）。早在1997年8月，JTRS计划获得美军TROC【联合需求审查委员会】批准，以美国国防部的联合战术结构(JTA)标准为基础。预计美军各军种的大量战术通信计划都将被JTRS取代。这样把大量军用无线电研究活动合并成单一计划，可加速计划的完成，节省研究、开发、采购、训练等费用。美国防部拟用JTRS取代美军现用的25～30个系列共75万部电台。目前，除了海军的数字模块电台计划、空军的集成终端计划和陆军的未来数字电台计划继续进行外，美已删减了大量的研究计划，而且早期型号的JTRS系统将由上述三种电台发展而来。 工程规划 综上描述，JTRS是一个野心勃勃的庞大计划，美军计划使用JTRS提供的一揽子通信方案，取代过去的数量众多的单一信道通信设备。 2005年，JTRS项目重组，改由JPEO(Joint Program Executive Officer)领导。JPEO将JTRS项目拆分成如下五个ACAT 1D子项： JTRS Network Enterprise Domain (NED) JTRS Ground Mobile Radios (GMR) JTRS Handheld, Manpack, &amp; Small Form Fit (HMS) JTRS Multifunctional Information Distribution System (MIDS) JTRS Maritime Fixed/Station (AMF) 以及一个ACAT III项目 Handheld JTRS Enchanced Multi-Band Intra-Team Radio (JEM). NED 简而言之，NED项目负责开发，维护和增强JTRS对于Legacy网络和协议兼容与互操作。NED产品线包括： 15 Legacy Waveforms Bowman VHF Collection Of Broadcasts From Remote Assets (COBRA) Enhanced Position Location Reporting System (EPLRS) Have Quick II High Frequency Single sideband / Automatic link establishment (HF SSB/ALE) NATO Standardization Agreement 5066 (HF 5066) Link 16 Single Channel Ground and Airborne Radio System (SINCGARS) Ultra High Frequency Demand Assigned Multiple Access Satellite communications (UHF DAMA SATCOM) 181/182/183/184 Ultra High Frequency Line-of-Sight Communications System (UHF LOS) Very High Frequency Line-of-Sight Communications System (VHF LOS) 3 Mobile Ad Hoc Networking Waveforms Wideband Networking Waveform (WNW) Soldier Radio Waveform (SRW) Mobile User Objective System (MUOS)–Red Side Processing Network Enterprise Services (NES) including JTRS WNW Network Manager (JWNM) Soldier Radio Waveform Network Manager (SRWNM) JTRS Enterprise Network Manager (JENM) Enterprise Network Services (ENS) 注意上面Wideband Networking Waveform即为 Traffic Predictions for Tactical Wideband Communication 这篇论文面向的方向，只是JTRS的很小的一部分。 GMR GMR则是面向DoD（国防部）和陆军改革的核心项目，提供了联合作战的关键通信能力。GMR项目由波音公司承包。 GMR可以使用1至4个信道，支持多个安全等级，可以高效地使用2MHz ~ 2GHz的频段。此无线电兼容SCA (Software Communication Architecture)，提高了其带宽，并可以和现存的多个军用电台系统互操作。GMR支持如下Waveform【waveform可以理解为软件定义无线电中的「软件」】 WNW SRW SINCGARS EPLRS UHF SATCOM【SATCOM表示卫星通信】 HF SATCOM 上述所有的波形中，GMR的核心是WNW。WNW支持在非LOS(non-line-of-sight)场景下的重新路由和重传(re-route and re-transmit)，从而确保在地面战场维持环境感知。GMR WNW采用ad hoc的组网方式，可以使得玩过 目前GMR合同已经完成，陆军计划将GMR中获得的知识应用于未来的Mid-Tier Networking Vehicular Radio solicitation【可以翻译为中间层网络车载电台系统，起作用是在更高层次的战术通信网络，如旅和营级别，和低层次的战术通信网络，如连排级别，起到中间层的作用，solicatitation的意思是募款】中。 不过由于JTRS GMR项目严重超预算，美国国防部将援引纳恩-麦克柯迪法案，大幅度削减GMR的购买数量。(source-2011) HMS JTRS HMS (Handheld, Manpack &amp; Small Form-Fit)，即手持，背负式即便携式的JTRS电台设备由Thales【法国🇫🇷公司】和General Dynamic Mission Systems【美国🇺🇸公司】联合开发。JTRS HMS用来取代CSCHR【Consolidated Single-Channel Handheld Radio，单信道手持设备】(PRC-148, PRC-152【均为猎鹰系列产品】)等。JTRS HMS项目是为了满足Office of the Assistant Secretary of Defense for Network and Information Integration/DoD Chief Information Office的需求，要求就兼容SCA的软硬件。 MIDS JTRS MIDS 为安全，可扩展，模块化，无线，抗阻塞的数字信息系统。目前为空军，地面部队以及两栖部队提供Tactical Air Navigation (TAN), Link-16, J-Voice等通信手段。 AMF AMF主要是面向海空军载具和固定平台提供四信道、全双工、软件定义的无线电台。 JENM (Joint Enterprise Network Manager) 简介 JENM 为一个统一的网络规划、管理和安全相关的管理软件，应用于中间层或者底层的无线电和相关waveform的管理。JENM在JTRS中负责管理WNW(Wideband Networking Waveform)。不过JENM并未耦合到JTRS的电台设备中，作为独立软件的JENM可以部署于普通的商用电脑(source)。在上面介绍JTRS NED项目时我们提到过三个Network Manger，分别是 JTRS WNW Network Manager (JWNM) Soldier Radio Waveform Network Manager (SRWNM) JTRS Enterprise Network Manager (JENM) 三者的关系是JENM包含JWNM和SRWNM。 上图的出处是：Joint Tactical Radio System (JTRS) Network Enterprise Domain (NED) Network Managers。提供此PDF文件的网站https://www.dote.osd.mil/的title是The Office of the Director, Operation Test and Evaluation，为美国国防部下属部门 JENM 可以被用来配置异质网络和waveform构成的整体网络，确保跨不同单元的网络互操作能力。其空中管理系统(eOTAM)的可以减少重新配置，管理和控制战术无线电网络需要的人工成本。 JENM 还有助于将网络上下不同层级整合到统一的NetOps工具中。 Joint Tactical Network Environment Network Operations Toolkit(J-TNT)将多个网络管理工具整合到一台笔记本电脑上，方便信号兵管理战术网络。J-TNT将搭载三种软件应用，包括： JENM CJSMPT (Coalition Joint Spectrum Management Planning Tool) SPEED (Systems Planning Engineering and Evaluation Device) JENM 的工作能力如下： Operates within the Integrated Tactical Networking Environment and handles the planning, configuration, monitoring, management, and analysis functions for all signal components and systems within the Joint tactical radio environment. Reduces manpower hours to reconfigure, manage, and control a tactical radio network, by performing the tasks rapidly over-the-air. Paves the way for the convergence of NetOps tools and management for both the Upper Tactical Internet and the Mid and Lower Tactical Internet (radio networks). 讨论 Operationally realistic testing of network centric tactical applications in a lab environment 这篇文章的Section III尝试测试了JENM的性能。文章中提到： JENM负责生成RMDS(Radio Mission Data Set)配置文件，改配置文件用于配置WNW waveform。同时在waveform启动后JENM负责监控WNW网络的状态。在每个WNW电台设备上，会有网管程序的agent收集数据，并通过WNW传递给JENM（JENM需要连接到网络中的一个电台）。由于JENM本身需要依赖于战术网络来传递管理消息，因此控制管理开销增长，提高信息传输的可靠性就至关重要。 上面的论文测试的尝试的是15个WNW节点组成的WNW子网。该子网是一个更大网络的一部分。 仿真场景 测试结果： 测试结果 更多阅读 五角大楼关闭联合战术无线电系统项目办公室 美海军升级数据链终端，实现军事通信组网 2005年·联合战术无线电系统发展分析 美国军用通信装备抗干扰技术发展调研报告: 付费报告，1.5万。 Joint Tactical Radio System (JRTS) Ground Mobile Radios (GMR)]]></content>
  </entry>
  <entry>
    <title><![CDATA[CANES]]></title>
    <url>%2Fknowledge-base%2Fmilitary%2Ftechnologies%2F%E7%BE%8E%E5%86%9B%E7%8E%B0%E5%BD%B9%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%2FCANES.html</url>
    <content type="text"><![CDATA[调研完成后发现，CANES项目更加注重的是舰内网络的整合，而不是舰队级的跨舰网络。 概况 Northrop Grumman 官方账户的介绍视频 CANES (Consolidated Afloat Networks and Enterprise Services，统一海上网络与集团服务): 是美军下一代的海上战术网络3，其是采用开放式体系结构的战术网络基础设施，旨在建立统一的公共网络替代、整合现有分散式 C4I 网络系统，达到节省安装空间、精简网络种类、减少人员配置、进而提高系统互操作性8。CANES将原有的多种舰载网络程序统一起来【包括：综合舰载网络系统(ISNS) 、潜艇局域网( SUBLAN) 、海上联合军种地区信息交换系统(CENTRIXS－M) 、绝密信息局域网(SCI LAN) 以及视频信息交换系统(VIXS) 和舰载视频分配系统(SVDS)】，提供通用的计算环境，为了多达40种的Command, Control, Intelligence and Logistic应用提供服务。 目前,美海军的300 多艘舰船上一共装备了数千套传统网络系统,其中,仅ISNS系统就有297 套,CENTRIXS有151 套,SCI有144 套,SUBLAN有50套,它们都是主要的海上网络。以特定舰船为例,航母( CVN) 或两栖舰( 如LPD、LHA) 等作战舰船上有50 多个独立的网络,“洛杉矶”级攻击型核潜艇和 “俄亥俄”级弹道导弹核潜艇上用于支持关键任务的网络系统不少于10 个。每个特定网络都有自己专用的机柜和服务器,彼此之间不能共享服务和存储资源,每个特定应用也都有自己专用的网络和硬件,不仅在安装、培训和后续保障服务上带来成本预算急剧上升和人员增加的问题,更重要的是,每个网络被设计成支持单一的作战功能,这就造成了大量烟囱式海上网络的存在,它们之间的信息共享和互操作能力很差,无法满足海军 “网络中心战”的需求。9 CANES网络基础设施迁移策略 C4I项目执行办公室( PEO C4I) 是美国管理CANES项目的最高机构,它行政上直接隶属于空间与海战系统司令部(SPAWAR) 。当前,CANES项目发展与美国其他主要装备的采办一样,也是采用项目管理的组织形式。PEO C4I下设5 个负责产品开发和维持的项目办公室,其中战术网络项目办公室( PMW160) 具体负责CANES项目管理。CANES项目的主要合同商为6： Northrop Grumman - Herndon, Virginia BAE Systems - Rockville, Maryland Serco - Reston, Virginia DRS Laurel Technologies - Johnstown, Pennsylvania 图片来源：Navy's CANES installation ahead of schedule The Navy's newly deployed afloat information technology system called CANES is a cyber-secure solution that consolidates key legacy C4I networks by employing flexible open architecture to generate long-term savings and bring operational agility to the warfighter. CANES 网络提供了单一的，统一的物理网络，同时兼顾不同的密级的处理，包括Unclassified, Secret, Secret Releasable, and Top Secret security等四个Domain。同时提供了跨密级通信的解决方案。 CANES 针对不同的部署平台提供了三种不同的变种方案，包括： unit level for smaller ships such as destroyers and cruisers force level for large deck ships such as aircraft carriers and large deck amphibious ships submarine variant. CANES的构成 在CANES项目中,有2 点是反复强调的: 1)CANES采用智能技术和现有的商用成熟技术进行集成,项目中的所有技术均已验证; 2) 更多的网络管理功能以减少人员和维护要求为目标,舰队首席信息官( Fleet CIO) 对海上网络具有 “可见性”( Visibility) 。CANES特别强调网络监视、健康评估、设备管理以及计算机网络防御等功能。 CANES是采用开放式体系结构的战术网络基础设施,主要由3 个核心部件构成 通用计算环境(CCE) 通用计算环境( Common Computing Environment,CCE) 能有效地利用 “虚拟化”技术将舰载网络硬件( 交换机和路由器) 、机架、服务器和通信媒介等整合到公共网络核心中,以取代相似的硬件、独立的操作,从而实现硬件基础设施的虚拟化管理。目前,一台服务器上仅能同时运行一种操作系统,但是借助于采用SOA架构的虚拟化技术后,不同种类的操作系统( 如Linux,Solaris,Windows等) 以及它们各自所支持的所有应用程序都可以在同样的硬件和服务器设施上同时运行,即1 台 “虚拟化服务器”将允许表面上不兼容的系统和多个独立运行的应用程序同时运行在1 台单独的服务器上,最终实现将多种计算功能整合到一个公共网络和服务器组中的目标,这将有效扩展计算机能力,并能够使硬件设施投资和资源得到最大化利用。 需要注意的是,CCE主要侧重于硬件和硬件的虚拟化管理,而不涉及到应用和服务对象,舰队所使用的应用和服务都将 “托管”在CCE的硬件基础设施上,在1台服务器上可以调用任意一种操作系统所支持的全部应用。 虚拟化是一种软硬件策略,允许大量的虚拟机( 操作系统、应用程序或网络) 在一套通用物理硬件上独立且同时运行,可显著提高信息系统的可靠性和效率,减少实际硬件的安装数量和空间,降低维修需求。 在实现硬件基础设施的虚拟化管理后,所有舰载网络的硬件和操作软件都将由记录程序(POR)进行集中式管理,而不是像目前这样只是基础设施的简单复制。同时,CCE也使信息安全传输问题实现标准化,允许进行全舰队范围的硬件和软件升级,以确保舰载网络保持先进水平。 基于SOA的海上核心服务(ACS) CANES的SOA架构旨在为服务使用者提供一种结构平台,在此平台上可以利用开源和COTS软件对各种基本能力和核心服务等进行混搭和匹配,快速地创建、调用、执行和管理各种基于服务的新应用以及以网络为中心的核心企业服务等,从而满足不断变化的作战需求。 基于SOA的海上核心服务( Afloat Core Services,ACS) 创建一种可升级的服务交互分层模型(见上图),将现有烟囱式系统的传统应用分解、转换为面向用户、数据的可复用式公共服务和应用,这些公共服务和应用能够利用现有的基本信息服务、架构服务、ACS和特定的服务。其中,基本信息服务可以提供普遍的信息共享能力; 架构服务对应用软件、数据、战略服务等提供托管和传送交付功能。通过采用标准化的接口,系统可以调用这些公共服务,有益于减少成本,统一系统的维护工作。 ACS利用SOA方式将硬件从专属软件中分离出来,允许软件开发人员使用现有的插入式方法提供或者转换数据,从而避免必须重写某些重复功能。例如,如果一个程序员实现将舰艇传感器搜集的信息显示到地图上的功能,他不必写下每个部分的详细代码———因为地图显示功能和传感器信息采集功能已经作为服务存在了,因此程序员只需通过网络载入并使用这些标准服务,致力于如何提高性能而不是重写已经存在的代码。通过开发ACS,可将GIG的核心企业服务应用到作战人员,以支持海军作战人员在中断、时断时续和有限制通信的场景中实现C4ISR应用。 跨域解决方案(CDS) 跨域解决方案(Cross - Domain Solutions,CDS)能实现多个不同安全保密级别( MLS) 的系统运行在同一个客户端工作站,其当前技术成熟度为3 级。CDS也允许用户设置数据访问的许可级别,以便在不同的安全级别内均可访问同样的数据,同时阻止信息流在不同安全域中的传输。即允许不同安全等级( 绝密、秘密、解密、非密) 的数据在公共网络设施CCE上传输。 在CDS设计和跨安全域的架构整合过程中,为了降低风险,专门开发了一个CDS原型样机加以演示和验证。 部署情况 The USS McCampbell (DDG 85) was the first Navy ship to become operational with CANES. USD(AT&amp;L)【The undersecretary of defense for acquisition, technology and logistics】于2015年10月13日批准了CANES的全面部署6，目前，海军正在为8艘驱逐舰、2艘航母和1艘两栖攻击舰安装该网络。到2021年，该软件将被部署在190余艘水面舰艇、潜艇等7。因此CANES应当是现役的最先进的美国海军的一揽子通信解决方案。 Reference 在Scholar以CANES+Navy可以搜到不少文章 Consolidated Afloat Networks and Enterprise Services (CANES): 这个网页里面附了很多PDF资料的下载。 Navy Afloat Network Undergoes First Upgrade on Forward-Deployed Ship Consolidated Afloat Networks and Enterprise Services (CANES) Fact Sheet CANES: An Open Systems C4I Networks Design，【提供该文件的网站是northropgrumman.com，即诺斯洛普·格鲁门公司，简称诺格，是世界第四大生产厂商，世界上最大的雷达制造商和最大的海军船只制造商】 What Are the Effects of Consolidated Afloat Networks and Enterprise Services (CANES) on Navy Manpower, Personnel, and Training?。注意这一个网页底部提供了Full Report下载【关于这个网站：The RAND Corporation is a nonprofit research organization providing objective analysis and effective solutions that address the challenges facing the public and private sectors around the world.】 dote.osd.mil: FY16 NAVY PROGRAMS: Consolidated Afloat Networks and Enterprise Services (CANES) 美国海军舰艇安装下一代舰载战术网络CANES 美国海军新一代水面舰艇作战系统体系架构 美海军“综合海上网络和企业服务”项目研究]]></content>
  </entry>
  <entry>
    <title><![CDATA[NetOps]]></title>
    <url>%2Fknowledge-base%2Fmilitary%2Ftechnologies%2F%E7%BE%8E%E5%86%9B%E7%8E%B0%E5%BD%B9%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%2FNetOps.html</url>
    <content type="text"><![CDATA[简介 最近我一直在致力于调研美军所使用的战术，或者战略通信系统的网络管理系统。不过，并未发现美军会单独将网络管理系统软件立项，一般都是伴随这某个整体解决方案一起做了。不过，在不同的解决方案的网络管理系统中，都提到了NetOps这个概念。NetOps的概念应该类似于DevOps，它并不是某个具体的技术实现后者技术方案，而是一种行业习惯的体现。 例如Wiki上说，DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。类似的，NetOps就是对于网络而言，网络硬件体系建设和网络维护管理之间的合作，或者联合开发的惯例。 Newly enhanced and simplified Network Operations tools will make it easier for communications officers to see the &quot;big picture&quot; as they plan, manage and defend the vast tactical mission command network, increasing its security and strength. This Warfighter Information Network-Tactical equipped vehicle (center right) traverses the battlefield during Network Integration Evaluation 16.1 in September 2015 (U.S. Army photo by Amy Walker, PEO C3T Public Affairs) (Photo Credit: Amy Walker, PEO C3T Public Affairs) VIEW ORIGINAL 2008年12月19日，美国国防部发布第8410.02号指令【Instruction 8410.02】，正式将NetOps纳入到全球信息栅格(GIG)的体系中来： DoD Instruction 8410.02. DOWNLOAD! 文件中将NetOps定位为DoD，即国防部层面统一的GIG网络操作，组织和方位技术支持。具体而言，NetOps包含的关键任务(Essential Tasks)，但不限于集团管理(GIG Enterprise Management, GEM)，网络保障(GIG Net Assurance, GNA)，内容管理(GIG Content Management, GCM)以及网络防御(GIG Net Defense, GND)。这里的操作，更多程度上是指「人」或者「部门」的协作。按照Wiki中的说法： NetOps provides assured NetCentric services to the DoD in support of full spectrum of warfighting operations, intelligence, and business missions throughout the GIG enterprises, seamlessly, end-to-end. An objective of NetCentric services is to quickly get information to decision makers, with adequate context, to make better decisions affecting the mission and to project their decisions forward to their forces for action. If the decision maker is not getting the needed net-centric services, the GIG NetOps community must collaboratively determine who must take action and how information flow can be optimized. This requires NetOps personnel to have a shared SA as well as the technologies, procedures, and collaborative organizational structures to rapidly assess and respond to system and network degradations, outages, or changes in operational priorities. All functions required to most effectively support GIG operations will be holistically managed. 即NetOps制定了这样的一套工作流程：当决策制定者需要获取某种网络中心服务，而这种获取管道还不存在是，需要由NetOps Community来协商出由哪个部门来负责采取必要的行动来实现以及优化信息流管道。 NetOps &amp; WIN-T 如上所述，NetOps是GIG体系下的一种整体的工作规范，那么具体到GIG下的通信系统，NetOps会有各自的实现。 在WIN-T中，2016年，美国陆军将WIN-T中的网络管理系统项目Product Manager (PdM) WIN-T Increment 3更名为PdM Tractical Cyber and Network Operations (TCNO)。 We are no longer focused on just supporting WIN-T systems; we now support the full gambit of devices and services on the mission command network, from handheld radios up to SATCOM on-the-move systems. We take a One Network approach and now our name reflects that broader scope. -- Col. Ward Roberts, outgoing PdM for WIN-T's TCNO office4. 新的PdM TCNO将会负责以下项目： Tactical Network Operations Management (TNOM) an integrated and standardized Network Operations (NetOps) toolset Joint Enterprise Network Manager (JENM) the Defense Cyber Operations (DCO) Tactical Col. Ward Roberts在2014年负责了重构WIN-T Increment 3项目，专注于增强和简化WIN-T NetOps。陆军于2016年5月在Network Integration Evaluation 16.2中进行了WIN-T Increment 3 Limited User Test (LUT)。此项测试验证了新的改进的有效性。 Successful evaluation results will support the software technical insertion of the new enhancements into both the at-the-halt and on-the-move increments of the network, which is currently projected for fiscal year 2017. Feedback gained from the evaluation will also support future network improvements.4 UNO UNO (Unified Network Operations) 为陆军方面为了整合现有战略级及战术级网络管理工具而提出的NetOps框架。其功能如下： Delivers advancements in the monitoring, control and planning tools to simplify management of emerging voice, data and internet transport networks Modeling and simulation capability to analyze the best possible network configuration with dynamically changing network due to global complex variants Provides improved information assurance and Network Centric Enterprise Services Inherent software modernization through recurring technical refresh within the PM Tactical Network family of programs Provides NetOps users with the capability to “operationalize” the planning, configuration, monitoring and management of the network through a single consistent tailorable user interface COE compliant, portable, and interactive common GUI with a user definable presentation workspace/dashboard Integrates network planning with mission planning, enabling the S6 to optimize capability to move data around the virtual battlefield in support of the Commander’s scheme of maneuver Integrates Upper Tactical Internet and Lower Tactical Internet network management tools and services Provides near-term “bridging” of NetOps capabilities for tactical radios and tactical network transmission systems operating within the tactical environment Sets the foundation for further integration of tactical and strategic networks for both network management services and cyberspace operations Reference Army enhances NetOps, the eyes and ears of the network Instruction 8410.02 - 2008 Department of Defense Global Information Grid Architectural Vision - 2007 WIN-T's NetOps and Cyber Security program reflagged with change of command Army Warfighter Network - Tactical (WIN-T) Theory of Operation 美国陆军战术级作战人员信息网络相关问题分析及启示]]></content>
  </entry>
  <entry>
    <title><![CDATA[TCNO进一步调研]]></title>
    <url>%2Fknowledge-base%2Fmilitary%2Ftechnologies%2F%E7%BE%8E%E5%86%9B%E7%8E%B0%E5%BD%B9%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%2FTCNO.html</url>
    <content type="text"><![CDATA[TCNO(Tactical Cyber and Network Operations)是WIN-T Inc.2中涉及的自动化网络管理及移动组网功能模块。2016年，PdM WIN-T Increment 3被改组为PdM Tactical Cyber and Network Operations (TCNO)项目，这一项目负责实现网络管理功能。 图片出处：https://peoc3t.army.mil/tn/tcno.php 在美军的通信网络技术平台中，少有将网络管理模块单独拎出来做成独立项目的，一般网络管理软件都是作为整体的网络通信解决方案的一部分来进行。这类解决方案项目，一般对于网络管理部分描述甚少。关于TCNO我们没去爱你能够找到的部分也仅仅是一些报道或者其他的边角料的内容。目前的资料整理如下： WIN-T's NetOps and Cyber Security program reflagged with change of command TACTICAL CYBER AND NETWORK OPERATIONS Tactical Cyber and Network Operations (TCNO) / WIN-T Increment 3]]></content>
  </entry>
  <entry>
    <title><![CDATA[WIN-T]]></title>
    <url>%2Fknowledge-base%2Fmilitary%2Ftechnologies%2F%E7%BE%8E%E5%86%9B%E7%8E%B0%E5%BD%B9%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%2FWIN-T.html</url>
    <content type="text"><![CDATA[WIN-T【中文可以称为：作战人员信息网】是陆军从战区到营级所采用的一个移动、高速、大容量的宽频主干网战术通信网络，可支持陆军全频谱作战, 将最终取代MSE（移动用户设备）和TRI-TAC（三军联合战术通信系统）。作为美军全球信息栅格 (GIG)的战术组成部分, WIN-T将促进装备部队很好地利用GIG服务以及能力 (包括数据库、收集人员、以及国建机构) , 增加信息赋能行动的次数。 WIN-T是未来美国陆军一种移动、高速、大容量的宽频主干网通信网络，可支持陆军全频谱作战，其地域覆盖范围上至战区级单位下至连级单位，将地面作战人员与指挥官和全球信息栅格（GIG）联系在一起。该网络也是以节点（包括机载通信节点）为中心的系统，主要节点有广域网络节点（WN）和用户节点（SN），其中广域网络节点之间的连接是依靠地面宽带无线电中继系统或卫星通信或对流层散射通信或无人机通信或光纤电缆等方式实现的，这些相互连接的广域网节点就形成了WIN-T网络的主干；而用户节点则为战术用户接入该网络提供了入口。 THE BACKBONE OF THE U.S. ARMY'S TACTICAL NETWORK 未来战术级作战人员信息网（WIN-T）将广泛使用联合战术无线电系统（JTRS）和机载通信节点（ACN），以解决互通、带宽、速度、入口等问题，最终实现美军各军兵种部队对战场实时态势的全面感知。WIN-T项目分为4个增项【Increment】实施。 Increments Increment 1: Communications AT-THE-HALT 最初被称为Joint Network Node Network (JNN-N)项目【JNN项目是2003年伊拉克战争期间总结MSE的问题以后紧急开发的，2004年部署到伊拉克，2007年JNN被合并到充足后的WIN-T项目中6】。WIN-T Increment 1 (Inc.1) 最早在2004年的Operation Enduring Freedom和Operation Iraqi Freedom行动中开始列装【列装：Fielding】。Inc.1 第一次赋予了营【battalion】级别的高速语音交换服务和数据通信网络。 Inc.1 的列装工作在2012年6月完成2，目前为止由美国陆军、国民警卫队和预备役部队使用。为了增强网络安全系数，在2012年以后发展了Inc.1b升级版。 Increment 2: Communication ON-THE-MOVE 2013年7月，美国陆军第十山地师于阿富汗战场最早开始列装Inc.2 2。Inc.2 使得士兵可以在脱离基础设施支持的情况下进行通信。 Inc.2扩大了网络吞吐量，提供了自动化的网络管理功能【2016年，PdM WIN-T Increment 3被改组为PdM Tactical Cyber and Network Operations (TCNO)项目，这一项目负责实现网络管理功能。参见NetOps中的介绍】和移动组网能力。Inc.2 将移动卫星通信扩展到机动旅战斗队网络中的连一级，使用高敏网络电台。Inc.2中的视距网络为指挥所提供30Mb/s6的总吞吐量。具备自组织的能力和自愈能力，提高了网络的可靠性。 其中，Inc.2 中的Tactical Communication Nodes【战术通信节点】技术提供了战场移动基础设施服务。可移动的Point of Presence系统，该系统包含部署于营级及以上的战术单位的作战车辆的【营级单位包含4个连，每个连最多两百名士兵10到30个载具】，以及vehicle wireless packages, Soldier Network Extension等连级的系统。 Inc.2 使得作战命令从旅到师到连队等通信可以通过完全ad-hoc的自组网方式进行。指挥官和通信兵可以战场的任意地方操作和维护网络，而不需要专门停下来建设通信设备【ON-THE-MOVE的含义】。 Inc.2 于2015年6月进行投产，至少于2018年末，陆军尚未完成Inc.2的列装。 上图中NCW为Network-Centric Waveform，是WIN-T专用的一种波形。NCW supports a heterogeneous network of terminals with varying antenna, power, and overall transceiver characteristics, ranging from large-aperture strategic terminals to small-aperture tactical/mobile terminals employing satellite communications on the move (S-COTM), and, by employing an advanced network scheduler, maximizes network data throughput and terminal population by making near optimal use of satellite and terminal resources. (source) HNW为 High-Band Waveform Increment 3 这个项目还未开始猎装。Inc.3 预计会提供完全的移动，灵活，动态的战术网络能力，能够为较为孤立地区的稀疏部队部署提供通信支持。Inc.3 中将会引入空中平台支持【2014年，陆军对Inc.3项目进行重组，将空中层删除，推迟到未来开发6】。从而实现一种三层架构的通信体系，包括： 传统的Line-Of-Sight通信； 空中平台：包括使用UAV和其他空中平台； beyond-line-of-sight，如卫星 2017年WIN-T Inc3项目被美国国会叫停。2018和2019年都有发生从WIN-T Inc.3项目中挪用经费到其他项目的事情。 WIN-T 中存在的问题6 WIN-T 项目耗资巨大，但是经过多次演习测试，并未实现预期的效果，动中通【Communication ON-THE-MOVE】的能力仍然有限，无法有效应对同样在军事上具有较强势力的对手。WIN-T在部署和使用过程中暴露出以下问题： 操作复杂 压缩了作战人员的使用空间 动中通能力有限 装备过重 过度依赖中继设备: 在6的文章中提到，「虽然经过了系统升级战术通信节点、网络运营和安全中心可以越过中继设备在20min的时间里完成通信的重新建立，较之前的几个小时已经有了很大的进步，但是仍然不能满足战场需求」。这篇文章本身并未给出20min这一数据的出处。 网络安全方面存在大量漏洞 上面的六点我目前只关注第五点，所以其他的细节并未列出，详情参见「美国陆军战术级作战人员信息网络相关问题分析及启示」论文。 对于20min这个数据的考证信息整理如下： 在Army to introduce new command post wireless capability这篇报道中提到： By going wireless, command posts not only shed cumbersome cabling, but network set up and tear down times are cut from hours to minutes, making those jumps easier and faster. Reference Army Warfighter Network - Tactical (WIN-T) Theory of Operation: WIN-T是美国陆军（Army）的第一个全面集成的战区级的数据网络系统，可以从战区级往下覆盖至连级别【连排级应该是JTRS的天下】。WIN-T项目分为4个增项【Increment】实施。 Warfighter Information Network - Tactical (WIN-T)，这个网页里面提供了WIN-T的Commander's Handbook以及Program Update两个文件的下载。 Wiki: PM WIN-T Army enhances NetOps, the eys and ears of the network: 陆军已经在测试WIN-T Inc.3引入的新的NetOps软件升级。NetOps Using hte SEI Architecture Tradeoff Analysis Method to Evaluate WIN-T: A Case Study 美国陆军战术级作战人员信息网络相关问题分析及启示 美军下一代高级战术互联网体系结构发展研究 Inc.2 测试报告: Warfighter Information Network-Tactical Increment 2 (WIN-T Inc 2) NCW介绍论文：The WIN-T MF-TDMA Mesh Network Centric Waveform globalsecurity.com: Warfighter Information Network-Tactical (WIN-T) PM WIN-T Information &amp; Support Exchange 一篇西电硕士论文：WIN-T侦察干扰策略研究 网络管理模块相关的论文：Hierarchical and federated network management for tactical environments]]></content>
  </entry>
  <entry>
    <title><![CDATA[雨燕]]></title>
    <url>%2Fknowledge-base%2Fscience%2F%E7%94%9F%E7%89%A9%2F%E7%89%A9%E7%A7%8D%E7%9B%AE%E5%BD%95%2F%E9%9B%A8%E7%87%95.html</url>
    <content type="text"><![CDATA[出处 2015年5月，北京，颐和园，八方亭。中国观鸟会的成员欣喜地发现，雨燕回来了。这些雨燕属于普通雨燕的北京亚种（Apus apus pekinensis），在1870年由英国人罗伯特·斯温侯（Robert Swinhoe）命名。每年4月到7月，它们会来到北京繁殖后代。 普通雨燕。图片：Martin Hale / FLPA / mindenpictures 这是一生的征途 这一批归来的雨燕里，有十三只佩带着光敏地理定位仪。观鸟会成员希望通过这个小小的仪器，了解雨燕迁徙的旅程。光敏地理定位仪会记录环境里的光照强弱，借此告诉我们某一天的白昼长短，以及日出日落的时间。通过这些信息，我们可以推演出经纬度，了解雨燕去过什么地方，从而勾画出大致的雨燕迁徙路线图。 雨燕南迁过冬的路线是这样的：每年7月中下旬，它们从北京出发，向西北方向飞去，越过内蒙古、新疆，飞越天山北部，抵达中亚地区；然后转向西南，经过阿拉伯半岛，飞越红海，飞抵非洲。雨燕在非洲一路南下，大约在11月，抵达它们的目的地——南非、博茨瓦纳和纳米比亚。它们最喜欢的地方，是跨越三国国境的喀拉哈里国家公园（Kgalagadi Transfrontier Park）。此时非洲南部正值雨季，雨燕可以找到充足的食物。 次年2月，雨燕飞回北京，路径大致与去路相同。整段旅程长达3.8万公里。 野生北京雨燕的寿命可达13岁，其一生的飞行距离，可以超过地球和月亮之间的距离。 北京、剑桥两地的普通雨燕，分别往返于越冬地和繁殖地的路线。图片：Lyndon Kearsley “无脚”的飞行家 林奈曾为普通雨燕命名Hirundo apus——和家燕（H. rustica）同属——种本名源自希腊文，意为“无脚”。雨燕的腿确实非常短。雨燕和家燕也确实相像：流线型的小身躯，短小的头，宽大的嘴，极狭长的翅膀，尖尾巴。这种相似是趋同进化的结果。现在，人们把家燕归为雀形目，雨燕则归入雨燕目，和蜂鸟同为一家。 普通雨燕和家燕对比。图片：Paweł Kuźniar &amp; Thermos &amp; Walter Siegmund / wikimedia；Kim Taylor / NPL / mindenpictures 和雨燕一样，被林奈冠以“无脚”之名的鸟，还有大极乐鸟（Paradisaea apoda）。古代欧洲人相信极乐鸟没有腿，是不沾尘世的神鸟，永远在天上高飞。这个故事的源头可能是，捕获极乐鸟的猎人为了方便保存，把鸟腿砍掉了，欧洲人得到的都是无腿的极乐鸟皮。实际上极乐鸟虽然羽毛绚丽，但飞行本领不算高超，它的脚也跟“凡鸟”没有什么两样，可以在树上、地上栖息。 无论是外貌还是飞行能力，雨燕都比极乐鸟更当得起“无脚鸟”的称号。雨燕迁徙时的飞行速度，约为10米/秒，快速飞行的速度可达31.1米/秒（超过110千米/时)。雨燕的身躯小，翅膀大，这意味着它们翅膀单位面积负载的重量很小，而且它们能利用上升气流节省体力。所以，雨燕的飞行如呼吸般轻松自如。雨燕可以边飞行边捕食、边飞行边清理自己，在空中掠过水面饮水，甚至还能在空中交配。 普通雨燕的速度那么快，很少有捕食者能捉住它，但寒冷、下雨的天气会让雨燕体弱。这时，雨燕就会成为速度很快的猛禽，比如燕隼（Falco subbuteo）的捕食对象。图为燕隼。图片：David Tipling / NPL / mindenpictures 除去繁殖期（繁殖的雨燕在巢中过夜），每年长达十个月的时间里，普通雨燕着陆的时间很少超过两小时，超过99%的时间都在空中度过。这可以说是永恒的漂泊，也可以说是极致的自由。 雨燕的生活 普通雨燕在空中捕食，其猎物几乎都是飞虫。根据不同的天气，它们会选择不同地点和技巧进行捕食。在晴朗的天气里，普通雨燕经常在开阔的空地上，在离地6～30米的低空飞行捕食；下雨时，幼虫在水中生活的昆虫，会大批出现在水面上，于是雨燕就在水面低飞猎食。 掠过水面捕食的雨燕。图片：Ran Schols / Biuten-beeld / mindenpictures 在自然环境里，雨燕主要在悬崖的洞穴里筑巢，高大建筑上的房檐、墙洞也是它们喜欢的筑巢地点。住在洞穴里可以抵御一些捕食者的袭击，但缺点是合适的洞穴不多，容易与其他鸟类发生竞争。在欧洲，紫翅椋鸟（Sturnus vulgaris）会闯进普通雨燕筑巢的洞穴，把巢穴据为己有；有时雨燕和椋鸟还会大打出手，双双坠落在地上。对雨燕而言，落地是很危险的，因为它的腿太短，很难从地上跳跃起飞，很容易成为捕食者的盘中餐。 普通雨燕有稳定的配偶关系，但在繁殖期以外的时间里，“夫妻”没有什么亲密的联系——把配偶联系在一起的，是“住房”，而不是“夫妻情分”。普通雨燕的定位能力极强，每年都会飞回同一个洞穴进行繁殖，这样，雨燕夫妻每年都会在同一个地点重聚。 暗中观察。图片：Mathias Schaef / BIA / mindenpictures 普通雨燕筑巢的材料，和它们的食物一样，是在空中获得的。它们一边飞，一边捕捉风中飞舞的草、叶子、羊毛等东西，和唾液粘在一起，用来筑巢。巢造好以后，雌鸟会产下2～4个蛋，孵化18天。在孵蛋的日子里，雄鸟会给雌鸟喂食。雏鸟从出生到能出巢飞行，大约需要35天。父母在巢址附近觅食，把捉到的小昆虫用唾液粘在一起，做成一两克重的“丸子”，喂给雏鸟。研究者曾在一只普通雨燕的嘴里，发现了300多只小昆虫，有蝇类、蚊子、蚜虫等。雏鸟胃口最大的时候，父母一天要花19个小时来给它们打食，每只雏鸟可以吃掉30～40个“丸子”。 巢中的两只普通雨燕幼鸟。图片：Derek Middleton / FLPA / mindenpictures 以天为床，边飞边睡 很久以前人们就注意到，在傍晚时，“家里有孩子”的成年普通雨燕会飞回巢里，而未繁殖的年轻雨燕一直上升到高空，飞到人们看不见的地方。有人猜测它们是在天上睡觉。 雨燕在空中睡觉的一个证据，得自一战时期的一位法国飞行员。他在离地大约3000米的孚日山脉（Vosges）上空，发现一群普通雨燕在白云之上飞行。奇怪的是，飞机就在这些鸟头顶上掠过，它们却毫无反应，好像睡着了似的——后来证明，它们确实是睡着了。雨燕是如何做到在空中睡觉的呢？ 有的人看似睁着眼睛，但实际上跟睡着了没什么两样。图片：Phil Savoie / NPL / mindenpictures 陆生哺乳动物和鸟类的深度睡眠有两种模式，慢波睡眠（Slow Wave Sleep，SWS）和快速动眼睡眠（Rapid Eye Movement，REM）。鸟类可以让一侧的大脑半球进入SWS，另一侧醒着，和清醒大脑半球相关联的眼睛（右脑联左眼，左脑联右眼）睁开。鸟的肢体动作可以由脑干控制，所以去掉大脑的鸟，照样能拍翅。对于鸟类来说，一边飞行一边用单侧大脑进行SWS，并不困难。大脑入睡的时候，翅膀照样可以拍动，睁开的那一只眼睛可以看路；甚至双侧大脑一起入睡也不是没有可能，鸟类完成一次SWS只要几分钟，所以它们可以短暂地闭上眼睛，然后再睁开眼看路。 在快速动眼睡眠（REM）中，哺乳动物的肌肉会高度放松，但鸟类在REM时，肌肉仍然保持一定的紧张度。而且，鸟的REM比SWS还要短，只需十秒钟。如果鸟类在REM中，肌肉绷紧的程度足够举起翅膀，那么它就可以一边滑翔，一边完成一次REM。 也有实验证实了这些观点。马克斯·普朗克鸟类学研究所（Max Planck Institute for Ornithology）的罗登堡（Niels C. Rattenborg）等人，在小军舰鸟（Fregata minor）的头上装了记录脑电波的仪器，发现它们能在空中睡觉，而且两种模式的睡眠都可以。 《阿飞正传》里有一段著名的故事，说有一种永飞不落的鸟，睡在风里。这个故事有点像杜撰的“心灵鸡汤”，但雨燕和这个故事里的鸟，有几分相似。 楼廊庙宇间的风景 1965年，中国科学院院士郑光美沿着紫禁城的护城河进行观察，看到了近400只普通雨燕。北京古建筑的房梁、椽子等支柱间的缝隙，为这些小鸟提供了极好的居所。宏阔庄严的寺庙、楼宇之上，成群的雨燕聚集，时而俯冲，时而盘旋，是北京独特的风景。 北京雨燕的命运，与北京的楼廊庙宇紧紧联系在一起。二十世纪五六十年代，相当数量的古建筑被拆除，许多雨燕失去了安身之所。八十年代，北京市开始注重建筑保护，为了防止鸟粪污染，许多建筑的屋檐下都挂了防雀网，阻止鸟类在房屋里做窝。缺少合适的筑巢地，让雨燕的数量锐减。 幸运的是，北京人正在努力让这一独特风景存续下去。例如，正阳门的管理人员不仅不设防雀网，允许普通雨燕入住，还在准备安置摄像头，对住在正阳门的雨燕进行研究，从而更好地保护它们。与此同时，雨燕也在适应新环境，它们开始在一些现代建筑，比如天宁寺的立交桥上筑巢。 2002年，调查者在65个观测点，共监测到3182只普通雨燕。2007年，一群志愿者在北京四环路以内统计到的数量，不到2000只。2017年，北京市野生动物保护中心针对普通雨燕的数量，进行了三次调查，最多的一次，发现有超过4000只。是的，北京的普通雨燕种群正在缓慢恢复。 法国历史学家儒勒·米什莱（Jules Michelet）说过，人类是最“迟缓”的动物，因为人向往如鸟飞行，身体却只能禁锢在大地上。“迟缓”不是走得慢，而是苦于不能奋飞。然而，“迟缓”的人类，却用另外的方式走向了天空。不用提人类为航空、航天做出的种种尝试，我们欢迎雨燕在楼宇间入住，难道不是用另一种形式，实现了飞行的梦想吗？]]></content>
  </entry>
  <entry>
    <title><![CDATA[美军现役战略及战术通信系统]]></title>
    <url>%2Fknowledge-base%2Fmilitary%2Ftechnologies%2F%E7%BE%8E%E5%86%9B%E7%8E%B0%E5%BD%B9%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%2Findex.html</url>
    <content type="text"><![CDATA[本文整理自美军现役战略及战术通信系统大盘点 - 全文。并通过我自己的调研逐步完善其中的内容。参考文章的发表时间是2016年11月。 大家都知道，美军发明了互联网。但是，你也许不知道，今天的移动通信网络的前身正是美军的MSE （Mobile Subscriber Equipment，美军移动用户设备系统）。 80年代，美军开始寻找新的技术来升级军事通信网络，希望新的军事通信网络能够提供更广范围的覆盖、更好的纠错能力和更高的数据容量，并且能够提供自动路由和交换功能。 1985年，美军选择了通用动力（前身为GTE）为主要合作商。通过大量的研究，终于开发出了MSE系统。MSE，即Mobile Subscriber Equipment，就是今天手机终端的前身。 沙漠风暴行动中的MSE移动通信车 通信技术很多都是从军用发展到民用的，军事通信通常领先于民用通信。比如，前段时间媒体报道称，美军正在利用移动自组织网增强通信能力。美军的移动自组织网技术正由研究和开发转向生产和部署，并且通过美陆军负责指挥、控制和战术通信的项目执行办公室，利用“联合战术无线电系统”项目开发出一系列具有互操作性的软件定义无线电技术，协助装备较弱的用户实现移动自组织网能力。不管是自组织网络还是软件定义无线电，这些都是未来民用移动通信技术的发展方向。 今天，我们就来聊一聊美军的通信能力。 战略通信系统 美军战略通信的主要职责是保障美军最高指挥当局（总统和国防部长）与参联会、各军种部、九大联合司令部、情报机关、核战略部队、各大军事基地和各战区部队之间通信联络的畅通，以确保最高指挥当局对全球美军的指挥和控制。目前，美国总统通过战略通信系统逐级向第一线作战部队下达命令，最快只需3分钟至6分钟；在紧急情况下，总统可越级向战略核部队下达命令，最快只需1分钟至3分钟时间。 美军的战略通信系统主要由国防通信系统、国防卫星通信系统、最低限度应急通信网等组成。 国防通信系统 国防通信系统由国防通信局管理，主要采用有线通信、无线电通信、卫星通信和光纤通信等多种手段，线路总长6729万多公里，覆盖五大洲80多个国家和100个地区的3000多个军事指挥所和工作站。新一代国防通信系统的一个重要组成部分是国防数据网，该网把部署在全球各地美军各军兵种的数据网联成了一体，使得美军各军兵种部队之间可以轻易完成话音、图像、传真和数据通信以及发电子邮件等通信业务。 国防卫星通信系统（DSCSⅢ） 国防卫星通信系统（DSCSⅢ） 是美国战略远程通信的支柱，该系统由位于赤道上空地球同步轨道上的14颗卫星组成，主要工作在超高频波段（后4颗卫星上增设了特高频通信），可为东太平洋、西大西洋、东大西洋、印度洋和西太平洋等五个区域的美国陆、海、空三军提供加密且可靠的全球通信服务。 最低限度应急通信网（MEECN） 最低限度应急通信网（MEECN）则专供美国总统在核战条件下与陆、海、空三军核部队的通信与指挥。该系统由空军卫星通信系统、海军陆基甚低频电台广播网、海军“塔卡木”机载甚低频对潜通信系统、海军极低频对潜通信系统和陆军“地波应急网”等若干专用通信系统组成，其中： 空军卫星通信系统是空军和国防部指挥空军战略部队传递紧急文件的主要通信手段，其地面终端为AN/ARC–171（V）特高频卫星通信机，目前美国空军的战略轰炸机和加油机都安装了此类终端。 海军陆基甚低频电台广播网在其本土、日、英、澳、巴拿马等地架设了11个500KW以上的大功率甚低频电台，每个电台的天线阵有7–26个铁塔，塔高最高达383米，该网可在危机时刻向地处全球各大洋的美军核潜艇传达紧急命令。 海军“塔卡木”机载甚低频对潜通信系统是美国海军对潜通信最主要的抗毁手段，目前该系统使用E-6B飞机，其甚低频天线采用一长一短的双拖曳天线（7925米/1220米），最大输出功率可达250KW，能有效地保障最高指挥当局与战略核潜艇部队之间的通信联络。 海军极低频对潜通信系统，无线电波对海水的穿透能力与其波长有正相关性，30–300Hz的极低频波长（1000–10000km）极长，其对海水的穿透能力可达100 米以上。因此，依靠该系统，美国海军能与潜航在80米以下数千公里之外的战略核潜艇建立通信联络。 陆军“地波应急网” 在全国建有400座高299米的铁塔，其频率范围为150K–175KHz，该网的抗毁性能很强，即使其中的200个中继节点被摧毁也不会影响该网的整体效能。因此，陆军“地波应急网”能有效地保障美军最高指挥当局在遭受核袭击后仍然可以向战略核部队下达核报复的作战指令。 战术通信系统 战术通信系统一般是指集团军以下的各级通信系统，其主要作用是为作战部队提供保障战役或战斗顺利进行所必须的通信联络。 战术通信系统主要由基本通信工具、平台通信系统和野战地域通信网构成，其中基本通信工具主要有无线电台、数据链、通信卫星、电话、传真等基础设施；平台通信系统主要指飞机、坦克、水面舰船和潜艇等作战平台以及指挥所的通信设施；野战地域通信网是指在一定的作战地域内开设若干个干线节点或通信中心，通过电缆、光缆、微波中继线路、卫星通信线路和机载中继线路以及数据链路等方式互连，形成一个栅格状可移动的公用干线网，而各级指挥所、各种作战平台以及其它移动用户要想传输或获取话音、视频和数据等战场战术信息，都必须通过其入口节点入网才能实现。 美军现役战术通信系统主要有： “猎鹰”（Falcon）战术无线电台 其型号主要有“猎鹰II”和“猎鹰Ⅲ”系列产品，其中： “猎鹰II”AN/PRC-150（C）背负式/车载式高频无线电台，频率覆盖范围1.6–60MHz，传输速度为9.6千字节/秒，可兼备地对地和地对空通信，能为处在偏远地区和被崎岖地形包围的美军提供远程超视距保密的语音和数据等态势感知信息。 “猎鹰Ⅲ”AN/PRC-152（C）手持式多频段无线电台，一种具有可编程加密和波形升级能力的软件无线电系统，可为美军提供绝密级的语音和数据通信，其中包括特高频（UHF）地对地视距通信、近距离空中支援和战术卫星通信服务。 “猎鹰”III AN/PRC-117G宽带便携式无线电台，这也是一种软件定义可升级的无线电台，具有较强的宽带联网能力，可用于美军网络化数字战场的构建。该电台工作在VHF/UHF频段，可为美军提供保密的移动语音、视频和数据传输服务。 此外，“猎鹰”系列产品中还有其它多种型号，如“猎鹰Ⅱ”RF-5800M多频带无线电台、RF-5800V超高频无线电台和“猎鹰Ⅲ”RF-7800W大容量视距无线电台、RF-7800V甚高频战网无线电台等等。 单信道地面与机载无线电系统（SINCGARS即“辛嘎斯”电台） 该系统是一种甚高频/调频系列无线电台，型号有背负式、车载式和机载式，采用了微处理机、扩频、跳频、反电子干扰和模块化结构等先进技术，能够以16 kbps速度发送加密的语音、模拟或数字数据，主要为美军旅、营及其低层次单位作战提供视距通信服务，十分适宜于执行战役战术任务的坦克、步战车、直升机、火炮或者排、班、组等小部队使用，是美军战场指挥员在前沿20公里的范围内指挥部队和空中支援的主要手段，仅陆军使用的数量就超过了25万部。 联合战术无线电系统（JTRS） 目前，美军正在逐步对现役通信系统进行数字化项目改造，以适应未来数字化战场的需要，联合战术无线电系统（JTRS）就是其中的一个重要项目。它是美军唯一一种可适用于所有军兵种要求的通用新型系列（数字）战术电台，其作用主要用于逐步取代美军各军兵种现役的20多个系列约125种以上型号的75万部电台。 联合战术无线电系统（JTRS）工作频率范围（2MHz–3GHz）极宽，基本覆盖了高频/甚高频/特高频波段，型号有手持式、背负式、车载式、机载式、舰载式和固定式等，其主要特点为多频段多模式多信道、可网络互联，这使得JTRS各种型号的电台在复杂的战场环境下不仅能做到相互之间兼容互通，而且还可通过其跨频段跨时空的横向和纵向网络为分布在广阔战区内不同地域的美国陆、海、空和海军陆战队提供远程超视距且安全可靠的语音、数据、图像和视频通信，因而联合战术无线电系统（JTRS）未来有望成为美军在数字化战场中的主要通信手段。 通用数据链Link16 美军现役数据链系统主要有通用数据链Link4、Link11、Link16和Link22以及一些专用数据链如用于情报、监视与侦查等数据传输的ISR数据链、弹药数据链和网络数据链等等，其中Link16占据主导地位，该数据链工作在特高频波段，是美军三军通用的具有加密、扩频、跳频抗干扰能力的一种战术数据链，可以为美军提供近实时的数据通信、导航和敌我识别等多种服务，其第一代终端设备JTIDS（联合战术信息分发系统）共有17种型号，最大通信距离达800千米（使用卫星可全球通信）；其第二代终端设备MIDS（多功能信息分发系统）不仅具备了更强的抗干扰数字化语音与数据保密通信功能，而且还可以通过自动中继技术实现超视距通信。 Link16广泛配备给美军的舰艇（如海军的航母、巡洋舰、驱逐舰和两栖攻击舰等）、预警机（如空军的E-3A“哨兵”预警机、海军的E-2C“鹰眼”预警机等）、战斗机（如空军的F-15、F-16，海军的F/A-18A和F-14舰载战斗机等）、轰炸机（B-1、B-2和B-52战略轰炸机）、侦察机和指挥控制飞机（如空军的RC-135战略电子侦察机、E-8联合监视与目标攻击雷达系统飞机、EC-130机载战场指挥控制中心，海军的P-3侦察巡逻机等等）以及陆军的地面指挥控制中心、“爱国者”导弹防御系统等等。 Link-16数据链在美军战术体系中的作用十分重要，它可以把卫星、侦察机和预警机等各种探测系统获得的战术信息汇集起来，分发到战区内的美军各军兵种部队，使各级指挥员都能够同步近实时地感知战场态势，为美军在大规模三军协同联合作战中快速实施指挥决策、战术机动和战术控制等创造了必要条件。 战术卫星通信系统 在现代战场上，美军的高速机动性往往突破了其地面战术通信网的保障范围，此时卫星就成了美军最重要的通信手段，因为卫星覆盖面广，三颗地球同步卫星就可以覆盖全球，几乎不存在通信盲点。美军的战术通信卫星体系十分庞大，种类繁多，其中有： 国防卫星通信系统（DSCSⅢ）是一个由14颗卫星组成、以超高频（SHF）通信为主的宽带系统，该系统不仅可以为国家最高指挥当局担负战略通信任务，而且还可以为美国陆、海、空三军战术部队包括陆基固定和移动用户以及一些大型军舰和飞机提供大容量、高传输速率、保密和抗干扰的宽带通信服务。 特高频后继星卫星通信系统（UFO）是一种工作频段为特高频和极高频的窄带系统，由11颗卫星组成，运行在地球同步静止轨道上，每颗卫星可提供39个信道，该系统是美国海军最重要的战术通信系统，，主要为舰舰、舰岸和舰与飞机之间提供话音、数据链路。此外，该系统还可为美国空军、陆航飞机和无人机等提供通信服务。 军事星系统（Milstar）目前在轨5颗，这是一种波束覆盖全球的极高频对地静止卫星通信系统，能够为美军联合部队提供一个受保护的全球通信网路，其最大特点是地面终端发送和接收的信息（语音、资料、图像或视频等）可直接通过其它卫星中继，而不必经过地面站的中转，因此，在地面站被摧毁的情况下，仍可保持系统的有效性。该系统支持的车载式接收机能够完全适应陆军师团级的作战要求；便携式接收机可适用于班组等小股部队；而机载和舰载接收机则可保障空军和海军的战役战术通信需求。 全球广播系统（GBS）是由搭载在“特高频后继星”上的容量极大的Ka波段组成的一种单向高速宽波束广播通信系统，世界各战区的美军战术用户随时都可通过该系统的便携式终端得到各类大量信息。 目前，美军的卫星系统建设正处在更新换代阶段，即美军正在以“宽带全球卫星通信系统（WGS）”取代“国防卫星通信系统（DSCSⅢ）”，以“移动用户目标系统（MUOS）”接替“特高频后继星系统（UFO）”，以“先进极高频系统（AEHF）”替换“军事星系统（Milstr）”等，这些新一代卫星通信系统的带宽、数据传输速率和信道数量将呈指数级增长，而保密性、抗干扰性、低截获率和波束覆盖范围等其它性能指标也将得到全面提升，如一颗“宽带全球卫星通信”卫星的信息传输能力是一颗“国防卫星通信系统”卫星的10倍；一颗“先进极高频”卫星的容量是一颗“军事星”卫星的12倍；一颗“移动用户目标系统”卫星比一颗“特高频后继星”卫星的信息传输能力提高10倍，容量提高15倍等。 机载通信系统 美军机载通信系统通常包括无线电通信电台、卫星通信终端设备以及Link16数据链（即联合战术信息分发系统“JTIDS”）等。其中： ARC–210型甚高频/特高频电台，其频率范围为30–512兆赫，主要用于调幅（AM）/调频（FM）视距通信，可为用户提供高性能抗干扰保密的双向多模式语音和数据通信以及图象传输等通信业务，其ARC–210（V）卫星通信接收机还可为用户提供（超视距）卫星通信服务。目前已有30，000多套安装在B–52、F/A–18E/F等海陆空10多种战机上，包括直升机和无人机，是美军一种标准的机载无线电台。 ARC-231型甚高频/特高频电台，一种软件可编程无线电系统，目前已有5000多部装备在美陆航飞机和部分空军飞机上。该电台可为美军提供多波段、多模式优质语音和数据视距通信以及（超视距）卫星通信服务。 战斗轨道II（Combat Track II）机载卫星通信系统，该系统目前已有500多套安装在美空军运输机和轰炸机上，如C-130、C-17、B-52和B-1飞机等，主要为机组人员提供指挥和控制信息以及飞机与空中作战中心之间的超视距保密通信。 美军现役机载无线电通信电台和卫星终端还有SRT-470（高频）、ARC-310（高频）、ARC-190（高频）、ARC-171（超高频）、ARC－164（甚高频）、ARC-222、SINCGARS“辛嘎斯”和KY-58保密话音通信系统以及ARC-171（V）特高频卫星通信机、ASC-19卫星终端等。 而Link16数据链则可安装在美军大部分战机上，其功能除了视距通信外，还可通过卫星中继实现全球通信。 未来，ARC－210型等电台和联合战术信息分发系统“JTIDS”将被“联合战术无线电系统”（JTRS）和“多功能信息分发系统”（MIDS）取代，这两种系统将成为美军主流机载通信设备以适应美军从“平台中心战”向“网络中心战”的转型。 舰载通信系统 舰载数据链 美国海军战术数据链实质上是一种舰载自动化通信系统，其主要型号有4A号链、11号链、14号链和16号链等等，主要用于解决舰船与舰载机之间、舰与舰之间、舰与岸之间以及机与机之间的通信问题，包括数据、数字语音、图形、图像、文本等各种格式信息的传输。 4A号链工作在特高频（UHF）频段，标准传输速率为600–5000bps，主要用于在水面舰艇与舰载机之间建立信息共享的链接关系，以实现航母或E-2预警机对舰载作战飞机的指挥、控制和引导。 11号链工作频段为高频（HF）和特高频（UHF），主要用来链接海上舰艇、空中舰载机和陆基节点，使参战的美海军各战术部队彼此之间能够交换战术数据。该数据链主要使用高频，因而可进行超视距通信，其标准传输速率为1200bps；使用特高频时，标准传输速率为2400bps，可在视距范围内实现各种作战平台的互连。 16号链工作频段为特高频（UHF），它把数据链的应用范围从海军单一军种扩展为陆海空三军通用，而且可与4A号链或11号链互操作。该数据链可以用来链接海军的舰艇、舰载机和空军的预警机、战斗机、轰炸机以及陆军的防御系统等，现已成为美军用于指挥、控制和情报的主要战术数据链。 舰载卫星通信系统 美军舰队超视距通信主要依靠卫星通信系统，如“特高频后继星卫星通信系统”（UFO）、超高频“国防卫星通信系统”（DSCSⅢ）和极高频“军事星”（Milstar）卫星通信系统等，这些系统通常安装在美国海军11艘“尼米兹”级航空母舰、22艘“提康德罗加”级导弹巡洋舰、60艘“阿利·伯克”级导弹驱逐舰、30艘“佩里”级导弹护卫舰、8艘“黄蜂”级两栖攻击舰等大中小型舰船上，可充分保障美军舰队对数据、语音、图像、文本等大量战术信息的实时需求。其中： “特高频后继星卫星通信系统”（UFO）是一种窄带系统，因此可重点支持需要语音或低数据速率通信的用户包括移动用户和小型终端用户，非常适合海军舰艇使用。目前美军特高频频段用户终端约有7500套，其中大部分是海军用户，其舰载终端主要有AN/SRR-1（特高频UHF）和AN/WSC-3（特高频UHF），可为美国海军大中小型舰艇提供可靠的窄带通信能力。 超高频“国防卫星通信系统”（DSCSⅢ）是一种宽带系统，最大特点是容量大、数据传输速率高和抗干扰能力较强。该系统用户里包括了美国海军的大型舰艇和岸基固定或移动终端站，其舰载标准终端为AN/WSC-6（超高频SHF），通常安装在航空母舰和带拖曳阵监视系统的舰艇上等。通过“国防卫星通信系统”，美国海军已经在太平洋、大西洋和印度洋上建立起了一套能在若干个舰艇和各种岸基终端站之间进行可靠链接的通信系统。 极高频“军事星”卫星通信系统（Milstar），其主要特点是采用了星际间链路，通信范围因此而覆盖了世界各大洋且整体抗毁性强，能在核战条件下，为美国海军舰队尤其是战略核潜艇部队提供可靠的通信保障；其次该系统抗天线尺寸小，可采用自适应天线调零技术，大大地提高了其抗干扰能力。而且，该天线是一种高增益万向锐方向性射束天线，能发射轮廓分明的点波束，因此，该系统可以用来保障美军海上特遣部队在特殊地域作战的通信。 “军事星”是美军一种三军通用的卫星通信系统，其海军用户终端为AN/USC-38（极高频EHF），现在已有数百套安装在美国海军各型水面舰艇、潜艇和岸基终端站上。此外，“军事星”还保留了4条特高频信道，可以和美国海军现有的特高频用户兼容，此举大大地拓展了“军事星”在海军的应用范围。 目前，美军下一代“先进极高频”（AEHF）卫星的海军多波段终端（NMT）已经研发成功，它可以将美军现役卫星系统、即将服役的卫星星座以及未来通信卫星系统链接起来，使得美军的舰船可以使用同一种天线就能与不同的卫星之间进行通信，确保了信息的无缝链接、全球覆盖，大大地提升了美国海军在世界各大洋展开战略和战术行动的能力。 舰载无线电台（HF/VHF/UHF） 当通信卫星受到严重干扰时，舰载高频无线电台（HF 2–30MHz）就可接替卫星成为美军舰队超视距通信最重要的手段，为此，美军近几年来加大了对高频通信技术的开发，提出了高频改进规划、建立高频无线电多媒体通信系统等。目前，美国海军大部分水面舰艇上都安装了哈里斯公司提供的舰载高频宽带无线电通信系统，可满足海军多种平台对远程通信的需求。 此外，甚高频/特高频无线电台（VHF/UHF 30MHz–3GHz）在支持美国海军舰对舰、舰对岸和舰对空视距通信方面也可起到重要作用，其中30–80MHz电台可用于两栖作战的舰对岸通信，225–400MHz电台则主要用于战术视距通信等等。 潜艇通信系统 美国海军对潜艇的通信主要依赖其陆基、机载、卫星和舰（潜）对潜通信系统，其中： 陆基对潜通信系统，主要有海军陆基甚低频电台广播网和海军陆基极低频对潜通信系统，它们发射的无线电波长分别为甚长波和极长波，对海水的穿透能力分别可达数十米和上百米，作用距离可达几千公里到上万公里。通过在核潜艇上安装甚低频和极低频接收机——如“海狼”级攻击型核潜艇就安装了WRR-7低频、甚低频接收机以及极低频通信设备，它们都能在深海接受外界发射的甚低频和极低频信号，从而完成岸对潜通信。 机载对潜通信系统，即“塔卡木”机载甚低频对潜通信系统，这是一种把甚低频对潜通信系统搬到E-6B飞机上，从空中实现对潜艇单向通信的系统。这种系统在地面对潜通信设备被摧毁的情况下，仍可支持美国海军对潜艇部队的指挥。 卫星对潜通信系统，即在核潜艇上安装卫星通信终端，其天线安装在潜艇的潜望镜上，当需要通信的时候，潜艇可上浮到潜望镜深度并升起天线至水面，与通信卫星进行话音和数据等信息的双向传输，如“俄亥俄”级战略核潜艇、“洛杉矶”级和“海狼”级攻击型核潜艇就装备了AN/WSC-3卫星终端，可与“特高频后继星卫星通信系统”进行通信；“弗吉尼亚”级攻击型核潜艇则安装了新型潜艇高数据率（Sub HDR）多波段卫星通信（SATCOM）系统，可同时工作在超高频和极高频波段，能与“国防卫星通信”、“军事星”和“全球广播系统”卫星链接，进行保密的宽带多媒体、话音和数据的双向通信等。 舰对潜、岸-潜双向通信系统，一般情况下，为了隐蔽，潜艇只收不发，属于一种单向通信，但必要时，使用舰载、岸基和潜艇的HF/VHF/UHF即高频、甚高频和特高频电台即可实现舰对潜和岸对潜的远程或视距双向通信。 此外，在对潜通信系统中，美军还可利用通信浮标进行潜对岸、潜对舰、潜对飞机和潜对潜甚至潜对卫星的双向通信，如“洛杉矶”级攻击型核潜艇就安装了AN/BRT–1/2、AN/CRC–1、AN/BRT–6等多种无线电通信浮标；而“俄亥俄”级战略核潜艇配备的AN/BQS-5拖曳浮标和AS-2629A/BRR浮力电缆天线系统可接收中频、高频和极低频信号。因此，潜艇可在不必因上浮而暴露位置的情况下，就能通过各种不同类型的通信浮标向舰、岸、飞机、潜艇甚至卫星发射和接受信息。 三军联合战术通信（TRI-TAC）系统 主要供军以上单位使用，用于美陆军、海军、空军、海军陆战队之间以及盟国部队之间协同通信。该系统主要由交换设备、传输设备、用户终端和接口设备以及控制设备等组成，其中的交换设备AN/TTC–39 移动式数字信息交换机，能与国防通信系统等美军战略通信系统互通，使战区内美军可同时与战区内外进行通信联络；传输设备主要有AN/TRC–170 数字式对流层散射设备，最大传输距离为240公里；而其用户终端中的传真设备 AN/UXC–7 型轻便数字传真机，可与北约设备通信。 2012年TRI-TAC项目被JNMS(Joint Network Management System)项目取代。 移动用户设备（MSE） 一种移动、全数字、保密、自动交换的军、师级战术通信网。在军一级，该系统直接与三军联合战术通信（TRI-TAC）系统互连，其覆盖范围为150×250平方公里的军作战区域，可为8100个用户（其中有线用户6200个，移动用户1900个）提供通信服务。移动用户设备（MSE）系统由干线节点（42个节点中心）、入口节点（9个大型有线用户入口节点、224个小型有线用户入口节点和92个无线电入口单元车）和终端（电台、电话机、电传打字机、传真机、数据终端和打印机）等要素组成，每个节点中心由交换机车、无线电接力机车、无线电入口单元车等数台车辆组成，节点之间用无线电接力机互连形成栅格状网络；军、师级指挥所通过9个大型入口节点入网，旅、营级指挥所通过224个小型入口节点入网，而移动用户（电台）则通过92个无线电入口单元车（被称为中心台）入网，而且，移动用户（电台）之间也可不必经过中心台而直接进行通信。 战术互联网 简而言之，战术互联网是按互联网协议互联的一组战术（数字）无线电台、路由器、计算机硬件和软件的集合。美国陆军旅及旅以下战术互联网主要由三部分组成，即A、改进型“辛嘎斯”电台（SINCGARS- SIP），这是一种具有声音加密和数据传输特性的甚高频（30～88兆赫兹）无线电台，可通过外部配装的互联网控制器来接入（无线）战术互联网，通常配备到班一级；B、增强型定位报告系统（EPLRS），一种特高频（420–450兆赫兹）宽带数据无线电台，通常配备到连一级，可为部队提供自动实时数据转发和数据（如目标的识别、位置等信息）通信；C、21世纪部队旅和旅以下作战指挥系统（FBCB2）由一组计算机硬件、系统与应用软件以及安装工具组成，其计算机彩色屏幕能将敌我双方坦克、步战车以及部队位置等实时战场态势以图像形式显示出来。战术互联网的基本工作方式：班一级搜集到的战术信息被“辛嘎斯”电台发往连级的EPLRS电台，然后被自动转发到FBCB2系统，通过FBCB2系统综合分析处理后获得当前战场态势图再分发给各级使用FBCB2终端、EPLRS电台/“辛嘎斯”电台的部队，而且，FBCB2系统还可利用卫星或其它手段获得输入信息或向各部队分发处理后的信息，使参战人员能够随时得到更新了的战场态势图。此外，战术互联网也可通过移动用户设备（MSE）与军/师级战术通信网相连。未来新一代美军战术互联网将使用联合战术无线电系统（JTRS）担负网内各层信息连通的任务。 战术级作战人员信息网（WIN-T） WIN-T【中文可以称为：作战人员信息网】是陆军从战区到营级所采用的一个移动、高速、大容量的宽频主干网战术通信网络，可支持陆军全频谱作战, 将最终取代MSE（移动用户设备）和TRI-TAC（三军联合战术通信系统）。作为美陆军全球信息栅格 (GIG) 的战术组成部分, WIN-T将促进装备部队很好地利用GIG服务以及能力 (包括数据库、收集人员、以及国建机构) , 增加信息赋能行动的次数。 全球信息栅格（GIG） 美军传统的地基、海基、空基和天基信息系统大部分都是一些专用系统，彼此之间难以兼容互通，显然，美军这种信息不能及时共享的状况大大地制约了三军联合作战效能的提升。因此，美军提出了“全球信息栅格（GIG）”计划，试图通过整合现有各种信息资源，建立起一个供美国陆、海、空三军通用的全球通信网络，并以此为中介，把美军散布在全球范围内的传感器网、计算机网和武器平台网联为一体，最终形成一个全时、全维、全频谱和全球性的用于信息化作战的立体互联网，为美军实现互联、互通、互操作奠定基础。 全球信息栅格（GIG）可以使高度分散的美军作战单元在多维空间同时进行协同作战，其主要构成有传感器栅格、通信网络栅格、计算机网络栅格和武器平台栅格等，几乎涉及到了美军所有的作战资源，其中： 传感器栅格由互联的地基、海基、空基和天基侦察设备组成，主要有侦察卫星、侦察飞机、预警机、无人机、雷达、声纳等等，利用传感器栅格，美军可以实时掌握战场信息，及时地发现各个方向、各个区域的各种威胁，为美军把握最佳战机创造了先决条件。我们可用一句话来概括传感器栅格的作用：发现信息以实现战场单向透明。 通信网络栅格由互联的各种通信卫星、通信飞机、数据传输链路、微波中继站、地面光缆、无线电台、作战地域网等通信基础设施组成，利用通信网络栅格，美军可以做到“在恰当的时间、恰当的地点，将恰当的信息以恰当的形式交给恰当的接收者”，从而确保美军的绝对信息优势。简言之，通信网络栅格的作用就是传输信息以实现全球信息的无缝链接和信息共享。 计算机网络栅格由各种计算机、存储器、网格软件平台、数据库、地理信息系统等计算信息设施组成。海量的信息往往使参战人员无所适从，难以决策，计算机网络栅格的作用就是对搜集到的信息进行筛选、分析、处理，区分轻、重、缓、急，并成实时或近实时的战场态势图。利用计算机网络栅格，美军还可计算出最佳路线，选择最恰当的作战目标，采取最有效的作战方法和手段，动用最合适的力量，最大限度地打击敌人、减少己方损失。因此，计算机网络栅格的作用，用一句话概括，即处理信息以获取决策优势。 武器平台栅格由各种信息化的武器平台如飞机、坦克、导弹、火炮、军舰等组成，其主要作用就是运用信息，即武器平台根据输入的信息对敌目标实施（超视距）精确打击。 全球信息栅格（GIG）建设的重点是通信基础设施的建设，其中包括基于光纤技术的地面段建设，如GIG带宽扩展（GIG–BE）计划；基于可编程、模块化的联合战术无线电系统（JTRS）的无线电段建设；以及基于（激光技术的）宽带通信卫星的空基段建设。 目前，全球信息栅格（GIG）已经初步实现了与美国导弹防御系统的对接，这使得美国导弹防御系统不仅大大地强化了自身一体化的建设，而且还通过与美军其它武器系统或信息系统的互联互通而大幅地提升了其整体作战效能。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E9%AB%98%E5%B9%B3%E9%99%B5%E4%B9%8B%E5%8F%98.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[三维马尔科夫链的详细调研]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Fmarkov%2F3D-markov.html</url>
    <content type="text"><![CDATA[参考文章及其系统模型 在马尔科夫链在WAVE链路层网络性能分析中的应用中我们提到了三维马尔科夫链的使用。相比于经典的[1]中提出的二维马尔科夫链，三维马尔科夫链新增的一维主要是为了解决EDCA机制下不同优先级的队列并存的问题。 Contribution 下面的内容以[2]为基干进行讨论。这篇文章的主要贡献是讨论网络连通性与饱和吞吐率性能之间的关系。具体贡献是如下三个方面： 作者提出了一种Connectivity-aware MAC protocol，支持多信道标准（1609.4），为编队场景设计； 使用了多优先级的马尔科夫模型来研究网络连通概率与饱和吞吐率之间的关系； 提出一种多信道的资源调度策略，可以动态的调整CCHI和SCHI的长度来改善系统吞吐性能。 System Model 文章使用的System Model是比较简单和经典的场景：无干扰情况下的单向高速公路交通流，单车道，从而避免超车这种复杂行为。 System Model 道路上车辆总数为\(N\)，在高速公路上随机分布。道路总长为2000m。假设存在\(K\)辆普通车辆，\(M\)个编队。每个编队被视为一个单独的车辆。在编队内部，编队成员直接连接，所有的成员可以直接同编队的Leader通信。编队成员将自己的安全和非安全消息发送给编队Leader，然后Leader代表整个编队去竞争CCH的使用。记\(p\)为网络中编队的比例，即任何一个通信单位是一个编队的概率为： \[\begin{equation} p=M / N=M /(K+M) \label{1} \end{equation}\] 即\(R_1\)和\(R_2\)分别为普通车辆与编队Leader的通信范围，且\(R_1 &lt; R_2\)。假设\(R_2\)足够大到可以覆盖整个编队，且编队的长度小于\(R_2 - R_1\)。这一假设其实就是阻止了编队内部成员和外部普通车辆的直接通信。 车辆在高速公路上的分布服从泊松分布，所有车辆都在RSU的通信范围内。记\(\rho\)为交通密度，那么在\(x\)米长度的道路上出现的车辆的数目为\(k\)的概率为： \[\begin{equation} f(k, x)=\frac{(\rho x)^{k} e^{-\rho x}}{k !}, k \geq 0 \end{equation}\] 令\(X\)为表示车间距的随机变量。则其分布可以表示成： \[\begin{equation} \operatorname{Pr}\{X \leq x\}=h(x)=1-e^{-\rho x} \end{equation}\] 连通概率分析 记\(X_{i} \quad(i=1,2, \ldots, N-1)\)代表相邻两辆车的车间距分布。当车间距不超过通信范围时，即\(X_i \le R\)时，认为两辆车连通。记\(P_c\)为VANET的整体连通概率，即： \[\begin{equation} P_{c}=\operatorname{Pr}\left\{X_{1} \leq R, X_{2} \leq R, \ldots, X_{N-1} \leq R\right\} \end{equation}\] 这里\(X_i\)是独立同分布的。所以 \[\begin{equation} \begin{aligned} P_{c} &amp;=\prod_{i=1}^{N-1} P_{r}\left\{X_{i} \leq R\right\} \\ &amp;=\prod_{i=1}^{N-1}\left[(1-p) * P_{r}\left\{X_{i} \leq R_{1}\right\}+p * P_{r}\left\{X_{i} \leq R_{2}\right\}\right] \end{aligned} \end{equation}\] 代入System Model中的泊松分布模型，有 \[\begin{equation} P_{c}=\left[(1-p)\left(1-e^{-\rho R_{1}}\right)+p\left(1-e^{-\rho R_{2}}\right)\right]^{N-1} \label{6} \end{equation}\] 根据\(\eqref{6}\)， \[\begin{equation} p=\frac{1-e^{-\rho R_{1}}-P_{c}^{\frac{1}{N-1}}}{e^{-\rho R_{2}}-e^{-\rho R_{1}}} \end{equation}\] MAC Protocol 在作者提出的MAC协议中，CCHI被进一步划分成SAFety Interval (SAFI), WSA Interval (WSAI)和ACK Interval (ACKI)。如下图： The framework of the connectivity-aware MAC protocol 首先，在CCHI的开头，所有车辆在SAFI广播优先级最高的安全信息。在WSAI阶段，所有提供服务的车辆竞争式地访问信道以广播WSA包。WSAI被划分为若干时隙，在每个时隙的开头，如果信道是空闲的，则服务提供者尝试发送WSA包。在ACKI阶段，收到了安全消息的车辆，以及对WSA中包含的服务感兴趣的车辆，会发送ACK。为了避免重复发送，当之前已经有节点响应了对特定安全消息或WSA服务的ACK的话，后续的车辆不会再次进行响应。为了维护网络公平性，在每个ACKI内节点发送ACK的顺序会随机分配。 WSA与对应的ACK，构成了一套SCH资源预留机制。在CCHI结束时，已经成功预留了SCH资源的车辆切换到对应的SCH信道，进行无冲突的信息传输。 前面我们提到，对于编队系统，编队的Leader需要代表整个编队进行CCH竞争。因此，考虑到网络公平性，来自编队的WSA消息（WSAP）相比于普通车辆的WSA消息（WSAO）应当拥有更高的优先级。 在上图描绘的MAC协议中，SAFI的长度和ACKI的长度与车辆数量成正比。而WSAI的长度，需要通过对应的多优先级马尔科夫模型来计算。 马尔科夫模型分析 在上一个部分我们提到，处于网络公平性的考虑，来自编队的WSA消息要拥有更高的优先级。这里的优先级控制通过EDCA机制来完成。在EDCA中，不同的优先级体现在不同长度的Aribitration Inter-Frame Space (AIFS)上。这里我们认为WSAP的AIFSN为2, WSAO的AIFSN为3。 此处的马尔科夫链采用了典型的假设： 理想信道条件（no hidden terminal and capture); 节点满载，即任何时候都有包等待发送 包的传输概率和碰撞概率是独立的 状态变量与状态转移 马尔科夫链的状态变量被定为： \(s(i, t)\)：backoff stage \(b(i, t)\): value of backoff timer \(v(i, t)\): active stat of the backoff procedure 这里\(i\)表示包的类别。1表示WSAP，2表示WSAO。令\(L_i\)为类别\(i\)的最大退避阶段，\(W_{i, m}\)为类别\(i\)在第\(m\)个退避阶段的竞争窗口(CW)大小。那么有\(s(i, t) = m, (0 \le m \le L_i), b(i, t) \in (0, W_{i, m})\)。当\(v(i, t) = 0\)时，退避过程被冻结，即\(b(i, t)\)的值保持不变。反之，当\(v(i, t) = -1\)时，退避过程正常进行。在定义了上述状态变量之后\(\{s(i, t), b(i, t), v(i, t)\}\)，我们可以画出状态转移图。 The Markov chain model of the WSAP transmission 上图为WSAP的状态转移图。在这个优先级设置下，在每个时隙退避计数器都会减1，即\(v(i, t) = -1\)。即\(p_1\)为碰撞概率。则转移概率为： \[\begin{equation} \left\{ \begin{array}{ll} \operatorname{Pr}\{(j+1, k,-1) |(j,-1,-1)\}=p_{1} / W_{1, j+1}+1, &amp; 0 \leq j \leq L_{1}-1,0 \leq k \leq W_{1, j+1} \\ \operatorname{Pr}\{(j, k-1,-1) |(j, k,-1)\} =1, &amp; 0 \leq j \leq L_{1}, 0 \leq k \leq W_{1, j} \\ \operatorname{Pr}\{(0, k,-1) |(j,-1,-1)\} =\left(1-p_{1}\right) /\left(W_{1,0}+1\right), &amp; 0 \leq j \leq L_{1}-1,0 \leq k \leq W_{1,0} \\ \operatorname{Pr}\left\{(0, k,-1) |\left(L_{1},-1,-1\right)\right\} =1 /\left(W_{1,0}+1\right), &amp; 0 \leq j \leq L_{1}, 0 \leq k \leq W_{1,0} \end{array} \right. \label{8} \end{equation}\] 从这个状态转移图和转移概率计算来看，这里的退避发送行为和我们在WAVE里面提到的退避过程不太一样。这里在达到最大退避窗口后，会重置退避窗口大小，即为Reset backoff stage The Markov chain model of the WSAO transmission 上图是WSAO的状态转移图。当\(v(i, t) = 0\)时，退避计数器会停止递减。令\(p_2, p_{2, \text{idle}}\)和\(p_{2, 0}\)分别为WSAO传输失败，WSAO发送遇到空闲信道，遇到繁忙信道的概率。转移概率为： \[\begin{equation} \left\{ \begin{array}{ll} \operatorname{Pr}\{(j+1, k, 0) |(j, -1,-1 ) \}=p_{2} /\left(W_{2, j+1}+1\right), &amp; 0 \leq j \leq L_{2}-1,0 \leq k \leq W_{2, j+1} \\ \operatorname{Pr}\{(j, k-1,-1) |(j, k,-1)\} =p_{2, \text {idle}}, &amp; 0 \leq j \leq L_{2}, 0 \leq k \leq W_{2, j-1} \\ \operatorname{Pr}\{(j, k, 0) |(j, k,-1)\} =1-p_{2, \text {idle}}, &amp; 0 \leq j \leq L_{2}, 0 \leq k \leq W_{2, j-1} \\ \operatorname{Pr}\{(j, k, 0) |(j, k, 0)\} =p_{2,0}, &amp; 0 &lt; j \leq L_{2}, 0 \leq k \leq W_{2, j-1} \\ \operatorname{Pr}\{(j, k-1,-1) |(j, k, 0)\} =1-p_{2,0}, &amp; 0 \leq j \leq L_{2}, 0 \leq k \leq W_{2, j-1} \\ \operatorname{Pr}\{(0, k, 0) |(j,-1,-1 ) \}=\left(1-p_{2}\right) /\left(W_{2,0}+1\right), &amp; 0 \leq j \leq L_{2}-1,0 \leq k \leq W_{2,0} \\ \operatorname{Pr}\left\{(0, k,-1) |\left(L_{2},-1,-1\right)\right\} =1 /\left(W_{2,0}+1\right), &amp; 0 \leq j \leq L_{2}, 0 \leq k \leq W_{2,0} \end{array} \right. \label{9} \end{equation}\] 稳态分布 求解\(\eqref{8}\)和\(\eqref{9}\)，可以求得稳态分布。WSAP的传输概率\(p_i\)和WSAO的传输概率\(p_j\)为： \[\begin{equation} \left\{ \begin{array}{l} { p_{i}=\frac{1-p_{1}^{L_{1}+1}}{\sum_{j=0}^{L_{1}} w_{1, j} \ / 2 * p_{1}^{j}\left(1-p_{1}\right)+2\left(1-p_{1}^{L_{1}+1}\right)} } \\ { p_{j}=\frac{1-p_{1}^{L_2+1}}{\sum_{j=0}^{L_{2}} w_{2, j} \ / 2 * p_{2}^{j}\left(1-p_{2}\right)+1-p_{2}^{L_{2}+1}} } \end{array} \right. \label{10} \end{equation}\] 根据[3]的结论，最大吞吐率可以在信道的空闲状态的平均持续时间和繁忙状态的平均持续时间相等时达到，即 \[\begin{equation} \label{11} E[i d l e]=E[c o l l] \Rightarrow p_{i d l e} * T_{i d l e}=p_{c o l l} * T_{c o l l} \end{equation}\] 其中: \(p_{i d l e}\)为信道为信道空闲的概率； \(p_{c o l l}\)为信道发生碰撞的概率； \(T_{i d l e}\)为空闲时隙的长度 \(T_{c o l l}\)为CCH上发生碰撞时持续的时间。 进一步，记信道繁忙概率为\(p_{busy}\)，包成功发生的概率为\(p_{succ}\)，则\(p_{coll} = p_{busy} - p_{succ}\)，然后我们有下面的方程组： \[\begin{equation} \left\{\begin{aligned} p_{1} &amp;=1-\left(1-p_{i}\right)^{M-1} *\left(1-p_{j}\right)^{K} \\ p_{2} &amp;=1-\left(1-p_{i}\right)^{M} *\left(1-p_{j}\right)^{K-1} \\ p_{i d l e} &amp;=\left(1-p_{i}\right)^{M-1} *\left(1-p_{j}\right)^{K-1} \\ p_{b u s y} &amp;=1-p_{i d l e}=1-\left(1-p_{i}\right)^{M-1} *\left(1-p_{j}\right)^{K-1} \\ p_{s u c c} &amp;=M * p_{i} *\left(1-p_{i}\right)^{M-1} *\left(1-p_{j}\right)^{K} \\ &amp;+K * p_{j} *\left(1-p_{i}\right)^{M} *\left(1-p_{j}\right)^{K-1} \end{aligned}\right. \label{12} \end{equation}\] 记\(T_{SAF\_pkt}, T_{WSA\_pkt}, T_{ACK\_pkt}, T_{SIFS}\)分别为发送安全消息，WSA消息，ACK消息的时间以及SIFS的长度。为了简化分析，我们令\(T_{coll}\)为最大碰撞时间，即上一个WSA包的最后一个比特和下一个WSA包的第一个比特发生了碰撞。那么有： \[\begin{equation} \left\{\begin{aligned} T_{i d l e} &amp;=a S l o t T i m e \\ T_{c o l l} &amp;=2 * T_{W S A \_p k t}+T_{S I F S} \\ T_{s u c c} &amp;=T_{W S A_{-} p k t}+T_{S I F S} \end{aligned}\right. \label{13} \end{equation}\] 根据公式\(\eqref{10}-\eqref{13}\)，可以求解出\(p_i\)和\(p_j\)。 Reference [1] G. Bianchi, “Performance analysis of the ieee 802.11 distributed coordination function,” IEEE Journal on Selected Areas in Communications, vol. 18, no. 3, pp. 535–547, 2000. [2] C. Shao, S. Leng, B. Fan, Y. Zhang, A. Vinel, and M. Jonsson, “Connectivity-aware medium access control in platoon-based vehicular ad hoc networks,” in 2015 ieee international conference on communications (icc), 2015, pp. 3305–3310. [3] J. Mao, Y. Mao, S. Leng, and X. Bai, “Performance optimization for ieee 802.11 with qos differentiation supporting,” Journal of Software, vol. 21, no. 11, pp. 2866–2882, 2010.]]></content>
  </entry>
  <entry>
    <title><![CDATA[二维马尔科夫链的使用]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Fmarkov%2F2D-markov.html</url>
    <content type="text"><![CDATA[前言 二维马尔科夫链是在涉及包含退避过程的DCF机制的最常用模型。这部分理论工作的文章大部分可以追溯到Bianchi在2000年的经典论文[1]。这篇论文在过去近20年里获得了将近一万条引用。这篇文章我们在介绍WAVE协议时详细提到过。 Bianchi的经典论文 引入信道繁忙条件 这部分的内容主要来自[2]。 System Model 沿用了Bianchi的假设条件，包括有限数量的通信节点(\(n\)个)以及理想信道条件。这篇文章中研究的是饱和条件下的稳态性能。饱和条件意味着对于每个节点，当其完成一次传输时，立刻就有一个新的包等待传输。 文章采用的DCF机制是经典的DCF机制，核心特点包括指数增长的退避窗口，在退避期间信道繁忙时，退避计数器的值冻结。退避窗口到达最大以后，停止增长。若发送失败，则窗口保持最大值。反之，如果发送成功，则重置退避窗口。 随机变量的定义则如下：\(b(t)\)定义为在t时隙上的退避计数器取值。每个节点退避窗口的定义为 \[\begin{equation} \begin{array}{l} W_{\min} = W \\ W_{\max} = 2^{m} W \end{array} \end{equation}\] 即共有\(m+1\)个退避阶段(backoff stage)。\(s(t)\)为用来表示退避阶段的随机变量。那么二元随机过程\(\{s(t), b(t)\}\)构成二维离散马尔科夫链。记条件碰撞概率为\(p\)，信道繁忙概率为\(p_b\)。假定\(p\)与\(p_b\)与退避过程无关。当\(W\)和\(n\)比较大时此假设更加准确。 二元随机过程\(\{s(t), b(t)\}\)的状态值记为\(\{i, k\}\)。其中\(0 \leq i \leq m, 0 \leq k \leq W_i - 1\), 其中\(W_i = 2^i W\)。模型中还存在另一个状态\(\{-1, 0\}\)。这个状态代表当退避计数器为0，且经过DIFS时间后信道空闲时，节点会在当前时隙立即发送数据。\(\{-1, 0\}\)这个状态刻画了此行为。这个状态未在Bianchi的模型中引入。 概率转移图如下： 转移概率为： \[\begin{equation} \left\{ \begin{array}{ll} P\{-1, 0 | -1, 0\} = (1 - p) (1 - p_b) \\ P\{0, k | -1, 0\} = \frac{(1 - p)p_b + p}{W_0}, &amp; 0 \leq k \leq W_0 - 1 \\ P\{i, k | i, k\} = p_b, &amp; 1 \leq k \leq W_i - 1 \quad 0 \leq i \leq m \\ P\{i, k | i, k + 1\} = 1 - p_b, &amp; 1 \leq k \leq W_i - 2 \quad 0 \leq i \leq m \\ P\{0, k | i, 0\} = \frac{(1 - p)p_b}{W_0}, &amp; 0 \leq k \leq W_i - 1 \quad 0 \leq i \leq m \\ P\{-1, 0 | i, 0\} = (1 - p)(1 - p_b), &amp; 0 \leq i \leq m \\ P\{i, k | i - 1, 0\} = \frac{p}{W_i}, &amp; 1 \leq k \leq W_i - 1 \quad 0 \leq i \leq m \\ P\{m, k | m, 0\} = \frac{p}{W_m}, &amp; 0 \leq k \leq W_m = 1 \end{array} \right. \end{equation}\] 其中： 第一项指经过前一个成功的发送之后又观察到信道空闲并立刻发送当前数据包； 第二项指经过前一个成功的发送之后发送当前数据包时发现信道繁忙或者发送产生了碰撞，从而进入退避状态； 第三项表示在退避计数器递减过程中发现信道繁忙，故冻结计数器值； 第四项表示退避计数器在空闲信道下递减； 第五项表示退避计数器到0之后，当前包发送成功，但是发现发送下一个数据包时信道繁忙； 第六项表示退避计数器到0之后，当前包发送成功且被成功接收，且检测到信道空闲。 第七项表示退避计数器到0之后传输失败，增加退避窗口； 第八项表示达到了最大退避窗口后，传输失败，但是退避窗口不再增加。 接下来我们需要计算稳态概率分布。记平稳分布为\(b_{i, k} = \lim_{t\rightarrow \infty} P\{s(t) = i, b(t) = k\}\)。对于平稳分布我们有如下的关系： \[\begin{equation} b_{i, 0}=p^{i} b_{0,0} 0 \leq i \leq m-1 \end{equation}\] \[\begin{equation} b_{m, 0}=\frac{p^{m}}{1-p} b_{0,0} \end{equation}\] \[\begin{equation} b_{i, k}=\frac{W_{i}-k}{W_{i}} \frac{1}{1-p_{b}} b_{i, 0} \quad 0 \leq i \leq m 1 \leq k \leq W_{i}-1 \end{equation}\] \[\begin{equation} b_{0,0}=\frac{p_{b}+p\left(1-p_{b}\right)}{1-p_{b}} b_{-1,0} \end{equation}\] 然后使用正则化条件 \[\begin{equation} b_{-1,0}+\sum_{i=0}^{m} \sum_{k=0}^{W_{i}-1} b_{i, k}=1 \end{equation}\] 经过推导可以得到 \[\begin{equation} b_{-1,0}=\frac{2\left(1-p_{b}\right)^{2}(1-2 p)(1-p)}{2\left(1-p_{b}\right)^{2}(1-2 p)(1-p)+\left(p_{b}+p\left(1-p_{b}\right)\right)(1-2 p)(W+1)+p W\left(p_{b}+p\left(1-p_{b}\right)\right)\left(1-(2 p)^{m}\right)} \end{equation}\] 已知平稳分布以后，我们可以计算对于某个节点任意时隙的传输概率 \[\begin{equation} \tau=\sum_{i=-1}^{m} b_{i, 0}=b_{-1,0}+\sum_{i=0}^{m-1} b_{i, 0}+b_{m, 0} \end{equation}\] 当退避计数器到0时，节点即会尝试发送数据包。 这个公式全部展开也非常长，不过也是简单的多项式计算 \[\begin{equation} \label{eq:transmission_prob} \tau=\frac{2\left(1-p_{b}\right)(1-2 p)}{2\left(1-p_{b}\right)^{2}(1-2 p)(1-p)+\left(p_{b}+p\left(1-p_{b}\right)(1-2 p)(W+1)+p W\left(p_{b}+p\left(1-p_{b}\right)\right)\left(1-(2 p)^{m}\right)\right.} \end{equation}\] 进而得到碰撞概率为 \[\begin{equation} \label{eq:collision_prob} p=1-(1-\tau)^{n-1} \end{equation}\] 信道繁忙的概率为 \[\begin{equation} \label{eq:medium_busy_prob} p_{b}=1-(1-\tau)^{n} \end{equation}\] 将\(\eqref{eq:collision_prob}\)及\(\eqref{eq:medium_busy_prob}\)代入\(\eqref{eq:transmission_prob}\)可以得到关于\(\tau\)的非线性方程。此方程可以通过数值方法求解。 性能分析 类似Bianchi的做法，这里认为对于每一次传输，无论成功与非，都视为一个更新过程。因此，可以计算相邻两次传输之间的CSMA/CA协议的吞吐率。此时吞吐率\(S\)可以表达为: \[\begin{equation} \begin{aligned} S &amp;=\frac{E[\text { time used for successful transmission in an interval }]}{E[\text { length between two consecutive transmissions }]} \\ &amp;=\frac{P_{s} E[P]}{E[\Psi]+P_{s} T_{s}+\left(1-P_{s}\right) T_{c}} \end{aligned} \label{eq:throughput} \end{equation}\] 其中，\(E[P]\)为Payload的平均大小。\(T_s\)为成功传输的平均时间，\(T_c\)为冲突的平均持续时间。\(P_s\)为传输成功的概率。而\(E[\Psi]\)则表示在传输发生之前由于退避引入的空余时隙的长度。一般我们假定包的大小都是相同的，即\(E[P] = P\)。\(T_s\)和\(T_c\)的值取决于具体的DCF机制： \[\begin{equation} \begin{array}{l}{T_{\mathrm{s}}^{\mathrm{ack}}=H+P+\delta+\mathrm{SIFS}+\mathrm{ACK}+\delta+\mathrm{DIFS}} \\ {T_{\mathrm{c}}^{\mathrm{ack}}=H+P+\delta+\mathrm{DIFS}}\end{array} \} ACK CSMA/CA \end{equation}\] \[\begin{equation} \begin{array}{l}{T_{\mathrm{s}}^{\mathrm{rets}}=\mathrm{RTS}+\delta+\mathrm{SIFS}+\mathrm{CTS}+\delta+\mathrm{SIFS}+H+P+\delta+\mathrm{SIFS}+\mathrm{ACK}+\delta+\mathrm{DIFS}} \\ {T_{\mathrm{c}}^{\mathrm{rets}}=\mathrm{RTS}+\delta+\mathrm{D} \mathrm{IFS}}\end{array} \} RTS/CTS CSMA/CA \end{equation}\] 其中\(H=\mathrm{PHY}_{\mathrm{hdr}}+\mathrm{MAC}_{\mathrm{hdr}}\)为帧头，\(\delta\)为传输延时。传输成功要要求有且仅有一个节点参与传输，故 \[\begin{equation} P_{\mathrm{s}}=\frac{n \tau(1-\tau)^{n-1}}{1-(1-\tau)^{n}} \end{equation}\] 最后： \[\begin{equation} E[\Psi]=\frac{1}{p_{b}}-1 \end{equation}\] 注意这里的所有时间变量都是表示的时隙数量。通过上面的式子我们可以计算出吞吐率\(\eqref{eq:throughput}\)。 更新过程: 相比泊松过程，更新过程约束更少，算是对泊松过程的一个推广。我们知道下面的几个定义是可以推出泊松过程的： 随机变量\(X_i\)独立同分布（i.i.d），服从的是参数为\(\lambda\)指数分布；对应到达时间间隔 随机变量\(S_n = \sum_{i = 1}^{n}X_i\)；对应到达时间 随机过程\(N(t) = \sup (n | S_n \leq t) P(\lambda t)\)。对应发生次数。 类比过程，可以得到更新过程的定义，仅仅把1中的随机变量服从的指数分布去掉，不指定具体的分布，后续的2，3保持不变，这样的过程就是更新过程。而泊松过程是更新过程的一个特例吧！ 来源 延时分析 令随机变量\(D\)代表延时，其均值为\(E[D]\)。平均延时可以通过如下公式进行计算： \[\begin{equation} E[D]=E\left[N_{\mathrm{c}}\right]\left(E[B D]+T_{\mathrm{c}}+T_{\mathrm{O}}\right)+\left(E[B D]+T_{\mathrm{s}}\right) \end{equation}\] 其中\(E[N_c]\)为一个数据包在最终被接收前经过的冲突的次数。\(E[BD]\)为在繁忙的信道条件下，一个节点在访问信道前经过的退避延时的平均值（包含在空闲条件下需要等待的时隙以及在繁忙条件下需要冻结退避计数器的时长）。\(T_O\)为在发生碰撞时，再次访问信道前需要等待的时间。而\(T_c\)和\(T_s\)的定义与上一部分吞吐率分析中定义的一致。平均碰撞次数可以用简单一维马尔科夫链的方法计算得到： \[\begin{equation} E\left[N_{\mathrm{c}}\right]=\frac{1}{P_{\mathrm{s}}}-1 \end{equation}\] 平均退避掩饰则取决于退避计数器的值及冻结时长。假设退避状态为\(b_{i, k}\)，则需要等带\(k\)个空时隙才能发送。那么平均退避延时可以按照如下方式计算： \[\begin{equation} E[X]=\sum_{i=0}^{m} \sum_{k=1}^{W_{i}-1} k b_{i, k} \end{equation}\] 根据System Model中得到的平稳分布我们可以得到 \[\begin{equation} \label{eq:backoff_decrement_slots} E[X]=\frac{b_{0,0}}{6\left(1-p_{b}\right)} \frac{W^{2}\left(1-p-3 p(4 p)^{m}\right)+4 p-1}{(1-4 p)(1-p)} \end{equation}\] 另外我们还需要计算冻结退避计数器的时间。这一时间的平均值为\(E[F]\)。为了计算这一均值，我们需要先计算\(E[N_{Fr}]\)，即退避计数器到0前会检测到的传输次数。注意到\(E[X]\)为退避计数器退避到0的平均时间（时隙数），而\(E[\Psi]\)为一次传输前需要经过的空闲时隙的数量，则我们可以计算 \[\begin{equation} E\left[N_{\mathrm{Fr}}\right]=\frac{E[X]}{\max (E[\Psi], 1)}-1 \end{equation}\] 则 \[\begin{equation} \label{eq:freeze_slots} E[F]=E\left[N_{\mathrm{Fr}}\right]\left(P_{\mathrm{s}} T_{\mathrm{s}}+\left(1-P_{\mathrm{s}}\right) T_{\mathrm{c}}\right) \end{equation}\] 结合\(\eqref{eq:backoff_decrement_slots}\)和\(\eqref{eq:freeze_slots}\)，可以得到 \[\begin{equation} E[B D]=E[X]+E\left[N_{\mathrm{Fr}}\right]\left(P_{\mathrm{s}} T_{\mathrm{s}}+\left(1-P_{\mathrm{s}}\right) T_{\mathrm{c}}\right) \end{equation}\] 最后，\(T_O\)的取值规则如下： \[\begin{equation} T_{\mathrm{O}}=\left\{\begin{array}{l}{\mathrm{SIFS}+\mathrm{ACK}_{-} \text { timeout }} \\ {\mathrm{SIFS}+\mathrm{CTS}_{-} \text { timeout }}\end{array}\right. \end{equation}\] 至此我们计算得到了延时需要的所有参数。 非饱和条件 这部分的内容主要参考[3]。之前的理论分析中大多假设了饱和的条件，即每个节点都时钟有包等待发送。这并不能很好地反应大多数实际场景。因此这篇文章在模型中引入了非饱和条件。同时，这篇文章也考虑了异构网络的问题，这里也会一并提及。 模型 本文的大多数假设依然沿用了Bianchi的经典假设。每个节点的状态变量为\((i, k)\)，其中前者表示退避阶段(backoff stage)，后者为退避计数器的取值(backoff counter)。\(k\)的取值为\([0, W_i - 1]\)，其中\(W_i = 2^i W\)为退避窗口。在信道空闲时，\(k\)递减。当\(k=0\)时，节点尝试发送。 在这里作者引入了新状态\((0,k)_e, k \in [0, W_0 - 1]\)。该状态代表完成一次传输之后，没有包等待发送。这个状态被称为post-backoff。引入了新的状态的状态转移图如下： 这张图里面我们只画了最早的两个退避阶段的状态转移，更高阶段部分的图和上面的状态转移图是一样的。 在前两层中，\(i\)都是等于0的。当i &gt; 0时，必然发生过碰撞，那么我们肯定有一个包等待发送。 假设对于每个节点都有一个固定的概率\(1 - q\)，在每次退避计数器递减时节点的缓冲区中没有包等待发送。反之，\(q\)代表了在每个虚拟时隙（Bianchi文章中的概念，相邻两次退避计数器递减的间隔为一个虚拟时隙）存在至少一个可供发送的数据包的概率。 在上面的假设下，我们可以得到转移概率，for \(0 &lt; k &lt; W_i\): \[\begin{equation} \begin{aligned} 0&lt;i \leq m, \quad P[(i, k-1) |(i, k)] &amp; = 1 \\ P\left[(0, k-1)_{e} |(0, k)_{e}\right] &amp; = 1-q \\ P\left[(0, k-1) |(0, k)_{e}\right] &amp; = q \end{aligned} \end{equation}\] 当计数器递减到0，且队列中有（至少一个）包时，我们开始传输。我们假设一个和节点状态有关的概率\(p\)为存在其他节点同时传输的概率，即为条件碰撞概率。当发生碰撞时，需要提升退避窗口。当传输成功时，退避阶段缩减为0。若不存在最大重传次数限制，我们就不需要引入额外参数了。对于\(0 \leq i \leq m\)和\(k \geq 0\)，我们有： \[\begin{equation} \begin{aligned} P\left[(0, k)_{e} |(i, 0)\right] &amp;=\frac{(1-p)(1-q)}{W_{0}} \\ P[(0, k) |(i, 0)] &amp;=\frac{(1-p) q}{W_{0}} \\ P[(\min (i+1, m), k) |(i, 0)] &amp;=\frac{p}{W_{\min (i+1, m)}} \end{aligned} \end{equation}\] 最后我们要回过头来讨论\((0, 0)_e\)这个状态了。这个状态代表post-backoff阶段完成时，队列里面仍然为空。此时保持在这一状态下。如果有包到达，有三种可能：成功传输，碰撞，信道繁忙（此时开始0-stage退避）。我们记\(P_{idle}\)为信道空闲的概率。进而可以得到如下从\((0, 0)_e\)出发的转移概率： \[\begin{equation} \begin{aligned} P[(0, 0)_e | (0, 0)_e] &amp; = 1 - q + \frac{q P_{\text{idle}} (1 - p)}{W_0} \\ k&gt;0, \quad P\left[(0, k)_{e} |(0,0)_{e}\right] &amp; = \frac{q P_{\text { ide }}(1-p)}{W_{0}} \\ k \geq 0, \quad P\left[(1, k) |(0,0)_{e}\right] &amp; = \frac{q P_{\text { idle }} p}{W_{1}} \\ k \geq 0, \quad P\left[(0, k) |(0,0)_{e}\right] &amp;= \frac{q\left(1-P_{\text { idle }}\right)}{W_{0}} \end{aligned} \end{equation}\] 其中重点关注一下第二项，右侧的概率可以解析为：1) 有包等待发送，2) 信道空闲，3) 没有发生碰撞，4）选择k作为退避计数器的起始值。 上面梳理了所有的转移概率，然我们可以计算平稳分布\(b(i, k)\)，\(b(0, k)_e\)。使用正则化条件： \[\begin{equation} \sum_{i = 0}^{m}\sum_{k = 0}^{W_i - 1}b(i, k) + \sum_{k = 0}^{W_0 - 1} b(0, k)_e = 1. \end{equation}\] 最后得到的结果如下： \[\begin{equation} \begin{aligned} 1 / b_{(0, 0)_e} = &amp; (1 - q) + \frac{q^2 W_0(W_0 + 1)}{2 (1 - (1 - q)^{W_0})} \\ &amp; + \frac{q(W_0 + 1)}{2 (1 - q)} \cdot \left(\frac{q^2 W_0}{1 - (1 - q)^{W_0}} + (1 - P_{\text{idle}})(1 - q) - q P_{\text{idle}}(1 - p)\right) \\ &amp; + \frac{pq^2}{2 (1 - q)(1 - p)} \cdot \left(\frac{W_0}{1 - (1 - q)^{W_0}} - (1 - p)P_{\text{idle}}\right) \\ &amp; \cdot \left(2 W_0 \frac{1 - p - p (2p)^{m - 1}}{1 - 2p} + 1\right). \end{aligned} \end{equation}\] 推导过程参加原文。然后我们可以计算传输概率\(\tau = q(P_{\text{idle}})b(0, 0)_e + \sum_{i \geq 0}b(i, 0) \Rightarrow\) \[\begin{equation} \tau=b(0,0)_{e}\left(\frac{q^{2} W_{0}}{(1-p)(1-q)\left(1-(1-q)^{W_{0}}\right)}-\frac{q^{2} P_{\text { idle }}}{1-q}\right) \end{equation}\] 上面的式子中参数包括：\(p, P_{\text{idle}}, q, W_0, m\)。当\(q \rightarrow 1\)时，这个模型退化为Bianchi的模型。 异构网络模型 假设一共有\(n\)辆车，标记为\(l = 1, \dots, n\)。我们把\(\tau\)，\(p\)这些参数打上节点的下标，变成节点参数\(\tau_j\)和\(p_l\)，则有 \[\begin{equation} 1 - p_l = \prod_{j \neq l}(1 - \tau_j), \quad \text{for} \quad l = 1, \dots, n \end{equation}\] 待续 非理性信道条件 之前的理论分析都假设了理想信道条件，这里我们讨论一下更加现实的场景[4]。 In this paper, we provide a throughput analysis of the IEEE 802.11 protocol at the data link layer in non- saturated traffic conditions taking into account the impact of both transmission channel and capture effects in Rayleigh fading environment. 系统模型 假设条件如下： 节点数量有限，记为\(n\) 信道是不完美信道，可能传输出错 capture in Rayleigh fading transmission scenario can occur 包传输基于双路握手方式进行(2-way handshaking access mechanism)，这里的两路握手指的是ACK机制。 随机的过程定义和前面的是一致的。二元随机过程\((s(t), b(t))\)中的前者表示退避阶段，后者表示退避计数器的值。这里要计算的核心变量是传输概率\(\tau\)和碰撞概率\(P_{col}\)，需要假设这两个概率是固定的。同时，为了刻画不完美的信道条件，我们需要引入一个新的概率\(P_e\)用来表示信道传输错误的概率。我们假设碰撞概率和传输错误概率是独立的。综合这两个量，一个包传输成功的概率为\((1 - P_e)(1 - P_{col})\)。因此我们定义一个等价的传输失败概率\(P_{eq} = P_e + P_{col} - P_e P_{col}\)。 不完美信道条件还有一个问题是信道占用(channel capture)，代表由于距离因素或其他信道条件，导致某些节点的传输功率比其他同时传输的节点的功率要高。这时，即便发生了碰撞，但是包仍然能够得到传输。从这个意义上来说，信道占用效应可以减少等价的实质的碰撞概率。 对于信道传输错误方面的数据建模，我们做了必要的简化： 帧头部分的错误概率忽略； 比特错误率独立 Frame error rate (FER)与包大小指数相关。 为了刻画不饱和的状态，引入了一个新的状态\(I\)，来表示下面两种情形： 在一次成功的传输之后，但是没有包等待发送。 节点处于空闲状态，且队列中没有包等待发送。 引入了新状态的的马尔科夫链的状态转移图如下所示： 注意这里没有包含802.11的post-backoff特性。不过， 这部分对于理论性能的影响比较小。 post-backoff特性在上面的「非饱和条件」章节中的文章里进行了讨论和建模。 更多的阅读内容参考： 802.11 backoff precedure Post-Backoff - StudFiles 图中的关键要素和Bianchi提出的模型基本类似。需要注意的是，作者在这里将Channel capture建模成为碰撞的一个子事件。当Channel capture发生时，只允许在AP处有最高接收功率的节点占用信道。在出现Channel capture时，节点进入一个中间状态\((i, 0)\)。如果信道占用成功，则节点进入\((0, k)\)（队列中还有其他包）或者\(I\)（队列为空）的状态。若发送失败，则等同于遭受碰撞，进入状态\((i + 1, k)\)。 上图的状态转移图的概率转移矩阵为： \[\begin{equation} \begin{aligned} &amp; P_{i, k | i, k + 1} &amp; = &amp; 1, &amp; &amp; k \in [0, W_i - 2], i \in [0, m] \\ &amp; P_{0, k | i, 0} &amp; = &amp; q\left(1-P_{e q}\right) / W_{0}, &amp; &amp; k \in\left[0, W_{0}-1\right], i \in[0, m] \\ &amp; P_{i, k | i - 1, 0} &amp; = &amp; P_{eq}/W_i, &amp; &amp; k \in\left[0, W_{i}-1\right], i \in[1, m] \\ &amp; P_{m, k | m, 0} &amp; = &amp; P_{eq} / W_m, &amp; &amp; k \in \left[0, W_m - 1\right] \\ &amp; P_{I | i, 0} &amp; = &amp; (1-q)\left(1-P_{e q}\right), &amp; &amp; i \in[0, m] \\ &amp; P_{0, k | I} &amp; = &amp; (1 - q)(1 - P_{eq}), &amp; &amp; k \in [0, W_0 - 1]\\ &amp; P_{I | I} &amp; = &amp; 1 - q &amp; &amp; \end{aligned} \end{equation}\] 接下来可以计算平稳分布 \[\begin{equation} b_{i, k}=\lim _{t \rightarrow \infty} P[s(t)=i, b(t)=k], \forall k \in\left[0, W_{i}-1\right], \forall i \in[0, m] \end{equation}\] 首先我们注意到 \[\begin{equation} \begin{aligned} &amp; {b_{i, 0}} &amp; {=} &amp; {P_{e q} \cdot b_{i-1,0}=P_{e q}^{i} \cdot b_{0,0},} &amp; &amp; {\forall i \in[1, m-1]} \\ &amp; {b_{m, 0}} &amp; {=} &amp; {\frac{P_{e q}^{m}}{1-P_{e q}} \cdot b_{0,0},} &amp; &amp; {i=m} \end{aligned} \end{equation}\] 上面👆的状态转移图中状态\(b_I\)考虑了一次成功传输以后队列为空的情况，以及连续的空闲状态，因此有 \[\begin{equation} \begin{aligned} b_{I} &amp;=(1-q)\left(1-P_{e q}\right) \cdot \sum_{i=0}^{m} b_{i, 0}+(1-q) \cdot b_{I} \\ &amp;=\frac{(1-q)\left(1-P_{e q}\right)}{q} \cdot \sum_{i=0}^{m} b_{i, 0} \end{aligned} \end{equation}\] 对于其他状态的稳态分布(\(k\in [1, W_i - 1]\))，有 \[\begin{equation} b_{i, k}=\frac{W_{i}-k}{W_{i}}\left\{\begin{array}{ll}{q\left(1-P_{e q}\right) \cdot \sum_{i=0}^{m} b_{i, 0}+q \cdot b_{I},} &amp; {i=0} \\ {P_{e q} \cdot b_{i-1,0},} &amp; {i \in[1, m-1]} \\ {P_{e q}\left(b_{m-1,0}+b_{m, 0}\right),} &amp; {i=m}\end{array}\right. \end{equation}\] 将\(b_I\)代入到上式，有 \[\begin{equation} \begin{array}{l}{q\left(1-P_{e q}\right) \cdot \sum_{i=0}^{m} b_{i, 0}+q \cdot b_{I}=} \\ {=q\left(1-P_{e q}\right) \cdot \sum_{i=0}^{m} b_{i, 0}+q \cdot \frac{(1-q)\left(1-P_{e q}\right)}{q} \cdot \sum_{i=0}^{m} b_{i, 0}} \\ {=\left(1-P_{e q}\right)[q+(1-q)] \cdot \sum_{i=0}^{m} b_{i, 0}} \\ {=\left(1-P_{e q}\right) \cdot \sum_{i=0}^{m} b_{i, 0}}\end{array} \end{equation}\] 应用正则化条件，有 \[\begin{equation} \begin{aligned} 1 &amp; = \sum_{i = 0}^{m}\sum_{k = 0}^{W_i - 1}b_{i, k} + b_I \\ &amp; = \begin{array}{l}{\frac{b_{0,0}}{2}\left[W\left(\sum_{i=0}^{m-1}\left(2 P_{e q}\right)^{i}+\frac{\left(2 P_{e q}\right)^{m}}{1-P_{e q}}\right)+\frac{1}{1-P_{e q}}\right]+} \\ {+\frac{(1-q)\left(1-P_{e q}\right)}{q} \cdot \sum_{i=0}^{m} b_{i, 0}}\end{array} \\ &amp; = \begin{array}{l}{\frac{b_{0,0}}{2}\left[W\left(\sum_{i=0}^{m-1}\left(2 P_{e q}\right)^{i}+\frac{\left(2 P_{e q}\right)^{m}}{1-P_{e q}}\right)+\frac{1}{1-P_{e q}}\right]+} \\ {+\frac{(1-q)\left(1-P_{e q}\right)}{q} \cdot \frac{b_{0,0}}{1-P_{e q}}}\end{array} \\ &amp; = \frac{b_{0,0}}{2}\left[W\left(\sum_{i=0}^{m-1}\left(2 P_{e q}\right)^{i}+\frac{\left(2 P_{e q}\right)^{m}}{1-P_{e q}}\right)+\frac{1}{1-P_{e q}}+\frac{2(1-q)}{q}\right] \end{aligned} \end{equation}\] 解出来得到如下结果（这不人道！） \[\begin{equation} \begin{aligned} &amp; b_{0, 0} = \frac{2}{\frac{W\left[\left(1-P_{e q}\right) \sum_{i=0}^{m-1}\left(2 P_{e q}\right)^{i}+\left(2 P_{e q}\right)^{m}\right]+1+2 \frac{1-q}{q}\left(1-P_{e q}\right)}{1-P e q}} \\ &amp; = \frac{2\left(1-P_{e q}\right)}{\left(W-P_{e q} W\right) \frac{1-\left(2 P_{e q}\right)^{m}}{\left(1-2 P_{e q}\right)}+W\left(2 P_{e q}\right)^{m}+1+2 \frac{(1-q)\left(1-P_{e q}\right)}{q}} \\ &amp; =\frac{2\left(1-P_{e q}\right)\left(1-2 P_{e q}\right) q}{q\left[(W+1)\left(1-2 P_{e q}\right)+W P_{e q}\left(1-\left(2 P_{e q}\right)^{m}\right)\right]+2(1-q)\left(1-P_{e q}\right)\left(1-2 P_{e q}\right)} \\ \end{aligned} \end{equation}\] 当\(q \rightarrow \infty\)时，即得到了饱和情形下的稳态分布。再如果添加理想信道条件，则\(P_e = 0\)，则我们可以将上式简化为 \[\begin{equation} \lim _{q \rightarrow 1} b_{0,0} \rightarrow \frac{2\left(1-P_{c o l}\right)\left(1-2 P_{c o l}\right)}{(W+1)\left(1-2 P_{c o l}\right)+W P_{c o l}\left(1-\left(2 P_{c o l}\right)^{m}\right)} \end{equation}\] 这个公式和Bianchi中得到的平稳分布式一致的。基于稳态分布我们可以计算传输概率\(\tau\) \[\begin{equation} \begin{aligned} \tau &amp;=\sum_{i=0}^{m} b_{i, 0}=\frac{b_{0,0}}{1-P_{e q}}=\\=&amp; \frac{2 (1 - 2P_{eq})q}{q\left[(W+1)\left(1-2 P_{e q}\right)+W P_{e q}\left(1-\left(2 P_{e q}\right)^{m}\right)\right]+2(1-q)\left(1-P_{e q}\right)\left(1-2 P_{e q}\right)} \end{aligned} \end{equation}\] 继而得到碰撞概率 \[\begin{equation} P_{c o l}=1-(1-\tau)^{N-1}-P_{c a p} \end{equation}\] 其中\(P_{cap}\)为Channel capture的概率。\(P_{cap}\)为如下形式，具体推导参考原文: \[\begin{equation} P_{c a p}=\sum_{i=1}^{N-1}\left(\begin{array}{c}{N} \\ {i+1}\end{array}\right) \tau^{i+1}(1-\tau)^{N-i-1} P_{c p}\left(\gamma&gt;z_{o} g\left(S_{f}\right) | i\right) \end{equation}\] 继而我们需要求解一个四元非线性方程组，可以通过数值方法求解： \[\begin{equation} \left\{\begin{array}{l}{\tau=\frac{2\left(1-2 P_{e q}\right) q}{q\left[(W+1)\left(1-2 P_{e q}\right)+W P_{e q}\left(1-\left(2 P_{e q}\right)^{m}\right)\right]+2(1-q)\left(1-P_{e q}\right)\left(1-2 P_{e q}\right)}} \\ {P_{e q}=1-(1-\tau)^{N-1}-P_{c a p}} \\ {P_{e q}=P_{c o l}+P_{e}-P_{e} \cdot P_{c o l}} \\ {P_{c a p}=\sum_{i=1}^{N-1}\left(\begin{array}{c}{N} \\ {i+1}\end{array}\right) \tau^{i+1}(1-\tau)^{N-i-1} \frac{1}{\left(1+z_{0} g\left(S_{f}\right)\right)^{i}}}\end{array}\right. \end{equation}\] 最后可以计算归一化吞吐率： \[\begin{equation} S=\frac{P_{t} \cdot P_{s} \cdot\left(1-P_{e}\right) E[P L]}{\left(1-P_{t}\right) \sigma+P_{t}\left(1-P_{s}\right) T_{c}+P_{t} P_{s}\left(1-P_{e}\right) T_{s}+P_{t} P_{s} P_{e} T_{e}} \end{equation}\] 其中 \[\begin{equation} \begin{aligned} &amp; P_t &amp; = &amp; 1 - (1 - \tau)^N \\ &amp; P_s &amp; = &amp; \frac{N\tau (1 - \tau)^{N - 1} + P_{cap}}{P_t} \\ &amp; T_c &amp; = &amp; H + P L + ACK_{timeout} \\ &amp; T_s &amp; = &amp; H + P L + S I F S + \tau_p + A C K + D I F S + \tau_p \end{aligned} \end{equation}\] \(E[PL]\)为Payload的平均大小，\(\sigma\)为空闲时隙的大小。 包达到过程以及\(q\)的估算 包的到达过程建模成参数为\(\lambda\)的Poisson过程。参数\(\lambda\)代表了单位时间内到达的包的个数。相应的，包到达的间隔为\(\frac{1}{\lambda}\)。因此 \[\begin{equation} q=1-e^{-\lambda E\left[S_{t s}\right]} \end{equation}\] 其中\(E[S_{ts}]\)为每个虚拟时隙的大小。 \[\begin{equation} \begin{aligned} E\left[S_{t s}\right]=&amp;\left(1-P_{t}\right) \cdot \sigma+P_{t}\left(1-P_{s}\right) \cdot T_{c}+\\ &amp;+P_{t} P_{s} P_{e} \cdot T_{e}+P_{t} P_{s}\left(1-P_{e}\right) \cdot T_{s} \end{aligned} \end{equation}\] 讨论：事实上，从我的分析来看，这里的这个处理方法是存在问题的。问题包含两个方面：1) 如此处理需要假设节点的队列容量只有1，不然我们就需要引入更加复杂的排队论理论来进行分析。当然，引入排队论也是可以分析的；2）利用Poisson过程讨论的时间不应该只限于一个虚拟时隙。而是应该考虑发送延时。即发送完一个包需要的时间内可能生成新的包的概率。而不是只盯着一个时隙。这一延时的计算方法可以参考上面的3.3章节 Reference [1] G. Bianchi, “Performance analysis of the ieee 802.11 distributed coordination function,” IEEE Journal on Selected Areas in Communications, vol. 18, no. 3, pp. 535–547, 2000. [2] E. Ziouva and T. Antonakopoulos, “CSMA/ca performance under high traffic conditions: Throughput and delay analysis,” Computer Communications, vol. 25, no. 3, pp. 313–321, 2002. [3] D. Malone, K. Duffy, and D. Leith, “Modeling the 802.11 distributed coordination function in nonsaturated heterogeneous conditions,” IEEE/ACM Transactions on Networking, vol. 15, no. 1, pp. 159–172, Feb. 2007. [4] F. Daneshgaran, M. Laddomada, F. Mesiti, and M. Mondin, “Unsaturated throughput analysis of ieee 802.11 in presence of non ideal transmission channel and capture effects,” IEEE Transactions on Wireless Communications, vol. 7, no. 4, pp. 1276–1286, 2008.]]></content>
  </entry>
  <entry>
    <title><![CDATA[ns3中的Attribute系统的使用]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Fns3%E4%B8%AD%E7%9A%84wave%E6%A8%A1%E5%9D%97%2Fns3%E4%B8%AD%E7%9A%84Attribute%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8.html</url>
    <content type="text"><![CDATA[ns3中的Attribute及相关系统的设计非常有意思，其意义在于为仿真中的极其复杂的模块架构中，提供了一种非常方便的解耦的属性访问（读写）方法。例如，在一个复杂的设计WAVE的性能仿真中，若要修改某个节点的CSMA竞争窗口大小。没有Attriubute系统的情况下，想要通过层层指针获取底层对象再进行修改，会对代码的模块化设计和代码的复杂度带来灾难性的硬性。相反，在Attribute系统下，我们只需要提供CSMA竞争窗口的路径(path)就可以直接修改对应的属性。 1Config::Set ("/NodeList/0/$ns3::Node/DeviceList/0/$ns3::WaveNetDevice/MacEntities/172/$ns3::OcbWifiMac/BE_Txop/$ns3::QosTxop/MinCw", UintegerValue (15)); 下面我们来梳理一下Attribute使用中的一些要点。 Attribute的创建 Attribute的创建是在TypeId中进行的。Attribute系统的实现有赖于Object系统，这意味着你如果要在你的类中自定义Attribute，需要让你的类继承自Object基类。我们通过TypeId::AddAttribte这个函数来定义属性。例如上面提到的MinCW，其创建过程如下： 1234567891011static TypeId tid = TypeId ("ns3::Txop") .SetParent&lt;ns3::Object&gt; () .SetGroupName ("Wifi") .AddConstructor&lt;Txop&gt; () .AddAttribute ("MinCw", "The minimum value of the contention window.", UintegerValue (15), MakeUintegerAccessor (&amp;Txop::SetMinCw, &amp;Txop::GetMinCw), MakeUintegerChecker&lt;uint32_t&gt; ()) // ... ; 这个函数有五个参数，分别是： 属性的名称，这个名称是我们后续构建Attribute Path时使用的名称； 属性的描述； 属性的默认值。注意这里不能传入Primitive Value，而是需要使用特定的类进行打包。如uint_t需要通过UintegerValue类来打包； 属性的访问器，这里决定了的具体的属性值如何存储和访问。可以使用Getter，Setter函数范式，也可以直接使用类的成员变量。 属性的格式检查器，我们可以通过这个类来规定属性的格式 Attribute的结构（路径组成） Attribte使用中最大的一个困难在于，我们如何确定Attribute的路径呢？ Attribute的路径，是各个模块内部的层级关系（hierarchy）的反映。我们以开头的例子中使用的路径为例： 1/NodeList/0/$ns3::Node/DeviceList/0/$ns3::WaveNetDevice/MacEntities/172/$ns3::OcbWifiMac/BE_Txop/$ns3::QosTxop/MinCw 每一个斜杠/代表了一个层级，或者是一个操作。这里，一个层级，对应的是对象与对象成员的关系。例如这里面的DeviceList，是Node的成员变量。 123456789101112131415TypeIdNode::GetTypeId (void)&#123; static TypeId tid = TypeId ("ns3::Node") .SetParent&lt;Object&gt; () .SetGroupName("Network") .AddConstructor&lt;Node&gt; () .AddAttribute ("DeviceList", "The list of devices associated to this Node.", ObjectVectorValue (), MakeObjectVectorAccessor (&amp;Node::m_devices), MakeObjectVectorChecker&lt;NetDevice&gt; ()) // ... ; // ...&#125; 这个很好理解。操作一般就要复杂一些。这里的操作可以大致分为两类： 索引(indexing/mapping) 类型转换(casting) indexing/mapping 在定义Attribute时，可以将Attribute定义为Vector或者Map类型。例如Node的DeviceList这个Attribute就是一个Vector。在构建Attribute Path时，紧跟在Node后面我们需要添加一个索引项来表明我们要访问的具体是哪个成员。利用通配符*指定选中所有的成员。这里的例子包括上面路径的/NodeList/0还有DeviceList/0等等部分。 casting 一般来说，定义Attribute时，我们指定的类型可能是特定的基类，例如上面Node的Attribute定义中，其DeviceList中的成员就是NetDevice这个基类。再具体的子类中，其Attribute定义可能各不相通。为了访问特定的子类的Attribute，我们要将其转化成对应的子类。以开头的例子为例，casting操作的标识是$。DeviceList/0/$ns3::WaveNetDevice/MacEntities中，我们取出每个Node的第0个Device，并将其转化成ns3::WaveNetDevice类型，然后访问MacEntities这个Attribute。 查询方法 尽管知道了Attribute Path的构建方法，但是实际书写起来还是非常复杂，我们可以用一个简单的工具ConfigStore来查询仿真中具体有哪些Attribute。 参考下面的样例修改你的代码： 1234567891011121314int main (...)&#123; CommandLine cmd; cmd.Parse (...); ConfigStore config; config.ConfigureDefaults (); ... topology creation config.ConfigureAttributes (); Simulator::Run ();&#125; 然后按照下面的样子运行你的仿真 1./waf --run "scratch/myprogram --ns3::ConfigStore::Mode=Save --ns3::ConfigStore::Filename=config.txt" 然后在config.txt文件中我们可以查看仿真中所有涉及的Attribute的路径及具体取值。 注意只有在程序中使用过（读/写）才会在此处输出。 Further Reading HOWTO determine the path of an attribute or trace source HOWTO use the ConfigStore Configuration and Attributes]]></content>
  </entry>
  <entry>
    <title><![CDATA[马尔科夫链在WAVE链路层网络性能分析中的应用]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Fmarkov%2Findex.html</url>
    <content type="text"><![CDATA[本文整理自[1]。这篇文章关注的是多信道MAC，即IEEE802.11p + IEEE1609.4。具体而言，主要研究下面几个方面: 饱和以及非饱和情况下数据传输性能； 多维马尔科夫链（最多三维）在MAC协议中的使用； 马尔科夫链模型和真是的应用需求对比，以改善现存的分析模型和协议设计。 现有通信机制/标准简述 为了构建车联网通信系统，每辆车都装备了On-Board Units (OBUs)，路边设置有Road Side Units (RSUs)作为基础设施支持。因此车联网通信可以划分为Vehicle-to-Vehicle(V2V)，Vehicle-to-Infrastructure(V2I)两个类别。 WAVE协议中，总共75MHz的带宽被划分为7个信道（1个控制信道CCH和6个服务信道SCH），每个信道10MHz带宽，外加5MHz的保护间隔。同时WAVE还在时间维度上将信道访问过程划分为CCH Interval和SCH Interval，每个50ms。 车联网中典型业务的网络性能要求如下图。 DSRC data traffic requirement [2] 学界现有的多信道MAC方案 IEEE 1609.4规范中给出的多信道方案的问题在于，固定的CCHI，SCHI长度无法适应多变的交通流场景。例如在低密度场景下，CCHI上空闲资源比较多，而高密度场景下，CCHI的长度不够发完所有的安全广播。有很多多信道MAC机制着眼于解决这一问题，见下图： Comparison of adaptive multi-channel MAC protocols 通过利用适当的理论模型（主要是马尔科夫链），MAC协议可以计算CCH上完成SCH调度需要的时间，进而动态的调整CCHI的长度，从而将原本空闲的CCHI资源让渡给SCH使用。类似的机制的主要过程如下： 安全信息拥有最高的优先级，照常发送 计算完成所有WSA包发送需要的时间 动态调整CCHI和SCHI的长度 该使用Markov模型的动态MAC机制不仅仅可以确保安全消息的延时，同时可以优化非安全消息的QoS MAC协议必须动态地调整其自定义系统参数来适应多变的网络环境。 大多数运用马尔科夫模型MAC协议都有如下的架设 理想信道（no hidden terminal and capture） 网络中的节点数量固定，为\(n\) 包的碰撞概率为常数，且对于每辆车而言都是相同的 非饱和条件下，包到达的过程为泊松过程 基于上述假设，离散时间马尔科夫链就可以用于802.11 DCF的性能分析，并用于计算CCHI的最佳长度。 另外，我们还总结了多信道MAC协议的一些研究趋势： IEEE802.11p EDCA的马尔科夫链分析：所有现存的自适应多信道MAC方法都使用了马尔科夫链来分析DCF性能。不过，EDCA部分的马尔科夫链模型表达方面研究还不多。EDCA和DCF的主要区别阿在于EDCA对于每一种不同的Access Category (AC)规定了不同的竞争窗口大小和仲裁间隔(Arbitration Inter-frame Space)。 自适应多信道MAC协议的精确马尔科夫模型：如同上面提到的，使用马尔科夫链进行性能分析的MAC协议大多假设了理想的信道条件。这一假设在真实的车联网场景下是不成立的。一些近期的工作，如FCM-MAC考虑了隐藏终端的问题[3]。 自适应多信道MAC协议中的灵活控制器方案(Flexible Controllers)：已经计算出了最佳的CCHI之后，这一信息需要被RSU或者簇头车辆广播出去。CAMAC提出了使用编队结构来实现改信息广播的功能。 簇头选择问题：在一个网络分簇中，簇头是由“寿命”制约的，当簇头车辆离开了分簇时，如何选择新的簇头是需要解决的问题。 ACK Interval: 这一研究趋势是指将ACK包放到独立的ACK Interval中发送。 马尔科夫链模型与动态CCHI [4]这篇文章应该是最早提供了一整套完整的使用马尔科夫链来进行DCF性能分析的方法论。这篇文章讨论的是满载场景（即每个车辆总是有一个包等待发送）下饱和吞吐率(saturated)与竞争窗口，以及其他要素之间的关系。但是在实际场景中，一般不会进入满载的情况。因此有很多文章通过增加一个额外的状态随机变量来扩展了[4]中的马尔科夫模型。这使得马尔科夫链模型从二维变成三维。 这里我们讨论两种典型的业务：安全信息与WSA包。 安全信息的特点在于延时敏感，以及缺少ACK。 WSA的情况要复杂一些，我们这里梳理一下WSA的工作过程。WSA的作用是SCH服务提供者声明其所能提供的服务的广播报。WSA在CCHI上传输，其中包含了广播者提供的服务的所有信息以及使用这一服务（即加入此BSS）必要的网络参数，例如BSS的ID，Provider Service ID，使用的SCH信道，时隙信息，EDCA参数等等。WSA要求对此服务感兴趣的节点发送ACK（在有一些研究中，所有的ACK都集中到专门的ACK Interval中发送） 一维马尔科夫链 由于安全消息天然是广播的，没有重传过程，因此可以用一维马尔科夫链来建模。竞争窗口记为\(W_e\)，始终是固定的。马尔科夫链的状态变量为\(\left\{k:k \in [0, W_e - 1]\right\}\)。令\(\lambda_e\)表示安全信息到达速度。马尔科夫链的平稳分布为\(b_{0,\emptyset}\)(信道空闲的概率)，\(b_{e, k}\)(处于退避状态\(k\)的概率)。令\(P_{i|j}\)为转移概率\(\{\operatorname{Pr}\{b(t+1)=i | b(t)=j\}\) 一维马尔科夫链。图中的Idle状态是在非饱和状态下才有的，如果在饱和状态下，即\(\lambda_e \to \infty\)，则不存在Idle状态 二维马尔科夫链 令\(s(t)\)和\(b(t)\)分别为代表WSA包在时隙\(t\)的退避阶段以及退避计数器的值的随机变量。令状态\(I_{s, \emptyset}\)代表WSA队列为空。最大重传次数为\(m\)，竞争窗口在第\(i\)个阶段为\(W_{s, i}, (i \in [0, m])\)。在第一次传输尝试时，退避窗口被设置为最小值\(W_{s, 0}\)。当检测到碰撞时，竞争窗口加倍，并且开始重传。一个重要的假定是\(s(t)\)，即退避的阶段，与是否发生碰撞是独立的。二维过程\(\{s(t), b(t)\}\)可以建模成二维马尔科夫链。根据在达到最大退避窗口时的不同行为，我们可以划分两个不同的类别： remaining maximal backoff stage: 即达到最大的竞争窗口后，直到发送成功前，始终保持最大竞争窗口；这种模式一般比较常见。 reset backoff stage: 即达到最大的竞争窗口后，立即重置竞争阶段\(s(t)\)。 二维马尔科夫过程 记转移概率为\(P_{i, k | j, l} = \{\operatorname{Pr}\{s(t+1)=i, b(t+1)=k | s(t)=j, b(t)=l\}\)。平稳分布为 \[\begin{equation} b_{s, i, k}=\lim _{t \rightarrow \infty}\{s(t)=i, b(t)=k\}, 0 \leq i \leq m, 0 \leq k \leq W_{s, i} - 1 \end{equation}\] Remaing maximal backoff stage 这本部分的内容主要来自[5]. 这篇文章也是基于Bianchi的经典论文[4]。其改进主要在于考虑了信道的繁忙状态条件以及此条件对于退避机制的使用有何影响。Bianchi使用的假设条件也为这篇文章所使用：有限数量的通信节点以及理想信道条件。 三维马尔科夫链 将CCHI上传输的包的类型分为三类：安全消息，WSA消息，控制消息。其中安全消息使用一维马尔科夫链，对于后两者，控制消息拥有更高的优先级，使用EDCA中的AC1，WSA使用AC2。 在三维马尔科夫链中，类似二维的情况，我们用\(s(i, t)\)和\(b(i, t)\)来分别表示退避阶段和退避计数器的值。这里的\(i\)表示EDCA类别，即\(i \in AC1, AC2\)。用\(v(i, t)\)表示退避过程的冻结状态(Freezing state)。综上，三维随机变量\(\{s(i, t), b(i, t), v(i, t)\}\)可以表示成三维马尔科夫变量。由于控制消息拥有更高的优先级，那么控制帧就不会处于Freezing状态，即\(v(i, t) = -1\)。此时AC1的马尔科夫链的结构和上一个部分我们提到的二维马尔科夫链的形态非常类似，如下图： Markov chain used for packet transmission analysis using AC1. 考虑\(v(i, t)\)状态。如果包遇到一个空闲的时隙，那么\(v(i, t)\)会从0变成-1。否则，如果遇到了一个繁忙的时隙，\(v(i, t)\)则会维持0不变。因此，AC2的马尔科夫链可以表示为： Markov chain used for packet transmission analysis using AC2. Reference [1] V. Nguyen, O. T. T. Kim, C. Pham, T. Z. Oo, N. H. Tran, C. S. Hong, and E. Huh, “A survey on adaptive multi-channel mac protocols in vanets using markov models,” IEEE Access, vol. 6, pp. 16493–16514, 2018. [2] A. M. Abdelgader and W. Lenan, “The physical layer of the ieee 802.11 p wave communication standard: The specifications and challenges,” in Proceedings of the world congress on engineering and computer science, 2014, vol. 2, pp. 22–24. [3] Y. Yao, K. Zhang, and X. Zhou, “A flexible multi-channel coordination mac protocol for vehicular ad hoc networks,” IEEE Communications Letters, vol. 21, no. 6, pp. 1305–1308, 2017. [4] G. Bianchi, “Performance analysis of the ieee 802.11 distributed coordination function,” IEEE Journal on Selected Areas in Communications, vol. 18, no. 3, pp. 535–547, 2000. [5] E. Ziouva and T. Antonakopoulos, “CSMA/ca performance under high traffic conditions: Throughput and delay analysis,” Computer Communications, vol. 25, no. 3, pp. 313–321, 2002.]]></content>
  </entry>
  <entry>
    <title><![CDATA[一维马尔科夫过程的使用]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Fmarkov%2F1D-markov.html</url>
    <content type="text"><![CDATA[前言 一维马尔科夫链主要应用于广播消息的性能分析。在广播通信中，不存在ACK机制，因此发送者无法判断发送是否，因此也就无法增加退避窗口并且发起重传，传统的二维马尔科夫链中的二元状态变量中的backoff stage失去意义，因此只需要用backoff counter这一个变量即可表征广播接入信道的过程。 这里整理的一维马尔科夫过程的研究主要来自于[1]，同时包含饱和以及不饱和场景的性能分析。 一维马尔科夫链 网络结构为的单跳Adhoc网络，节点总数为\(n\)。传输环境为：a two-ray propagation model with no hidden terminal or capture effects，即所有的包丢失都是由于碰撞(Collision)导致的。假设每个节点每次只能缓存一个数据包，且包的到达过程为到达率为\(\lambda\)的Poisson过程， 非饱和状态下的一维马尔科夫链状态转移图 如上图所示，退避窗口为\(W\)，意味着退避状态一共有\(W\)个，以及一个额外的Idle状态（记为\(I\)）。同时记包的到达概率为\(q\)，信道繁忙的概率为\(q_b\)，则有下面的概率转移矩阵： \[\begin{equation} \left\{\begin{array}{l}{P\{I | I\}=1-q} \\ {P\{k | I\}=q / W} \\ {P\{k | I+1\}=1-p_{b}} \\ {P\{k | k\}=p_{b}} \\ {P\{I | 0\}=1}\end{array}\right. \end{equation}\] 下面求解稳态分布\(b_k (k \in [0, W - 1])\)（Idle状态的稳态概率为\(b_I\)），我们通过转移概率可以得到如下的方程： \[\begin{equation} b_I = \frac{1}{q}b_0 \end{equation}\] \[\begin{equation} b_{k}=\frac{(W-k) q}{W\left(1-P_{b}\right)} b_{I}=\frac{(W-k)}{W\left(1-P_{b}\right)} b_{0} \quad k \in[1, W-1] \end{equation}\] \[\begin{equation} b_{I}+b_{0}+\sum_{k=1}^{W-1} b_{k}=1 \end{equation}\] 当backoff counter为0时节点开发发送，则\(b_0\)为传输概率(transmission probability) \(\tau\)。通过上面的三个公式组成的方程，我们可以得到： \[\begin{equation} \label{tau} \tau=b_{0}=\left(\frac{1}{q}+1+\frac{(W-1)}{2\left(1-P_{b}\right)}\right)^{-1} \end{equation}\] 在得到传输概率以后，通过经典文章[2]我们可以计算吞吐率性能。不过我们在这里的模型中增加了Idle状态，因此分析会有一点不同。 记\(P_b\)为信道繁忙的概率，\(P_s\)为传输成功的概率，则： \[\begin{equation} \label{Pb} \begin{aligned} P_{b} &amp;=1-(1-\tau)^{n-1} \\ P_{s} &amp;=n \tau(1-\tau)^{n-1} \end{aligned} \end{equation}\] 按照[2]的方法，将两次backoff状态之间的间隔定义为一个slot（virtual slot），则virtual slot可能包含一个空的slot，一次冲突，或者一次成功的发送。那么有： \[\begin{equation} \text {SlotTime}=(1-\tau)^{n} \sigma+\left(1-(1-\tau)^{n}\right) T \end{equation}\] 由于在广播中，没有RTS/CTS，也没有ACK，那么一次冲突和一次成功发送占用信道的时间是一样的： \[\begin{equation} T=\frac{H+E[P]}{R}+D I F S+\delta \end{equation}\] 这里\(H\)为物理层帧头和MAC层帧头的大小，\(R\)为发送速率。由于我们假定包的生成过程是Poisson过程，则 \[\begin{equation} \label{q} q=1-e^{-\lambda S l o t T i m e} \end{equation}\] 通过联立求解\(\eqref{tau}, \eqref{Pb}, \eqref{q}\)非线性方程组，我们可以得到归一化吞吐率性能 \[\begin{equation} S=\frac{P_{s} E[P]}{S l o t T i m e} \end{equation}\] 上面描述的是非饱和状态下的性能计算过程，但是当\(\lambda\)趋近于无穷大，即\(q\)趋向于1时，即可以得到饱和场景下的通信性能。 Reference [1] J.-P. Wang, M. Abolhasan, D. R. Franklin, and F. Safaei, “Characterising the behaviour of ieee 802.11 broadcast transmissions in ad hoc wireless lans,” in 2009 ieee international conference on communications, 2009, pp. 1–5. [2] G. Bianchi, “Performance analysis of the ieee 802.11 distributed coordination function,” IEEE Journal on Selected Areas in Communications, vol. 18, no. 3, pp. 535–547, 2000.]]></content>
  </entry>
  <entry>
    <title><![CDATA[多信道机制调研]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2F%E7%8E%B0%E6%9C%89%E6%96%87%E7%8C%AE%E8%B0%83%E7%A0%94%2FMulti-Channel.html</url>
    <content type="text"><![CDATA[Lin-2019-Distributed Distributed Multi-Channel MAC Protocol for VANET: An Adaptive Frame Structure Scheme IEEE Access, 2019 System Model 这篇文章采用了基于TDMA的接入机制来确保信息传输的可靠性(Reliability)。 同时还是用了基于竞争的协商机制来保证访问服务信道资源的公平性。文章做如下假设： 每辆车装备有半双工设备，只能同时工作在一个信道上； GPS提供了同步时钟源。 信道帧结构 Frame structure of MAC layer. 上图展示了在一个同步间隔内的信道帧结构。CCH frame被划分成广播段(broadcasting period)和协商段(negoriation period)。广播段由长度相等的时隙组成（TDMA），时隙的数量可以根据车流密度动态地调整。协商段则采用基于退避(backoff)机制的竞争方式来进行通信。 文章提出了一种「三次握手」机制用于协商段的通信。每次当一轮协商完成后，协商发起者即可以获得一个服务信道。因此，SCH的长度就会根据协商的结果动态地变化。由于协商完成后可以立刻切换到对应的SCH信道，因此可以提高信道的使用效率。 CCH 访问过程 (CCH资源分配问题) 如前面所述，CCH 的访问过程被划分为广播段和协商段。我们首先讨论广播段。 我们首先来介绍一下广播段期间车辆发送的消息的结构。如下图所示： CCH 广播段发送的消息的格式 消息由三部分组成。首先是Header部分，Header部分包含了发送者的基础信息，包括车辆的ID，车辆占据的基础时隙\(N_{basic}\)。\(N_{ts}\)表示时隙的总数以及可用时隙的数量。Header中\(\text{ID} + N_{rcmd}\)的作用是，当\(N_{ava}\)相对来说很大的时候，车辆会尝试减少时隙总数来提高信道的利用效率。这里的\(\text{ID} + N_{rcmd}\)表示建议目标节点调换到\(N_{rcmd}\)这个时隙，进而方便时隙调整。第二部分是邻接表信息(Neighbor information)，记录了两跳范围内的时隙占用情况。其中\(S_{slot}\)为0表示时隙被一跳邻居节点占用，1表示被两跳邻居节点占用。最后一个部分是安全消息的内容。 由于相距两跳以上的节点之间可以复用时隙。所以这里只考虑两跳以内的时隙分配问题。当一个没有被分配时隙的新节点进入网络时，该节点首先要监听信道一个同步间隔(Synchronization Interval)的时间。通过从邻居节点中解析相关信息，该车辆可以获知两跳内的时隙占用情况。然后此新节点随机选择一个空闲时隙作为basic time slot - 基础时隙。然后到下一个同步间隔时，该节点广播自己的状态消息。 一个同步间隔内的时隙总数可以按照交通密度进行调整。将广播段的时隙总数记为\(N_{ts} \in [N_{\min}, N_{\max}]\)。网络中车辆数目为\(K\), 那么可用时隙数量为\(N_{ava} = N_{ts} - K\)。直观上来看，\(N_{ava}\)越大，新节点获取时隙的速度越快。如果我们规定网络中可用时隙的数目不能小于一个阈值\(N_{thre}\)，那么当\(N_{ava} &lt; N_{thre}\)时，车辆会尝试增加广播段时隙的总数。反过来，如果车辆减少，\(N_{ava}\)超过\(N_{thre}\)，车辆会尝试降低时隙总数【并不是立即降低】，具体算法的伪代码见下图： 关于上面的算法我发现了一个有意思的问题: 伪代码第9行中，如果只有两个节点，且两个节点采用了同一个时隙时，这两个节点都无法收到对面的包。那么按照现有的伪代码的逻辑， 这两个节点会持续占用这两个节点进行通信，二者互相无法感知对方的存在。 SCH 接入过程 SCH的资源分配于CCH的协商段完成。由于SCH的通常是点对点通信，故完成协商的节点可以不等CCHI结束，立即切换到SCH进行通信。 协商段的协商过程示意图如下： 以上图为例，当车辆A需要服务时，其广播一个请求信息(REQ)。假设车辆C和D能够提供该服务，那么他们会回复一个ACK信息给A。然后车辆A会决定采用哪个车辆的服务。若A决定使用D提供的服务，则A向D发送一个响应消息(RES)。注意协商段是在广播段结束后进行，故此时所有节点已经交换过时隙信息和安全信息了。因此，当A和D完成上述协商过程时，可以切换到一个可用的SCH信道开始通信。 另外一个比较重要的点是，由于协商段发送的消息体积非常小，DCF机制中，与信道繁忙状态下冻结退避计数器的机制没有使用。 SCHI 也被分割成多个时隙。一对车辆之间的传输可能无法使用整个SCHI，因此这部分资源可以复用。复用通过RES消息来调度 如上图的，RES中包含了的源节点车辆ID \(\text{ID}_{sour\_veh}\)，为需要服务的车辆；目标节点车辆ID \(\text{ID}_{dest\_veh}\)，为提供服务的车辆；SCH信道编号\(N_{sch}\)，以及SCH的长度\(T_{sch}\)；以及需要使用的时隙集合\(O_{set_ts}\)。网络中其他车辆在收到RES消息时，会相应地更新SCH占用信息。 在选择SCH信道时，优先选择已经被占用的信道。如果SCH中剩余的时隙资源无法满足需要，那么采用&quot;try the best to transmit&quot;的策略，选择最长的时隙分配。 Reference]]></content>
  </entry>
  <entry>
    <title><![CDATA[十六国概况]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5.html</url>
    <content type="text"><![CDATA[概况 十六国又称五胡十六国。这段时期介于魏晋与南北朝之间，持续一百多年的乱世，给北方带来了巨大的破坏与残酷的战乱。十六国具体时间为304年刘渊建立汉赵，至北魏灭北凉为止。范围大致上涵盖华北、蜀地、辽东，最远可达漠北、江淮及西域。在入主中原众多民族中，以匈奴、羯、鲜卑、羌及氐为主，统称五胡。他们在这个范围内相继建立许多国家，而北魏史学家崔鸿以其中十六个国家撰写《十六国春秋》（五凉、四燕、三秦、二赵，成汉、胡夏为十六国），于是后世史学家称这时期为“五胡十六国”。 五胡乱华前北方各族分布图 在西晋时期，五胡居于西晋北方、西方的边陲地区，对晋王朝呈现半包围局面。由于晋廷的腐败和汉官的贪污残暴，五胡在八王之乱后纷纷举兵，史称五胡乱华。在西晋灭亡后，华北地区战火纷飞，掠夺与屠杀不断。经济受到严重摧毁，影响中华的民族、文化、政治、军事等发展走向。永嘉之乱带给人民巨大痛苦，大多逃难到凉州、辽东以及江南地区，使这些地区的经济文化渐渐繁荣。在诸国混战期间，前秦宣昭帝苻坚一度统一华北，但在南征东晋时，于淝水之战惨败。其后各族于关东及空虚的关中叛变，加上东晋北伐，前秦全面崩溃，北方再度混乱。北魏立国后，经过道武帝拓跋珪、明元帝拓跋嗣及太武帝拓跋焘的经营，最后于439年统一华北，进入南北朝时期。 北方各族的内徙促成民族大融合，在中国作为多民族国家的发展过程中具有重要意义。同时，各国的君主为了增强实力，也在各自的根据地上实行一些发展生产的政策，使得各地区在华北动荡的背景下，形成局部稳定的局面。该时期的民族大融合持续到隋朝时期才大致上完成。 尽管名称是五胡十六国，但是其实现实形势要更加复杂，除了匈奴、羯、鲜卑、羌及氐五个民族外，北方诸国的统治者还包括汉人，丁零人，卢水胡等。国家也不只十六个。这里所称的五胡十六国为影响力最大的部分。 各国概况 汉赵(前赵) 后赵(石赵) 前燕 前秦 后秦(姚秦) 西秦]]></content>
  </entry>
  <entry>
    <title><![CDATA[ns3中的wave模块]]></title>
    <url>%2Fknowledge-base%2Facademic%2Fits%2Fwave%2Fns3%E4%B8%AD%E7%9A%84wave%E6%A8%A1%E5%9D%97%2Findex.html</url>
    <content type="text"><![CDATA[前言 ns-3 is a discrete-event network simulator for Internet systems, targeted primarily for research and educational use. ns-3 is free software, licensed under the GNU GPLv2 license, and is publicly available for research, development, and use. 简而言之，ns3是一款基于C++的离散事件网络模拟器，其内部实现了很多常见的网络协议。因此学术界通常使用ns3来作为论文仿真分析的框架。我们在这篇文章里梳理一下ns3中关于WAVE部分的内容。 WAVE的初始化 下面的代码给出了一种WAVE机制的初始化方法： 123456789101112131415161718192021222324252627282930313233343536373839404142/* * lossModelName: 信道损失模型，默认值是 * ns3::LogDistancePropagationLossModel */auto lossModelName = m_config-&gt;Get ("lossModel");double freq = 5e9;YansWifiChannelHelper waveChannel;waveChannel.SetPropagationDelay ("ns3::ConstantSpeedPropagationDelayModel");if (lossModelName == "ns3::TwoRayGroundPropagationLossModel") &#123; waveChannel.AddPropagationLoss (lossModelName, "Frequency", DoubleValue (freq), "HeightAboveZ", DoubleValue (1.5));&#125; else if (lossModelName == "ns3::LogDistancePropagationLossModel") &#123; waveChannel.AddPropagationLoss (lossModelName);&#125; else &#123; waveChannel.AddPropagationLoss (lossModelName, "Frequency", DoubleValue (freq));&#125;/** * propagationLossModel: 默认是None */auto propagationLossModel = m_config-&gt;Get ("propagationLossModel");if (propagationLossModel != "None") &#123; waveChannel.AddPropagationLoss (propagationLossModel);&#125;// Create the channel using settings aboveauto wavePhy = YansWavePhyHelper::Default ();wavePhy.SetChannel (waveChannel.Create ());wavePhy.SetPcapDataLinkType (WifiPhyHelper::DLT_IEEE802_11);/** * 发射功率，单位为dbm */auto txp = m_config-&gt;Get&lt;double&gt; ("txp");wavePhy.Set ("TxPowerStart",DoubleValue (txp));wavePhy.Set ("TxPowerEnd", DoubleValue (txp));QosWaveMacHelper waveMac = QosWaveMacHelper::Default ();WaveHelper waveHelper = WaveHelper::Default ();auto phyMode = m_config-&gt;Get ("phyMode");waveHelper.SetRemoteStationManager ("ns3::ConstantRateWifiManager", "DataMode",StringValue (phyMode), "ControlMode",StringValue (phyMode));m_devices = waveHelper.Install (wavePhy, waveMac, m_nodes); 这段代码中我们逐一创建了信道模型，物理层，链路层，最后通过waveHelper将各个部分组装在一起，并且安装到节点上： 1m_devices = waveHelper.Install (wavePhy, waveMac, m_nodes); waveHelper waveHelper-&gt;Install的核心代码如下： 1234567891011121314151617181920212223242526272829303132Ptr&lt;Node&gt; node = *i;Ptr&lt;WaveNetDevice&gt; device = CreateObject&lt;WaveNetDevice&gt; ();device-&gt;SetChannelManager (CreateObject&lt;ChannelManager&gt; ());device-&gt;SetChannelCoordinator (CreateObject&lt;ChannelCoordinator&gt; ());device-&gt;SetVsaManager (CreateObject&lt;VsaManager&gt; ());device-&gt;SetChannelScheduler (m_channelScheduler.Create&lt;ChannelScheduler&gt; ());for (uint32_t j = 0; j != m_physNumber; ++j) &#123; Ptr&lt;WifiPhy&gt; phy = phyHelper.Create (node, device); phy-&gt;ConfigureStandard (WIFI_PHY_STANDARD_80211_10MHZ); phy-&gt;SetChannelNumber (ChannelManager::GetCch ()); device-&gt;AddPhy (phy); &#125;for (std::vector&lt;uint32_t&gt;::const_iterator k = m_macsForChannelNumber.begin (); k != m_macsForChannelNumber.end (); ++k) &#123; Ptr&lt;WifiMac&gt; wifiMac = macHelper.Create (); Ptr&lt;OcbWifiMac&gt; ocbMac = DynamicCast&lt;OcbWifiMac&gt; (wifiMac); // we use WaveMacLow to replace original MacLow ocbMac-&gt;EnableForWave (device); ocbMac-&gt;SetWifiRemoteStationManager ( m_stationManager.Create&lt;WifiRemoteStationManager&gt; ()); ocbMac-&gt;ConfigureStandard (WIFI_PHY_STANDARD_80211_10MHZ); device-&gt;AddMac (*k, ocbMac); &#125;device-&gt;SetAddress (Mac48Address::Allocate ());node-&gt;AddDevice (device);devices.Add (device); 首先创建WAVE设备，并且设置ChannelCoordinator, VsaManager, ChannelScheduler，逐一最后一个是通过是通过工厂对象创建的。工厂对象默认创建的ChannelScheduler是ns3::DefaultChannelScheduler(事实上ns3内部只有这一个具体的ChannelCoordinator实现). 在接下来的循环中，waveHelper利用参数中传入的物理层Helper来创建物理层对象。这里的m_physNumber默认为1。对于物理层，这里进一步设置了信道带宽标准（10MHz），将信道号设置为CCH信道号。 在第二个循环中，waveHelpher创建WAVE的七个信道，这里的m_macsForChannelNumber默认来自ChannelManager::GetWaveChannels ()。在循环体内，对于每一个WAVE信道，wave进行如下操作： 启用WAVE支持(这一部分详细阅读以下面的waveMac章节) 设置RemoteStationManager 设置标准为WIFI_PHY_STANDARD_80211_10MHZ 最后为设备分配MAC地址。 wavePhy YansWavePhyHelper继承了YansWifiPhyHelper。相比于父类，wavePhy其实主要修改了自带的日志输出范式，对于功能主干影响不大。我们来看关键的YansWifiPhyHelper::Create函数。 12345678910Ptr&lt;WifiPhy&gt;YansWifiPhyHelper::Create (Ptr&lt;Node&gt; node, Ptr&lt;NetDevice&gt; device) const&#123; Ptr&lt;YansWifiPhy&gt; phy = m_phy.Create&lt;YansWifiPhy&gt; (); Ptr&lt;ErrorRateModel&gt; error = m_errorRateModel.Create&lt;ErrorRateModel&gt; (); phy-&gt;SetErrorRateModel (error); phy-&gt;SetChannel (m_channel); phy-&gt;SetDevice (device); return phy;&#125; 这个函数只是按部就班地设置对应的属性，没有特别的处理。 waveMac waveMac直接使用了QosWaveMacHelper的默认设置。这个部分Helper配置的部分极少。可以认为是直接从构造函数创建OcbWifiMac。 OCB，即Outside Context of BSS，即脱离BSS的组织形式，让节点直接直接进行通信的范式。 OcbWifiMac 的注释可以提供进一步的说明： In OCB mac mode,synchronization, association, dis-association and authentication of normal wifi are not used for wireless access in vehicular environments. Although Timing Advertisement frame is a specific management frame defined in 802.11p. It is mainly used by IEEE Std 1609.4 for channel switch synchronization. However in simulation nodes are supposed to have GPS synchronization ability, so we will not implement this feature. 关于OcbWifiMac::EnableForWave的说明： 在waveHelper的处理中，对创建的OcbWifiMac对象调用了EnableForMac函数。这个函数的主要作用是，将OcbWifiMac的m)low底层MAC实现，从MacLow替换为WaveMacLow。 WAVE中的Tx 通过WaveNetDevice直接发包方式下的路径 这里我们使用直接从WaveNetDevice的发送接口进行发包的方法。例如： 12345678auto sender = DynamicCast&lt;WaveNetDevice&gt; (m_devices.Get (0));auto receiver = DynamicCast&lt;WaveNetDevice&gt; (m_devices.Get (1));const Address dest = receiver-&gt;GetAddress ();SeqTsHeader seqTs;seqTs.SetSeq (1);packet-&gt;AddHeader (seqTs);// 0x0800是IP协议号sender-&gt;Send (packet, dest, 0x0800); 这里的协议号是0x0800，即发送的是IP包，IP包只能在CCH上发送 注意在执行上面的发送前还需要对WAVE进行信道配置，否则无法发送。信道配置不需要在每次发送前配置，只需要在设置发生变更的时候修改设置即可。配置的示例代码如下： 123456789101112auto schInfo = SchInfo (SCH1, immediateAccess, EXTENDED_ALTERNATING);auto txProfile = TxProfile (SCH1);auto sender = DynamicCast&lt;WaveNetDevice&gt; (m_devices.Get (0));auto receiver = DynamicCast&lt;WaveNetDevice&gt; (m_devices.Get (1));Simulator::Schedule ( Seconds (0), &amp;WaveNetDevice::RegisterTxProfile, sender, txProfile);Simulator::Schedule ( Seconds (0), &amp;WaveNetDevice::RegisterTxProfile, receiver, txProfile);Simulator::Schedule ( Seconds (0), &amp;WaveNetDevice::StartSch, sender, schInfo);Simulator::Schedule ( Seconds (0), &amp;WaveNetDevice::StartSch, receiver, schInfo); WaveNetDevice::Send 这里的调用入口是WaveNetDevice::Send(ns3::Ptr&lt;...&gt; packet, const ns3::Address &amp;dest, uint16_t protocol). 这个函数中做了如下处理: 检查m_txProfile，在WAVE中的，要发送数据必须要先注册一个TxProfile，这个结构提供了上层对于物理底层参数的控制能力。 检查还是否可以访问m_txProfile中指定的信道。 检查m_txProfile中的其他参数，并生成一个HigherLayerTxVectorTag的PacketTag添加到包中。 添加LlcSnapHeader，此Header中包含了协议类型（如是IP包，协议为0x0800）。 根据m_txProfile中制定的信道编号，获取对应的WifiMac(实质是OcbWifiMac)，将包压入其队列。这一级调用见下一个子部分。 OcbWifiMac::Enqueue 这个函数里的处理主要分为两个部分：一是m_stationManager的相关处理，二是QoS相关的处理。同时，MAC帧头WifiMacHeader也在这里生成。 注意，在WAVE中，QoS功能是启用的，即GetQosSupported返回true。那么发送队列的选择会由EDCA机制来控制: 1m_edca[QosUtilsMapTidToAc (tid)]-&gt;Queue (packet, hdr); 其中m_edca的类型为EdcaQeueus（typedef std::map&lt;AcIndex, Ptr&lt;QosTxop&gt; &gt; EdcaQueues;），本质从EDCA的Access Category index映射到对应对应队列的字典。 QosTxop::Queue QosTxOp继承自Txop。Queue这个函数没有改动。在Txop::Queue内，传入的包被纳入m_queue这个内部队列，然后StartAccessIfNeeded被调用来尝试访问信道。 m_queue是WifiMacQueue类型。这个队列实现了802.11协议中的超时功能。在包被取出时，队列检查其时间戳，如果超时会丢弃这个包。 ChannelAccessManager::StartAccessIfNeeded StartAccessIfNeeded是开始信道访问尝试的入口，这个过程涉及众多函数，我们在这里统一梳理。 在StartAccessIfNeeded函数中，若 m_currentPacket为空，即当前没有正在发送的包。 m_queue不是空，即还有包等待发送 IsAccessRequested()为false，为了避免请求信道重复 m_low-&gt;IsCfPeriod为false，底层mac是否处于可供发送的状态 (CF: Contention-Free) 以上条件全部得到满足，那么Txop会通过m_channelAccessManager-&gt;RequestAccess来请求访问信道。 这里的m_channelAccessManager是从RegularWifiMac::m_channelAccessManager赋值而来，不同的同一个mac层的不同Txop共享。 ChannelAccessManager会处理和退避相关的事宜： 如果信道可以访问，调用ChannelAccessManager::DoGrantAccess 不管在任何情况下，调用ChannelAccessManager::DoRestartAccessTimeoutIfNeeded，这一步是为了调度一下次对信道的访问尝试（例如如果本次访问信道失败，则重新更新退避信息后，在一定间隔后再次访问信道）。 在DoGrantAccess中，最终成功访问到信道的Txop的NotifyAccessGranted函数会被调用。 信道的访问规则使我们关注的重点，尤其是CCH和SCH的信道访问控制。经过测试发现，在CCHI时请求SCH信道时，不会调用DoGrantAccess。在CCHI发起SCH请求时，m_sleeping为true，因此会在RequestAccess函数开头即返回，这里也不会通过DoRestartAccessTimeoutIfNeeded来调度下一次信道访问（毕竟信道睡眠中）。可见WAVE的Aternative Accessing在MAC层是通过让OcbWaveMac周期性地睡眠实现的。这一功能主要实现于DefaultChannelScheduler中。 QosTxop::NotifyAccessGranted QosTxop覆盖了NotifyAccessGranted的实现。在这函数里面，WifiMacHeader中的一些参数进行了重新设置。主要包括： SeqNo 禁止分段（即将大包拆解成小包传输） NoRetry 注意，对于QoS数据包，ACK在这里被禁用： 12345678if (m_currentHdr.IsQosData () &amp;&amp; m_currentHdr.IsQosBlockAck ())&#123; m_currentParams.DisableAck ();&#125;else&#123; m_currentParams.EnableAck ();&#125; 在涉及参数配置以及AMSDU等方面的设置完成后调用m_low-&gt;StartTransmission。前面我们提到过，这里的m_low为WaveMacLow类型。 WaveMacLow::StartTransmission 发送过程中地址的处理 WaveNetDevice::Send接口发送数据时，我们发现发送的目标地址并不是设置到packet里面，而是独立传递进了接口。这里简要梳理一下在发送过程中地址的处理。 在WaveNetDevice::Send函数中，Address类型的目标地址被转换成Mac48Address类型，再传递给OcbWifiMac::Enqueue函数。在这个函数里面，这个地址被复制给802.11的帧头的addr1字段。帧头的类型为WifiMacHeader RTS/CTS RTS/CTS部分是由MacLow负责的，我们从MacLow::StartTransmission开始梳理。 NeedRTS 首先要讨论的是，系统如何决定一个包是否需要进行RTS 123456boolMacLow::NeedRts (void) const&#123; WifiTxVector dataTxVector = GetDataTxVector (m_currentPacket, &amp;m_currentHdr); return m_stationManager-&gt;NeedRts (m_currentHdr.GetAddr1 (), &amp;m_currentHdr, m_currentPacket, dataTxVector);&#125; 这里的取出来的dataTxVector的作用并不关键，其主要作用的是两个因素： 地址是否是group: address.IsGroup () 包的大小是否超过了WifiRemoteStationManager::m_rtsCtsThreshold。不过这个包被默认设置为65535，这个条件几乎无法满足. WSA包的发送 发送WSA包时，配置方法与发送IP包的是一致的，具体到发送上，餐卡wave-simple-device.cc里面的示例: 12345Ptr&lt;Packet&gt; wsaPacket = Create&lt;Packet&gt; (100);Mac48Address dest = Mac48Address::GetBroadcast ();const VsaInfo vsaInfo = VsaInfo (dest, OrganizationIdentifier (), 0, wsaPacket, SCH1, 100, VSA_TRANSMIT_IN_BOTHI);Simulator::Schedule (Seconds (1.0), &amp;WaveNetDevice::StartVsa, sender, vsaInfo);Simulator::Schedule (Seconds (3.0), &amp;WaveNetDevice::StopVsa, sender, SCH1); VsaInfo VsaInfo的定义如下： 12345678910struct VsaInfo&#123; Mac48Address peer; ///&lt; peer OrganizationIdentifier oi; ///&lt; OI uint8_t managementId; ///&lt; management ID Ptr&lt;Packet&gt; vsc; ///&lt; VSC uint32_t channelNumber; ///&lt; channel number uint8_t repeatRate; ///&lt; repeat rate enum VsaTransmitInterval sendInterval; ///&lt; send interval&#125; 其中： peer: 为发送目标地址，一般是广播地址 oi: 服务提供者的组织ID managementId: manage id vsc: 需要发送的包内容 channelNumber: 目标信道，这里指需要指定的SCH信道 repeatRate: 发送速度，即每秒多少个 sendInterval: 这是一个枚举类型，指定了包应该在哪些时隙上发送。其取值包括： VSA_TRANSMIT_IN_CCHI VSA_TRANSMIT_IN_SCHI VSA_TRANSMIT_IN_BOTHI WaveNetDevice::StartVsa 传入参数vsaInfo中规定了发送WSA包的必要信息。在WaveNetDevice::StartVsa函数中，设备检查了vsaInfo的数据的完整性，然后交给m_vsaManager-&gt;SendVsa来进行发送。在VsaManager中，CCHI和SCHI的访问控制，以及txVector的控制信息都在这里实现，同时，此包被赋予了EDCA最高优先级(AC_V0)。然后交给OcbWifiMac-&gt;SendVsc来执行发送。通过这个接口发送的包会被标记为管理包。 WAVE中的信道管理 ChannelCoordinator负责控制信道切换的时机，让所有的节点的信道切换同步，而ChannelScheduler负责执行具体的信道切换。在DefaultChannelScheduler::SetWaveNetDevice中，ChannelCoordinator和ChannelScheduler得以联系起来： 12m_coordinationListener = Create&lt;CoordinationListener&gt; (this);m_coordinator-&gt;RegisterListener (m_coordinationListener); ChannelCoordinator在调用其DoInitialize函数内部完成初始化之后即通过StartChannelCoordination函数开启往复调用的信道协调同步过程。这个过程首先进入的是Guard Interval(NotifyGuardSlot)。 1234567891011121314151617181920voidChannelCoordinator::NotifyGuardSlot (void)&#123; NS_LOG_FUNCTION (this); Time guardSlot = GetGuardInterval (); bool inCchi = ((m_guardCount % 2) == 0); if (inCchi) &#123; m_coordination = Simulator::Schedule (guardSlot, &amp;ChannelCoordinator::NotifyCchSlot, this); &#125; else &#123; m_coordination = Simulator::Schedule (guardSlot, &amp;ChannelCoordinator::NotifySchSlot, this); &#125; for (ListenersI i = m_listeners.begin (); i != m_listeners.end (); ++i) &#123; (*i)-&gt;NotifyGuardSlotStart (guardSlot, inCchi); &#125; m_guardCount++;&#125; 在这个函数里面根据inCchi来决定调度NotifyCchSlot还是NotifiySchSlot。在函数最末，通告所有的Listener，Guard Interval开始了。后续的NotifyCchSlot和NotifiySchSlot的做法也是类似的。 在DefaultChannelScheduler::NotifyGuardSlotStart中，开头的Guard Interval长度被设置为繁忙mac-&gt;MakeVirtualBusy (duration);。实际的信道切换过程也在这个函数中通过调用DefaultChannelScheduler::SwitchToNextChannel来进行。由于Guard Interval区间内被设置为繁忙，所以当设备结束睡眠时，检测信道繁忙，故而会开始执行退避。 这里有一个疑问：ChannelCoordinator内部的Schedule调度完全是独立进行的，如果采用了Extended Access，即CCHI会提前结束，那么原定的Guard Interval还是会被设置么？ 退避过程(Backoff) 退避过程主要实现在ChannelAccessManager内。在Txop::Queue函数收到一个包之后，会调用Txop::StartAccessIfNeeded这个函数来尝试访问信道。 123456789101112voidTxop::StartAccessIfNeeded (void)&#123; NS_LOG_FUNCTION (this); if (m_currentPacket == 0 &amp;&amp; !m_queue-&gt;IsEmpty () &amp;&amp; !IsAccessRequested () &amp;&amp; !m_low-&gt;IsCfPeriod ()) &#123; m_channelAccessManager-&gt;RequestAccess (this); &#125;&#125; 实质调用的ChannelAccessManager::RequestAccess这个函数。这个函数我们挑选其中重要的代码列在下面： 123456789101112131415161718192021222324252627282930313233343536voidChannelAccessManager::RequestAccess (Ptr&lt;Txop&gt; state, bool isCfPeriod)&#123; // ... UpdateBackoff (); NS_ASSERT (!state-&gt;IsAccessRequested ()); state-&gt;NotifyAccessRequested (); Time lastTxEnd = m_lastTxStart + m_lastTxDuration; if (lastTxEnd &gt; Simulator::Now ()) &#123; NS_LOG_DEBUG ("Internal collision (currently transmitting)"); state-&gt;NotifyInternalCollision (); DoRestartAccessTimeoutIfNeeded (); return; &#125; if (state-&gt;GetBackoffSlots () == 0) &#123; if (IsBusy ()) &#123; NS_LOG_DEBUG ("medium is busy: collision"); // someone else has accessed the medium; generate a backoff. state-&gt;NotifyCollision (); DoRestartAccessTimeoutIfNeeded (); return; &#125; else if (IsWithinAifs (state)) &#123; NS_LOG_DEBUG ("busy within AIFS"); state-&gt;NotifyCollision (); DoRestartAccessTimeoutIfNeeded (); return; &#125; &#125; DoGrantAccess (); DoRestartAccessTimeoutIfNeeded ();&#125; 这个函数内部主要步骤为： 检查是否有内部冲突，即当前是否正在发送一个数据包。如果发生了内部冲突，会调用Txop::NotifyInternalCollision回调，并通过DoRestartAccessTimeoutIfNeeded这个函数在一段时间后重新访问信道。 检查退避计数器的状态：如果计数器到0了，若信道繁忙，则认为产生了一次碰撞，若仍然在Aifs状态，那么也认为是一次碰撞（事实上这里的两个分支是一样的） 如果退避计数器不是0，即上一次退避未完成时，通过DoRestartAccessTimeoutIfNeeded这个函数延后访问信道（这里的DoGrantAccess函数不会允许访问信道）。 下面我们分解讲一下主要函数的作用。 UpdateBackoff 在实际的WAVE系统中，其退避过程为了性能考虑采用是离散的方法，即定一个退避计数器，每经过一个时隙（slot），这个退避计数器减一，直到变成0。有意思的是，在仿真系统中，NS3反而是使用了“连续”的方法来实现（当然本质是离散的，但是API调用形式上使用Simulator::Schedule直接调度backoff相关事件，显得是连续的）。此时，我们如果要访问退避计数器的值，如调用（state-&gt;GetBackoffSlots ()），就需要先调用UpdateBackoff这个函数来进行离散和连续的转化。 DoRestartAccessTimeoutIfNeeded 在ChannelAccessManager的实现中，ChannelAccessManager和Txop是一对多的关系，即多个Txop可以由同一个ChannelAccessManager来管理。不过在实际代码中，至少我们关注的RegularWifiMac及其子类，ChannelAccessManager和Txop都是一对一。 123456789101112131415RegularWifiMac::RegularWifiMac ()&#123; // ... m_channelAccessManager = CreateObject&lt;ChannelAccessManager&gt; (); m_channelAccessManager-&gt;SetupLow (m_low); m_txop = CreateObject&lt;Txop&gt; (); m_txop-&gt;SetMacLow (m_low); m_txop-&gt;SetChannelAccessManager (m_channelAccessManager); m_txop-&gt;SetTxMiddle (m_txMiddle); m_txop-&gt;SetTxOkCallback (MakeCallback (&amp;RegularWifiMac::TxOk, this)); m_txop-&gt;SetTxFailedCallback (MakeCallback (&amp;RegularWifiMac::TxFailed, this)); m_txop-&gt;SetTxDroppedCallback (MakeCallback (&amp;RegularWifiMac::NotifyTxDrop, this)); // ...&#125; 我们这里还是假定以存在多个txop的情况来讨论。在DoRestartAccessTimeoutIfNeeded中，函数首先根据当前的状态，选择出最近一个结束一轮退避过程Txop的退避结束时间expectedBackoffEnd。如果当前已经安排的m_accessTimeout时间在这个退避结束时间后面，那么以新的时间重新调调度一个m_accessTimeout事件。这一事件的回调函数是ChannelAccessManager::AccessTimeout AccessTimeout 这个函数内部非常简单： 12345678voidChannelAccessManager::AccessTimeout (void)&#123; NS_LOG_FUNCTION (this); UpdateBackoff (); DoGrantAccess (); DoRestartAccessTimeoutIfNeeded ();&#125; DoGrantAccess 这个函数内部进行真正的信道权限赋予的操作。不过函数仍然会检查每个Txop的退避状态，只有完成了退避的Txop才有可能被赋予信道访问权限。另外，对于 其他正在尝试访问信道的Txop，会出发一次Internal Collision. 被赋予信道访问权限的Txop的NotifyAccessGranted函数会被调用. EDCA优先级控制 发送过程优先级设置 EDCA优先级控制通过过程如下： 在WaveNetDevice::SendX函数的参数TxInfo中，包含一个priority的属性，这个属性被设置到SocketPriorityTag中，并被添加到包中。在OcbWifiMac::Enqueue函数中通过QosUtilsMapTidToAc函数转化成EDCA index，具体转化规则为： 0, 3 -&gt; VC_BE (Best Effort) 1, 2 -&gt; AC_BK (Background) 4, 5 -&gt; VC_VI (Video) 6, 7 -&gt; VC_VO (Audio) 这里的Priority的默认值是7 优先级的退避参数设置 WAVE使用的是OcbWifiMac，对EDCA队列的配置通过函数OcbWifiMac::ConfigureEdca来进行。这个函数的调用树如下： WaveHelper::Install -&gt; WifiMac::ConfigureStandard -&gt; OcbWifiMac::FinishConfigureStandard -&gt; OcbWifiMac::ConfigureEdca. OcbWifiMac::ConfigureEdca中的具体设置过程如下： 123456789101112131415161718192021222324252627282930313233343536373839404142voidOcbWifiMac::ConfigureEdca (uint32_t cwmin, uint32_t cwmax, uint32_t aifsn, enum AcIndex ac)&#123; NS_LOG_FUNCTION (this &lt;&lt; cwmin &lt;&lt; cwmax &lt;&lt; aifsn &lt;&lt; ac); Ptr&lt;Txop&gt; dcf; switch (ac) &#123; case AC_VO: dcf = RegularWifiMac::GetVOQueue (); dcf-&gt;SetMinCw ((cwmin + 1) / 4 - 1); dcf-&gt;SetMaxCw ((cwmin + 1) / 2 - 1); dcf-&gt;SetAifsn (aifsn); break; case AC_VI: dcf = RegularWifiMac::GetVIQueue (); dcf-&gt;SetMinCw ((cwmin + 1) / 2 - 1); dcf-&gt;SetMaxCw (cwmin); dcf-&gt;SetAifsn (aifsn); break; case AC_BE: dcf = RegularWifiMac::GetBEQueue (); dcf-&gt;SetMinCw (cwmin); dcf-&gt;SetMaxCw (cwmax); dcf-&gt;SetAifsn (aifsn); break; case AC_BK: dcf = RegularWifiMac::GetBKQueue (); dcf-&gt;SetMinCw (cwmin); dcf-&gt;SetMaxCw (cwmax); dcf-&gt;SetAifsn (aifsn); break; case AC_BE_NQOS: dcf = RegularWifiMac::GetTxop (); dcf-&gt;SetMinCw (cwmin); dcf-&gt;SetMaxCw (cwmax); dcf-&gt;SetAifsn (aifsn); break; case AC_UNDEF: NS_FATAL_ERROR ("I don't know what to do with this"); break; &#125;&#125; 这里AIFSN的取值为： AC_BE_NQOS: 2 AC_VO: 2 AC_VI: 3 AC_BE: 6 AC_BK: 9]]></content>
  </entry>
  <entry>
    <title><![CDATA[八王之乱]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%85%AB%E7%8E%8B%E4%B9%8B%E4%B9%B1.html</url>
    <content type="text"><![CDATA[概述 八王之乱是发生于西晋末年元康元年（291年）至光熙元年（306年）间的政治动乱，是一场由西晋皇族为争夺中央政权而引发的动乱，为中国历史上一场极为严重的皇族内乱，共持续16年。西晋皇族中参与这场动乱的王不止八个，但八王为主要参与者，且《晋书》将八王汇为一列传，故史称“八王之乱”。 这场动乱从宫廷内权力斗争开始，进而引发战争，祸及全社会，造成大量破坏，也加剧西晋的统治危机，成为西晋迅速灭亡的重要因素。八王之乱期间，北方主要少数民族匈奴、羯、鲜卑、羌及氐等五族的各个部族趁西晋政权内部空虚，纷纷起兵脱离晋朝控制，并陆续建立割据政权，入驻中原，最后导致建兴四年（316年）西晋灭亡。之后晋室遗族避走中原、至江南地区建立王朝，设都建康，史称东晋。 北方的中原地区则由汉族以及非汉族的各游牧民族部族政权割据，前后建立十六个国家，其中以鲜卑族建立的一系列政权影响力最广。因为鲜卑属于上古华夏族同时期的北方游牧民族东胡族后裔，所以这五个少数民族被南方王朝统称作“五胡”，中国古代史进入五胡十六国时期。南北分裂的局面从东晋十六国一直持续到南北朝，直到589年隋灭陈之战后，隋朝正式成为统一的王朝。 背景 曹魏时代，皇室对宗室王公虽有授爵，但其实仅有虚名，没有任何实权，行为也受严密管控。魏明帝死后，幼主曹芳即位，由宗室曹爽当政，其时宗室曹冏曾写《六代论》指出若不授以宗室诸王实权以保卫皇室，政权可能转入他姓之手，希望曹爽会进行改革，但曹爽没有听从。不久，司马懿发动高平陵之变，族灭曹爽，夺取大权，自此将政权转移到司马一族手中，实力微弱的曹魏宗室无法抗衡，遂让司马氏成功篡位。因此，晋武帝司马炎在泰始元年（266年）晋朝初建时，就恢复周、汉二代的分封制，封二十七个同姓王，以郡建国。晋武帝制定的王国置军制度，将封国分为大、次、小三等，不同级别可置不同数目的军，但各王无地方行政权。分类情况如下: 辖下民户数 封国等级 置军人数 二万户 大国 上、中、下三军五千人 一万户 次国 上、下二军三千人 五千户以下 小国 一千五百人 晋武帝在分封同姓王的同时，又大封异姓士族为公、侯、伯、子、男等爵位，他们也有封地。公侯邑亦分三等，如下面列表。 辖下民户数 封国等级 一万户以上 大国 五千户以上 次国 五千户以下 小国 除了有自己的封国军队，诸王也可能获授地方都督职位，掌握地方军事权力，遂能于地区建立自己的影响力。而晋灭吴后，晋武帝更下令裁撤州郡兵力，大郡只设武官百人，小郡则设五十人，令州郡防御薄弱。诸藩王随后更可以自选封国内的官员，及以三分食一方式取得封国的租税收益。而原本诸王除了别授职位皆会留在京师洛阳，不会回到封国，但晋武帝后来因为听从荀勖等人所言，终在咸宁年间将诸王王国皆增至万户大国，命诸王公回到封国。荀勖等人原意其实只是希望时任司空的齐王司马攸离开中央政府，以免武帝一旦离世会因其高名望影响太子司马衷之位，但在武帝去世以后，太子无力掌控国家，皇后贾南风趁机掌握朝政，并有宗室诸王参与，最终发展成诸王为了争权而运用自己封国军队及地方影响力互相攻伐，触发八王之乱。 以下为主要参与的八位宗王： 王号 姓名 与惠帝关系 备注 汝南王 司马亮 惠帝三叔公 司马懿三子 赵王 司马伦 惠帝九叔公 司马懿九子 河间王 司马颙 惠帝再从伯（或叔） 司马懿三弟司马孚之孙 东海王 司马越 惠帝再从伯（或叔） 司马懿四弟司马馗之孙 楚王 司马玮 惠帝九弟 长沙王 司马乂 惠帝十七弟 成都王 司马颖 惠帝十九弟 齐王 司马冏 惠帝再从兄（或弟）／原为惠帝堂兄（或弟） 司马师嗣孙／司马昭次子司马攸之子 八王之乱相关人物世系关系如下图所示，其中蓝色字体为为八王，绿色字体为为皇帝及太子，红色字体为参与乱事的其他王。 经过 杨骏与贾南风相争 公元280年，孙吴亡于西晋，晋武帝司马炎统一中国，三国时期结束。10年后，太熙元年（290年），晋武帝重病之时下了诏书，存放在中书省，诏书中依托叔父汝南王司马亮及皇后杨芷之父杨骏共同辅助太子司马衷 (晋惠帝) 继位。杨骏惧怕失势，曾经从中书省借出诏书，看后不归还。当时的中书监华廙恐惧，还亲自向杨骏索取诏书，但杨骏始终不还。晋武帝病情加重时，杨骏要求晋武帝让他单独辅政，晋武帝点头默许。杨骏招来华廙及中书令何劭，口宣帝旨作遗诏，让杨骏单独辅政。诏成后华廙、何劭二人拿给晋武帝看，晋武帝视而无言，两日后就驾崩了。但其实惠帝愚钝，根本无力掌控国家，朝政就旁落在杨骏、太后杨芷父女身上。 《晋书·杨骏传》：“及帝疾笃，未有顾命，佐命功臣，皆已没矣，朝臣惶惑，计无所从。而骏尽斥群公，亲侍左右。因辄改易公卿，树其心腹。会帝小间，见所用者非，乃正色谓骏曰：‘何得便尔！’乃诏中书，以汝南王亮与骏夹辅王室。骏恐失权宠，从中书借诏观之，得便藏匿。中书监华廙恐惧，自往索之，终不肯与。信宿之间，上疾遂笃，后乃奏帝以骏辅政，帝颔之。便召中书监华暠廙、令何劭，口宣帝旨使作遗诏，曰：‘昔伊望作佐，勋垂不朽；周霍拜命，名冠往代。侍中、车骑将军、行太子太保，领前将军杨骏，经德履吉，鉴识明远，毗翼二宫，忠肃茂著，宜正位上台，拟迹阿衡。其以骏为太尉、太子太傅、假节、都督中外诸军事，侍中、录尚书、领前将军如故。置参军六人、步兵三千人、骑千人，移止前卫将军珧故府。若止宿殿中宜有翼卫，其差左右卫三部司马各二十人、殿中都尉司马十人给骏，令得持兵仗出入。’诏成，后对廙、劭以呈帝，帝亲视而无言。自是二日而崩” 而原本会参与辅政的汝南王司马亮在晋武帝去世后知杨骏要对付他，但他又不敢先发制人进攻杨骏，于是只好逃亡到许昌保住性命。不过，司马衷的皇后贾南风是开国元老贾充之女，她相貌不好，又矮又黑，但却凶狠多诈，也企图操纵晋惠帝以把持朝政。杨骏辅政期间，在皇帝身边安插自己亲信，凡有诏令，晋惠帝过目后交予杨太后，才直接下发执行。杨骏亦知贾南风难以控制，为防贾南风碍其擅权，则任命其亲信掌管禁军，此举引起宗室和朝野的不满。杨骏的两位弟弟杨珧、杨济也对他的做法不以为然，屡次试图劝止他，但杨骏不纳。贾南风虽受杨骏压制，遂暗中与东宫旧臣黄门董猛联络，合谋要废掉杨太后，董猛则与不满杨骏的殿中中郎孟观及李肇交结。贾后接着命李肇联络司马亮及惠帝弟楚王司马玮，让他们出兵讨伐杨骏，二人都欣然同意，上请入朝。杨骏一直防范司马玮，向来都想召他入京严加看守，不让他作乱，此举正合杨骏意思，于是应允。永熙二年（291年），司马玮到后，孟观和李肇就上报惠帝，接着写下诏书称杨骏反叛，要废黜杨骏。驻屯云龙门的东安公司马繇也率殿中四百人随司马玮讨伐杨骏。 杨骏时在府中，听闻宫中有变，于是召集一众属官讨论。主簿朱振就看穿肯定是宦官为贾后谋划政变，建议在云龙门纵火示威，并追缉祸首，开万春门取东宫及外营兵力，奉太子之名入宫反攻，如此震慑宫中人们，让其速速交出主谋者，从而解决危机。可是杨骏为人怯懦，犹豫之下最终还是不作。就在杨骏仍不知如何反应时，侍中傅祗就自请与尚书武茂到云龙门察看形势，又向众人说：“宫中不宜空”，接着就作揖离去，众人亦随之而走。稍后，宫中出来讨伐杨骏的军队就来到杨骏府中，并放火烧府，更命弩兵在阁上射箭入杨骏府中，令府中士兵无法组织反攻；杨骏就逃到马厩中，被杀。杨氏及其党众亦被夷灭三族，贾后也烧毁杨府以图毁掉武帝让杨骏顾命的手诏，外戚杨氏势力遂被铲除。皇太后杨芷在变乱时在布帛中写上“救太傅者有赏”并射出宫外，希望能救到杨骏，但这反而被贾后用作指控太后与杨骏同反的证据，最终太后被废并囚禁在金镛城。次年（292年），杨芷饿死在金镛城。 杨骏的这个操作，和当年曹爽在高平陵中的如出一辙。关键时刻逡巡不进，自寻死路尔。 贾后独揽大权 杨氏势力被消灭后，汝南王司马亮与元老大臣卫瓘分任太宰及太保，共同执掌朝政。同样参与政变的楚王玮则任卫将军、领北军中候，但他就因个性狠戾而为二人所忌，于是二人提议将诸王遣还封国，以图除去楚王在宫禁的威胁，不过朝中人人都怕楚王，提议之时也只有汝南王亮及卫瓘二人敢表态支持，司马玮亦因此记恨二人。时司马玮亲信公孙宏及岐盛行为不端，卫瓘讨厌他们为人，更怕他们会是祸胎，于是想收捕岐盛。岐盛知道后与公孙宏商量，遂藉积弩将军李肇假托楚王玮的命令，向贾后中伤汝南王亮及卫瓘二人。因为卫瓘在武帝在位时就曾表示司马衷并不聪明，危害其地位，故贾后向来都不喜欢他，现在亦阻碍她专擅朝权，于是就乘势让惠帝下诏指称亮、瓘二人图谋废立，下令废黜二人，并授命楚王玮收捕。楚王玮遂假传诏命，敕令三十六军控制宫禁，并分别派人收捕二人。司马亮为公孙宏及李肇率兵所攻，但司马亮拒绝以府兵迎击而被擒，随后被杀；卫瓘由清河王司马遐奉命收捕，卫瓘也不反抗，与子孙皆为故吏荣晦所杀。 都是一群软蛋 岐盛接着更劝楚王乘机杀害贾后堂兄侍中贾模及母舅右卫将军郭彰，独揽朝权，但楚王此时却犹豫。另一方面，楚王掌握禁军，发动政变的消息亦令朝廷混乱，张华却认为禁军们受楚王控制都是为国尽忠，只要朝廷下令解严，危机就会消除。最终贾后以朝廷名义出“驺虞幡”，宣称楚王假传诏命，禁军见此都立即散去，而楚王突然去军力就失措不已，不久就被收捕下廷尉。楚王被指控假传诏命擅杀两名大臣，图谋不轨，即被处决，公孙宏及岐盛皆被诛三族。自后，贾后尽扫其独掌朝权的障碍，任命贾谧、郭彰等亲党，但重用张华，张华亦尽心匡辅，接着十年间，在张华、裴𬱟等人的努力下，虽然贾氏势力有专擅之行，但朝野内外都大致平稳。 赵王伦杀贾后篡位 晋惠帝的太子司马遹乃谢才人谢玖所生，而贾后却一直没有生下皇子。而贾谧在贾后专权后权势极盛，但太子就不肯去讨好他，而其时贾后又拒绝为太子娶贾后妹夫韩寿的女儿以及王衍长女，太子更因贾后为贾谧娶王衍长女而大感不满，而贾谧亦不退让，甚至因对太子不礼敬而曾被成都王司马颖当面斥责。贾谧于是就向贾后中伤太子，而贾后没听从母亲郭槐临终时所说的话，立姨甥韩慰祖当作皇子，藉以其嫡子身份废掉太子，同时亦宣扬太子的缺失。当时人都知道贾后有意废太子，中护军赵俊更劝太子先发制人废掉贾后，但太子没有听从。最终在元康九年（299年），贾后召太子入宫并将其灌醉，逼其写下言辞悖逆的书信，以此为由将其废黜，囚在金镛城，并杀害谢玖。次年再将太子押到许昌囚禁。 众人对太子被废都感不满，尤其殿中将司马雅及许超都得太子宠信，更想救太子，遂向赵王司马伦的亲信孙秀求援。赵王伦时以车骑将军领右军将军，得孙秀通报后亦同意帮忙，并作出部署。不过，孙秀却另有计划，怕向来被视为贾后一党的司马伦即使帮太子也势不得其信任，未必有利，遂改向贾后施反间计，声称禁军宿卫中有人谋废贾后、复立太子，以图借贾后之手杀害太子，接着赵王再以杀太子为理由讨伐贾后。流言传出后贾后果然害怕，赵王及孙秀又力劝贾谧建议贾后杀太子，最终成功令贾后中计，派黄门孙虑到许昌杀死太子。 赵王伦接着准备废掉贾后，与阎和约定在永康元年四月三日（300年5月7日）夜晚一更起事。当晚，赵王对三部司马假传诏命，声称惠帝因太子被杀要命令他废掉贾后，于是众人都跟他起事。接着赵王又以假诏命过宫门，陈兵道南，命齐王司马冏率三部司马的一百人进宫废后，内应华林令骆休就带惠帝到东堂。贾后被废后先被囚在建始殿，接着又被移送到金镛城，不久就被毒杀。另赵王又收捕贾午等人，又令尚书收贾谧、张华、裴𬱟等人，时内外官员都多被贬黜。赵王伦不久就自任使持节、大都督、督中外诸军事、相国，侍中，并大封亲信。 不过，赵王伦才能低下，事事都听从孙秀，故此众人有所求都会直接去找孙秀，而孙秀大权在握，于是专擅滥权，肆意而为，多杀忠良，和他有私怨的石崇、潘岳也被他诛杀，京中人士都大感不满。而中护军淮南王司马允亦不满赵王伦等，于是暗中蓄养死士，想要消灭他；而赵王及孙秀皆畏惧得禁军军心的淮南王，于是故意晋升其为太尉，实质就是夺其中领军兵权。淮南王于是愤而起兵，率淮南国兵及帐下七百人进攻相国府，屡败赵王军，并逼得赵王躲在树后狼狈避箭。不过，赵王之子侍中、汝阴王司马虔就派司马督护伏胤假称有诏助淮南王，骗得淮南王开阵下车受诏，乘机杀害他，淮南王的讨伐因而失败。另外参与废贾后的齐王冏不满封赏不足，孙秀怕他作乱，于是将其调到许昌。 事后赵王集团将心腹都安置在宫禁要职，孙秀更伪造符命，假作皇帝禅让诏书，让赵王于永康二年（301年）正月篡位称帝，并送惠帝到金镛城软禁。赵王登位后为收买人心，滥授官爵，乃至府库根本没有足够储备供其封赏，一些人虽获封爵但没有玺绶，成为仅是有诏命的空衔。而朝政更全由孙秀所主，不但赵王每事都会问他，连带已发出的诏命都可被孙秀随意改易甚至由其自行作诏。 三王伐赵 孙秀在赵王篡位后进齐王司马冏为镇东大将军，以图安抚他。其时齐王与成都王司马颖及河间王司马颙皆拥强兵，孙秀很忌惮他们，于是将亲信和赵王旧部安插到三人的僚属中。不过，孙秀等人的行为引起很多人不满，齐王就与王盛及处穆共谋讨伐赵王。其时赵王心腹张乌去监视过他，回复赵王称齐王没有谋反意图，齐王亦为安定其心，就联同军司管袭杀害处穆，将其首级献给赵王以示忠诚。不过，就在永康二年（301年）三月，齐王谋定，杀死管袭，与豫州刺史何勖及龙骧将军董艾共同举兵，并派人联结成都王司马颖、河间王司马颙、常山王司马乂及新野公司马歆四位宗室。成都王见过使者后召见邺令卢志讨论，卢志劝他支持讨伐，并建议他选用贤才以收时望，成都王于是改易僚属，又派冀州刺史李毅、兖州刺史王彦等人为前锋。成都王出兵后得各方响应，大军到达朝歌时就有二十多万人。另一方面，河间王在初时还是站在赵王一方，他杀死起兵响应齐王的夏侯奭，并将齐王使者押送给赵王，更响应赵王征兵，命部将张方率军支援赵王。不过，在张方行军至华阴时，河间王见齐王及成都王军力强大，于是立即改变立场，命李含率兵追上张方，改为响应二王举兵。常山王及新野公亦支持行动。 赵王及孙秀得知三王起事后十分恐惧，但孙秀还是派孙辅、张泓及司马雅等人兵分三路，经延寿关、堮阪关及成皋关出袭齐军，孙会、士猗及许超出黄桥抵抗成都王。张泓一开始就屡败齐军，更在阳翟击败齐军辎重队，但都没法击溃齐军，齐王接着在颍水对张泓军发动进攻，但不能攻破，只是孙辅军夜间自乱，并提供错误情报给赵王，影响赵王调度，打击赵军士气。及后张泓渡过颍水直攻齐军军营，齐王出兵大败孙辅等别军，逼得张泓收兵。另外许超等人初战亦败成都王前锋，成都王一度想退还朝歌，但在卢志等人劝说下坚持，并再度进攻，士猗等因轻敌而大败，成都王遂乘胜南渡黄河，直取洛阳。 河北兵败的消息更令孙秀无计可施，同时自三王举兵以来孙秀都因怕百宫和宿卫将士将他和赵王杀了以结束事件，故一直留在中书省不出。正当孙秀和党众筹划下一步行动时，四月辛酉日，左将军王舆就起兵攻讨孙秀，在中书省杀死孙秀等人、杀害赵王党羽、以赵王名义下达驺虞幡命众将士解兵、将赵王及其三名儿子押到金镛城，并从金镛城迎惠帝复位。不久，赵王被赐死，三子亦在廷尉刑讯致死，所有赵王任命的官员都被撤换；河间王军在此时仍只到潼关，闻讯退兵；而齐王及成都王都率众入洛阳。齐王自以首先起兵，于是行事专擅，成都王就听卢志的建言，将功劳都推给齐王，并以母疾为由，在朝见惠帝及拜谒太庙后就离开洛阳，回到邺城，赢得四方称誉。而本因楚王玮而被降封为常山王的司马乂亦获恢复长沙王爵位。 齐王败亡 齐王及后以大司马身份掌政，但他随即大兴土木，并沉迷酒色逸乐，不朝惠帝，亦不视朝政，用人唯亲，大封亲信，甚至加罪不经大司马府而直接上奏的大臣以及杀害谏臣，种种事迹都令众人失望，同时大家也就归心于先前谦退的成都王。其时任翊军将军的李含因与齐王参军皇甫商及右司马赵骧不和，夏侯奭的哥哥也在齐王府中，故李含很不安，于是只身西奔长安，向河间王声称受了密诏，献计让河间王檄命长沙王乂讨伐齐王，待齐王消灭长沙王后再以此为由讨伐齐王，并以有名望的成都王接掌政事，河间王遂得建立大功勋。河间王听从，遂于永宁二年（302年）十二月上表称齐王之罪，率军东进，并命长沙王乂废齐王。齐王接到上表后惊惧不已，召见百宫讨论，司徒王戎及东海王司马越劝齐王让位退避，但齐王亲信葛旟却坚持不退；其时齐王就派董艾进攻长沙王，而长沙王就即率兵入宫，以天子名义进攻齐王府，两军遂在城内激战。大战三日以后，齐王兵败被擒，被长沙王下令斩首处死，枭首曝尸，其他党羽都被诛杀三族，齐王三子皆被囚禁在金镛城。 长沙王乂大出河间王及李含所料战胜齐王，并以太尉、都督中外诸军事留在洛阳中主政，遂令原本的计划不能成事。河间王于是命李含为河南尹，让其与侍中冯荪及中书令卞粹等杀了长沙王。皇甫商知道李含的意图，遂将李含的计划告知长沙王，最终李含等人被长沙王所杀。另一方面，成都王颖虽然以大将军、录尚书事身份遥控朝政，长沙王每事亦都会询问身在邺城的他，但他还是不欲长沙王在内妨碍他，于是就与河间王联手要除去长沙王。河间王即以李含等被杀为借口出兵，司马颖亦响应，二王声明要诛杀皇甫商及外戚羊玄之，并废掉长沙王权力。河间王派张方率七万精兵攻向洛阳，成都王就亲率大军进攻，面对二王来伐，长沙王受命为大都督拒战，两军自八月攻战到十月，最终长沙王击退来攻的张方，逼其守垒自保，但无法消灭张方军。另成都王攻至洛阳，朝廷试图凭借成都及长沙二人兄弟的关系展开和谈，试图平息干戈，但成都王不允，于是战事持续。长沙王屡败成都王军，杀俘共计六七万人，洛阳虽然爆发饥荒但兵众仍然坚毅抗敌，连张方也觉得不太可能成功，想要退兵。不过，司空东海王越却怕长沙王撑不下去，于是在次年（304年）正月联结殿中诸将把长沙王囚于金镛城，众士兵愤恨战事功败垂成，打算救出长沙王以继续作战，竟让东海王下杀机，将长沙王送到张方那里，以绝众心。张方于是将长沙王杀死，二王于是取得胜利。 成都王战后获增封二十郡，升任丞相，但不久就返回根据地邺城，由东海王守尚书令作为留守。不久河间王更表奏废掉太子司马覃，立成都王为皇太弟。可是，成都王将洛阳的乘舆服饰都迁到邺城，杀害他忌惮的殿中禁军，将宿卫都换成自己的人，表现更是骄奢，有无君之迹，又重用亲信孟玖，加上上一年领兵出征荆州乱民张昌时所表现的“恃功骄奢、百度废弛”，皆令朝野失望。同时这些行为亦为司马颖招来讨伐的借口。 荡阴之战 永安元年（304年）七月，亦是成都王当上皇太弟五个月后，右卫将军陈眕、长沙王旧将上官巳等人于洛阳起兵讨伐成都王，复立清河王司马覃为太子，并奉惠帝出征，司徒王戎、东海王司马越、吴王司马晏、高密王司马略等人亦随军，众达十万多人。大军奉天子来攻的消息震动邺城，成都王亦感害怕，东安王司马繇当时就劝成都王主动归罪，但司马王混、参军崔旷就劝其抵抗，最终成都王选择抵抗，命石超率五万兵到荡阴防备。另一方面，陈眕的两个弟弟陈匡及陈规自邺投奔大军，称邺中已经自溃，故大军都松懈起来，终于在荡阴遭受石超军攻击时落得大败，随军王公大臣都奔散，连惠帝也被俘虏至邺城。成都王抵抗成功之余还得到了天子，于是下令改元建武，杀死建议投降的东安王，并置百官，生杀大事也由自己决定，并在邺南郊祀。 陈眕与上官巳等在战败后奉司马覃为主守住洛阳，但其实司马颙在大军发出时时就派了张方支援成都王，张方来到洛阳后击败上官巳等人，控制洛阳，再废司马覃及羊皇后。 成都王败，惠帝西迁 早在三王起兵讨伐司马伦之时，都督幽州诸军事王浚就没有响应，不过成都王一直没时间去讨伐。成都王在荡阴之战后伺机请幽州刺史石堪为自己左司马，送了和演接任刺史，其实就想让和演找机会杀了王浚，吞并其势力。不过与和演一起策划行刺行动的乌丸单于审登因天雨影响原定行动而以为这有逆天意，将事情告诉王浚，王浚遂与并州刺史东瀛公司马腾及审登联手消灭和演。王浚兼领幽州刺史，并大举整军，与段部鲜卑段务勿尘联手进攻成都王，令主簿祁弘在平棘击败石超后乘胜攻进邺城，纵容鲜卑兵大肆抢掠。而成都王在石超兵败后就已带着惠帝出逃，用了五日到了张方控制的洛阳。 而张方军在洛阳胡作非为，时间久了士兵更有西返的意图，张方此时率兵入宫掳掠并抓惠帝到自己营垒中，更差点要将洛阳宫殿焚毁，接着张方就率军带惠帝等人西赴河间王的根据地长安。同时河间王表废成都王皇太弟之位，遣其归国，改以豫章王司马炽为皇太弟。 东军起兵 张方强胁惠帝西迁的行为令天下愤怨，东海王司马越于是乘机于永兴二年（305年）在徐州起兵讨伐河间王，并得兖州刺史东平王司马楙、都督青州诸军事高密王司马略、东瀛公、平昌公司马模、都督豫州诸军事范阳王司马虓及王浚等人支持，更获推为盟主，声言要迎惠帝东归洛阳，更得不少朝臣支持。河间王知东海王等起兵，一度打算退让，接受其送帝还都，分陕而居的条件，但为张方所阻，于是下令免去东海王等人的官职，命其还国，亦派张方率兵十万讨伐。其时成都王旧将公师藩及汲桑在河北起兵，由于河北人民思念成都王，故此造成人心不稳，河间王亦听从张方建议，恢复成都王的职位，让他重驻邺城，协助对抗东海王为首的力量。另一方面，豫州刺史刘乔本也起兵要迎惠帝东归，但他却因不接受东海王的调度，出兵对抗东海王所派的豫州刺史范阳王虓，又上书陈述颖川太守刘舆的亲昵范阳王的罪行。河间王因而派兵支援刘乔，在许昌击败范阳王军，逼使其逃到河北。原本也支持讨伐的东平王司马楙亦因为不满范阳王派苟晞复任兖州刺史，调其至青州的行动而反叛讨伐军，并与刘乔交结。但不久，范阳王得王浚借兵而反击，在廪丘击败东平王，东平王败返封国。接着范阳王军联合东海王的大军要西进关中，大军到萧县时，刘乔怯而派儿子刘祐在萧县的灵壁作出防备，但被司马越击败，刘乔军于是溃散，南奔平氏。另一方面，成都王到洛阳后亦怯于东海王兵强，不敢继续北进，于是折返关中。河间王得知刘乔兵败后大惧，甫开始就想退让求和的他此时就更想息兵，但就顾虑主战的张方而犹豫不决。永兴三年（306年），河间王听信张方谋反的假消息而派郅辅杀死张方，并传首讨伐军，但讨伐军接到张方首级后没有退兵，反而以此招降关中其他军队，并继续夺取关中诸郡。其年五月，河间王最后所派的马瞻及郭传于霸水战败后，讨伐军就攻入长安，迎惠帝东归，河间王则出逃。 东海王掌政 在东海王将祁弘护送之下，惠帝在六月返回洛阳，改元光熙。成都王在惠帝东归时就经武关出新野，途中被镇南将军刘弘及南中郎将刘陶阻截，于是转奔朝歌想到公师藩那里，但遇是被顿丘太守冯嵩所捕，被囚在邺城。同年十月，镇守邺城的范阳王去世，其长史刘舆担心得当地人心的成都王会成为祸患，于是假传诏命将其杀死。惠帝东归后长安由镇西将军梁柳所守，但马瞻随后就击杀梁柳，复取长安，并迎河间王回城。可是关中地区都起兵对抗河间王势力，河间王仅能控制长安城。十一月，惠帝中毒去世，晋怀帝立，朝政仍由东海王主掌，并在次月藉召河间王入朝任司徒的机会在途中杀害河间王。东海王接着主导晋朝的朝政，直至永嘉五年（311年）去世为止。 时间线整理 290年，晋武帝司马炎去世，国家权力落入外戚杨骏手中，汝南王司马亮出逃许昌。晋惠帝司马衷继位。 291年，贾南风联合宦官与惠帝弟楚王司马玮，汝南王亮诛杀杨骏及其党众，夷三族。汝南王亮与卫瓘共掌朝政。 291年，贾后联合楚王玮诛杀汝南王亮与卫瓘。随后贾后又诛杀了失去禁军支持的楚王玮 292年，太后杨芷饿死在金墉城。 299年，贾后废黜谢才人所生太子司马遹。 300年，太子被押到许昌囚禁。同年，太子亲信求助于赵王。赵王在幕僚孙秀的唆使下，向贾后施反间计，贾后派黄门孙虑杀死太子。赵王即起兵，联合齐王司马冏进攻废后。贾后随后被毒杀。 300年，对赵王专权不满的淮南王司马允在禁军支持下起兵，后赵王之子汝阴王司马虔被用计杀死。 300年，对封赏不满的齐王冏被孙秀调到许昌。 301年，赵王将惠帝囚禁于金墉城，自行篡位。 301年，齐王冏，成都王司马颍，河间王司马颙起兵讨伐赵王。四月，赵王及孙秀被左将军王舆讨伐，孙秀及赵王党羽被杀，赵王被废，惠帝复位。随后赵王及三子被处死。成都王将功劳推给齐王，赢得声誉。另，常山王司马乂恢复长沙王爵位。齐王摄政。 301年，长沙王乂在河间王唆使下反齐王并成功，以天子名义进攻齐王府，齐王兵败被擒，随后被斩首。 303年，成都王，河间王起兵讨伐长沙王，双方战事焦灼，双方试图和谈。 304年，司空东海王越囚禁长沙王。军众试图营救长沙王，故东海王将长沙王送往敌军，长沙王被处死。战后成都王势力大增，河间王表奏废太子，立成都王为皇太弟。但不久返回根据地邺城，东海王留守洛阳。成都王随后更加骄奢，令朝野失望。 304年7月，右卫将军陈眕、长沙王旧将上官巳奉天子起兵讨伐成都王。双方在荡阴会战，成都王胜，俘虏天子。战后陈眕与上官巳奉太子覃为主守住洛阳。随后二人为成都王将领张芳击败。太子再次被废。 304年，幽州都督王浚起兵攻击成都王。在战胜成都王将石超后进攻邺城。成都王携惠帝出逃到达洛阳。不久后张方携惠帝等人西迁河间王根据地长安。河间王表奏废成都王皇太弟之位，立豫章王司马炽为皇太弟。 305年，东海王在徐州起兵讨伐河间王，声言要迎惠帝东归洛阳，迎得大量支持。河间王回复成都王职位，驻守邺城。随后河间王听信张方谋反的假消息杀死张方，并将首级交给东海王。但东海王并未退兵，最终夺取长安，河间王出逃。惠帝返回洛阳。同年成都王被顿丘太守捕，囚禁于邺城。同年长史刘舆矫诏杀死成都王。 305年11月，惠帝中毒去世，怀帝立。朝政仍由东海王主掌。12月，东海王伺机杀死河间王。东海王执掌朝政直到永嘉五年去世。]]></content>
  </entry>
  <entry>
    <title><![CDATA[永嘉之乱]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E6%B0%B8%E5%98%89%E4%B9%8B%E4%B9%B1.html</url>
    <content type="text"><![CDATA[永嘉之乱，或称永嘉之祸，是发生在中国西晋永嘉五年（311年）的一场动乱事件。动乱由居于中原的外族人发动，外族军队击败西晋京师洛阳的守军，攻陷洛阳并大肆抢掠杀戮，更俘掳晋怀帝等王公大臣。是中国历史上第一次汉人政权治所被外族攻破后统治集团几乎全灭的事件。及后西晋于316年灭亡。 背景(八王之乱) 西晋惠帝时，惠帝愚弱无力掌控国家，诸王大臣为争夺权力而发生八王之乱，多年来的战争造成严重破坏，亦动摇了西晋朝廷的统治基础。永兴元年（304年），匈奴贵族刘渊乘时起兵于并州离石（今山西省吕梁市离石区），建国号为汉（319年改为赵，因此史称汉赵，或者前赵，319年被石勒建立的后赵所灭）。当时的并州刺史司马腾虽然试图讨伐，但都未能有效消灭他们，反而汉国一直对外扩张，并州大部分土地及司州的河东郡、平阳郡都落入汉国控制；另外一些在河北一带地方起兵对抗晋朝的势力如石勒、王弥等都附于汉国，并得汉国授予官爵，这些都令汉国成为一个严重威胁晋朝统治的军事力量。 光熙元年（306年），河间王司马颙被杀，以东海王司马越为首的大军迎惠帝自长安东归洛阳，八王之乱终告结束，并由东海王越执掌朝廷。惠帝不久去世，司马越在晋怀帝即位后继续专权，但他未能集中力量讨伐影响国内多处的反叛势力，反因御史中丞诸葛玫及吏部郎周穆支持前太子清河王司马覃即位而先后将三人杀害。随后司马越为自领兖州而与交好的征东大将军苟晞反目，又因猜疑而诛杀了王延、高韬等朝臣，大失众望，亦令人心不安，晋怀帝亦不满司马越专权，于是联结苟晞对抗他。司马越面对此形势，于是在永嘉四年（310年）以讨伐石勒为由率领京师四万军队及行台出屯项县，留部将何伦及李恽与东海王妃裴氏、世子司马毗等留戍京师，遂令洛阳兵力薄弱，宫殿台省都再无守卫，盗贼横行，洛阳城中亦发生饥荒。鉴于洛阳的形势，扬州刺史周馥及苟晞曾分别上议迁都寿春及仓垣，但都碍于司马越集团的压制而未能成事。 永嘉五年（311年），苟晞上奏司马越的罪行，怀帝亦下诏讨伐司马越，不久司马越在忧惧之中于项县去世。太尉王衍及襄阳王司马范率军护送灵柩归东海封国安葬。大军虽然没有发布司马越的死讯，但石勒所率骑兵还是在四月追至苦县宁平城，击败将军钱端，将这支晋朝中央军队及所俘行台官员共十多万人尽数杀害，这是晋朝最后一支可战之军，此后晋廷遂再无力量抵抗外族政权。 永嘉之乱经过 司马越死后，原留京的何伦、李恽闻讯即率领东海王妃及世子等众人出奔，但不久亦为石勒所灭。洛阳城中饥荒严重，发生了人食人的事件，大部分官员亦已经逃跑了，晋怀帝此才决意东奔仓垣，命司徒傅祗准备船只，可是晋怀帝当时已无护卫可用，与数十个朝士一起走至铜驼街就遭到盗贼劫掠，被逼撤还宫中。 刘渊在位期间已经数度派兵南侵，其子刘聪于永嘉四年（310年）继位后继续这个行动。永嘉五年（311年）年刘聪又遣大将呼延晏率二万七千兵攻洛阳，兵至河南县沿途已经十二度击败晋军，前后歼灭三万余人。呼延晏接着攻下洛阳平昌门，纵火焚烧东阳门及城内府寺，并等待刘曜、石勒及王弥的增援部队前来。六月，呼延晏以外援未至，带着俘虏和掠夺战利品离去，并将停靠在洛水用作出奔的船只焚毁。不久，王弥与刘曜先后攻至洛阳，王弥遂与呼延晏于六月丁酉日攻破宣阳门，直入南宫，攻进太极前殿，在皇宫中大肆搜掠。晋怀帝出华林园门，打算西出长安，但途中为汉国士兵所俘，留在洛阳的王公大臣和平民计有三万多人被杀，宫中所藏被掠夺一空，晋朝宗庙被焚毁，皇陵遭到挖掘破坏。当时王弥劝刘曜上请迁都洛阳，但刘曜认为洛阳四面受敌不可防守，于是将洛阳皇宫焚毁，俘晋怀帝与六颗玉玺，连同一些晋臣回归平阳。 结果 永嘉之乱后，晋怀帝于洛阳被俘虏，武帝之孙秦王司马邺在雍州刺史贾疋的护送下逃入长安，之后被封为皇太子。313年怀帝死后，司马邺于长安即帝位，改元建兴，是为晋愍帝。316年8月，刘曜（刘聪之子）发兵攻打长安，并切断长安的粮运。晋愍帝在食断粮绝的情况之下于建兴四年十一月十一日（316年12月11日）投降前赵，之后被送往平阳，封为怀平侯，并且承受为狩猎队伍前导以及为宴会洗杯子等杂役的屈辱。建兴五年十二月二十日（318年2月7日）被杀。晋愍帝的投降被视为西晋的灭亡。 316年西晋灭亡后，琅琊王司马睿在士族王导等群臣的支持下于317年在建康即位建立了东晋。大量人口为避战乱从中原迁往长江中下游，史称「衣冠南渡」。这为东晋偏安一隅作了预备，大量的侨州侨郡的设立，深刻地影响了东晋的政治面貌。同时，客观上促进了长江中下游经济的发展，中国古代经济中心进一步迁往南方。 中原氏族南迁图 晋怀帝被送往平阳，刘聪告诉他：“卿为豫章王时，朕尝与王武子（济）相造，武子示朕于卿，卿言闻其名久矣……”后封为会稽公，并被囚禁。313年正月，晋怀帝在朝会上被命令为斟酒的仆人，有晋朝旧臣号哭，令刘聪反感，不久用毒酒毒杀怀帝，得年30岁，葬处不明。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E5%8C%97%E5%87%89.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E5%8C%97%E7%87%95.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E5%8D%97%E5%87%89.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E5%8D%97%E7%87%95.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E8%83%A1%E5%A4%8F.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[十六国概况]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2Findex.html</url>
    <content type="text"><![CDATA[前言 十六国又称五胡十六国。这段时期介于魏晋与南北朝之间，持续一百多年的乱世，给北方带来了巨大的破坏与残酷的战乱。十六国具体时间为304年刘渊建立汉赵，至北魏灭北凉为止。范围大致上涵盖华北、蜀地、辽东，最远可达漠北、江淮及西域。在入主中原众多民族中，以匈奴、羯、鲜卑、羌及氐为主，统称五胡。他们在这个范围内相继建立许多国家，而北魏史学家崔鸿以其中十六个国家撰写《十六国春秋》（五凉、四燕、三秦、二赵，成汉、胡夏为十六国），于是后世史学家称这时期为“五胡十六国”。 五胡乱华前北方各族分布图 在西晋时期，五胡居于西晋北方、西方的边陲地区，对晋王朝呈现半包围局面。由于晋廷的腐败和汉官的贪污残暴，五胡在八王之乱后纷纷举兵，史称五胡乱华。在西晋灭亡后，华北地区战火纷飞，掠夺与屠杀不断。经济受到严重摧毁，影响中华的民族、文化、政治、军事等发展走向。永嘉之乱带给人民巨大痛苦，大多逃难到凉州、辽东以及江南地区，使这些地区的经济文化渐渐繁荣。在诸国混战期间，前秦宣昭帝苻坚一度统一华北，但在南征东晋时，于淝水之战惨败。其后各族于关东及空虚的关中叛变，加上东晋北伐，前秦全面崩溃，北方再度混乱。北魏立国后，经过道武帝拓跋珪、明元帝拓跋嗣及太武帝拓跋焘的经营，最后于439年统一华北，进入南北朝时期。 北方各族的内徙促成民族大融合，在中国作为多民族国家的发展过程中具有重要意义。同时，各国的君主为了增强实力，也在各自的根据地上实行一些发展生产的政策，使得各地区在华北动荡的背景下，形成局部稳定的局面。该时期的民族大融合持续到隋朝时期才大致上完成。 尽管名称是五胡十六国，但是其实现实形势要更加复杂，除了匈奴、羯、鲜卑、羌及氐五个民族外，北方诸国的统治者还包括汉人，丁零人，卢水胡等。国家也不只十六个。这里所称的五胡十六国为影响力最大的部分。 这组文档中我会尽力搜集详尽的十六国时期的概况。除了十六国以外，同时期的一些其他北方小势力也会尽量提及。 各国概况 前赵 后赵 前秦 前燕 后燕 西燕 后秦 前凉 后凉]]></content>
  </entry>
  <entry>
    <title><![CDATA[前燕]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E5%89%8D%E7%87%95.html</url>
    <content type="text"><![CDATA[概况 360年的前秦、东晋、前燕等割据对峙图 前燕（337年 - 370年）是十六国时代由鲜卑人首领慕容皝【huàng】所建立的政权，至慕容儁【jùn】正式称帝建国，其国号为“燕”。其全盛时的统治地区包括冀州、兖州、青州、并州、豫州、徐州、幽州等部分。 以其所在地为战国时燕国旧地，故国号为“燕”。《十六国春秋》始用“前燕”之名，为区别同期的慕容氏诸燕，历史学家遂袭用之。又以其王室姓慕容，又称为“慕容燕”，而其他慕容氏诸燕都不用这个称呼，“慕容燕”成为前燕的专称。 慕容皝时期 西晋时，慕容廆【多音字：huì, guī, wěi】为鲜卑族慕容氏的首领，曾效忠西晋，与鲜卑族以外的民族作战。后来其儿子慕容皝于337年自称为燕王【名义上为东晋的燕王】。342年击败了后赵的二十万大军，解除了来自中原的压力，建都龙城【今辽宁省朝阳市】。东破夫余及高句丽，攻灭鲜卑宇文部，成为辽西唯一的武装势力，为慕容儁【jùn】攻占中原奠定了坚实的基础。 慕容儁时期 永和四年九月丙申日（348年10月25日），慕容皝去世。十一月甲辰日（349年1月1日），太子慕容儁继袭燕王爵位。并任命弟弟慕容友为左贤王，任命左长史阳鹜为郎中令。次年（349年）称元年，仍不用东晋年号。同年后赵皇帝石虎去世，诸子争位令国内大乱，慕容儁图谋夺取中原土地，于是以慕容垂为前锋都督、建锋将军，另外任命慕容恪为辅国将军、慕容评为辅弼将军和阳骛为辅义将军，人称三辅。同年东晋朝廷亦任命慕容儁为使持节、侍中、大都督、都督河北诸军事、幽冀并平四州牧、大将军、大单于、燕王，并依慕容廆和慕容皝的先例能承制封拜官员，在东晋授命下正式继承了对辽东的管治。 石虎死后，后赵内乱，石虎养孙冉闵与350年自立为帝。慕容儁亦乘机兵分三路南攻，自己亲自率中军出兵卢龙，攻下了蓟城，并迁都至蓟。因慕容儁听从慕容垂不要坑杀蓟城士卒的劝言，故得中原士民归附。 守襄国的后赵皇帝石祗自永和六年起就被冉闵所围攻。围困百多日后，石祗被逼于永和七年（351年）向前燕求援，并许以传国玺作交换。慕容儁欲得传国玺，于是相信了后赵并派了悦绾救援襄国。同年冉闵被击败，襄国之围解除，但悦绾没有获得传国玺，慕容儁于是杀掉当日前来求援的后赵太尉张举。慕容儁又派兵夺取中山和赵郡，又进攻鲁口，击败王午派来迎击的军队。 永和八年(352年)，前燕王慕容儁派广威将军慕容军、殿中将军慕舆根、右司马皇甫真等人率二万人步、骑兵协助慕容评攻打冉魏邺城。 永和八年（352年），冉闵攻陷襄国，将杀后赵皇帝石祗的将领刘显势力消灭。同年四月甲子日（5月5日），慕容儁命慕容恪等攻伐冉魏，最终击败冉闵并将其俘虏。己卯日（5月20日），冉闵被押送到蓟城，慕容儁指责冉闵：“你只是配当奴仆的低下才干，凭什么去称帝？”冉闵却说：“天下大乱，你这些夷狄禽兽都能称帝，那我这种中土英雄，怎能不称帝呀！”慕容儁听后大怒，鞭打他三百下并送到龙城处死。同时，先前叛燕的段勤既受慕容垂进攻据地绎幕，看见慕容恪进据常山后就因畏惧而请降。 甲申日（5月25日），慕容儁命慕容评等进攻邺城，冉魏太子冉智与将领蒋干闭城门自守，得晋将戴施率百余人入邺助守，并以传国玺向东晋请粮。不过，慕容评终于八月庚午日（9月8日）攻下邺城，俘冉智等人至中山。冉魏亡后，当时拥兵据守州郡的后赵官员都派使者向前燕请降。 352年，慕容儁灭冉魏称帝，迁都蓟，并随后的几年平定了北方的局势，于357年迁都邺。其地“南至汝颍，东尽青齐，西抵崤黾，北守云中”，与关中的前秦平分黄河流域。 攻下邺城后，慕容儁假称冉闵皇后董氏献传国玺予他，赐董氏号“奉玺君”。十一月丁卯日（353年1月3日），慕容儁置百官，次日即位为皇帝，改年号为“元玺”，追尊慕容廆和慕容皝为皇帝并上庙号。 称帝以后慕容儁开始大举扩张。逐渐与东晋和前秦形成三足鼎立之势，并且当时为国力最为强盛的一方。升平元年十一月癸酉日（357年12月14日），慕容儁迁都邺城。 升平二年（358年），慕容儁因于扩张领土的战争中屡次获胜，于是更图谋消灭东晋以及前秦。为此下令州郡核实男丁数目，每户只留下一个男丁，其余都被徴为士兵，务求令全国步兵达至一百五十万人。慕容儁更命士兵于明年就要集合，并攻取洛阳。在刘贵的谏止下，慕容儁才与官员议论，最终改为“三五占兵”，并将集合期限宽贷至一年后，定于下一年冬季于邺城集合。 不过慕容儁于升平三年（359年）就患病，他向弟弟慕容恪表示他担心自己一病不起，而前秦和东晋尚未灭亡，忧心皇太子慕容𬀩【暐（wěi）】未有足够能力治理国家，于是打算仿效宋宣公，以慕容恪继位。不过慕容恪坚决拒绝，更矢言会辅助慕容𬀩。升平四年（360年）正月，慕容儁于邺城阅兵后不久就于当月甲午日（2月23日）病死，临终遗命大司马太原王慕容恪、司徒上庸王慕容评、司空阳骛、领军将军慕舆根为辅政大臣，虚龄四十二，谥为景昭皇帝，庙号烈祖。 慕容𬀩时期 慕容𬀩最初获封中山王。永和十二年（356年），皇太子慕容晔去世，慕容儁于是在次年立八岁的慕容𬀩为皇太子。升平四年（360年），慕容儁去世，临终时遗命大司马慕容恪、司空阳骛、司徒慕容评及领军将军慕舆根辅政。当时群臣打算立作为慕容儁弟弟的慕容恪继位，但被慕容恪拒绝，而支持作为储君的慕容𬀩即位。 慕容恪辅政之后，召回了35岁的慕容垂。对慕容垂，慕容恪不只信任，还着意栽培，他希望慕容垂在自己身后能职掌燕国国政。而慕容垂也勇于任事，曾随慕容恪一起攻占洛阳，此后又镇守帝国的西南边界，积攒军功。 慕容恪死前推举慕容垂接任大司马。但是未能成功。 慕容𬀩即位后便以慕容恪为太宰，让他专摄朝政，而慕容评、阳骛和慕舆根则分别获授太傅、太保及太师，参辅朝政。不过，当时慕舆根就自恃自己屡有战功，显得高傲自大，心中不服慕容恪。当时慕舆根打算作乱，初以可足浑太后干政煽动慕容恪谋反失败，于是改向可足浑太后及慕容𬀩中伤慕容恪，想要他们诛杀慕容恪及慕容评。不过此时慕容𬀩却信任慕容恪，劝止打算听从的可足浑太后。及后慕容恪及慕容评密奏慕舆根罪状，慕容𬀩于是命侍中皇甫真、右卫将军傅颜等收捕慕舆根，并将其家人党羽一并诛杀。 此时前燕国内正因慕容儁之死而混乱，原本征集在邺城的大军都常常私下逃散，但在慕容恪的辅助下，最终都成功稳定了国家。在慕容恪摄政之下，先击败据守野王叛变的宁南将军吕护，后更进侵当时为东晋所控的洛阳，终于兴宁三年（365年）攻下洛阳。后又攻取了东晋的兖州诸郡。 不过，慕容恪于太和二年（367年）去世，死前想以吴王慕容垂代替自己为大司马，但最终慕容评改以慕容𬀩弟慕容冲【此时的慕容冲，还只有八岁。吴王慕容垂，则加车骑大将军，仪同三司。】接替慕容恪。慕容恪死后，阳骛在同年亦死，唯一仍在世的辅政大臣慕容评就以太傅主政。当时仆射悦绾上奏尽罢军封荫户，以释放人口以充实国家地方，防止人口隐匿。慕容𬀩同意之下，最终在悦绾的规划下释放了二十多万户人，政令亦令朝野震惊，慕容评更是十分不满，派人暗杀了悦绾。 太和四年（369年），东晋桓温发动北伐战争，主动进攻前燕，慕容𬀩所派的慕容厉、傅颜及慕容臧皆不能抵抗桓温进攻，于是令慕容𬀩及慕容评十分恐惧，向前秦求援以外还打算逃回和龙【今辽宁锦州】。这时慕容垂自请进攻，最终成功扭转局势，在枋头击败晋军，更在逼桓温撤军时大败晋兵。然而慕容评在后十分忌惮刚取得大功的慕容垂，二人更因将领孙盖军功问题发生争论。因可足浑太后亦讨厌慕容垂，于是就与慕容评谋杀慕容垂，慕容垂只得与家人逃奔前秦【在这一事件中，慕容恪之子、继任太原王的慕容楷向慕容垂通风报信，慕容垂才得以顺利逃脱邺城。慕容楷亦随慕容垂出奔。慕容垂本计划前往辽东，但是被自己的小儿子慕容麟告发，于是听从世子慕容令的建议，折头向西，投奔前秦。】。 图片来源： 当日前燕向前秦求援时，允诺割让虎牢【今河南荥阳西北汜水镇】以西的土地给前秦，但战后反悔。苻坚于是以此派王猛等进攻前燕，进攻洛阳。慕容𬀩于是派了慕容臧救援洛阳，然而却在荥阳大败给前秦军，无法有效营救洛阳，洛阳守将慕容筑唯有向前秦投降，洛阳陷落。慕容臧只得筑新乐城而退。面对当时的军事形势，而且太后干政、慕容评贪污，尚书左丞申绍上疏要改革，提出令将士用命，对士兵“习兵教战”、“从戎之外，足营私业”等。又要君臣“罢浮华，禁绝奢，峻明婚姻丧葬之条”以及增加重地守备军队等措施，但慕容𬀩都没听从。 洛阳陷落的同年（370年），前秦再攻前燕，王猛攻壶关而杨安攻晋阳【今山西太原】。慕容𬀩命慕容评等率中外精兵三十多万抵御。不过，慕容评竟禁止士兵取水和柴，而自据水源和山，向士兵贩卖柴水以敛财，导致军心全无。最终被前秦军夜烧辎重，火光连邺城都看得见。慕容𬀩见状十分恐惧，下令慕容评将金钱财帛都分给士兵，命他们作战，慕容评因恐惧而向前秦请战。最终前秦军大败前燕军，俘杀超过十五万人，慕容评单骑奔邺城。 王猛在战后追击至邺，苻坚亦派大军后继。面对前秦军兵临城下，慕容𬀩只得与慕容评等人逃奔龙城【今辽宁朝阳】，但随行卫士一出城就散走，只余十多名仍然随行。当时前奏将领郭庆亦在后追击慕容𬀩，途中道路艰险难行而且时有盗贼，保卫慕容𬀩的左卫将军孟高、殿中将军艾朗皆战死，慕容𬀩更因失去马匹而只得徒步逃亡，最终在高阳被郭庆所俘。慕容𬀩随后被押见苻坚，苻坚质问慕容𬀩为何不降而逃走，慕容𬀩答：“狐狸快要死时，也会将头朝向自己出生的山丘，我都是想死在先人坟墓那里而已。”苻坚怜悯慕容𬀩而将他释放，命他回去率文武百官出降。另外逃奔辽东的前燕残余势力不久亦被消灭，前燕正式灭亡。 同年十二月，慕容𬀩与慕容皇族及鲜卑族四万户一同被苻坚迁往长安安置，并受封为新兴侯，署为尚书。 淝水之战后，慕容𬀩在长安策应西燕造反，苻坚召慕容𬀩和慕容肃并杀害二人。西燕、后燕均没有追谥慕容𬀩。慕容德建立南燕时，谥慕容𬀩为幽皇帝。 部分事件年表 337年，慕容皝自称为燕王。 342年，慕容皝击败后赵二十万大军。 348年，10月慕容皝去世。 349年，1月1日太子慕容儁继袭燕王爵位。同年后赵皇帝石虎去世，诸子争位令国内大乱。 350年，石虎养孙冉闵与350年自立为帝。慕容儁亦乘机兵分三路南攻。 351年，后赵皇帝石祗向前燕求援，并许以传国玺作交换。 352年，闵攻陷襄国，将杀后赵皇帝石祗的将领刘显势力消灭。同年五月，前燕击败冉闵并将其俘虏。九月攻陷冉魏首都邺城，冉魏灭亡。慕容儁称帝，迁都蓟。 356年，太子慕容晔去世。 357年，前燕迁都邺城。同年，慕容𬀩被立为皇太子。 358年，慕容儁开始大规模动员，集结军队，试图消灭东晋以及前秦。 359年，慕容儁患病。 360年，慕容儁病死，临终遗命大司马太原王慕容恪、司徒上庸王慕容评、司空阳骛、领军将军慕舆根为辅政大臣。慕容𬀩继位。 365年，前燕攻下东晋控制的洛阳及兖州诸郡。 367年，慕容恪去世。 369年，恒温发动北伐，前燕无法抵抗，向前秦求救。慕容垂自请进攻，最终成功扭转局势。但慕容垂遭到慕容评忌惮，出走前秦。后前秦以前燕未按承诺割让土地为由进攻前燕。洛阳守将慕容筑向前秦投降。 370年，前秦击败慕容评率领的前燕主力三十多万，俘杀超过十五万人。慕容评单骑奔邺城。前秦兵临邺城，，慕容𬀩只得与慕容评等人逃奔龙城，并在高阳被俘。同年十二月，慕容𬀩与慕容皇族及鲜卑族四万户一同被苻坚迁往长安安置，并受封为新兴侯，署为尚书。前燕正式灭亡。 人物与世系]]></content>
  </entry>
  <entry>
    <title><![CDATA[前凉]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E5%89%8D%E5%87%89.html</url>
    <content type="text"><![CDATA[概况 前凉领土范围 前凉（320年－376年）是十六国政权之一。都姑臧（今甘肃武威）。 301年，凉州大姓汉人张轨被晋朝封为凉州刺史，313年封西平公，课农桑、立学校，多所建树。又铸五铢钱，全境通行。314年张轨病死，其子张寔袭位。西晋灭亡后，仍然据守凉州，使用司马邺（晋愍帝）的建兴年号，成为割据政权。 320年，张茂改元永元，前凉遂彻底成为独立政权。 345年，张寔子张骏称凉王，都姑臧，以所在地凉州为国号“凉”，史称“前凉”，以别于其他以“凉”为国号的政权。张骏、张重华父子统治时期，前凉极盛。353年张重华病死，宗室内乱不止，国势大衰。 前凉极盛之时，统治范围包括甘肃、宁夏西部以及新疆大部。史载“南逾河、湟，东至秦、陇，西包葱岭，北暨居延”。张天锡时已失去甘肃南部。 376年，前秦天王苻坚以十三万步骑大举进攻，张天锡投降，前凉灭亡。 张轨时期 张轨（255年－314年），字士彦，雍州安定郡乌氏县（今甘肃平凉市西北）人【安定张氏，当时为凉州大族】。西汉常山王张耳【曾被西楚霸王封为常山王，后来被汉太祖封为赵王】的十七世孙。张轨祖父张烈为曹魏外黄县令，父亲张温为太官令【为少府属官，掌宫廷膳食、酒果等】，母亲为陇西辛氏。晋朝时任凉州牧，是前凉政权奠定者，张寔、张茂皆为其子。314年去世，晋谥曰武公。至其曾孙张祚时，被追谥为武王，庙号太祖。 张轨与西晋时期入朝，历任太子舍人【由卫将军杨珧征兆。杨珧在291年的贾南风政变中被杀】、尚书郎、太子洗马、太子中庶子、散骑常侍，征西将军司马。291年，八王之乱开始，张轨请求调任凉州，在朝中官员的支持之下，张轨于永宁元年（301年）被任命为护羌校尉、凉州刺史。张轨到任后，使立刻领兵击败当时在凉州叛乱的鲜卑族，又消灭横行当地的盗贼，斩首万多人，从此威震西土，亦安定了凉州。张轨任用有才干的凉州大姓如宋配、阴充、氾瑗和阴澹为股肱谋主，共同治理凉州。他又劝农桑，立学校，又设与州别驾同等的崇文祭酒、春秋行乡射之礼，在凉州大行教化。 永兴二年（305年），鲜卑若罗拔能侵袭凉州，张轨派司马宋配讨伐，最终斩杀若罗拔能，并俘据十多万人，因而声名大振。晋惠帝亦因此加张轨安西将军，封安乐乡侯，邑千户。同时又大修凉州治所姑臧【今甘肃武威市】。此时，东羌校尉韩稚杀害秦州刺史张辅，张轨少府司马杨胤主张讨伐韩稚，_亦劝张轨效法齐桓公主持地方_，对韩稚擅杀刺史的行为予以严惩。张轨于是命中督护领二万兵讨伐，并先写信给韩稚劝降。韩稚拉到书信后就向张轨投降。张轨报告南阳王司马模后，司马模十分高兴，并将皇帝赐的剑送给张轨，并将陇西地区交给张轨管理。 张轨始终对西晋表示忠诚，以维系民心。如太安三年（304年）河间王司马颙和成都王司马颖到洛阳讨伐掌权的司马乂，张轨亦曾派三千兵支援朝廷。永嘉二年（308年），刘渊部将王弥进攻洛阳，张轨派北宫纯、张纂、马鲂和阴濬等领兵入卫洛阳，北宫纯及后派百多名勇士突击王弥军，协助朝廷击退王弥。不久北宫纯在河东击败刘渊儿子刘聪，晋怀帝于是诏封张轨为西平郡公，但张辞让。西晋自八王之乱起，天下大乱，各州都不再向西晋朝廷赋贡，亦惟有张轨贡献不绝。 永嘉二年（308年），张轨因患风搐而不能说话，命儿子张茂代管凉州。张越是凉州大族，听说有预言说张氏会兴盛凉州，自以为自己就是预言中的张氏，于是不惜放下梁州刺史的职务告病回凉州，更与兄长酒泉太守张镇等人合谋要除去张轨。张越兄弟意图以秦州刺史贾龛取代张轨，于是派密使到洛阳请尚书侍郎曹祛任西平太守，作为援助。张轨别驾麹晁亦意图借机弄权，派使者到长安告诉司马模，说张轨已病得不再能继续行使刺史职权，要求以贾龛代替张轨。贾龛原打算应命，但被兄长劝止。 张镇和曹祛知道贾龛拒绝应命后，再上表请求新派刺史，但未上呈就已率先以军司杜耽代领州事，让杜耽支持并表张越为新任刺史。张轨见此，打算退避，想要回到曾经隐居的宜阳，但长史王融和参军孟畅接到张镇等人以杜耽代理凉州的檄命后并不服气，决意支持张轨，于是领兵戒严，又命刚从洛阳回来的张轨长子张寔为中督护，领兵讨伐张镇。同时又派张镇甥子令狐亚游说张镇。最终张镇听从，哭着说受了误导，将事情都推给功曹鲁连，更将鲁连杀死向张寔请罪。张寔及后攻打曹祛，曹祛逃走。在王融举兵同时，武威太守张琠亦派儿子张坦到洛阳上表支持张轨；而治中杨澹亦到长安向司马模控诉张轨被诬，令司马模上表停止选调新任刺史。张坦到洛阳后，晋怀帝慰劳张轨，又下令诛杀曹祛。张轨知道后十分高兴，又命张寔领兵三万讨伐曹祛，最终将曹祛击败并杀死。 张轨及后命治中张阆送五千义兵和大量物资到洛阳。永嘉五年（311年）光禄大夫傅祗和太常挚虞及后写信给张轨说洛阳物资缺乏，张轨又立刻派参军杜励进献五百匹马和毡布三万匹。晋怀帝于是进拜张轨为镇西将军、都督陇右诸军事，封霸城侯，并进车骑将军、开府仪同三司。但使者还未到，王弥就再次进逼洛阳，张轨派将军张斐、北宫纯【洛阳陷落以后，北宫纯追随南阳王司马模转守长安，长安失守后转至下邽。最终司马模被击败投降，北宫纯投降前赵，后在靳准之乱中被杀】和郭敷等率五千名精锐骑兵保卫洛阳，但洛阳最终都被汉国大将刘曜攻克。 天下大乱，唯有凉州为西晋尽忠，保卫洛阳与长安。怀帝永嘉年间长安城里，一首歌谣广为流传：秦川中，血没腕，惟有凉州倚柱观。此数年后，关中百姓惨遭屠杀，血流成河，而偏隅西北的凉州却成了当时北中国惟一安全地区。【长安谣日: “秦川中,血没腕,唯有凉州倚柱观。”及汉兵覆关中,因、羌掠陇右,雍、秦之民,死者什八九,独凉州安全。（《资治通鉴》晋纪十二）】 永嘉之乱（311年）后，洛阳和长安两大重镇都先后被汉国军队攻陷，中原和关中地区的很多百姓流入凉州避难，张轨在姑臧西北置武兴郡；又分西平郡（今青海西宁市）界置晋兴郡以收容流民。同时，张轨亦继续支持西晋，晋怀帝被掳到平阳后，张轨曾打算倾一州之力进攻平阳。不久秦王司马邺入关，张轨又派兵支持。次年司马邺被拥立为皇太子，张轨获拜骠骑大将军、仪同三司，张轨辞让。同时张轨又协助消灭在附近地区叛乱的势力，如秦州刺史裴苞、西平郡的麹恪、鞠儒等。司马邺及后再度任命，但张轨亦再次辞让。 永嘉七年（313年），晋怀帝被杀，司马邺继位为晋愍帝，并升张轨为司空，张轨再辞让。同时又听从索辅的建议，复铸五铢钱，恢复境内的钱币流通，大大便利了当地人的生活，不必再以布匹作货币。同时，刘曜进逼长安，张轨又派参军麹陶领三千兵入卫长安。 建兴二年（314年），晋愍帝任命张轨为侍中、太尉、凉州牧，封西平公，但张轨仍然辞让。五月己丑日，张轨病死，享年六十岁，谥曰武公。张轨的亲信部下及后拥立张轨长子张寔继任了凉州牧之职。 张寔时期 建兴二年（314年），张轨去世，长史张玺等人表张寔代行张轨官位。晋愍帝及后下诏授予张寔持节都督凉州诸军事、西中郎将、凉州刺史、领护羌校尉，封西平公。张寔接掌凉州后鼓励谏言，当面进谏的赏布帛；书面进谏的赏竹器；在坊间论政的赏羊和米。另又听从贼曹佐隗瑾所言设立谏官，处理大小事务时都与部属们讨论，广纳众言，从而鼓励吏民进言。 建兴四年（316年），前赵将领刘曜率军逼近长安，张寔派王该率兵救援，晋愍帝于是加授张寔都督陕西诸军事。同年晋愍帝被围困被逼投降，降前下诏进张寔为大都督、凉州牧、侍中、司空，承制行事。张寔受诏后以愍帝被俘为由辞让。及后晋愍帝遇害的消息传至凉州，南阳王司马保却图谋称帝，张寔则支持在江东的司马睿，并在建兴六年（318年）派牙门蔡忠上表劝进。同年，司马睿即位为帝，即晋元帝。 建兴七年（319年），司马保自称晋王，置百官并改年号，又以张寔为征西大将军、仪同三司，增食邑三千户。但不久司马保就因部将陈安叛变而陷险境，张寔先后派兵协助。次年（320年），司马保因刘曜逼近而迁至桑城【今甘中肃临洮县附近】，并意图到凉州避难，但张寔考虑到司马保宗室的身份，若果到凉州肯定会对当地人心有所影响，于是派将领阴监派兵迎接司马保，声称是保卫，其实是想阻止他前来。不久，司马保被其部将张春所杀，余众离散并有万多人逃至凉州，张寔至此自恃凉州险远，颇为骄傲放纵。 当时天梯山上有一个叫刘弘的人，因为法术而有上千信众，连张寔身边的人都有其信众。当时帐下阎涉及牙门赵卬都是刘弘同乡，而刘弘向阎涉说：“上天赐我神玺，要我治理凉州。”二人深信不疑，于是秘密联结张寔身边十多人，意图行刺张寔，奉刘弘为主。张寔已经从张茂口中得知这图谋，于是派了牙门将史初收捕刘弘，但阎涉等人不知道，依计众人怀刀而入，在外寝杀死张寔。刘弘见史初来，还说：“使君已经死了，还杀我做什么！”史初愤怒，割了他的舌头然后囚禁，及后张茂更施车裂之刑，阎涉及其党羽数百人亦被诛杀。享年五十岁。私谥为昭公，晋元帝则赐谥号元公。张祚称帝时以张寔为昭王。张寔死后，因儿子张骏年幼，由弟弟张茂继位。 张茂时期 建兴八年（320年），张寔被部下所杀，因其子骏年幼，张茂就代摄其位，杀刘弘数百名同党。时凉州府推举张茂为大都督、太尉、凉州牧，但张茂不肯受，只以使持节平西将军、凉州牧职位，又以张寔子张骏为抚军将军、武威太守、西平公。 建兴十年（322年），张茂派韩璞率兵占领陇西南安郡境，并在当地置秦州。建兴十一年（323年），前赵刘曜派部将刘咸攻冀城，呼延晏攻桑壁，时临洮人翟楷及石琮等又驱逐其地方官员响应刘曜，刘曜本人更发兵二十八万五千人沿黄河列阵百多里，张茂设在黄河沿岸守戍的军队望风奔逃，刘曜更声言面率大军渡河，直攻姑臧，遂震动河西。张茂听从参军马岌所言出屯姑臧城东的石头，在听参军陈珍分析刘曜其实不会尽力攻凉后，便派陈珍出兵救援在冀城的韩璞。刘曜亦自知其强大的兵力有三分之二是因为人们怯于其声威而来，主力军队已经相当疲累，难以渡河进攻，于是一直按兵不动，想用声威胁服张茂。张茂最终派使者向前赵称藩，进献大量物品，刘则授张茂使持节、假黄钺、侍中、都督凉南北秦梁益巴汉陇右西域杂夷匈奴诸军事、太师、领大司马、凉州牧、领西域大都护、护氐羌校尉。封凉王。 建兴十二年（324年）张茂病死，享年四十八岁。前凉私下为张茂上谥号成公，刘曜则遣使赠太宰，谥成烈王。后来张祚称帝，追尊张茂为成王，庙号太宗。张茂临终时交代张骏“谨守人臣之节，无或失坠”。因张茂无子，张骏就被推举继位。 张骏时期 张骏继位时，守枹罕的凉州将领辛晏据城反对张骏，不服其统治。张骏打算讨伐但为从事刘庆劝止，而翌年辛晏也向张骏投降，收服了河南之地。建兴十五年（327年），张骏听闻前赵军队败于后赵，于是除去前赵所授的官爵，用回晋朝的官爵，并派兵进攻前赵秦州。可时前凉军败于前赵南阳王刘胤所率的军队，刘胤更乘胜渡过黄河，攻陷令居并杀二万多人，又进占振武，震动河西，张骏派皇甫该前往防御。金城太守张阆及枹罕护军辛晏都向前赵投降，河南之地复失。建兴十七年（329年），前赵亡于后赵，张骏于次年就乘机重夺河南地，进军至狄道，置武街、石门、侯和、漒川及甘松五屯护军。不久，后赵派了鸿胪孟毅授予张骏征西大将军、凉州牧，但张骏耻于为后赵之臣，不接受并留下孟毅。但不久就因畏惧后赵强大而向其称臣，送还孟毅。东晋朝廷也进张骏镇西大将军，仍授凉州刺史、领护羌校尉并封西平公，诏命于建兴二十一年（333年）到达前凉，张骏接受任命，派王丰等人陈谢并上疏称臣，但仍然用建兴年号，不用东晋年号。次年东晋又进张骏为大将军，此后晋凉每年都有使者往来。 张骏又曾派将领杨宣率兵进攻龟兹及鄯善，终令西域诸国都归附前凉，焉耆前部王及于寘王都派人进贡。也曾上疏晋廷请求配合司空郗鉴及征西将军庾亮进行北伐。 西域长史李柏败于不肯服从张骏的戊己校尉赵贞，有人认为是李柏自设计谋导致失败，请张骏诛杀他，然而张骏终免李柏一死，更得众人欢心。张骏也改易原本犯下死罪者的亲属不得留在朝中的律令，只是限制他们不能参与宿卫，于是令前凉刑法清明，国家富强，群僚更于建兴二十年（332年）劝张骏称“凉王”，自领秦凉二州牧，置公卿百官。虽然张骏严词拒绝，但其实前凉境内都用凉王去称呼张骏。后张骏更努力改变自己，勤于庶政，统掌凉州文武事务，治绩不错，得四方称颂，叫他做“积贤君”。而凉州自晋末以来连年都有战事，至张骏在位时渐见平稳安定。建兴二十七年（339年），张骏又设辟雍、明堂以行礼教。 张骏攻西域后，在凉州西界划出设沙州，又将凉州东界划出设河州，时属官们都称臣。张骏亦在姑臧附近增筑新城，又修建用金玉和五色画装饰的谦光殿，极尽珍贵精巧，其四面都各建一殿，四季各居一殿。他又自称大都督、大将军、假凉王，督摄凉沙河三州，设六佾之舞，设天子的豹尾车，所设祭酒、郎中、大夫、舍人、谒者等官职官号都模仿晋朝体系，只是稍稍改了名字。 建兴三十四年（346年），张骏去世，享年四十岁，前凉私谥为文公，晋廷则赐谥号忠成，赠大司马，归葬大陵。其子张祚称帝时，追尊为文王，庙号世祖。 张重华时期 建兴三十四年（346年），张骏去世，凉州官属推张重华为使持节大都督、太尉、护羌校尉、凉州牧，袭爵西平公，假凉王。张重华即位后减轻赋敛，免除关税，减省园囿，以抚恤贫穷者。同年后赵派麻秋、王擢等侵凉，金城太守张冲降赵，凉州震动。张重华任用谢艾抵抗，终大破赵军，杀五千人。翌年，后赵再派石宁领二万兵作为麻秋后援，前凉将领宋秦更加率二万户人投降后赵。张重华再度起用谢艾，命其率三万步骑进军临河，又破赵军，斩杀赵将杜勋、汲鱼，一万三千人被俘或阵亡。不久，石宁联合麻秋等率十二万兵进屯河南，再度进攻，张重华想要亲自出击，但为谢艾及索遐所劝止，遂派二人率兵二万抵抗。时后赵将孙伏都、刘浑率步骑二万增援麻秋，众人渡过黄河并屯于长最。谢艾等进军至神鸟，击败王擢前锋，令其退回黄河以南，接着就进攻长最，再败赵军，麻秋等退还金城。石虎闻麻秋战败，也叹息道：“我以偏师就平定了九个州，现在用九个州的力量却在枹罕寸步难行，真是对方有能人，还不可以谋取呀。”不过，麻秋随后击败了张瑁，枹罕护军李逵降赵，于是河南地区羌、氐族人都附赵。 建兴三十五年（347年），东晋派侍御史俞归到凉州，授予张重华假节、侍中、大都督、督陇右关中诸军事、护羌校尉、大将军、凉州刺史，封西平公。俞归到凉时，时张重华想称凉王，故未受诏，更命亲信沈猛向俞归表示，但为俞归拒绝，并言：“今天你的主公刚刚继位就要称王，若果率领河右部众平定东方的胡、羯，修复晋朝帝陵及宗庙，迎天子还都洛阳，还有什么可以嘉奖呀？”张重华于是不图称王。 建兴四十年（352年），因后赵国乱，苻健乘时于关中建立前秦，时任后赵西中郎将的王擢向东晋请降，获授征西将军、秦州刺史，但同年就被前秦将领苻雄击破，于是出奔凉州，向前凉归降。张重华厚待他，任命他为征虏将军、秦州刺史。张重华更派了将军张弘及宋修率一万五千兵与王擢会合，让他进攻前秦。次年（353年）两军交战，王擢大败逃奔姑臧，张弘及宋修都战死。张重华素服为阵亡将士举哀，也安慰其家人，更加再命王擢进攻前秦秦州，最终取胜，夺取秦州。张重华因而上疏东晋请求伐秦，东晋则进张重华凉州牧。 建兴四十一年（353年），张重华因病去世，享年二十七，葬显陵。私谥为昭公，后改桓公，东晋则赐谥号敬烈公。重华病重时曾下手令征召谢艾为卫将军、监中外诸军事以辅政，但最终为重华兄张祚等人压下，终由张祚辅政，不久更废掉张重华的世子张曜灵，自己登位。张祚称帝，追谥张重华为桓王，上庙号世宗。 张祚时期 建兴四十一年（353年）张重华病重时，曾下手令召酒泉太守谢艾入朝辅政，但为赵长等压下。同年张重华死，由其年幼的长子张曜灵继位，赵长等就假称张重华遗令，以张祚为持节、都督中外诸军事、抚军将军身份辅政。时赵长等以张曜灵年幼，称国家需要年长君主，张祚因与张重华之母马太后通奸，遂煽动马太后废黜了张曜灵，立张祚为主。张祚于是自称大都督、大将军、凉州牧、凉公。张祚位后即淫乱张重华的妻妾及其未嫁女儿。 和平元年（354年），张祚称帝，改元“和平”，设宗庙、八佾舞，并置百官，尚书马岌因切谏被免官，郎中丁琪进谏更被杀，又杀谢艾。张祚又曾进攻骊靬，但大败而还。同年东晋桓温北伐，也有配合北伐的秦州刺史王擢派人报告张祚称桓温善于用兵，军势难测。张祚闻讯恐惧，但还担忧王擢会倒过来进攻自己，于是派人暗杀他，但因被王擢发现而不成。张祚在暗杀失败后更加恐惧，于是出兵声称要东征，实则是想西退至敦煌自保，只是遇上桓温退兵才取消行动。不过，张祚仍继续打击王擢，派了牛霸率三千兵打败王擢，逼使王擢投降前秦。 张祚治国不道，曾置五都尉去专抓别人过失，又限定四品以下官员不得送赠衣布，庶人不能畜养奴婢及乘坐车马。张祚为人荒淫暴虐，国人无不侧目，都作讽刺其淫乱的诗。和平二年（355年），张祚因不欲河州刺史张瓘强大，于是命令他去讨伐叛胡，其实已派易揣及张玲率三千兵袭击张瓘。王鸾识术数，向张祚说：“这支军队出去，肯定不会回来，凉国会陷于危险。”更上陈张祚三不道。张祚闻言大怒，认定王鸾所说是妖言，将他处斩。王鸾临死前就说：“我死后，军队在外面战败，大王在内死亡，肯定会发生的！”张祚更诛杀王鸾一族人。不过，张瓘就杀了张祚派去代其守枹罕的索孚，易揣等渡过黄河途中就被张瓘攻击，张瓘更出兵跟随单骑逃还的易揣，兵向姑臧。张瓘军前来的消息震动姑臧人心，时宋混、宋澄兄弟因其兄宋修与张祚有前嫌，就出城聚众响应张瓘，并反攻姑臧。时张瓘传檄州郡，要复立张曜灵，故张祚就派杨秋胡杀害张曜灵；另又收捕并处死张瓘的两个弟弟张琚及张嵩。二人知要被捕时却在市招募数百，大叫张瓘大军已经到达姑臧城东，恐吓敢动手的人要被诛三族。收捕的人果被吓退，然后二人西城门迎宋混等入城。赵长等人惧怕因拥立张祚获罪，于是请马太后出殿，改立张玄靓为主，不过易揣等人却引兵入殿，收杀赵长等人。宋混等入城后，张祚按剑命令部众死战，但因为他失众心，将士根本毫无斗志，张祚于是为宋混等杀死，头被斩下宣示内外，更遭曝尸在大道左边，城内人民都大呼万岁。 事后张祚以庶人的礼仪下葬，直至其弟张天锡即位时，才改葬到愍陵，追谥为威王。 张玄靓时期 和平二年（355年），张祚被杀，张玄靓被宋混、张琚推为大将军、凉州牧、护羌校尉、西平公，恢复年号为建兴四十三年。不久，河州刺史张瓘返都城姑臧（今甘肃武威），张玄靓再被推为凉王，政事决于张瓘。次年（356年）前秦派使者阎负、梁殊前来，要劝说前凉臣服于前秦，张瓘恐惧，于是劝导张玄靓向前秦称藩，而前秦亦以张玄靓所称的官爵授命。 张玄靓继位后，前凉国内先后有李俨、卫𬘭和马基等人反叛，张瓘击败了卫𬘭并讨平马基。其时张瓘、张琚兄弟赏罚都依从自己爱恶，无视纲纪，又不听谏言，故并不得人心。可是他们自以势力强大，且有功勋，所以有篡位的意图，然而就忌惮忠心刚直的宋混。建兴四十七年（359年），张瓘征集了数万兵并会聚于姑臧，想要消灭宋混兄弟，宋混及宋澄知道后就率领壮士杨和等四十多骑到南城，并向各个兵营宣称张瓘谋反，太后下令诛除他，很快就召集到二千多人。随后宋混率众与张瓘决战，张瓘兵败，其部众都背弃张瓘，向宋混投降，张瓘兄弟于是自杀。事后宋混代替张瓘掌政，张玄靓为宋混所建议去凉王称号，改称凉州牧。建兴四十九年（361年），宋混去世，张玄靓顺从宋混遗言而让宋澄掌政，不过右司马张邕不满宋澄专政，同年即起兵攻灭宋澄，并诛杀宋氏一族。张玄靓随后又改让张邕与叔父张天锡共同掌政。可是，张邕自恃功勋大而行事骄纵，滥用刑法，更与马太后私通，树立党羽，很不得人心，张天锡就是再次发动政变，张邕兵败自杀，其党众皆被张天锡诛杀。张玄靓遂以张天锡一人掌政。十二月，张天锡让张玄靓改奉当时东晋的升平年号，称升平五年。晋廷则授张玄靓大都督陇右诸军事、护羌校尉、凉州刺史，西平公。 这个马太后真牛逼 升平七年（363年），马太后去世，张玄靓以其母郭夫人为太妃，而郭夫人因不满张天锡专政而与张钦图谋发动政变，可是图谋外泄，张钦等人都被张天锡杀害。张天锡随后便发动政变，派兵入宫杀死张玄靓，向外宣称张玄靓暴毙，享年十四岁。 张天锡时期 升平七年（363年），郭太妃以张天锡专政，与张钦密谋诛杀张天锡，事泄，钦等皆死；右将军刘肃于是劝张天锡自立，天锡遂会刘肃夜袭皇宫，杀张玄靓。张天锡自称使持节、大都督、大将军、护羌校尉、凉州牧、西平公，并派使者出使建康请命，东晋于是在366年授张天锡为大将军、大都督、督陇右关中诸军事、护羌校尉、凉州刺史，封西平公。前秦亦派大鸿胪授张天锡大将军、凉州牧、西平公。 张天锡登位后多次在园池设宴，又沉迷于歌舞和女色，荒废政事。张天锡更将两个亲信刘肃及梁景收为养子，让二人参与朝政，令人们有怨言和恐惧，索商及天锡堂弟张宪曾经劝谏他但不获授纳。张天锡于升平十年（366年）与前秦断交，并在进攻李俨时与前秦发生军事冲突，并俘获了阴据和他率领的五千兵。升平十五年（371年），前秦攻灭仇池，送还阴据及其士兵回国，并派梁殊及阎负随行，顺道送达前秦丞相王猛的书信，暗示要张天锡别和前秦作对。张天锡看后十分恐惧，于是派使者向前秦谢罪，向前秦称藩，前秦天王苻坚任命其为使持节、散骑常侍、都督河右诸军事、骠骑大将军、开府仪同三司，凉州刺史、西域都护、西平公。然而因张天锡因为惧怕前秦吞并，于同年在姑臧设坛，遥与晋三公盟誓，又派从事中郎韩博出使东晋，并写信给东晋大司马桓温，约定大举出兵北伐，会师上邽。 武威大云寺，坐落在甘肃武威城东北角。寺内尚存古钟楼，内悬唐代铜钟。大云晓钟曾为“凉州八景”之一。大云寺，原名“宏藏寺”，始建于晋哀帝兴宁元年（363年），为张天锡所建造 升平二十年（376年），苻坚征召张天锡入朝任武卫将军，同时派了苟苌、毛盛、梁熙及姚苌等率十三万步骑至西河郡，预备一旦张天锡拒绝应命就进攻前凉。张天锡接到梁殊、阎负送来的诏命后问及众僚意见，除席仂建议送货款和质子，徐图后计外，大部分人都认为凉州有精兵及天险，可以取胜。张天锡于是决定反抗，派马建率兵二万抵抗秦军，并命人射杀两名前秦使节。面对秦军进攻，马建惧而退守清塞，张天锡又派掌据率兵三万与马建屯于洪池，自率五万屯金昌城。可是，苟苌随后进攻掌据时马建就投降前秦，掌据战死，张天锡又派赵充哲为前锋，率五万兵与苟苌等作战，但又在赤岸大败，张天锡出城意图再战，但因金昌城中反叛而被逼逃回姑臧并请降。苟苌等到姑臧后受降，并送张天锡到长安，其他郡县都降秦，前凉灭亡。苻坚在长安为张天锡建了府邸，任命他为侍中、北部尚书，封归义侯。 晋太元八年（383年），晋军于淝水之战击溃来攻的前秦军，当时张天锡任征南大将军苻融的司马随军，趁机南奔东晋，东晋朝廷下诏以张天锡为散骑常侍左员外，复封为西平郡公。后转拜金紫光禄大夫。后曾加授庐江太守，桓玄掌政时为了招抚四方而任命张天锡为护羌校尉、凉州刺史。义熙二年（406年），张天锡去世，享年六十一岁，追赠为镇西将军，谥号悼公。 张大豫是张天锡次子，被立为世子，张天锡投靠东晋时，他来不及随往，又怕前秦苻坚加害，无奈投奔长水校尉王穆，在河西由焦松、齐肃、张济等人拥立占据阳坞，自称凉王、抚军将军，改元凤凰。 不久，前秦将领吕光奉皇帝苻坚之命征讨张大豫，吕军一时大败，但张大豫不纳智囊王穆之言，因胜而骄，用强兵伐吕，虽得建康太守李隰、祁连都尉严纯相助，但吕光寻机攻破对方兵营，张大豫军大败。张大豫逃奔广武，被当地人捉住交给了吕光，被吕光斩杀于闹市。 人物与世系 部分事件年表 291年，八王之乱开始 301年，张轨被晋朝封为凉州刺史。 305年，张轨击败鲜卑若罗拔能，被晋惠帝封为安西将军，封安乐乡侯。 308年，张轨患风搐不能说话，由其子张茂代管凉州。同年，凉州大族张越、张镇兄弟试图谋反，被镇压。 311年，永嘉之乱，洛阳及长安被前赵军队攻陷。 313年，张轨被封为西平公。 314年，张轨去世，其子张寔代行张轨官位。 317年，司马睿即位为帝。 319年，司马保自称晋王，置百官并改年号。同年司马保被部将张春所杀，而张寔被行刺而死。张寔死后，因儿子张骏年幼，由弟弟张茂继位。 322年，张茂派派韩璞率兵占领陇西南安郡境，并在当地置秦州。 322年，前赵进攻前凉，张茂派使者向前赵称藩，前赵将张茂封为凉王。 324年，张茂病死。因张茂无子，张骏被推举继位。 327年，张骏听闻前赵败于后赵，因此除去前赵所授的官职，恢复使用晋朝的爵位。 329年，前赵亡于后赵。前凉向后赵称臣。 346年，张骏去世。张重华即为，袭爵平西公。同年后赵派兵侵扰前凉，张重华启用谢艾大破赵军。 347年， 后赵再次进攻前凉，又被谢艾击败。 352年，后赵西中郎将王擢被前秦击败，出奔凉州。张重华派遣其进攻前秦，但失败。后再次进攻，取胜并夺得秦州。 353年，张重华因病去世。享年27岁。张祚煽动张重华之母马太后废黜张重华年幼的长子张曜灵，自称大都督、大将军、凉州牧、凉公。 354年，张祚称帝，杀谢艾。同年恒温北伐，张祚担忧秦州刺史王擢，最终使得王擢不得不投降齐前秦。 355年，张祚欲打河州刺史张瓘。张瓘起兵传檄州郡，要复立张曜灵。时宋混、宋澄兄弟因其兄宋修与张祚有前嫌，就出城聚众响应张瓘，并反攻姑臧。故张祚杀张曜灵。张祚在姑臧城内乱中被杀。同年，张玄靓被推举为前凉之主，政事决于张瓘。 356年，前凉臣服于前秦。 359年，张瓘与宋混内战，张瓘兵败自杀。张玄靓为宋混所建议去凉王称号，改称凉州牧。 361年，宋混去世，宋澄掌政。右司马张邕起兵攻灭宋澄，并诛杀宋氏一族。张玄靓随后又改让张邕与叔父张天锡共同掌政。张天锡再次发动政变，张邕兵败自杀。 363年，马太后去世。张玄靓之母郭夫人联合张钦发动政变，但事泄被杀。张天锡随后发动政变杀死张玄靓，向外宣称张玄靓暴毙。 366年，张天锡与前秦断交。 371年，前秦攻灭仇池，张天锡向前秦谢罪，并称藩。 376年，前秦攻灭前凉。 383年，前秦在淝水之战中被击败，张天锡趁机投降东晋。张天锡子张大豫被拥立，同年张大豫被吕光击败，被杀。 406年，张天锡去世。 讨论 关于评价前凉奠基者张轨的文章 张轨是乱世里真正的英雄，沧海横流，方显英雄本色。张轨对上忠心晋室，多次出兵护佑朝廷，几乎是当时唯一在军事和物质上不遗余力支持西晋朝廷的方镇，京师歌之“凉州大马，横行天下”；对下招抚流民，安抚士庶，选拔贤才，不但其治下凉州安定，甚至绵延数世，号称“天下方乱，避难之国唯凉土”。对外抵御贼寇，先后击败刘聪、王弥，直至西晋大厦倾覆，依然世代据守河西，奉中原王朝正朔，其后人又先后抵挡了前赵刘曜、后赵石虎的进犯，直到比汉人还汉人苻天王时代。 说张轨保住了北方汉人的文明，虽然言过其实，但毕竟有迹可循，只是夸大了。但要说中华民族拯救者给他提鞋都不配，张轨还是当得起的。 张轨出身安定张氏，少年时随父任居于洛阳，在高门显赫的洛京属于不入流低级士族。不过张轨的人生中充满了贵人提携，先是被中书监张华赏识，目为“二品之精”，后又被卫将军弘农杨氏的杨珧辟为掾属，后来又迁散骑常侍，为都督雍凉军事的梁王司马彤司马。 张轨在洛阳的仕途是很顺利，但张轨还是跑了，这是客观环境的限制。张轨“以晋室多乱，阴图保据河西”，实际上是因为洛京的政局过于混乱，张轨呆不下去了，他没有把握每次政变后都有贵人相助了。最开始贾后诛灭外戚三杨，提携张轨的弘农杨氏三杨之一的卫将军杨珧被杀，但贾后依靠张华执政；后来赵王司马伦政变推翻贾后，赏识张轨的司空张华被杀。司马伦重用其兄梁王司马彤，司马彤为太宰守尚书令，所以张轨依然安然无恙。但张轨不可能每次运气都这么好，都有贵人给自己站队。所以跑就是一个非常正确的选择了。司马彤也很顺利的批准的张轨的要求，出为“持节护羌校尉、凉州刺史”。 至于为什么要跑去凉州，就更好了理解了，因为别的地方去不了。安定张氏虽然在洛京不入流，但回到河西就是毫无疑问的大族了。安定张氏“世孝廉，以儒学显”，张轨母陇西辛氏，同样是凉州大族。当时正是三王讨伐司马伦前夕，齐王司马囧镇许昌、河间王司马颙镇关中、成都王司马颖镇邺城，都心怀鬼胎窥视洛京，已经形同割据，张轨没那个实力身份去和司马氏宗王争夺天下膏腴之地。其余如北方幽州已经落入了势力庞大的太原王氏大搅屎棍王浚手中，川中正值李特带领流民建立成汉的混战，至于南方干脆就是他人国土，孙吴亡国不过二十年，江东世族根深蒂固，连此后开基江左的司马睿都艰难立足，更不用说张轨了。 张轨到凉州后，大败反叛的鲜卑，树立起了个人威信。然后大力拉拢凉州本地大族，宋配、阴充、氾瑗、阴澹为股肱谋主，尤其是阴氏家族号称“轨保凉州，阴澹之力”,“阴氏门宗强盛”，除了阴氏、宋氏、氾氏，此外还有敦煌索氏、陇西李氏、敦煌张氏等当地豪强。张轨在凉州时“征九郡胄子五百人，立学校，始置崇文祭酒，位视别驾，春秋行乡射之礼。”大力发展教育的同时，也保留了大量中原失传的经籍。最终在张轨的努力下，凉州内政清明、秩序井然、经济繁荣，张轨成功把凉州变为了世外桃源，号称“天下方乱，避难之国唯凉土耳”，“中外避难来者，日月相继”。谣谶曰：秦川中，血没腕，惟有凉州倚柱观。 永嘉之乱，中州士人避地河西，故凉州号称多士。虽然风流文采比不了实力强大开基江左的琅琊王氏等西晋时即为一流士族的顶级门阀，但托命河西还是要远比战乱不休的河北、山东安定太多，故而依然多有世传经学的家族旧门，讲经授徒。这些旧门又不如江左士族一样入玄，反而保留了大量昔时儒学经典，待到北魏统一北方，河西士人融入北魏统治，又为北魏甚至隋唐典章制度做出了些许贡献。 来源]]></content>
  </entry>
  <entry>
    <title><![CDATA[前秦]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E5%89%8D%E7%A7%A6.html</url>
    <content type="text"><![CDATA[概况 360年的前秦、东晋、前燕等割据对峙图 西晋末年，西晋政权颠覆之际，略阳氐族推出贵族苻洪为首领。前赵刘曜在长安称帝，以苻洪为氐王。后石勒灭前赵，苻洪降于石勒。333年，石虎徙关中豪杰及羌戎至关东，以苻洪为流民都督，居于枋头。苻洪自称大都督、大将军、大单于、三秦王。永和六年（350年），因应苻洪归降东晋，符洪第三子苻健获授假节、右将军、监河北征讨前锋诸军事、襄国县公。同年苻洪为石虎旧将麻秋所毒死，苻健收杀麻秋并继承苻洪势力。苻洪死后，苻健去掉父亲自称的大都督、大将军、“三秦王”的称号，称东晋所授的官爵，并派叔父苻安到东晋报丧，请示朝命。 苻健时期 时值后赵内乱，350年后赵新兴王石祗在襄国【今河北邢台】即位为帝，又以苻健为都督河南诸军事、镇南大将军、开府仪同三司、兖州牧、“略阳郡公”。不过，苻健当时并没有助石祗对付冉闵，反将目标对准关中，只为麻痹当时据有关中的杜洪才接受后赵的任命。苻健又在驻地枋头【今河南浚县西】兴治宫室，教人种麦，显得根本没有心思占领关中。但及后苻健就自称晋征西大将军、都督关中诸军事、雍州刺史，率众西进，并在盟津渡过黄河。渡河前，苻健命苻雄和苻菁分别领兵从潼关【今陕西渭南市潼关县北】和轵关【今河南济源东北】进攻，自己则跟随苻雄渡河，并在渡河后烧掉浮桥，意在死战。杜洪部将张先在潼关抵抗苻健军，但被击败。及后苻健派苻雄兵行渭北，附近的氐、羌酋长都斩杜洪使而向苻健投降，苻菁、鱼遵经过的城邑亦都投降，更在渭北生擒张先，令三辅地区大致都落在苻健之手。杜洪见局势如此，唯有退守长安，但苻健随即进攻长安，杜洪被逼弃长安而逃奔司竹【今陕西司竹乡】，苻健于是进据长安。苻健见长安人心思晋，于是向东晋献捷报，并与东晋征西大将军桓温修好。于是令秦雍二州的少数民族和汉人都向苻健归附，苻健亦攻灭占领上邽【今甘肃天水市】，不肯归降的后赵凉州刺史石宁。 永和七年（351年）正月丙辰日（351年3月4日）苻健即天王、大单于位，大封宗室及诸子为公爵，建国号大秦，年号“皇始”，正式建立前秦政权。次年正月辛卯日（352年2月2日），苻健称帝，进诸公爵为王爵，并授大单于位予太子苻苌。 皇始四年（354年），桓温北伐，自率主力军自武关【今陕西丹凤县东】直取长安，另命司马勋在进攻陇西。前秦初战不利，被桓温进攻至长安东南防近的灞上，逼得苻健要尽出三万精兵出城抵御桓温。然而因桓温并不急于进攻，而且苻健先晋兵一步收取熟麦，故此最终逼得桓温退兵，苻健更乘势追击晋军，大败对方。 苻健勤于政事，多次召见公卿谈论治国之道，而且一改后赵时苛刻奢侈之风，改以薄赋节俭，更专崇儒学，礼待长者，故此得到人们称许。 皇始四年（354年），皇太子苻苌在追击桓温时受伤，同年伤重而死。次年（晋永和十一年，355年），苻健因谶文中有“三羊五眼”【三羊五眼，则有一只羊是独眼，而符生正好是独眼】字句，遂以淮南王苻生当太子。至当年六月，苻健患病，苻生在苻健宫室侍疾，而当时任太尉的平昌公苻菁则以为苻健已死，直接领兵入宫，打算杀死苻生自立。但到东掖门时，苻健知道宫中发生事变，自登端门，陈兵自卫。当时苻菁部众见苻健未死，于是惊惧溃散，苻健于是拿下苻菁，将他杀死。不久，苻健以太师鱼遵、丞相雷弱儿、太傅毛贵、司空王堕、尚书令梁楞、尚书左仆射梁安、尚书右仆射段纯及吏部尚书辛牢等为辅政大臣。但又告诉太子：“六夷酋帅及掌权的大臣，若果不遵从你的命令，那就立即除去他们。”六月乙酉日（7月10日），苻健病逝，享年三十九岁。苻健死后谥为明皇帝，庙号称世宗，后改谥为景明皇帝，庙称高祖。 苻生时期 太子苻苌在追击撤退的桓温军队时受了伤，不久死去，苻健以谶言“三羊五眼”应符，于皇始五年（晋永和十一年，355年）立苻生为太子。同年，苻健患病，太尉苻菁乘时想杀苻生夺位但失败被杀。随后苻健以太师鱼遵、丞相雷弱儿、太傅毛贵、司空王堕、尚书令梁楞、尚书左仆射梁安、尚书右仆射段纯及吏部尚书辛牢八人为顾命大臣，辅助苻生。然而，苻健虑及苻生凶暴嗜酒，担心他不能保全家业，被大臣有机可乘，于是对苻生说：“六夷酋帅及掌权的大臣，若果不遵从你的命令，那就立即除去他们。” 同年六月乙酉日（355年7月10日），苻健死，次日苻生即位为帝，改元寿光。不过，苻生本身酗酒，在登位后就常常酒醉，群臣上朝都很少见到苻生，连群臣的上奏都因苻生长醉而被搁在一边。即使上朝，苻生每当发怒都只会杀人，即位后就多次出现杀戮大臣以至残害生命的凶残事件，苻健设的八名辅政大臣全都被苻生所杀。最终造成“宗室、勋旧、亲戚、忠良杀害殆尽，王公在位者悉以告归，人情危骇，道路以目”的状况。 不过后世亦有人认为苻生的暴政其实是史家诬捏渲染的结果。 亦因苻生天生残疾（独眼），“不足、不具、少、无、缺、伤、残、毁、偏、只”等字都是要避讳的，绝不能说。但就有不少大臣和侍从因此而死。其中太医令程延在研安胎药时向苻生解释人参，就说了“虽小小不具，自可堪用”而被苻生下令凿出双眼，然后斩首。 寿光三年（晋升平元年，357年），姚襄进图关中，更派人招纳因雷弱儿被诛而产生离心的关内羌胡。苻生于是派了卫大将军苻黄眉等率兵抵抗，最终大败敌军，更杀姚襄，令姚襄弟姚苌率众归降。苻黄眉立了大功，但凯旋后却没有获得苻生褒赏，反而被多次当众侮辱。苻黄眉因而愤怒，图谋杀死苻生，但风声泄露，反被杀，更株连不少王公亲戚。 而当时御史中丞梁平老等人都劝有时誉的苻生堂弟、东海王苻坚杀苻生以救国，苻坚同意但不敢发难。但六月有一晚，苻生对侍婢表示翌日就要杀苻法、苻坚两兄弟，侍婢于是立刻告诉二人，于是二人与强汪、梁平老和吕婆楼等都率兵冲入宫，宫中宿卫将士知到苻坚夺位都向其投降。苻生当时仍然在酒醉中，知有人攻来，就大惊，问侍从：“那是什么人？”侍从答：“是贼！”苻生就说：“为什么不下拜！”苻坚兵众听后大笑，苻生更说：“还不快快下拜，不拜的我就斩了他！”苻坚于是废苻生为越王，自己继承帝位，并降称天王。不久，苻生被苻坚杀害，享年二十三岁，谥为厉王。儿子苻馗被封为越侯。 苻生无后。苻坚后来平定苻生弟苻廋等人叛乱，赐苻廋死，赦免苻廋诸子，并安排苻廋的儿子过继苻生为后。 苻坚时期 苻坚是前秦最为著名的君主。 寿光三年（357年），苻坚与其兄苻法得知苻生有意加害，于是先发制人，入宫罢黜苻生，不久更杀死苻生。苻坚将帝位让给苻法，但苻法自以庶出不敢受。苻坚在群臣的劝进下即位，并降号天王，称大秦天王。即位后苻坚先诛除苻生宠信的董荣等人，随后擢用李威、吕婆楼、王猛、权翼、薛赞等人。又追复被苻生所诛杀的八个顾命大臣的官位，随才选用其子孙为官。 苻坚即位后整顿吏治，恢复已绝的宗祀，上礼神祇，鼓励农业，设立学校，扶持鳏寡孤独和年老无依者。同时恢复了「举孝廉」的方式，令地方推举人才。一系列的举措为朝野带来新的气象，令前秦的国力大为增长。 苻坚亦下令与民休息，在即位次年（358年）讨平于并州叛变的张平后就下令偃甲息兵，直至365年出兵平定刘卫辰及曹毂的叛乱前都没有大型的军事行动。苻坚本人也厉行节俭。苻坚更开发山泽，且得出的资源不限于官府，连平民也可用。 另一方面，苻坚重用汉人王猛，机要之事王猛几乎无不知道，这令一众氐族豪族及元勋十分不满。其中特进樊世自恃是氐族豪族，且有大功勋，当众直斥王猛窃取为前秦立下赫赫功勋的功臣之成果。苻坚知道后，决意杀樊世以威慑所有氐族豪族。樊世死后，各氐人都争相批评王猛，苻坚更为王猛而谩骂和鞭挞大臣，终令氐人都畏惧王猛，压制了氐族豪强对王猛新政的反抗力量。而王猛于359年捕杀酗酒横行，掠货掳人的强太后弟强德，苻坚想下令赦免亦赶不及，后来不但没有问罪王猛，更让王猛在数十日内处罚了二十多个权豪贵戚，其严正执法亦为苻坚所允许，亦为苻坚所认同。 甘露六年（364年），苻生诸弟五人趁苻坚出征平定刘卫辰及曹毂的叛乱时发动叛乱，为首的为征北将军的苻幼。苻幼领兵进攻当时由太子苻宏、王猛及李威留守的首都长安，只因李威领兵击斩苻幼而平定乱事。 苻幼起事时其实还暗中联结了征东大将军、并州牧、晋公苻柳以及征西大将军、秦州刺史、赵公苻双，但苻坚以二人分别为伯父苻健爱子及同母弟弟而不问罪，亦不将此事公布。然而，二人却与时为镇东将军、洛州刺史的魏公苻廋及安西将军、雍州刺史的燕公苻武共谋作乱。苻坚得知，于是召众人到长安，但四人就在建元三年（367年）十月各据州治起兵反叛，苻坚试图劝其罢兵，答应一切如故，不作追究，并以啮棃为信物，但四人都没有任何动摇。次年正月，苻坚正式派军镇压叛乱，派杨成世、毛嵩、邓羌、王猛、张蚝等人分途出兵，分别进攻四地。但当时杨成世及毛嵩都分别败于苻双和苻武的叛军，逼使苻坚再将王鉴、吕光等人率兵再攻。最终王鉴、吕光及王猛等先后击败并斩杀四公，才令乱事成功于当年平定。而在苻坚进攻苻廋时，苻廋主动献州治陕城归降前燕，并请兵接应。此举震动前秦，更逼使苻坚派大军至华阴防备，只因前燕太傅慕容评拒绝迎降，才避免了更大的危机。 建元五年（369年），前燕吴王慕容垂在击退东晋桓温的北伐军后因受到慕容评排挤，于是出奔降秦。同年十二月，苻坚以前燕违背当日请兵的诺言（前燕在恒温北伐时求助于前秦），不割让虎牢以西土地予前秦为借口出兵前燕，以王猛、梁成和邓羌率军，进攻洛阳。并于次年年初攻下。六月，苻坚再命王猛等出兵前燕，自己更亲自送行。王猛终在潞川击溃率领三十多万大军的前燕太傅慕容评，并乘胜直取前燕首都邺城，苻坚更在王猛围攻邺城时亲自率军前往邺城助战。拿下邺城后，正出奔辽东的前燕皇帝慕容𬀩被前秦追兵生擒，前燕在辽东的残余反抗力量亦遭消灭，前秦正式吞并前燕。 同样是在369年，名义上臣服于前秦的仇池公杨世死（仇池位于河西），其子杨纂袭位后只受东晋朝命，断绝与前秦的臣属关系，苻坚遂在次年（371年）派兵进攻仇池。当时杨纂叔父杨统正与杨纂兵戎相见，东晋梁州刺史杨亮知道前秦进攻后亦派了郭宝等领兵协助杨纂，然而最终杨纂军大败，在仇池兵临城下及杨统率众降秦之下，杨纂只得出降。前仇池至此灭亡。 前凉君主张天锡在佑道前仇池被前秦攻灭后甚为畏惧，至此就被逼向前秦称藩。吐谷浑君主碎奚亦因前仇池灭亡而遗使向前秦进贡，苻坚亦授予其官职爵位。另外，苻坚又出兵攻伐陇西鲜卑首领乞伏司繁，尽降其众，苻坚留乞伏司繁在长安，只由其堂叔乞伏吐雷统众。 建元九年（373年），东晋梁州刺史杨亮派其子杨广进攻仇池。但杨广败于仇池守将杨安，原先驻守沮水防备前秦的各军戍更因而弃守溃逃，逼使杨亮退守磬险。而杨安亦趁机进攻东晋，进攻汉川。不久，苻坚更命益州刺史王统领攻汉川，毛当等攻剑门（今四川剑阁东北），大举进攻东晋梁、益二州。杨亮在青谷率巴獠抵抗但失败，只得退保西城（今陕西安康西北），结果汉中（今陕西汉中）、剑阁（今四川剑阁）、梓潼（今四川梓潼县）等地先后失陷。东晋益州刺史周仲孙在绵竹（今四川绵竹县）要抵抗来侵的朱肜部时，另一边的毛当已经快攻到益州治所成都（今四川成都），周仲孙唯有逃到南中，于是前秦攻下了益、梁二州。 次年，益州发生叛乱，蜀人张育、杨光起兵反抗前秦，并向东晋称藩，而巴獠酋帅张重、尹万等亦参与，苻坚于是命邓羌入蜀镇压；同一时间，东晋益州刺史竺瑶及威远将军桓石虔则受命入蜀，进攻垫江（今重庆垫江县）。当时张育等人围攻成都，但期间他们内讧争权，终被邓羌等人击败，叛乱被平定。竺瑶和桓石虔虽于垫江击败宁州刺史姚苌，但不能扩大战事，只得退还巴东，前秦始终固守了蜀地。 建元十二年（376年），苻坚以张天锡“虽称藩受位，然臣道未纯”为由出兵十三万进攻前凉。当时苻坚亦派阎负和梁殊出使前凉，征召张天锡到长安，然而张天锡不愿投降，决意与前秦决一死战，下令斩杀二人，并派马建抵抗前秦。随着前秦军西渡黄河，攻下缠缩城（今甘肃永登县南），张天锡更派掌据到洪池（今甘肃天祝县西北乌鞘岭）协同马建作战，自己更亲自率兵到金昌助战。然而，前秦军进攻二人时，马建竟向前秦投降而掌据战死，张天锡惊惧而退还都城姑臧（今甘肃武威）。前秦军接着直攻姑臧，张天锡被逼出降，前凉至此灭亡。 在灭亡前凉的同一年，苻坚以应刘卫辰求救为由，命幽州刺史苻洛率兵十万，另派邓羌等率兵二十万，一起北征代国。当时代王拓跋什翼犍先后命白部、独狐部及南部大人刘库仁抵御，但都失败，而什翼犍因病而不能率兵，被逼北走阴山，但高车部族此时却叛变，什翼犍只得回到漠南，并看准前秦军稍退，于是返回云中郡盛乐（今内蒙古和林格尔北）的都城。此时，拓跋斤挑拨什翼犍子拓跋寔君，令其起兵杀死父亲及其他弟弟；前秦军闻讯亦立刻出兵云中，代国于是崩溃，为前秦所灭。 苻坚随后杀死拓跋斤及拓跋寔君，拓跋窟咄被强迁至长安，而什翼犍诸子亦被杀，什翼犍孙拓跋珪尚幼，再无于当地有效控制代国统下诸部的人。苻坚因而听从燕凤的话，分别以刘库仁及刘卫辰分统代国诸部，借两人之间的矛盾互相制衡。至此，前秦成功统一北方，只剩下据有江南地区的东晋。 建元十四年（378年），苻坚派苻丕等人进攻襄阳（今湖北襄阳市），另分一路由慕容垂、姚苌率领的军队经武当，配合苻丕进攻襄阳。数月后，在兖州刺史彭超的建议下，苻坚派遣俱难、毛盛等人进攻淮阴（今江苏淮阴）、盱眙（今江苏盱眙县东北），由彭超都督东讨诸军事。至此形成襄阳-淮阴东西两线攻势。在战争期间双方互有胜负。前秦夺取襄阳，彭城，东线秦军一度越过淮河占据盱眙，淮阴。但是在晋军（谢玄带领）的反击下退还淮北。最终俱难、彭超率领的前秦军队在君川大败给晋军。苻坚大怒并收捕彭超，吓得彭超自杀，又将俱难贬为庶民。 就在建元十四年（378年）东西二线南攻东晋之时，镇守洛阳的北海公苻重谋反，不过很快就因苻重长史吕光忠于苻坚而被平定，苻重获赦而返回府第。至建元十六年（380年），苻坚却再度命苻重为镇北大将军，驻镇蓟（今北京）。同年，苻坚亦命行唐公苻洛为征南大将军，镇守成都，并命其由襄阳循汉水西上上任。但其实苻洛在立下灭亡代国的大功后因为没有获苻坚封为将相重臣，反倒仍以其作为边境州牧深感不满，更怀疑命他到襄阳其实是苻坚杀他的阴谋，于是决定叛变。当时虽然只有苻重支持苻洛，但苻洛仍自和龙（今辽宁锦州）率兵七万直指长安。关中人民恐惧战乱，人心骚动，盗贼兴起，苻坚试图劝降，于是以永封幽州请苻洛罢兵。然而苻洛拒绝，并声言要“还王咸阳，以承高祖之业”，更反说若苻坚在潼关候驾，他会以他为上公，还爵东海。苻坚于是大怒，出兵讨伐，并在中山与苻重及苻洛的十万联军会战，终生擒苻洛并斩杀苻重，平定乱事。 事后，苻坚认为关东地区地广人多，于是决定从原居于三原（今陕西三原县）、九嵕（今陕西乾县东北）、武都（今甘肃成县西）、汧（今陕西凤翔县南）、雍（今陕西凤翔县南）的氐族人中分出十五万户，由各宗室统领分布于各方镇，如古时诸侯一般。 王猛于建元十一年（375年）去世，临死时说：“晋室现在虽然立于偏远的江南地区，但承继正统。现在国家最宝贵的就是亲近仁德之人以及与邻国友好。臣死以后，希望不要对东晋有所图谋。鲜卑、羌虏都是我们的仇敌，终会成为祸患，应该将他们除去，以利社稷。”希望苻坚先解决国内鲜卑和羌族等其他少数民族对前秦政权的暗藏问题。不过，苻坚在统一北方后仍未听从王猛之言，着力解决国内民族问题。 苻坚从车师前部王弥窴及鄯善国王休密驮等处听说西域有高僧鸠摩罗什，苻坚视为国宝，请求西域派罗什入秦遭到拒绝。建元十八年（382年），苻坚派吕光领七万大军征伐西域不服前秦要求的，并于次年正月出发。吕光征伐西域龟兹等国大获全胜，西域诸国归附前秦。鸠摩罗什也被吕光携带身边。中国境内只剩东晋一地不是前秦版图，苻坚急于统一中国，开始谋划出兵东晋。 建元十八年（382年），苻坚大会群臣，自以能得九十七万兵力，提出亲征东晋，统一全国的计划。当时秘书监朱肜表示支持，尚书左仆射权翼及太子左卫率石越却都以东晋君臣和睦，且当时为重臣的谢安及桓冲都是人才，皆予以反对。而当时群臣亦各有意见，未有共识。苻坚见此，就说：“像在道旁建房子去问意见，就因听太多不同的议论而一事无成，我心中自有决断。”群臣退下后，苻坚留下其弟苻融继续和他讨论，然而苻融亦以天象不利、晋室上下和睦以及兵疲将倦三点为由反对。苻坚因而大怒，苻融后哭着劝谏，并重提王猛死前的话也未能说动苻坚。后名僧释道安、太子苻宏、幼子中山公苻诜以至宠妃张夫人皆反对伐晋，苻融等人亦屡次上书表示反对，苻坚仍然不肯放弃出兵东晋的计划，可见苻坚当时其实下了决心。相反，慕容垂向苻坚表示支持出兵东晋，苻坚听后十分高兴，于是向慕容垂说：“与我平定天下的人，就只有你一个呀。”更赐其五百匹布帛。 建元十九年（383年）五月，东晋荆州刺史桓冲出兵襄阳、沔北及蜀地。桓冲于七月退军后，苻坚便下令大举出兵东晋，每十丁就遣一人为兵；二十岁以下的良家子但凡有武艺、骁勇、富有、有雄材都拜为羽林郎，最终召得三万多人。八月，苻坚命苻融率张蚝、梁成和慕容垂等以二十五万步骑兵作为前锋，自己则随后自长安发兵，率领六十余万戎卒及二十七万骑兵的主力，大军旗鼓相望，前后千里。十月，苻融攻陷寿阳（今安徽寿县），并以梁成率五万兵驻守洛涧，阻止率领晋军主力的谢石和谢玄等人的进攻。当时正进攻晋将胡彬的苻融捕获胡彬的所派去联络谢石的使者，得知胡彬粮尽乏援的困境，于是派使者向正率大军在项城的苻坚联络：“晋军兵少易擒，但就怕他们会逃走，应该快快进攻他们。”苻坚于是留下大军，秘密自率八千轻骑直抵寿阳 。然而，晋将刘牢之及后率军进攻洛涧，击杀梁成，前秦军队溃败，谢石等于是率领大军水陆并进，与前秦军隔淝水对峙。苻坚和苻融此时从寿阳城观察晋军，见其军容整齐，连八公山上的草木都以为是晋军，于是说：“这也是劲敌，怎能说他们弱呀！”由此怅然失意并有惧色。苻坚及后答允晋军要他们稍为后撤，让晋军渡过淝水作战的要求，并认为能待晋军半渡、陷于河中之时出击，便能将其一举击溃。但当前秦大军开始后退时，先前于襄阳被擒投诚的降将朱序大叫“秦兵败矣”，秦军顿时军心大乱而溃散。苻融亲自骑马入阵中试图重整乱军，但反而堕马被踩死，晋军于是追击溃败的前秦军，令前秦军伤亡惨重，连苻坚本人亦中流矢受伤，单骑逃到淮北。 陇西鲜卑的乞伏步颓在苻坚出兵东晋时乘机反叛，苻坚派乞伏步颓的侄儿、原降于前秦的乞伏司繁子乞伏国仁出兵讨伐，但二人却相结。淝水战败后，乞伏国仁于是裹胁陇西鲜卑诸部叛变，后建立起西秦。而苻坚在洛阳时，不顾权翼的反对，答允让慕容垂到河北地区安抚民众及拜谒慕容氏宗庙陵墓。然而慕容垂后来则乘被当时驻镇邺城的长乐公苻丕派往镇压丁零人翟斌叛乱的机会，联结丁零人叛秦，并于建元二十年（384年）反与丁零人围攻邺城，建立后燕。在围攻邺城的同年，慕容泓知道慕容垂的行动亦在关东收集部众自立，甚为强盛；慕容冲亦在平阳叛变，后投奔慕容泓，慕容泓于是建立西燕，并率众进攻长安。 为征讨大举叛变的慕容鲜卑，苻坚征召钜鹿公苻叡，令其与窦冲及姚苌同讨慕容泓，但最终苻叡兵败战死，姚苌遣使谢罪却因苻坚杀其使者而逃到渭北牧马场，乘机煽动羌族豪帅共五万余家归附，自称秦王，建立后秦。苻坚自率二万步骑讨伐后秦军，屡败后秦军，更逼得后秦军中缺水，更有人渴死，但此时天降大雨，后秦军队再起，随后更反败前秦军队。苻坚见慕容冲【此时西燕内部已发生政变，慕容泓被杀死，慕容冲被拥立为皇太弟】等已逼近长安，于是回军长安并组织抵抗，但所派的苻琳、姜宇都兵败，慕容冲成功占领阿房城【今陕西西安市西】，长安遭围困。建元二十一年（385年），苻坚在长安宴请群臣，但当时长安已闹饥荒，发生人食人的事，诸将回家后都吐出宴中吃下的肉来喂饥饿的妻儿。随后前秦与西燕军互相攻伐，互有胜负，但在卫将军杨定被西燕所俘后，苻坚大惧，竟相信他曾经下令禁止的谶讳之言，留太子苻宏留守长安，自己率数百骑及张夫人、苻诜和苻宝、苻锦两名女儿一同出奔五将山。然而苻坚到五将山后，后秦将领吴忠就来围攻。苻坚虽见身边的前秦军都溃散，但亦神色自若，坐着安然等待吴忠。吴忠及后将苻坚送至新平幽禁。 姚苌及后向苻坚索要传国玉玺，苻坚张目喝道：“小小羌胡竟敢逼迫天子，五胡的历数次序，没有你这个羌人的名字。玉玺已送到晋朝那里，你得不到的了！”姚苌于是又派人提出苻坚禅让给他，苻坚亦说：“禅代，是圣贤的事，姚苌是叛贼，有什么资格做这事！”苻坚自以平生都待姚苌不薄，甚至在淝水之战前将“龙骧将军”这个祖父曾受以及自己杀苻生夺位时有的将军号珍而重之地封予姚苌，现在姚苌反叛并逼迫他，于是屡次责骂姚苌以求死，并为免姚苌凌辱两名女儿，于是先杀苻宝和苻锦。八月辛丑日（10月16日），姚苌命人将苻坚绞死于新平佛寺（今彬县南静光寺）内，享年四十八岁。张夫人及苻诜亦跟着自杀。 姚苌为掩饰他杀死苻坚的事，故意谥苻坚为壮烈天王。而苻坚去世同年，苻丕得知其死讯，便即位为帝，谥苻坚为宣昭皇帝，上庙号世祖。征西域后回到凉州的吕光得知苻坚去世，亦谥其为文昭皇帝。 苻坚死后就地埋葬，当地人称“长角冢”。许多人民尊其为苻王爷奉祀之，谓能避免疫病、兵乱。 符丕时期 建元十六年（380年），苻丕被封为为都督关东诸军事、征东大将军、冀州牧，镇守邺城。 建元十九年（383年）淝水之战后前秦陷入崩溃。苻坚答应慕容垂的请求，派遣慕容垂出抚河北地区。慕容垂终在河北起兵自称燕王。慕容垂不愿杀死符丕，写信希望苻坚放弃邺城，送符丕回长安，但遭到拒绝。于是慕容垂进攻邺城。二月，慕容垂就开始进攻邺城，直至八月仍未能攻下邺城，但城内粮草已尽，要以松木喂饲战马。苻丕向张蚝及并州刺史王腾请兵不得，亦不想向东晋求援；此时谢玄率兵北伐，苻丕派兵抵抗但失败，终令苻丕屈服，写信给谢玄说：“我想向你求粮，以西赴国难，当我与援军相接时就会交邺城给你。若果不能西进而长安失陷，请你领兵助我保护邺城。”不过姜让、最早请苻丕南附东晋的司马杨膺以及担任使者的焦逵皆认为苻丕至此仍不肯放下身段，认定事必无成，反而自己修改苻丕的信，改成愿意在晋军来后向东晋归降，更决定若苻丕届时不肯就想办法逼他就范。而当时慕容垂亦派兵围困邺城，只留西走长安的路，仍愿苻丕自愿弃城；而谢玄亦答应出兵救邺，不但派刘牢之等领二万兵作援，亦运二千斛米以解城中粮荒。 就在次年（385年）刘牢之北行至枋头时，杨膺等人改写苻丕书信并想逼苻丕就范的事被揭发，苻丕于是杀害他们，而因焦逵亦向谢玄等提及此事，令刘牢之闻讯后盘桓不进。此时慕容垂亦因邺城久久未下而想先取冀州，于是调了慕容农到邺城。及后因应刘牢之进攻黎阳，苻丕趁慕容垂出兵，留慕容农守邺围的机会试图突围但失败，慕容垂亦在击退刘牢之后回军邺城。四月，刘牢之在邺击败慕容垂，终解了邺城之围，令慕容垂北走。虽然刘牢之追击燕军失败还须苻丕救援，但苻丕最终都能够率众到枋头获得晋军粮食，解决部众缺粮问题。然而苻丕并非真心与晋合作，亦不曾想放弃邺城，于是在重返邺城时就与晋将檀玄发生了战斗，终由苻丕取胜并重夺邺城。 燕、秦两军至此时已经相持一整年了，弄得幽、冀地区发生饥荒，人食人且城池都萧条；而且当时长安亦受到西燕军队的攻击，苻丕于是在当地收兵并要西赴长安。幽州刺史王永因为抵抗不了燕军进攻而率兵退至壶关，并派使者招请苻丕，苻丕于是率邺城中六万多人西赴潞川，并获张蚝和王腾迎至晋阳。苻丕到了晋阳才知苻坚已经被姚苌所杀，于是发丧并于晋阳南即位为帝，改年号为太安。 在王永等人的协助下，关中及陇右的前秦遗众都相继起兵响应苻丕，以对抗慕容氏及姚氏的势力。太安二年（386年），苻丕留戍晋阳及壶关，自率四万兵进屯平阳。西燕君主慕容永见此担忧抵抗不了秦军，于是请求苻丕让他取道东归河北会合慕容垂。但苻丕拒绝并命左丞相王永、俱石子等进攻慕容永。西燕军于是在襄陵与王永所率的秦军发生战斗，王永及俱石子皆兵败被杀，苻丕以兵败，更怕他一直猜忌的苻纂趁他新败而对其不利，于是率数千南奔东垣，更图进攻当时受东晋控制的洛阳。晋将冯该就从陕城出兵邀击苻丕，最终苻丕被杀，除了苻纂等率数万兵出走杏城外，苻丕统下的官员皆为西燕所得。苻丕死后，族子苻登继位，谥苻丕为哀平皇帝。 符登时期 太安二年（386年）十月，苻丕进攻洛阳时被东晋将领所杀，当时苻丕子苻懿及苻昶都被带到南安，苻登于是打算立苻懿为帝。但部众都力劝苻登立长君，并指出非苻登一人不可。苻登于是即位为帝，改元“太初”，立了苻懿为太弟。 当时前秦宗室苻纂为另一军事力量，他支持苻登令前秦声势大盛，并曾与杨定于泾阳大败姚硕德，更图谋攻取后秦都城长安。不过苻纂不久却因不肯自立为帝而遭其弟苻师奴杀害，苻师奴亦遭姚苌（后秦）击败，部众遭后秦吸纳，进攻长安行动亦告吹。 太初三年（388年）二月，苻登与姚苌各据朝那（今宁夏彭阳县）及武都相持不下，互有胜负。当时关西豪杰见后秦久久不能消灭前秦势力，很多都转归前秦。姚苌终于十月退还根据地安定，苻登亦到新平取军粮以解军中饥馑的状况，并自率万余人兵围姚苌军营，四面以哭声震动其军心；不过姚苌亦命军人以哭声回应，苻登见不成功就退兵。 太初四年（389年），苻登在大界留下辎重，自率万多名轻骑兵进攻安定，先后击败安定羌密造保及后秦将吴忠等，并于八月进逼安定。但姚苌却奇兵夜袭大界，杀害留守的毛氏并擒获数十名名将，掳掠五万多人。苻登见此唯有退守根据地胡空堡（今陕西省彬县西南）。太初六年（391年），苻登因苟曜作为内应而进攻后秦，并击败姚苌，杀后秦将吴忠，但姚苌立刻重整军势再战，苻登这次大败，退兵至郿县（今陕西眉县）。同年苻登先后进攻新平及安定，但都遭姚苌击败。而当时氐族人强金槌叛归后秦，两年前勇略过人的羌人雷恶地亦因遭苻登所忌惮而出奔后秦，次年骠骑将军没弈干亦叛降后秦，这些事件都削弱了苻登的力量。 太初七年（392年），苻登以姚苌患病而出兵安定，但在城外九十多里就遭姚苌所派的军队攻击，被逼退还；而姚苌更特意在夜里命军队旁出跟随苻登军，苻登听闻姚苌军营空无一人，惊惧得说：“他究竟是什么人，离开时我不知道，来到时我亦不察觉，人说他快死了，突然又来了。朕和这个羌人活在同一年代，根本是不幸。” 太初九年（394年），苻登知姚苌已死，于是十分高兴，并尽率大军进攻后秦。至夏季，苻登进攻废桥以得水源，但为后秦将尹纬所阻，部分士兵更渴死。苻登因而急攻尹纬，而尹纬却大败苻登，兵众溃散，苻登单骑逃返原由其弟苻广留守的雍城（今陕西凤翔县南）却发现苻广已弃城，另一根据地胡空堡亦遭留守的太子苻崇所弃，苻登无处容身，只有逃到平凉（今甘肃平凉市），收集部众据守马髦山。苻登及后向乞伏乾归求救，得其命乞伏益州领兵救援，却就在七月苻登率兵迎接乞伏益州时就遇上后秦军，苻登被生擒并处决，享年五十二岁。 其子苻崇在湟中称帝，追谥苻登为高皇帝，上庙号太宗。 苻崇时期 太初九年（394年）七月，苻登兵败，被后秦姚兴杀死，崇逃到湟中即帝位，改元延初。十月，苻崇被陇西鲜卑的梁王乞伏乾归（后来的西秦王）驱逐，逃到陇西王杨定那里。杨定率领二万人与苻崇共攻乾归，先胜后大败，定及崇俱被杀，乾归尽有陇西之地。 前秦太子苻宣投靠仇池杨盛，不再设置郡县，前秦亡。 部分事件年表 333年，石虎徙关中豪杰及羌戎至关东，以苻洪为流民都督，居于枋头。 350年 符洪归降东晋 ，苻健获授假节、右将军、监河北征讨前锋诸军事、襄国县公。 符洪被毒死，符健继位并去掉大都督、大将军、“三秦王”的称号，称东晋所授的官爵。 后赵新兴王石祗在襄国即位。 符健夺取关中地区，向东晋献捷报，并与东晋征西大将军桓温修好。 351年，符健建国，即天王、大单于位，国号大秦。 352年，符健称帝，并授大单于位予太子苻苌。 354年，恒温北伐，被符健击退。皇太子苻苌在追击桓温时受伤，同年伤重而死。 355年 符健以「三羊五眼」的谶文以淮南王苻生当太子。 符健病重，时任太尉的平昌公苻菁谋反被诛杀。 符健去世，次日符生继位。 357年，姚襄进图关中，被苻黄眉击败，但是苻黄眉反遭当众侮辱，于是谋反。风声泄露，苻黄眉被杀。同年，苻坚废掉符生，继承帝位。不久苻坚杀死符生。同年，苻坚招引王猛。 364年，符生诸弟五人发动叛乱，符幼被李威杀死，乱事平定。 367年，十月符生诸弟四人再次发动叛乱。 368年，苻坚镇压叛乱，四人被斩杀。 369年，慕容垂出奔，同年仇池公杨世死。 371年，前秦进攻仇池，杨世之子杨纂投降。仇池灭亡 373年，东晋进攻仇池，失败，前秦发起反攻，攻下益、梁二州。 375年，王猛去世。 376年，前秦出兵十三万进攻前凉，前秦君主张天锡投降，前凉灭亡。同年，前秦北征代国，并将其消灭。前秦至此统一北方。 378年，前秦分两路南征，夺取襄阳，彭城。东晋在谢玄带领下顶住攻势。同年，北海公符重在洛阳谋反，符洛在和龙起兵，后被平定，苻坚生擒苻洛并斩杀苻重。事后，苻坚令氐人分居各方镇。 380年，符丕被封为为都督关东诸军事、征东大将军、冀州牧，镇守邺城。 383年，前秦征伐西域，大获全胜，西域诸国归附前秦。同年五月，前秦开始大规模南征，于淝水之战被东晋击败。前秦境内臣服的其他胡人开始大规模反叛。 384年，慕容垂同丁零人围攻符丕驻守的邺城，建立后燕。同年，羌人姚苌建立后秦。 385年 苻坚留太子守长安，自己出奔五将山，被后秦将领吴忠俘虏。10月16日，姚苌命人将苻坚绞死于新平佛寺。 符丕向东晋求援，解邺城之围。随后符丕离开邺城向西，最后到达晋阳，在得知苻坚之死后，符丕继位。 386年，前秦进攻西燕，在襄陵被西燕击败。后进攻东晋控制的洛阳，兵败被杀。符丕死后族子符登于南安继位。 388年，前秦与后秦相持。 389年，符登与姚苌互相攻伐，互有胜负。 394年，姚苌死，符登进攻后秦，大败，逃到平凉，收集部众据守马髦山。七月被后秦生擒并处决。符登子苻崇在湟中称帝。同年，苻崇被乞伏乾归杀死。太子苻宣投靠仇池杨盛，不再设置郡县，前秦亡。 人物与世系]]></content>
  </entry>
  <entry>
    <title><![CDATA[后秦]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E5%90%8E%E7%A7%A6.html</url>
    <content type="text"><![CDATA[概述 前秦苻坚淝水兵败后，关中空虚，原降于前秦的羌人贵族姚苌在渭北叛秦，晋太元九年（384年）自称“万年秦王”，都北地【今陕西耀县东南】。次年（385年）擒杀苻坚。太元十一年（386年）姚苌称帝于长安，国号秦，史称后秦。其国号以所统治地区为战国时秦国故地为名。《十六国春秋》始称“后秦”，以别于前秦和西秦，后世袭用之。又以王室姓姚而别称姚秦。 后秦共存在32年（384年-317年） 姚苌时期 苻坚于淝水之战中大败，姚苌返回长安。而前秦在战败后国力大衰，其中北地长史慕容泓于战后第二年在关东起兵叛乱，回屯华阴【今陕西华阴市】，响应于河北地区叛变的叔父慕容垂。苻坚于是命雍州牧苻叡出兵讨伐，而姚苌则任其司马。当时慕容泓因畏惧而率众东逃关东，苻叡因轻敌而决心追去邀击，不听姚苌的谏言，最终遭慕容泓击败，苻叡亦战死。姚苌在败后派长史赵都及参军姜协向苻坚谢罪，但二人却被愤怒的苻坚杀死，惊惧的姚苌于是逃到渭北的牧马场。在当地，尹纬、尹详及庞演等人联结羌族豪强共五万多户向姚苌归降，并推姚苌为盟主。姚苌于是在太元九年（384年）自称大将军、大单于、万年秦王，改元“白雀”，建立后秦政权。 姚苌接着进屯北地，华阴、北地、新平及安定各郡共有十多万名羌胡外族归附。不久苻坚亲自率军讨伐姚苌，姚苌屡败更遭前秦军断绝水源。然而就在后秦军中有人渴死及在恐惧当中时就遇上天雨，营中水深三尺，解决了水荒，亦令后秦军心复振。不久姚苌出兵反击，击败前秦将杨璧并俘获杨璧、徐成及毛盛等数十人，皆礼待而送还。而随着西燕军队逼近长安，苻坚率兵回防长安。虽然姚苌在早前向西燕送质请和，但当时姚苌群臣却建议姚苌加入战斗以夺取长安，建立根本之地。不过姚苌自度慕容氏获胜并后不会长留关中，必会东归河北，故此打算北屯九嵕【今陕西乾县东北】以北一带地区（岭北）以积聚实力和资源，待前秦亡国而西燕东归后自取长安。姚苌随后亲自率军进攻新平郡城【今陕西省邠县】，却遭守将苟辅顽强抵抗，有万多人阵亡。苟辅又诈降诱骗姚苌入城，虽然姚苌入城前就察觉而没进城，但仍受到苟辅伏兵攻击，万多人战死之余亦险些被擒。 因为新平久久不下，姚苌于是在白雀二年（385年）正月留兵继续攻城，自己另外出兵安定郡，擒下前秦安西将军苻珍，亦令岭北诸城降，唯新平未下。至四月，新平物资匮乏，亦无外援，苟辅接受后秦军的劝降，率城内五千人出降。姚苌下令将所有人坑杀，夺取了新平。五月，苻坚离开长安，出屯五将山，至七月时后秦将吴忠捕获苻坚，送至新平。同年八月，姚苌因向苻坚索取传国玉玺不遂，更遭其出言侮辱，于是缢杀苻坚于新平佛寺（今彬县南静光寺）。姚苌为了掩饰他杀死苻坚的行为，谥苻坚为“壮烈天王”。 十月，已据有长安的西燕王慕容冲派高盖攻伐姚苌，遭后秦军击败并投降。白雀三年（386年），西燕国内政变频生，并开始弃守长安东归。时卢水胡郝奴乘虚入据长安并称帝，更命其弟郝多进攻于马嵬【今陕西兴平市马嵬镇】自守的王𬴊。姚苌此时从安定东攻，逼走王𬴊并擒得郝多，并进攻长安，令郝奴惧而请降。取长安后姚苌就于同月即位为帝，改年号“建初”，建国号大秦。不久又击败了前秦秦州刺史王统，夺取秦州。 但同一年，前秦宗室苻登就在关中氐族残余势力的推举下与后秦对抗，不久在前秦帝苻丕遇害后更称帝继位。起初苻登力量甚盛，在泾阳【今陕西泾阳县】大败姚硕德，要姚苌亲自出兵救援；更谋攻长安。不过当时前秦重将苻纂为苻师奴所杀，将领兰椟遂与苻师奴反目。兰椟因受西燕皇帝慕容永攻击而向后秦求援，姚苌以苻登迟疑慎重而少决断，不敢出兵深入而冒着遭乘虚后袭的危险，决意亲自率军救援。最终先破苻师奴并尽收其众，后败慕容永并生擒兰椟。 另姚方成亦击败徐嵩，徐嵩虽然被俘仍大骂姚苌不仅背叛对其有恩的苻坚，更将他杀害，不惜恩情就连狗和马都不如。姚方成杀死徐嵩后，姚苌又掘出苻坚的尸首不断鞭挞，更脱光尸身的衣服，裹以荆棘并以土坑埋掉，以释心中愤怨。建初三年（388年），自春季开始夏末，姚、苻两军就分别据朝那【今宁夏朝那县】及武都【甘肃武都县】相持并交战，互有胜负而不能击倒对方，于是都解兵归还。但关西豪杰都以后秦久久未能站稳关中，反多次败给苻登，大多都投向前秦，唯齐难、徐洛生、刘郭单等人仍然忠于后秦，提供军粮并跟随姚苌征战。 建初四年（389年），姚苌屡次败于苻登，命姚崇袭击苻登于大界的辎重又不得，而苻登就已威胁安定。面对如此局面，姚苌坚拒与苻登正面决战，力图以计取胜，于是乘夜率兵三万再攻大界，终攻克大界并杀毛皇后等人及生擒数十名前秦名将。姚苌随后亦不贪胜，坚拒乘胜进击苻登，苻登于是收余众退守胡空堡，但已元气大伤。 在大败苻登辎重后的四个月后，姚苌设计让其将任盆诈降以诱杀苻登，虽然最终因雷恶地识破而事败，但苻登却忌惮雷恶地，逼其降于姚苌。次年（390年）魏揭飞攻后秦，雷恶地叛迎魏揭飞，虽然当时苻登正在长安附近的新丰（今陕西西安市临潼区），但姚苌以雷恶地“智略非常”，于是亲自出兵攻伐魏揭飞。魏揭飞见姚苌兵少就让全军进击，姚苌特意示弱不战，却派了姚崇从敌军后方攻击令其混乱，接着就出兵直击，大败对方并阵斩魏揭飞，又再降雷恶地并不减昔日待遇。雷恶地两度归于姚苌，终对其心服。另外姚苌亦不怕前秦兖州刺史强金槌诈降，只带着数百骑兵随其访问强金槌的军营，以坦诚获得了身为氐族人的强金槌的信任，令其不应其他氐族势力的计谋而加害姚苌。 至建初六年（391年）十二月，苻登进攻安定，姚苌在安定城东击败他。次年三月，前秦将没弈干亦向后秦归降，但姚苌不久就患病。苻登得知姚苌患病就乘机进攻安定，至八月姚苌病情转好就亲自率兵抵抗，更乘苻登出营迎击而命姚熙隆进袭前秦军营，令苻登惧而退兵。姚苌又让军队旁出跟随苻登，苻登得知后秦营垒空空如也，失去其影踪后更为惊惧，只得败还雍城【今陕西凤翔县南】。 建初八年（393年）十月，姚苌病重而回长安。至同年十二月，姚苌召太尉姚旻、仆射尹纬及姚晃、将军姚大目和尚书狄伯支受遗诏辅政，辅助太子姚兴。及后姚苌去世，享年六十四岁。姚兴先秘不发丧，至次年才发布死讯，上谥号为武昭皇帝，庙号太祖。 姚兴时期 建初八年（393年）姚苌死后，姚兴秘不发丧，分命姚绪、姚硕德及姚崇驻安定、阴密及长安，自己就自称大将军，领兵进攻前秦。 次年（394年）春，前秦皇帝苻登听闻姚苌已死即十分高兴，又轻视姚兴，随即率众东进。至夏季，苻登要进攻废桥，尹纬则受命支援守马嵬堡的姚详，尹纬于是据守废桥等待前秦军。前秦军因无法取得水源而缺水，两三成士兵更因而渴死，于是急攻尹纬希望能夺取水源。姚兴当时认为苻登已是穷寇，于是派狄伯支命令尹纬要持重拒战，不要轻易与前秦军决战。不过尹纬认为姚苌新死，人心恐惧不安，应当用尽力量消灭敌人，安定众心。尹纬于是与苻登决战，终大败前秦军，苻登因兵众溃散而逃走，逃到马毛山。战后，姚兴才正式发丧，并在槐里【今陕西兴平东南】即位为帝，改元“皇初”。七月，姚兴进攻苻登并在马毛山南作战，擒杀苻登，并解散其部众。不久继位的前秦皇帝苻崇因被乞伏干归逼逐而联结杨定进攻乞伏干归，却遭对方所杀，前秦正式灭亡。 皇初七年（397年），姚兴率兵进攻东晋控制的湖城，弘农太守陶仲山及华山太守董迈都投降。姚兴于是进至陕城【今河南陕县】，并攻下上洛【今陕西商洛市】。另又分遣姚崇进攻洛阳，因晋河南太守夏侯宗之守金镛城而未能攻克，于是改攻柏谷，强迁两万多户流民西归。及至皇初九年（399年），姚兴命姚崇及杨佛嵩再攻洛阳，守将辛恭靖坚守一百多日后失守，后秦夺得洛阳。取洛阳后，淮河、汉水以北各城大多都向后秦请降，并送人质。 弘始二年（400年），姚硕德进攻西秦，西秦王乞伏干归率众抵抗，两军对峙期间姚硕德军中柴草缺乏，姚兴就暗中领兵支援。乞伏干归知道姚兴派军前来，于是命慕兀率二万中军屯柏杨（今甘肃清水县西南），罗敦率外军屯侯辰谷，自己领数千轻骑等候秦军。不过其夜遇上大风和大雾，乞伏干归与慕兀的中军失去联络，被逼与外军会合。天亮后，乞伏干归就与后秦军作战，终大败并逃返苑川【今甘肃榆中县北】，后秦军受降共三万六千多人，姚兴则进军枹罕【今甘肃临夏市】。乞伏干归初降秃发利鹿孤，但因怕不为对方所容，最终决定归降后秦。 弘始三年（401年），姚兴命姚硕德进攻后凉，并兵围后凉首都姑臧【今甘肃武威】。后凉王吕隆被逼请降。而在后秦攻凉时，西凉李暠、南凉秃发利鹿孤及北凉沮渠蒙逊都遣使向后秦请降。直至弘始五年（403年），后凉被南凉和北凉所逼，最终请后秦派军迎来归附，姚兴因而派了齐难等人到姑臧，驻兵当地并送吕氏宗族内徙长安，吞并后凉。另外在攻打后凉姑臧时，连带的将名僧鸠摩罗什请回长安。尔后为鸠摩罗什讲解《法华经》，建造“长安大寺”。鸠摩罗什于长安圆寂，其生前将大乘佛教的主要经典(如《中论》、《法华经》、《维摩诘经》等)译为汉文。 柴壁之战 北魏君主拓跋珪曾经送一千匹马到后秦请婚，姚兴原先答应，但知拓跋珪已立了后，于是拒绝并留下使者贺狄干。弘始四年（402年），北魏将领拓跋遵进攻高平【今甘肃固原】，没弈干抛弃部众，带着数千骑兵及赫连勃勃逃到秦州。北魏军追击至瓦亭仍未追上，于是尽迁高平的物资回国；及后北魏平阳太守貮尘又进攻河东。 北魏的一系列军事行动震动长安，关中各城日间也紧闭城门，姚兴于是在城西阅兵，并做好战争准备。同年，姚兴派姚平及狄伯支等率四万步骑兵进攻北魏，姚兴则亲率大军在后。北魏帝拓跋珪则命拓跋顺及长孙肥统六万骑兵为先锋，自己也率大军在后以作抵抗。姚平用了六十多天攻陷了北魏屯积粮食的干壁，又派二百精骑侦察魏军，却为长孙肥袭击，所有人都被生擒。姚平因而后撤，又遭拓跋珪追击，并在柴壁【今山西襄汾县西南】被追上；姚平当时据柴壁城固守，北魏军则围困城池。姚兴于是自领四万七千兵营救姚平，并打算占领天渡以运粮支援姚平。不过北魏加强了包围圈，又在汾水建浮桥，在汾水西岸筑围堵截姚兴援军，务求引姚兴取道汾东，经长达三百多里而缺乏小路通行的蒙坑进攻。而姚兴到蒲阪后因怕魏军强盛，很久才正式进攻。及后姚兴在蒙坑以南与拓跋珪所率三万步骑兵作战，后秦军共千多人被杀，姚兴被逼退走四十多里，而姚平亦未能突围。 接着拓跋珪分兵各据险要，不让后秦军接近柴壁。姚兴驻屯汾西，在汾水上游放木材打算冲毁北魏浮桥，但木材都被魏军截取。 至十月，姚平军需用尽，在夜间试图向西南方突围，姚兴列兵汾西，点起烽火和擂鼓响应，不过姚兴欲救姚平尽力突阵，姚平反望姚兴攻围接应，两军虽然能够以叫喊相通，但始终都没能压逼围城魏军。姚平最终无法成功突围，于是率众投水自杀，然而拓跋珪却都派人潜下水捕捉，赴水诸将与城中狄伯支、唐小方等人及两万多兵众都被俘。姚兴只能见城中军队束手就擒而无力支援，全军都哀伤痛哭，哭声震动山谷。接着姚兴数度派遣使者求和，但都被拒，魏军更乘胜进攻蒲阪。防御蒲阪的姚绪固守不战，又正因柔然要进攻北魏，拓跋珪才撤兵。此为「柴壁之战」。 弘始九年（407年），北魏归还柴壁之战中被俘的唐小方等人，姚兴又以良马千匹赎回狄伯支，与北魏通和。赫连勃勃因后秦与北魏连和而大怒，竟抢夺了柔然送给后秦的八千匹马，并袭杀没弈干叛变，称大夏天王，建夏国。赫连勃勃随后又攻破鲜卑薛干等三部，并进攻后秦三城以北诸戍，后秦将杨丕、姚石生等都被杀，接着又侵掠岭北，令岭北各城城门白天也要紧闭。姚兴此时感叹：“我不听黄儿【姚兴弟姚邕小字】的话，才弄成今天这样子。” 随后秃发傉檀大败于赫连勃勃，名将折损达六七成，接着成七儿及梁裒、边宪等又先后谋反，姚兴见其并受外忧外患夹击，不顾尚书郎韦宗的劝阻和吏部尚书尹昭命北凉及西凉进攻秃发傉檀的建议，坚持分兵两道进攻夏和秃发傉檀。姚兴于弘始十年（408年）派了齐难领二万骑兵攻夏，又派姚弼、敛成及乞伏干归攻秃发傉檀，更写信给秃发傉檀声称姚弼等其实只是配合齐难进攻夏国的行动，秃发傉檀不作防备。不过姚弼等到姑臧后反被秃发傉檀的奇兵击败，后又特地释放牛羊引诱后秦军掠夺，大败秦军。作为后继的姚显知姚弼兵败，加快赶到姑臧，并命孟钦等五名擅长射击的人于凉风门挑战，却遭南凉材官将军宋益击杀。姚显见此委罪于敛成，派使者向秃发傉檀谢罪，抚慰河西后就撤还。而秃发傉檀亦派使者徐宿向后秦谢罪。不过在当年又再称凉王。 而赫连勃勃知齐难来攻，于是退守河曲。齐难见赫连勃勃仍在很远，于是先行纵兵野略；赫连勃勃因而潜军来袭，俘杀七千多人，齐难逃走但在木城遭赫连勃勃生擒，其余将士亦被俘。战后岭北共计有数万人归附赫连勃勃。弘始十一年（409年），姚兴再派姚冲及狄伯支率四万骑再攻夏，但姚冲竟图谋反，并杀了不肯支持的狄伯支，姚兴终赐死姚冲。同年，姚兴亲自率军攻夏，至貮城后就派姚详、敛曼嵬及彭白狼分督租运。其时诸军未集合，而赫连勃勃乘虚来袭，姚兴恐惧之下打算逃到姚详那里，但被右仆射韦华劝止。姚兴派姚文宗等迎战，虽将领姚榆生被擒，但在姚文宗力战之下也成功击退赫连勃勃。姚兴唯有留五千禁军助姚详守貮城，自己撤还长安。 赫连勃勃攻破了敕奇堡、黄石固及我罗城。次年又派胡金纂攻平凉，虽然姚兴亲自率军击杀胡金纂，但赫连勃勃侄赫连罗提又攻下定阳，杀四千多人并俘姚广都。当时秦将曹炽、曹云及王肆佛等被逼领数千户内徙，姚兴就让他们住在湟山及陈仓。接着赫连勃勃又进攻陇，攻略阳太守姚寿都守的清水城，姚寿都弃城奔上邽，而赫连勃勃就迁了城中一万六千户人到大城。姚兴试图从安定追击赫连勃勃，但追不上。及后赫连勃勃仍屡屡侵扰后秦，但姚兴都无法消灭夏国。 弘始十八年（416年），姚兴召姚绍、姚赞、梁喜、尹昭和敛曼嵬入寝宫，遗命他们为辅政大臣。姚兴即病逝，享年五十一岁。谥文桓皇帝，庙号高祖，下葬偶陵。 姚泓时期 后秦弘始十八年（416年）正月，姚兴卒，姚泓即位。姚兴死后，姚泓秘不发丧，捕杀姚弼党羽姚愔、散骑常侍建康公吕隆、大将军尹元等，登基后再命姚恢捕杀吕隆弟安定太守吕超。兄弟相争，导致国中大乱。 六月，并州几万帐落胡人背叛后秦，到平阳推举匈奴人曹弘为大单于，在匈奴堡攻伐后秦立义将军姚成都。征东将军姚懿从蒲坂率兵讨伐，擒获曹弘，将他押送到长安，并把这些胡人中一万五千落帐的豪族迁往雍州。八月东晋刘裕起兵伐秦。十月，姚泓派并州牧姚懿南屯陕津，作为声援援救被东晋刘裕围攻洛阳的军队。十月廿二日，洛阳投降。十二月，姚懿在司马孙畅的唆使下谋反，被姚成都要成都击败。东平公姚绍进入蒲阪，抓获姚懿，杀死孙畅等人。 次年正月在皇弟太原公姚懿的叛乱刚被平定、姚泓因内外困境交迫于前殿朝会百官君臣相泣之际，姚恢率安定镇户三万八千，焚烧房屋，以车为方阵，从北雍州发兵向长安，自称大都督、建义大将军，移檄州郡，称欲清君侧。扬威将军姜纪率众投奔之。姚恢没有听从姜纪的建议直取京师，反而向南攻郿城。并击败皇弟镇西将军姚谌，姚恢军势更盛，长安大震。姚泓派使者骑马征召姚绍，遣皇弟车骑将军姚裕及辅国将军胡翼度屯于沣西。姚绍率轻骑先到，使姚洽、冠军将军司马国璠率步卒三万赴长安。姚恢从曲牢进屯杜成，与姚绍相持于灵台。姚绍之子、屯陕津的抚军将军姚赞闻姚恢渐渐逼近，留宁朔人尹雅为弘农太守守潼关，率诸军还长安。姚泓于是赏赐军士再发兵。姚恢军见诸军集结，都害怕，其将齐黄等向后秦大军投降。姚绍进逼姚恢，姚赞从后截击，大破之，杀姚恢及其三弟。 刘裕军趁姚懿、姚恢作乱之机长驱入关。八月癸亥（417年9月20日），刘裕帐下大将王镇恶攻入长安平朔门。姚泓无计可出，准备出降，他十一岁的儿子姚佛念说，晋朝人“将逞其欲”，（即使投降）我们也一定不能保全自己，我愿自杀。姚泓怃然不知所对。佛念登上城墙自投而死。姚泓率一家老小至王镇恶大营投降，其堂叔姚赞也率宗室子弟一百余人投降。刘裕将后秦王室全部处死，其余宗族成员迁往江南。姚泓被押往建康斩首。后秦亡。 《晋书》载，泓孝友宽和，而无经世之用，又多疾病，兴将以为嗣而疑焉。久之，乃立为太子。兴每征伐巡游，常留总后事。博学善谈论，尤好诗咏。 人物与世系 部分事件年表 383年，淝水之战，前秦被东晋击败，国内陷入内乱。 384年，羌人贵族姚苌在渭北叛秦，自称「万年亲王」，改元「白雀」。 385年，姚苌擒杀苻坚，前秦符登继位。 386年，姚苌于长安称帝，国号秦，史称后秦。 388年，前秦、后秦开始拉锯战事。 389年，姚苌攻克大界，击败符登。 390年，前秦将领雷恶地投降后秦。 391年，符登进攻安定，但是被姚苌击败。 392年，前秦将领没弈干投降后秦。 393年，姚苌病死，秘不发丧。其子姚兴继位。 394年，后秦发布姚苌死讯，前秦东进进攻，但是被姚兴击败。战后姚兴正式为姚苌发丧。七月，姚兴擒杀符登。 397年，姚兴进攻东晋控制的湖城，守军投降。后攻陷洛阳。 400年，姚兴进攻西秦，将其击败。西秦向后秦投降。 401年，后秦进攻后凉，西凉，南凉均归附后秦。 402年，北魏与后秦在柴壁大战，姚兴战败，后秦元气大伤。 403年，后凉归附后秦，后秦将后凉吞并。同年，后凉请回名僧鸠摩罗什至长安。 407年，后秦与北魏通和。同年赫连勃勃背叛后秦建立夏国。 408年，后秦进攻夏国，但是进攻的军队被夏国击败。其后夏国一直骚扰后秦，后秦无力将其消灭。 416年，姚兴去世。姚泓继位。姚泓随后捕杀姚弼党羽。星弟相争，后秦国中大乱。同年东晋刘裕起兵伐秦，攻陷洛阳。 417年，后秦姚恢叛变，被镇压。刘裕军趁乱进攻长安，后秦投降。后秦亡。]]></content>
  </entry>
  <entry>
    <title><![CDATA[西燕]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E8%A5%BF%E7%87%95.html</url>
    <content type="text"><![CDATA[概况 西燕（384年－394年）是中国十六国时期慕容氏诸燕之一，由鲜卑慕容泓建立的政权。共存在10年。 藕荷色部分为西燕疆域 前秦苻坚灭前燕后，尽徙鲜卑入关中。苻坚淝水兵败后，政权陷于瓦解。晋太元九年（384年），前燕皇帝慕容𬀩之弟慕容泓起兵反秦，在华阴（今陕西华阴县东南）自称济北王。因其地处于后燕、南燕、北燕之西，史称“西燕”。 慕容泓时期 慕容泓为前燕帝慕容儁之子，慕容𬀩之弟。前燕时期慕容儁在位时被封为济北王。 370年，前燕为前秦所灭，包括慕容泓在内的众多鲜卑慕容部人被迁往关中。383年，前秦在淝水之战中大败。384年，慕容泓之叔慕容垂于河北叛变，时任北地长史的慕容泓听闻后即至关东召集鲜卑部众，自称都督陕西诸军事、大将军、雍州牧、济北王，并奉慕容垂为吴王。原本慕容泓只想东回前燕故地并投奔慕容垂，但在屡次击败前秦军后【苻坚征召钜鹿公苻叡，令其与窦冲及姚苌同讨慕容泓，但最终苻叡兵败战死，姚苌反叛建立后秦】，遂转而西进前秦都城长安，并改元燕兴。不久，谋臣高盖等人认为慕容泓德望不如其弟慕容冲，且用法苛刻严峻，于是杀慕容泓，改立慕容冲。 慕容泓在位时虽未正式称燕王或燕帝，且原本有意归附慕容垂，惟建立年号已表示有独立于其他政权之意，故一般以慕容泓为西燕之建立者。其子慕容忠称帝后，为慕容泓上庙号肃宗，谥号烈文皇帝。 慕容冲时期 慕容冲母亲是皇后可足浑氏。前燕时期慕容儁在位时曾被封为中山王、大司马。 370 年前燕灭亡之后随慕容氏族迁往前秦都城长安。慕容冲时年 12 岁，因貌美被苻坚占作娈童，与其姐清河公主【慕容冲的同胞姐姐】皆受宠幸，长安因而有歌谣：“一雌复一雄，双飞入紫宫。” 后在王猛的极力劝谏下，慕容冲被送出宫。 《晋书·载记第十四》载：……有殊色，坚纳之，宠冠后庭。冲年十二，亦有龙阳之姿，坚又幸之。姊弟专宠，宫人莫进。长安歌之曰：“一雌复一雄，双飞入紫宫。”……长安又谣曰：“凤皇凤皇止阿房。”坚以凤皇非梧桐不栖，非竹实不食，乃植桐竹数十万株于阿房城以待之。冲小字凤皇，至是，终为坚贼，入止阿房城焉。…… source 似乎因为这段经历，慕容冲有时候会成为耽美小说的人物。 这一段经历有典故：凤止阿房。 385年，慕容冲被拥立为皇太弟。次年与阿房宫即皇帝位。改元更始。之后经过一番惨烈的攻防后占领长安【慕容冲围攻长安，迫使苻坚留太子苻宏留守长安，自己率数百骑及张夫人、苻诜和苻宝、苻锦两名女儿一同出奔五将山。】。慕容冲贪图入据长安的安逸，又因为畏惧慕容垂的强大，不敢东回鲜卑人的故地，因而军心思变。 《晋书·卷一百十四·载记第十四》：慕容冲进逼长安，坚登城观之，叹曰：“此虏何从出也？其强若斯！”大言责冲曰：“尔辈群奴正可牧牛羊，何为送死！”冲曰：“奴则奴矣，既厌奴苦，复欲取尔见代。”坚遣使送锦袍一领遗冲，称诏曰：“古人兵交，使在其间。卿远来草创，得无劳乎？今送一袍，以明本怀。朕于卿恩分如何，而于一朝忽为此变！”冲命詹事答之，亦称“皇太弟有令：孤今心在天下，岂顾一袍小惠。苟能知命，便可君臣束手，早送皇帝，自当宽贷苻氏，以酬曩好，终不使既往之施独美于前”。坚大怒曰：“吾不用王景略、阳平公之言，使白虏敢至于此。” 真是各种不吉利。登基的地方阿房宫，与秦朝覆灭有关。而年号更始，又合了更始帝，也是不好的结局。 386年，，慕容冲为左将军韩延所杀，变军拥立将军段随为燕王。慕容冲后来被追谥为威皇帝。然左仆射慕容恒、尚书慕容永【慕容永属于旁支皇族，是西平公慕容运之孙，前燕奠基人慕容皝的堂侄，跟前燕开国皇帝慕容儁、后燕开国皇帝慕容垂、南燕开国皇帝慕容德都是堂兄弟关系，也是前燕亡国君慕容暐、西燕建立者慕容泓的堂叔。】又袭杀段随，慕容𫖮【前燕宜都王慕容桓之子，慕容皝之孙】遂被拥护继立为燕王，改元建明，率领四十余万鲜卑人离开长安东下。不久为慕容恒之弟慕容韬所杀。 随后慕容冲之子慕容瑶被慕容恒拥护继立为燕帝，改元建平，但是部众都离开慕容瑶，往归尚书慕容永【慕容部首领慕容廆之弟慕容运之孙（一说为其子），也就是前燕建立者慕容皝之堂侄。】，不久慕容瑶为慕容永所擒，被杀，谥文。 慕容永时期 386年，西燕在经历巨大的混乱之后，最后慕容廆族孙慕容永立为河东王，拥立慕容忠【为慕容泓之子】为皇帝。数月后慕容忠被杀，慕容永于是被推为大都督、大将军、大单于、雍秦梁凉四州牧、河东王，暂对后燕帝慕容垂称臣。 数月后，慕容永进据长子，即皇帝位，并改元中兴，并将治下慕容儁、慕容垂子孙无论男女全部杀死。慕容垂的孙子慕容盛因有先见之明先一步与叔父慕容柔、弟弟慕容会逃到后燕而得免。 393年，后燕大举伐西燕，明年西燕为后燕所灭，慕容永被杀。慕容永的儿子太子慕容亮、常山公慕容弘同时被杀。 部分事件年表 370年，前燕被前秦消灭，慕容氏贵迁往关中。 383年，淝水之战中前秦大败。 384年，慕容垂于河北背叛前秦，慕容泓闻讯后在关中起事。 385年，慕容泓被被部下杀死，慕容冲被立为皇太弟。 386年，慕容冲称帝。同年，慕容冲被杀，随后有段随，慕容𫖮，慕容瑶，慕容忠先后被立为西燕之主。最后慕容永暂时稳定政局。 393年，后燕攻灭西燕，慕容永及其子被杀。]]></content>
  </entry>
  <entry>
    <title><![CDATA[后凉]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E5%90%8E%E5%87%89.html</url>
    <content type="text"><![CDATA[概况 后凉疆域 后凉（386年-403年）是十六国时期氐人贵族吕光建立的政权。 其国号以地处凉州为名。《十六国春秋》始称“后凉”，以别于其他以“凉”为国号的政权，后世袭用之。 东晋太元八年（383年）前秦将军吕光受命率7万余众讨平西域。苻坚淝水兵败后前秦瓦解，吕光据有姑臧（今甘肃武威）于太元十一年（386年）称大将军、凉州牧。太元十四年（389年）吕光称三河王，后改称天王，史称后凉。 统治范围包括甘肃西部和宁夏、青海、新疆一部分。 后凉以氐人军事力量为基础，势力孤弱，刑法峻重，社会局势不稳，叛者连城。 后凉龙飞四年（399年）吕光卒，子吕绍继位，庶长子吕纂又杀吕绍自立。后凉咸宁三年（401年）吕隆（吕光弟吕宝之子）又杀吕纂自立，国势益衰。连年战争，经济凋敝，太元十二年（403年），谷价昂贵，人相食。 神鼎三年（403年），吕隆因后秦、南凉、北凉交相攻逼，降于后秦，后凉亡。 吕光时期 吕光（338年－399年），字世明，略阳（今甘肃天水）氐人，前秦太尉吕婆楼之子。 吕光得王猛看重，并将他推荐给苻坚，苻坚于是以吕光为美阳令，任内吕光得当地人民爱戴信服。吕光后迁鹰扬将军，以功封关内侯，并于永兴二年（358年）随苻坚等讨伐张平。苻坚与张平于铜壁决战，张平骁勇大力的养子张蚝单骑屡次进出前秦军阵中，吕光于是去袭击张蚝并成功击伤他。张蚝受伤被擒，张平溃败，吕光亦因而声名大噪。 建元四年（368年），吕光与王鉴等因应杨成世讨伐上邽叛变的苻双失败而率军再行讨伐，王鉴到后打算与苻双前锋苟兴速战速决，但吕光虑及对方因刚获胜而士气高涨，建议谨慎待敌，让其粮尽退兵时就是进攻的时机。二十日后苟兴退兵，王鉴追击并击败苟兴，随后又大败苻双，终攻下上邽，斩杀苻双。建元六年（370年），吕光随军攻灭前燕，获封都亭侯。后苻重出镇洛阳，吕光担任其长史。苻重于建元十四年（378年）谋反，苻坚以吕光忠诚正直，不会与苻重连谋，于是下令吕光收捕苻重，吕光听命并以槛车押送苻重回长安。后吕光迁太子右率，颇受敬重。次年吕光又以破虏将军身份率兵击败进攻成都的李乌，迁步兵校尉。建元十六年（380年）吕光又奉命与左将军窦冲共领四万兵讨伐叛乱的苻重，又将其生擒，战后获授骁骑将军。 前秦十八年（382年），吕光受命征讨西域，以使持节都督西讨诸军事身份率领姜飞等将领、七万兵及五千铁骑出发。吕光越过三百多里长的沙漠到达西域，降服焉耆等西域各国，又击破唯一拒守的龟兹，威震西域。苻坚知吕光征服西域，即任命其为使持节、散骑常侍、都督玉门以西诸军事、安西将军、西域校尉，封顺乡侯，但因前秦于淝水之战(383年)后国内大乱而道路不通，未能传达。吕光本来想要留在龟兹，但是受到名僧鸠摩罗什劝阻，而且部众们也想回到中原，遂回师。 太安元年（385年），吕光军抵宜禾【今新疆安西南】，高昌太守杨翰告诉凉州刺史梁熙，称吕光还军必定别有所图，建议关闭天险要道，拒之于外，但梁熙没有听从。吕光最初知道杨翰的计划时曾打算不再前进，但在杜进劝告下还是继续，杨翰即在吕光到达高昌时向吕光请降。梁熙在吕光到远玉门时传檄指责吕光擅自班师，又派其子梁胤等率军五万往酒泉阻击吕光。吕光也传檄指责梁熙没有为前秦赴国难的忠诚，还阻拦归国军队，并派了姜飞等为前锋进攻梁胤。姜飞等在安弥大破梁胤并生擒他，于是周边外族都纷纷依附吕光，武威太守彭济更将梁熙抓起来叛归吕光。吕光杀死梁熙，入主姑臧，自领凉州刺史、护羌校尉。 386年，吕光收到苻坚死讯，改元太安，并自称使持节、侍中、中外大都督、督陇右河西诸军事、大将军、凉州牧、酒泉公。吕光入主凉州时，因尉祐与彭济共谋抓住梁熙的功劳而宠任他，但吕光却在尉祐中伤下杀了姚皓、尹景等十多个名士，人心见离。当时国内米价也高涨至一斗五百，饥荒中更发生人吃人事件，死了很多人。吕光与群僚在饮宴中谈及为政时用严峻刑法的问题，在参军段业劝言下终下令自省并行宽简之政。 吕光于太安二年（387年）杀了进逼姑臧的张大豫【前凉末主张天锡之子】，但王穆尚据酒泉；西平太守康宁也叛变，阻兵据守，吕光试图讨伐但都不果。及后连吕光部将徐炅及张掖太守彭晃都谋叛，并联结了王穆及康宁。吕光力排众议亲率三万兵速攻彭晃，二十日后攻破张掖，杀了彭晃。不久，吕光乘王穆进攻其将索嘏的机会率二万兵袭破酒泉，王穆率兵东返但部众在途中就溃散，王穆只身逃走但为骍马令郭文所杀。 389年，吕光称三河王，改元麟嘉。396年六月又改称天王，国号大凉，改元龙飞，以吕纂为太原公。吕光曾先后多次进攻西秦，其中吕光弟吕延于龙飞二年（397年）的进攻中兵败被杀。吕光听信谗言，怪罪从军的尚书沮渠罗仇及三河太守沮渠麹粥，并杀二人。二人归葬时，因诸部联姻而共计有万多人参与葬礼，罗仇之侄沮渠蒙逊遂反，蒙逊堂兄沮渠男成举兵响应，并推建康太守段业为主，建北凉与后凉对抗，吕光曾派吕纂讨伐，但最终无法消灭北凉。 同年，善于天文术数的太常郭黁与仆射王详认为吕光年老、太子暗弱而吕纂等凶悍，料定吕光死后必会有祸乱，并祸及自己，故图谋攻夺姑臧东西苑城，推王乞基为主。不过王详因事泄而被杀，郭黁遂据东苑叛变，当时民间还有很多人支持郭黁。吕光召吕纂回兵讨伐郭黁，吕纂遂屡破郭黁，令其于龙飞三年（398年）出走西秦，平定乱事。 龙飞四年（399年），吕光病重，立太子吕绍为天王，自号太上皇帝（太上天王）。吕光又让吕纂及吕弘分任太尉及司徒，告诫吕绍要倚重二人，放权让他们处理军政大事才能保国家安稳；另也对吕纂及吕弘说二人要与天王吕绍同心合力才能保全国家，否则祸乱必会来。吕光于不久去世，享年六十三岁，谥懿武皇帝，庙号太祖。 吕纂时期 吕光病重时，立嫡长子太子吕绍为天王。同时以庶长子吕纂为太尉，掌握军权。吕光去世以后，吕绍惧怕吕纂，曾经想要让位给吕纂，然而吕纂以嫡庶之别拒绝；另吕光侄吕超又劝吕绍杀了吕纂，但吕绍不肯。可是不久吕纂就在吕弘的煽动下反叛，夜里率壮士数百进攻广夏门，守融明观的齐从抽剑攻击吕纂，击中其额，但为吕纂部众制服。吕绍所派部队因惧怕吕纂而溃散，吕绍被逼自杀。吕纂遂即天王位，改年号咸宁。 咸宁二年（400年），吕弘举兵反叛【先前吕弘煽动吕纂政变，此时自己又政变，搞不明白他的想法】，但为吕纂将焦辨击败，出奔广武（今甘肃永登县），不久为吕方所捕，被杀。吕纂随后纵兵大掠，以原属吕弘的东苑中之妇女赏给军士，吕弘的妻儿都被士兵侵辱。吕纂笑着对群臣说：“今日一战怎样呀？”侍中房晷却答：“天要降祸给凉室，故藩王起兵衅。先帝驾崩不久，隐王幽逼而死，山陵才刚建好，大司马就因惊惧疑惑而反叛肆逆，京邑成了兄弟交战的战场。虽然吕弘自取灭亡，亦是因为陛下没有棠棣所说的兄弟之义。现在应该反思自省，以为向百姓谢过，却反而纵容士兵大肆掠夺，侮辱士女。兵衅因吕弘而起，百姓有什么错！而且吕弘的妻子是陛下的弟妇，女儿也是陛下的侄女，怎能让她们成为无赖小人的婢妾。天地神明怎会忍心见到这样！”吕纂听后向房晷道歉，又接回吕弘的妻儿到东宫。 随后，吕纂不顾中书令杨颖反对坚决攻伐南凉，却为南凉将秃发傉檀所败。吕纂不久又不听姜纪谏言而攻北凉，围攻张掖并攻略建康郡地，然而秃发傉檀果如姜纪所言进攻姑臧，吕纂亦被逼退兵。吕纂在位时沉溺于酒色，又常常出猎，诸大臣皆曾劝阻，然而吕纂皆不能听从。 咸宁三年（401年）吕纂因番禾太守吕超擅攻鲜卑思盘一事召吕超及思盘入朝，吕超因恐惧而事先结交了殿中监杜尚。吕纂愤怒地斥责吕超，更声言“要当斩卿，然后天下可定”，吓得吕超叩头称不敢。不过吕纂及后就和吕超及众大臣宴会，吕超兄吕隆于是频频向吕纂劝酒要灌醉他。吕纂饮至昏醉便乘坐步挽车与吕超等人在宫内游走，在到琨华殿东阁时步挽车过不了去，吕纂亲将窦川及骆腾于是放下配剑推车。吕超乘此机会拿起二人配剑袭击吕纂，吕纂试图下车抓住吕超但被对方刺穿胸部；吕超又杀了窦川和骆腾。吕纂后杨氏下令禁军讨伐吕超，但杜尚却命禁军放下武器。将军魏益多遂斩下吕纂的头，声言：“吕纂违反先帝遗命，杀害太子、沉溺饮酒和田猎、亲近小人、轻易杀害忠良、视百姓为草芥。番禾太守吕超以骨肉之亲，恐惧国家倾覆，已经除去他了。上可以安宁宗庙，下可为太子报仇。但凡国人都应欢庆。”【《晋书·载记·吕纂传》：“将军魏益多入，斩纂首以徇曰：‘纂违先帝之命，杀害太子，荒耽酒猎，昵近小人，轻害忠良，以百姓为草芥。番禾太守超以骨肉之亲，惧社稷颠覆，已除之矣。上以安宗庙，下为太子报仇。凡我士庶，同兹休庆。’”】 吕隆时期 咸宁三年（401年），吕隆弟吕超以兵变弑杀天王吕纂，随后就拥立吕隆。吕隆面有难色，但吕超说：“现在就好像骑着龙飞在天上，岂可以中途下来！”吕隆于是登位，改元神鼎。 吕隆登位后多杀豪望以图立威，反不得人心，令人人自危。魏安人焦朗遂招请后秦将领姚硕德攻凉，姚硕德听从并率军进攻，兵临姑臧。吕隆派了吕超及吕邈抵抗但大败而还，吕邈更战死，吕隆只得婴城固守。不过，后秦军接着数月的围困令城中原来自东面的人图谋叛变，将军魏益多更煽动人们杀吕隆及吕超【这个魏益多真的是个墙头草】，吕隆遂在事件被揭发后诛杀共三百多家人。当时后凉群臣劝吕隆和后秦请和，吕隆原本不肯，但在吕超劝谏下向后秦请降。姚硕德于是表吕隆为镇西大将军、凉州刺史、建康公。 神鼎二年（402年），北凉沮渠蒙逊率兵进攻姑臧，吕隆请得南凉将秃发傉檀援救，但傉檀未到吕隆就击败蒙逊。蒙逊于是与吕隆结盟，并留下万多斛谷。但其时姑臧谷价已经高达五千文一斗，发生人吃人事件，死了十多万人。百姓因为姑臧整天关上城门而无法出城找食物，于是每日都有数百人请求出城当别人奴婢以求生，吕隆怕他们会动摇人心，遂将这些人都尽数杀害，尸体堆满路上。然而，接着后凉仍不断受到北凉及南凉攻击，吕隆被逼于神鼎三年（403年）借后秦征吕超入侍的机会命其带着珍宝，请后秦派兵迎其离开。秦将齐难等于该年八月到达姑臧，吕隆率众随之东迁长安，吕隆获后秦授散骑常侍，后凉至此灭亡。后秦弘始十八年（416年），受后秦皇帝姚兴子广平公姚弼谋反案牵连，被杀。 吕超在后秦获授安定太守。后秦弘始十八年（416年），姚兴临终时，他的儿子南阳公姚愔计划杀死太子姚泓，事情失败。姚泓捕杀姚愔和参与姚愔密谋的吕隆，姚泓命令齐公姚恢杀掉安定太守吕超。姚恢犹豫很久，才把吕超杀了。 人物与世系 部分事件年表 338年，吕光出生 358年，吕光随苻坚讨伐张平 368年，吕光于上邽参与讨伐符双 370年，吕光随军攻灭前燕，获封都亭侯，后随符重出镇洛阳 378年，符重谋反，吕光听从苻坚命令收捕符重，吕光迁太子右率 379年，吕光帅兵击败李乌，迁步兵校尉 380年，吕光参与讨伐叛乱的符重，后获授骁骑将军 382年，吕光奉命率领7万步兵及五千骑兵整套西域，降服焉耆等西域各国，又击破唯一拒守的龟兹，威震西域 383年，淝水之战，前秦战败，陷入混乱。吕光启程返回中原 385年，吕光军在凉州受阻，吕光杀死凉州刺史梁熙，入主姑臧，自领凉州刺史、护羌校尉 386年，吕光获知苻坚死讯，改元太安，并自称使持节、侍中、中外大都督、督陇右河西诸军事、大将军、凉州牧、酒泉公。同年凉州粮价大涨，发生人吃人事件 387年，吕光杀死了进逼姑臧的张大豫。同年，吕光攻破张掖 389年，吕光称三河王，后改称天王，国号大凉 397年，吕光弟吕延在进攻西秦战事中被杀。同年，吕光听信查验，杀死尚书沮渠罗仇及三河太守沮渠麹粥。罗仇之侄沮渠蒙逊遂反，蒙逊堂兄沮渠男成举兵响应，并推建康太守段业为主，建北凉与后凉对抗 398年，郭黁据东苑叛变，被吕纂攻破，郭黁出走西秦 399年，吕光病重，立太子吕绍为天王，又让吕纂及吕弘分任太尉及司徒。同年，吕光去世 400年，吕弘反叛，被吕纂将焦辨击败。同年，吕纂讨伐南凉失败 401年，吕纂被吕超兵变杀死，吕超拥立吕隆。同年后秦将领姚硕德攻凉，兵临姑臧。吕隆投降，姚硕德于是表吕隆为镇西大将军、凉州刺史、建康公。 402年，北凉进攻姑臧，被吕隆击败。同年姑臧粮荒 403年，吕隆在后秦军队保护下离开姑臧，东迁长安。后凉至此灭亡 416年，吕隆受后秦皇帝姚兴子广平公姚弼谋反案牵连，被杀]]></content>
  </entry>
  <entry>
    <title><![CDATA[后燕]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E5%90%8E%E7%87%95.html</url>
    <content type="text"><![CDATA[概况 后燕（384年-407年或409年）是中国五胡十六国时慕容氏诸燕之一，由鲜卑人前燕文明帝慕容皝第五子慕容垂所建立的政权。 后燕建国之初定都中山【今河北省定州市】，后迁往龙城【今辽宁省朝阳市】。全盛时统治范围“南至琅琊，东讫辽海，西届河汾，北暨燕代”(《读史方舆纪要》)，即今河北、山东、山西和河南、辽宁的一部分。自384年慕容垂称燕王到407年慕容熙被杀（或到409年慕容云被杀），立国凡24年（一说26年）。 《十六国春秋》始称后燕，以别于慕容氏诸燕，后世袭用之。 慕容垂时期 重建燕国 前秦在383年淝水之战大败后，投降前秦的前燕贵族慕容垂【慕容垂于前燕受到排挤，369年出奔前秦。到慕容垂再次起兵建立后燕时，已五十九岁。】在苻坚同意下回到邺城。时丁零族翟斌在洛阳新安一带起兵反秦，镇守邺城苻坚庶长子苻丕拨兵2千给慕容垂，派宗室苻飞龙领兵1千为慕容垂的副手，前去对付翟斌，但慕容垂于行军中袭杀苻飞龙，与前秦正式决裂。 384年正月，慕容垂渡过黄河移至洛阳附近，与翟斌联兵攻洛阳。后引兵东下，在荥阳自称大将军、大都督、燕王，建元燕元元年。后自石门渡黄河，向邺前进，时有众20余万。因苻丕坚守邺城，慕容垂久攻不下，因战争，河北经济受到很大的破坏。到了385年八月，苻丕撤出邺城，退往晋阳，整个河北，皆落入慕容垂手中。386年正月，慕容垂称帝，定都中山，改元建兴，史称后燕。 攻灭西燕 386 年十月，西燕慕容永在长子【今陕西省长子县以西】称帝，改元中兴。由于后燕不容许作为宗室一方的西「僭举位号，惑民视听」，与后燕争夺燕国领导权。在392年消灭翟魏后，出兵攻伐西燕。 393年冬，慕容垂征发步骑兵7万，命丹阳王慕容瓒出井陉关【今河北省井陉县井陉山】，攻晋阳，西燕守将慕容友领兵5万防守潞川。明年春，慕容垂增调司、冀、青、兖四州兵，分兵三路出滏口 【 今河北省磁县西北石鼓山】、壶关、沙亭，西燕分兵拒守。后慕容垂在邺城西南屯兵月余，慕容永怀疑后燕欲从太行山南口进兵，将大部兵力调往轵关。夏，慕容垂率大军出滏口，由天井关向南直趋台壁 【今山西省黎城县西南】，慕容永仓卒集结5万精兵，与后燕军大战于台壁南，西燕军中伏大败，慕容永逃回长子。后燕攻下晋阳，进围长子，八月间灭西燕。 慕容垂灭西燕后，趁东晋衰乱之际，略地青、兖，把疆域向南扩展到今山东的临沂、枣庄一带。 燕魏对峙 386年，拓跋珪建立北魏。起初后燕与北魏的关系本来是友好的，因后燕战马缺乏，屡求于魏，甚至发生扣留北魏使者以求名马的事，两国关系告结。而北魏采取联西燕拒后燕的政策，对付后燕。394年西燕危急时，北魏派兵5万为西燕声援。次年五月，慕容垂命太子慕容宝、赵王慕容麟率兵8万伐魏，遣范阳王慕容德率步骑1.8万为后继。北魏听说燕军北上，把部落、畜产及大军转移至黄河以南(今内蒙古伊克昭盟)，避开燕军。七月，北魏派拓跋遵领骑兵7万，堵塞燕军南归之路，并捕捉后燕使者，切断大军与中山通信的渠道。更散播慕容垂已死的假消息，引起前线燕将猜疑，军心动摇。慕容宝及慕容麟因为慕容麟部将慕舆嵩相信慕容垂死讯而图谋作乱的事件而互相猜疑，终于烧船乘夜撤退。拓跋珪自领2万，进击后燕军，后燕军大败，乱不成军，四、五万兵投降，北魏俘虏了后燕文武将吏数千人，缴获了兵器、衣甲、粮食无数，拓跋珪将后燕降兵全部坑杀于参合陂，慕容宝等单骑逃回。史称参合陂之役。 在《天龙八部》中，慕容博所创武功『参合指』，名称及来自参合陂之战。 慕容宝等逃回中山后，屡请求再次伐魏，慕容德也劝说慕容垂趁自己尚健在时亲征，以免遗留后患。慕容垂接受了他们的意见。396年三月，慕容垂率大军再次伐魏【当时慕容垂已70岁】，击败北魏陈留公拓跋虔，其后慕容垂病情加重，急忙退兵。四月，慕容垂病死。慕容垂此次的北伐，并没有能够挽回后燕军事上的颓势。此后，拓跋珪就挟其三、四十万骑兵，长驱进入中原。 慕容垂确实是一代人杰，可惜后代废柴，断送先人之基业。 唐太宗征辽，行至定州，路侧有一鬼，衣黄衣，立高冢上，神采特异。太宗遣使问之，答曰：“我昔胜君昔，君今胜我今。荣华各异代，何用苦追寻。”言讫不见，问之，乃慕容垂墓。--《太平广记·卷第三百二十八·鬼十三·慕容垂》 慕容宝时期 396年四月，慕容垂病死，子慕容宝继承帝位。后燕在全国重要的战略及政治中心有五处，即中山、龙城、邺、晋阳、蓟。八、九月间，北魏拓跋珪率领40余万大军，攻取晋阳。十一月，攻下常山、信都，河北许多郡县的官员，不是逃亡就是投降。这时慕容宝在中山有步兵12万、骑兵3.7万，悉数出抗拒魏军，大败而还。魏军进军包围了中山，397年三月，慕容宝率军突围，退往中山。十月，魏军攻下中山，后燕官吏兵投降两万余人，后燕的疆域被切断为南、北二部。 一般来说，主君于军中病亡时，会选择秘不发丧的做法，以免敌人趁机进攻。如393年，后秦君主姚苌死后，其子姚兴秘不发丧，仍然保持对前秦的攻势。而慕容垂死后后燕没有对死讯保密（或者保密失败），导致北魏几乎立即来攻，后燕随即一蹶不振。 398年，慕容德在滑台称燕王，建立南燕。兰汗杀死慕容宝，自称大将军、大单于、昌黎王。慕容盛杀兰汗自立，后来讨伐高丽及库莫奚有功，然因治下太严，刑罚残忍，在401年为大臣段玑所暗杀。鲜卑贵族立慕容垂少子慕容熙为帝，他采行了胡汉分治的政策来统治国家。这时的后燕疆域，仅有辽西一带，疆域狭小，民户不多，但他却大兴土木，营建宫苑殿阁，给人民带来无穷的灾难。407年，冯跋兄弟趁慕容熙送葬苻后时起事，推高云（慕容云）为燕王，杀死慕容熙。409年高云的禁卫离班、桃仁杀死高云，冯跋称燕天王，后燕灭亡。 部分事件年表 369年，慕容垂受到慕容评忌惮，出奔前秦。 383年，淝水之战。同年，慕容垂杀死符飞龙，与前秦决裂。 384年，慕容垂攻符丕驻所邺城。 385年，苻丕撤出邺城，整个河北落入慕容垂之手。 386年，慕容垂称帝，定都中山。同年，西燕慕容永在长子称帝。同年，拓跋珪建立北魏。 392年，后燕消灭翟魏，出兵西燕。 393年，后燕灭前燕。 395年，后燕伐北魏，被击败，损失惨重，拓跋珪将后燕降兵全部坑杀于参合陂。 396年，慕容垂亲征再次伐北魏，慕容垂与北伐途中病死。慕容垂病死之后，北魏拓跋珪率领 40 万大军，大举攻燕。魏军攻下后燕都城中山，将后燕疆域分割为南北两部。 398年，慕容德在滑台称燕王，建立南燕。同年，慕容宝被兰汗杀死。慕容盛杀兰汗自立。 401年，慕容盛为大臣段玑所暗杀。鲜卑贵族立慕容垂少子慕容熙为帝。 407年，冯跋兄弟推慕容云为燕王，杀死慕容熙。 409年，高云的禁卫离班、桃仁杀死高云，冯跋称燕天王，后燕灭亡。]]></content>
  </entry>
  <entry>
    <title><![CDATA[后赵]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E5%90%8E%E8%B5%B5.html</url>
    <content type="text"><![CDATA[概况 333年后赵、东晋、成汉等对峙割据图，为后三国时代。 因石勒统治地区为战国时赵国故地，因此刘曜封其为赵王，立国即以此为号。为别于先建国的前赵，故史称“后赵”，又以其王室姓石，又称“石赵”。 后赵的建立 在晋怀帝末年反晋浪潮中，石勒投附在并州刺史部的南匈奴贵族刘渊为部将，屡立战功，势力强盛。308年10月，刘渊正式称帝，建国号“汉”，（刘曜后改为赵），建都平阳【今山西临汾】年号为永凤。318年，国丈靳准杀死隐帝刘粲夺权，自立为汉天王。镇守长安的刘粲叔父刘曜得知平阳有变，自立为皇帝，派遣军队至平阳，族灭靳氏，迁都到长安。与此同时，石勒亦参与讨伐靳准，后来试图挑起城中变乱促其投降的计划失败，导致靳明掌权并倒向刘曜，石勒大怒，攻破平阳城。319年，刘曜在长安改国号“汉”为“赵”，史称前赵。同年，石勒在襄国【今河北邢台】自称大单于、赵王，与前赵决裂，史称后赵。329年石勒灭前赵，次年称帝。 石勒生平 石勒为羯族人，生于264年，字世龙，原名㔨【bèi】，小字匐勒。石勒出身不高，出身羯胡，为南匈奴羌渠人。其祖先为匈奴分支部落的贵族。石勒原没有汉文姓名，其姓与名皆是由牧人帅汲桑所起。 羯人的起源不详，可能起源自小月氏，而历史学家陈寅恪认为可能起源于中亚康居。羯人能够位列五胡之一，皆因石勒功绩。 奴隶出身 太安二年（303年），并州发生大饥荒，石勒与一众胡人逃散，于是去依靠甯驱。当时北泽都尉刘监打算将他卖掉，幸得甯驱协助才没有成事。之后石勒暗中改投都尉李川，路上遇见郭敬，于是向他哭诉饥寒之苦。郭敬听后伤心流涕，送他衣服和食物。当时石勒向郭敬建议诱一众胡人到冀州吃粮，借故卖掉他们换取金钱，既可解诸胡饥困，亦能获利。而同时建威将军阎粹说服并州刺史司马腾迁诸胡到太行山以东地区贩卖，以获得军事资本，于是司马腾就派人到冀州捕捉一众胡人，连石勒都被抓着。当时负责捕捉胡人的张隆多次殴打石勒，而且路上常有人饥饿或病倒，石勒全靠郭敬亲族郭阳和郭时的资助才成功到冀州。到冀州后石勒被卖给师懽为奴，师懽却因其仪表堂堂，气质出众，让他做了自己的佃客。 因为这段经历，石勒被认为是中国史上唯一以奴隶出身当上皇帝的人。 当时师懽家在牧苑侧，石勒于是与牧帅汲桑【茌平（今山东茌平西南）牧民的首领】往来，更以自己有相马的能力而自荐给汲桑。后结集王阳、夔安、支雄、冀保、吴豫、刘膺、桃豹、逯明、郭敖、刘征、张曀仆、呼延莫、郭黑略、张越、孔豚、赵鹿、支屈六十八个壮士一同号称为“十八骑”，并与他们抢掠园林，以财宝巴结汲桑。 跟随汲桑 永兴二年（305年），成都王司马颖被河间王司马颙废去官位和皇太弟身份，因司马颖曾镇邺城，很多河北人都可怜司马颖的遭遇。司马颖旧将公师藩于是自称将军，以司马颖之名在赵、魏之间举兵，聚众数万，汲桑与石勒亦率数百骑师附公师藩。此时，汲桑才命石勒以石为姓，以勒为名。公师藩则拜石勒为前队督，并与他进攻守邺城的平昌公司马模，却被苟晞、丁绍和司马模部将冯嵩击败。次年，公师藩在白马县打算南渡黄河，被苟晞击杀。 公师藩死后，石勒与汲桑逃回茌平牧苑，石勒被汲桑命为伏夜牙门，率领牧人劫掠郡县的囚犯，又招纳潜居山间的亡命之徙。汲桑于是在永嘉元年（307年）自称大将军，声称要为上一年被杀的司马颖报仇。汲桑以石勒为前驱，屡次取胜，于是署石勒为讨虏将军、忠明亭侯。石勒即随汲桑进攻邺城，担任前锋都督，大破冯嵩，并且长驱直进，于五月攻陷邺城。汲桑在邺城杀司马腾和万多个兵民，焚毁邺城宫室和抢掠城中妇女珍宝后才离开。 石勒及后又跟汲桑进攻幽州刺史石鲜。石勒在乐陵击杀石鲜后又击败率五万兵营救石鲜的乞活军将领田禋，并与苟晞相持于平原、阳平之间数月，期间发生三十多场战事，互有胜负，迫使太傅司马越率兵在官渡为苟晞声援。石勒和汲桑于九月大败给苟晞，于是收拾余众，打算投奔刘渊建立的汉国，但又于赤桥败于冀州刺史丁绍，石勒于是逃到乐平。后汲桑更在乐陵被晋兵乞活军所杀【《晋书》卷五，“永嘉元年，……,十二月戊寅，并州人田兰、薄盛等斩汲桑于乐陵。”】。 投奔汉国 石勒投汉国后，于十月就成功让据守上党的㔨督和冯莫突归降汉国，刘渊于是封石勒为辅汉将军、平晋王。后又因据守乐平的乌桓人张伏利度不肯加盟汉国，石勒于是假称得罪刘渊而投奔张伏利度，并与他结为兄弟，与其胡人部众一同抢掠郡县，所向无敌，于是众人畏服。石勒在众人心附自己后乘宴会抓着张伏利度，让部众推举自己为主。石勒后释放张伏利度而率领其部众归附汉国。刘渊于是加石勒为督山东征讨诸军事，并让这些胡人部众跟随他。 刘渊派兵向外扩张，于永嘉二年（308年），派石勒领兵东侵。石勒于九月攻陷邺城，征北将军和郁逃走。十月刘渊称帝，授予使持节，平东大将军。不久石勒又率三万进攻魏郡、汲郡和顿丘，五十多个由当地人集结的壁垒望风归附，于是获假垒主将军、都尉印绶。后更杀魏郡太守王粹和冀州西部都尉冯冲，并击败杀害乞活军将领赦亭和田禋。刘渊于是授予石勒安东大将军、开府。石勒于永嘉三年（309年）进攻钜鹿和常山，部众增加至十多万人，更有文士加入，以他们成立“君子营”，石勒以汉人张宾为谋主，刁膺、张敬为股肱。因军事力量强大，在石勒派张斯游说之下，并州的胡羯大多亦跟从石勒。 陷冀州郡县堡壁百余，众至十余万,其衣冠人物集为君子营。乃引张宾为谋主。始署军功曹，以刁膺、张敬为股肱，夔安、孔苌为爪牙，支雄、呼延莫、王阳、桃豹、逯明、吴豫等为将率”(《晋书·石勒载记》)。 刘渊之后派兵进攻壶关，石勒后被任命为前锋都督，击破刘琨派来救援壶关的军队，助汉国攻陷壶关。九月，晋司空王浚派祁弘与段务勿尘在飞龙山进攻石勒，石勒大败，退屯黎阳，但仍能分派诸将攻打未及叛变的部众，收降三十多个壁垒，并置守宰安抚。十一月，石勒进攻信都，杀害冀州刺史王斌。当时，王浚命裴整和王堪领兵讨伐石勒，石勒于是立刻回军抵御。石勒到黎阳后，裴宪抛弃军队逃到淮南，王堪则退守仓垣。刘渊于是授命石勒为镇东大将军，封汲郡公，石勒辞让封爵。 永嘉四年（310年），石勒南渡黄河，攻陷白马后与王弥一同进攻徐、豫、兖三州。不久更攻下鄄城和仓垣，并北渡黄河进攻冀州诸军，投降他的平民多达九万多人。及后又协助刘聪等人进攻河内，并进攻冠军将军梁巨，晋怀帝派兵援救。梁巨因兵败请降，石勒不许，最终坑杀万多名降卒并杀死梁巨，援兵亦退还。此战战果使得河北各个自守的堡垒都震惊，纷纷送人质到石勒处。同年刘渊逝世，刘聪杀兄刘和继位，任命石勒为征东大将军、并州刺史、汲郡公。石勒这次辞让征东大将军。随后便会合刘粲、刘曜、王弥大军进攻洛阳，直入洛川。石勒又进攻仓垣，但被守将王赞击败。 势力壮大 石勒后来改攻南阳，早前在荆州叛变的雍州流民王如、侯脱和严嶷等都感到恐惧，于是派了一万兵屯守襄城以作抵抗。但石勒到后击败守军并将部众全数俘虏，进驻宛城以北。当时侯脱据有宛城而王如守穰县，王如怕石勒进攻，于是以珍宝贿赂石勒，与他结为兄弟；同时又因王如与侯脱不睦，于是劝石勒进攻侯脱。严嶷知道石勒攻宛后领兵救援，但石勒十二日便攻陷宛城，严嶷赶不及而直接向石勒投降。石勒诛杀侯脱，囚禁严嶷，呑并了二人部众，军力愈为强盛。 石勒于是进一步南侵，进攻襄阳并循汉水攻陷三十多个处于江西的壁垒。石勒留刁膺守襄阳后就率三万精锐骑兵还攻王如，但因怕王如强盛，于是改攻襄城。王如知道后就命弟弟王璃率兵，假称犒军而袭击石勒，但遭石勒击灭。石勒至此有雄据长江、汉水一带的意愿，张宾虽然反对并劝他北归但都不听。 永嘉五年（311年），驻镇建业的琅琊王司马睿见石勒南侵荆州，于是派王导率兵讨伐。而石勒军粮不继，更加因疫症损失大半士兵。石勒于是接纳张宾建议，焚毁辎重，收好粮食和卷起盔甲，轻兵渡过沔水并进攻江夏，然后北归，先攻陷新蔡，杀新蔡王司马确，后再攻陷许昌。 永嘉五年（311年）三月，率领行台和二十多万晋兵讨伐石勒的司马越死在项县，大军于是在王衍及襄阳王司马范带领下护送司马越灵柩回东海国。四月，石勒率轻骑追击晋军，终在苦县宁平城追上大军，并杀败王衍所派的将军钱端。晋兵在钱端败死后溃败，被石勒包围并射杀，士兵在混乱中互相践踏，全军覆没。石勒诛杀包括王衍以内随行的官员和西晋宗室。不久石勒在洧仓追上司马越世子司马毗由洛阳东归的部众，又将司马毗及宗室王等人杀害。 随后，刘聪派呼延晏率大军进攻洛阳，石勒领三万骑兵到洛阳与大军会合，攻陷洛阳，俘虏晋怀帝。战后石勒将战功归于王弥和刘曜，于出屯许昌。七月，石勒领兵攻晋大将军苟晞所驻蒙城，生擒苟晞并任用为左司马。刘聪于是以石勒为幽州牧。 苟晞被擒后，王弥写了一封言辞卑屈的书信祝贺石勒，石勒知道王弥忌惮自己，打算引自己到青州然后杀害。石勒于是听从张宾的建议：乘王弥当时兵力减弱而消灭他。不久石勒就听从张宾的建议，率兵救援与乞活军相持不下的王弥以换取王弥的信任，随后就借宴会的机会袭杀王弥，吞并了他的部众，并假称王弥谋反。刘聪知道石勒杀王弥后大怒，但又因怕他生了异心而不敢处罚，反而加授镇东大将军、督并、幽二州诸军事、领并州刺史。 后来晋并州刺史刘琨将早年与石勒失散的石勒生母以及侄儿石虎送返，并授予侍中、车骑大将军、领护匈奴中郎将、襄城郡公给石勒以作招降。但石勒拒绝，仅厚待刘琨使者和送名马及珍宝给刘琨以作谢礼。 永嘉六年（312年），石勒在葛陂建屋宇，推广耕作，营造船只，打算攻略建业。但当年正遇上连绵三个月的大雨，司马睿知道石勒的行动后更招集江南的兵众会聚寿春以作抵御。石勒军中缺粮和有疫症，大量士兵死亡，而且多次收到来自司马睿的讨伐文告，似乎即将攻来，于是召集众人讨论。最后石勒接纳张宾的建议，放弃留驻南方而北据邺城三台，经营河北，并以该处作根据地发展势力。 石勒于是先将辎重北归，又派石虎领兵攻寿春以防晋军追击辎重，最终晋兵虽然击败石虎，但仍因怕石勒有伏兵而只驻守寿春。然而石勒北归时经过地方都坚壁清野，石勒试图掠取物资都一无所获，于是军中有大饥荒，士兵相食。到东燕郡时因引诱当地建壁垒自守的向冰并成功在棘津击败向冰的军队，从而获得军需品，重振军力，得以长驱直进，向邺城进发。 邺城守将为晋北中朗将刘演。刘演在得知石勒将要攻击，便加紧守城，然而其部将临深和牟穆率部众向石勒投降。石勒诸将本打算强攻，不过石勒在张宾的建议下，暂时放弃攻取而让刘演自己溃败。于是建议石勒先消灭大司马、领幽州刺史王浚和并州刺史刘琨这两个大敌，并提出邯郸和襄国两处作为取邺城前的临时根据地。石勒听从，率军进据襄国。 石勒驻镇襄国后，就上表前赵君主刘聪陈述驻镇当地的意图，又分遣诸将进攻冀州各郡县的垒壁，使他们大多都归附，并运粮给石勒。刘聪收到上表后署石勒为使持节、散骑常侍、都督冀幽并营四州杂夷、征讨诸军事、冀州牧，进封上党郡公，开府、幽州牧、东夷校尉如故。 石勒后进攻王浚将领游纶、张豺所驻的苑乡，遭王浚派兵联同段部鲜卑的段疾陆眷、段末柸和段匹䃅所率部众共五万多人前来讨伐。石勒屡次败于段疾陆眷，更发现对方打算攻城，在张宾及孔苌的建言下，石勒在北城城内设立二十多道突门，并在门内藏伏兵；期间不出战以示弱，待对方松懈来攻时，突门中的伏兵出击，出其不意。石勒最终因而成功生擒段部鲜卑中最勇悍的段末柸，逼得段疾陆眷退兵。石勒之后派使者向段疾陵眷求和，并与其结为兄弟。随着段疾陆眷退兵，王浚军不能独留，石勒于是解除了危机。同时，石勒厚待并送还段末柸的行动令他归心于石勒，削弱了一直支持着王浚的鲜卑力量。游纶、张豺在战后也向石勒请藩。 建兴元年（313年），石勒派石虎攻陷邺城，当地流人都向石勒归降。石勒后又派孔苌攻定陵，杀兖州刺史田徽，王浚所任的青州刺史薄盛归降石勒，山东地区各个郡县相继被石勒夺取，刘聪于是升石勒为侍中、征东大将军。一直支持王浚的乌桓也背叛王浚，暗中归附石勒，使得王浚势力更弱。 永嘉之乱后，王浚就假立太子，设立行台，自置百官，更打算自立为帝，骄奢淫虐。石勒打算消灭王浚，吞并其势力，张宾建议石勒假意投降王浚。石勒于是卑屈的向王浚请降归附，在王浚使者来时特意让弱兵示人，并且故作卑下，接受王浚的书信时朝北向使者下拜和朝夕下拜王浚送来的尘尾，更假称见尘尾如见王浚；又派人向王浚声称想亲至幽州支持王浚称帝。王浚于是完全相信石勒的忠诚。然而，石勒一直派去作为使者的王子春却为石勒刺探了王浚的虚实，让石勒做好充足准备。 建兴二年（314年），石勒正式进兵攻打王浚，乘夜行军至柏人县，接受张宾的建议，利用王浚和刘琨的积怨，写信并送人质向刘琨请和，声称要为他消灭王浚。因此刘琨最终都没有救援王浚，乐见王浚被石勒所灭。石勒一直进军至幽州治所蓟县，先以送王浚礼物为由驱赶数千头牛羊入城，阻塞道路，之后更纵容士兵入城抢掠，并捕捉王浚，数落王浚不忠于晋室，残害忠良的罪行。石勒命将领王洛生押解王浚到襄国处斩，又尽杀王浚手下精兵万人，擢用裴宪和荀绰为官属。石勒留蓟两日后就焚毁王浚宫殿，留刘翰守城而返。 石勒回到襄国后将王浚首级送给刘聪，刘聪于是任命石勒为大都督、督陕东诸军事、骠骑大将军、东单于，并增封二郡。刘聪更与建兴三年（315年）赐石勒弓矢，加崇为陕东伯，专掌征伐，他所拜授的刺史、将军、守宰、列侯每年将名字及官职上呈就可，又以石勒长子石兴为上党国世子。 建兴四年（316年），石勒率兵在玷城围困晋乐平太守韩据，韩据向刘琨求援。刘琨因不久以前代国内乱而获得拓跋猗庐旧部箕澹及卫雄率代国晋人和乌桓人加入而大大强化了军力，于是打算借此讨伐石勒，因此不顾箕澹和卫雄的劝阻，动用所有军力，派箕澹率二万作前锋，自己则进屯广牧为箕澹声援。石勒以箕澹部众远道而来而筋疲力竭，而且乌合之众，号令不齐，不难应付，决意迎击。石勒于是在山中设下伏兵，自己率兵与箕澹作战，然后向北退兵引箕澹深入，与伏兵夹击箕澹而大败对方，箕澹北逃到代郡而韩据则弃城奔刘琨。此战震动并州，守着治所阳曲的刘琨长史李弘竟以并州投降石勒，使得刘琨进退失据，唯有投奔幽州刺史段匹䃅。 自立为王 太兴元年（318年），刘聪患病，征石勒为大将军、录尚书事，受遗诏辅政，但石勒不受。刘聪于是又命石勒为大将军、持节钺，都督等如故，并增封十郡，又不受。不久刘聪死，太子刘粲继位后不久便被靳准所杀，自称汉天王。石勒于是命张敬率五千兵作前锋，自己亲率五万兵讨伐靳准。石勒进据襄陵北原，羌羯四万多个部落向石勒投降，靳准数度挑战都不能攻破石勒的防御。十月刘曜北上讨伐靳准，并于赤壁（今山西河津县西北赤石川）即位为帝，任命石勒为大司马、大将军，加九锡，增封十郡，进爵为赵公。 太兴二年（319年）二月，石勒派左长史王脩献捷报给刘曜，刘曜于是授予石勒太宰、领大将军，进爵赵王，并加一系列特殊礼待，如同昔日曹操辅东汉的先例。刘曜让王脩返回襄国后，石勒舍人曹平乐却对刘曜说王脩前来的的目的是要探刘曜的虚实，王脩返回报告后，石勒就会进袭刘曜。当时刘曜实力的确大为损耗，听到曹平乐的话后十分害怕王脩会向石勒报告他的虚实，于是追还王脩并杀害王脩，原本授予石勒的官位、封爵及礼遇亦搁置。王脩副手刘茂却成功逃脱，到石勒于三月回到襄国时就报告王脩之死，石勒大怒：“我事奉刘氏，尽心做得比起人臣的本分更有余了。他们的基业都是我打下来的，今日得志了竟想来谋算我。赵王、赵帝，我自己也能给自己，哪用得着由他们赐予！”自此与前赵结了仇怨。 当年十一月，石勒称大将军、大单于、领冀州牧、赵王，于襄国即赵王位，正式建立后赵，称赵王元年。 攻略北方 虽然石勒于建兴二年（314年）杀害王浚，取得蓟县，但不久石勒所命驻守蓟县的刘翰背叛石勒而归附段匹䃅，段匹䃅于是进据蓟县。然而，因段匹䃅多次与段末柸相攻，又于太兴元年（318年）杀死刘琨，使得大批胡人和汉人投奔邵续[参 7]、段末柸或石勒，导致实力大减。段匹䃅于次年因石勒将领孔苌进攻幽州，不能自立，因而投奔晋冀州刺史邵续还据有的厌次。至太兴三年（320年）段末柸再击败段匹䃅，段匹䃅与邵续联手追击段末柸并击败他，随后就与弟弟段文鸯北攻段末柸弟弟驻守的蓟城。此时，石勒知道邵续势孤，于是派石虎进攻厌次，最终生擒出城迎击的邵续，但厌次城尚由邵续子邵缉等人据守。段匹䃅此时回军，尚离厌次城八十里时就听闻邵续被擒的消息，于是部众溃散，石虎也前来袭击，只因段文鸯奋战才得以进入厌次城。 太兴四年（321年），石勒又派石虎和孔苌进攻厌次，段文鸯力战被擒，段匹䃅无力抵抗，试图南奔东晋又不行，亦被石虎所捕。至此，晋朝于河北的各个藩镇皆被攻陷。 建兴元年（313年），司马睿以祖逖为奋威将军、豫州刺史，祖逖由此开始收复中原的行动，并进据谯城。太兴二年（319年）豫州一坞主陈川与祖逖相争但不敌，于是向石勒投降，祖逖因此讨伐陈川，石勒则派石虎率兵救援，将祖逖击败，祖逖败退至淮南。但祖逖于下一年就发动反击，击败守着陈川故城的将领桃豹，并多次邀击当地的后赵军队，当地留戍的后赵兵镇深为困扰，很多都归附祖逖。 因为祖逖擅于安抚，不但黄河以南地区的人民归附祖逖，连石勒根据地河北的坞主也向祖逖报告后赵的情况，以至于石勒不敢以军事力量强攻豫州，因而决定与祖逖修好，又允许两地通商。当时祖逖牙门童建杀新蔡内史周密归降石勒，石勒却杀死童建并将首级送交祖逖。而祖逖也不接纳背叛后赵而归降的人，因此两国边境安定，兖、豫二州人民得以休息，但不少人其实都有双重身份，同时归属东晋与后赵。 实际上，祖逖一直未忘北伐，他将通商获得的利钱用来准备军需物资，而且又修缮虎牢城，瞭望四方，并建立壁垒，作为守护豫州土地的堡垒。但壁垒未建成祖逖就死去。永昌元年（322年），石勒因祖逖已死而再度南侵，接替祖逖的祖约不能抵抗，南退至寿春，石勒于是留兵驻屯豫州，豫州再次混乱，再次进入后赵的势力范围。同时石勒派兵侵扰徐、兖二州，东晋驻守当地的部队都只有南退，很多当地坞主都向石勒归降。 太宁元年（323年），石勒派石虎攻灭一直割据青州的曹嶷，尽有青州。 攻灭前赵 太宁二年（324年），后赵司州刺史石生进攻前赵河南太守尹平并杀害他，而且掠夺了新安县五千多户人。自此开始两国之间的战事，作为两国边界的河东和弘农两郡之间沦为战场。次年西夷中郎将王腾杀并州刺史崔琨并以并州归降前赵，屡败于石生的晋司州刺史李矩、颖川太守郭默等也遣使依附前赵，于是前赵大举进攻后赵。但前赵所派的刘岳被石虎击败，遭生擒和坑杀九千余人，王腾也被石虎攻灭，李矩等被击败而南奔东晋，大量部众归降后赵。战后后赵尽有司、豫、徐、兖四州之地。 太和元年（328年），石虎攻蒲阪，前赵帝刘曜亲率全国精兵救援蒲阪，大败石虎，于是乘势进攻石生镇守的洛阳，以水灌城，同时又派诸将攻打汲郡和河内郡，后赵举国震惊。石勒见此，不顾程遐【外戚，太子石弘的舅舅】的劝阻执意亲自救援洛阳，于是命桃豹、石聪、石堪等到荥阳会合，自己领兵直攻洛阳金镛城。及至十二月，石勒与后赵诸军于成皋集合，发现刘曜竟不设守军，于是轻兵潜行。刘曜直至石勒渡过黄河后才开始准备防御，从前线捕获的羯人口中知道石勒亲率大军前来进攻后更为害怕，于是解围而于洛西列阵。石勒在开始进攻之时曾说：“刘曜设大军于成皋关防御，是他的上策；列兵于洛水阻截则次之；坐守洛阳，就会让我生擒了。”见刘曜列阵于洛西，石勒十分高兴，认为必胜无疑，随后就与石虎及石堪、石聪分三道夹击刘曜，最终大败前赵，更生擒刘曜，押送到襄国。 次年，留守长安的前赵太子刘熙知道刘曜被擒后大惊，于是放弃长安而西奔上邽，各征镇都弃守防地跟随，导致关中大乱，前赵将领以长安城归降后赵，石勒又派石虎进攻关中的前赵残余力量。终于当年八月，前赵刘胤率大军反攻长安时被石虎击败，前赵一众王公大臣都被石虎所捕，同年石勒亦杀刘曜，前赵亡。石勒又于咸和二年（327年）派石虎击败代王拓跋纥那，逼得对方徙居大宁回避其军事威胁。至此后赵除前凉、段部鲜卑的辽西国及慕容鲜卑的辽东国三个政权外几乎占领整个中国北方。 太和三年（330年）二月，石勒称大赵天王，行皇帝事，并设立百官，分封一众宗室。至九月，石勒正式称帝。 称帝登位 石勒称帝后，于次年四月到邺城，打算营建邺城新宫，如张宾昔日所言，以其作为新的都城。当时廷尉续咸大力反对，石勒坚决不纳；后中山郡有洪水灾害，有百多万根大木头随水冲到堂阳，石勒视此为上天协助自己营建邺都，于是正式施行，自己亲自视察工程。 石勒在称帝时立了儿子石弘为皇太子，石弘爱好文章，对儒士亲敬，并没有石勒的强悍。然而当时任太尉、尚书令石虎因为战功显赫，掌有重兵和实权，徐光和程遐都认为一旦石勒去世，石弘不能驾驭石虎；同时又因石虎怨恨二人，二人担心一旦石虎夺权会诛灭二人及其宗族，于是多次向石勒进言，要求强化太子权力，让太子亲近朝政，并削弱石虎权力。石勒最终命太子省批核上书奏事，并由中常侍严震协助判断，只有征伐杀人的大事才送交石勒裁决。于是严震权力高涨，石虎则失势，心有不满。但石勒始终没有听从二人除去石虎的建议。 建平三年（332年），石勒到邺城，到石虎的府第中，石勒知道石虎的不满，于是允诺皇宫建成后会为他建设新府第，以此作安抚。但其实石虎自太和三年（330年）石勒称天王时将大单于位封给石宏就十分不满；对于咸和元年（326年）石勒让石弘驻镇邺城和修建邺城三台时逼迁其家室的事也怀恨在心。 石勒于建平四年（333年）患病，石虎入侍并诏不许亲戚大臣见石勒，因此无人知道石勒的病况。后又矫诏召命石勒用以防备石虎而出为外藩的秦王石宏及彭城王石堪到襄国，将他们留在襄国，即使石勒知道后立刻命二人回到驻地，石虎仍然不让他们回去，更骗石勒说二人已在归途上。七月戊辰日（8月17日），石勒逝世，享年六十岁。庙号高祖，谥号明皇帝，葬于高平陵。 石勒曾问大臣徐光他能比作昔日哪位君主，徐光说石勒神谋武略，比汉朝开国君主刘邦更高，而刘邦以后再没有人能和石勒比较。石勒笑言徐光说得太夸张，自我评价道：“我若果与刘邦同时，就当作他的臣下，与韩信、彭越皆为其将；若果与汉光武帝刘秀同时，就会与他争夺中原，不知鹿死谁手。大丈夫行事，应该磊磊落落，如日月皎洁，绝不可以像曹操、司马懿那样欺负孤儿寡妇，用奸计夺取天下。” 石弘时期 后赵建平四年（333年）石勒卒。其皇位由儿子石弘继承。因石虎掌握兵权势大，石勒妻刘太后与养子彭城王石堪拥立石勒子南阳王石恢欲举兵反对石虎，不幸事泄，刘太后被杀，石堪被捕活活烤死，石恢被召回。咸康元年（334年）十月石弘持玺绶向石虎表明愿意禅位，石虎拒绝。十一月，石虎称居摄赵天王，石弘被废为海阳王，同年石虎杀海阳王石弘、弘母程氏、石弘弟秦王石宏、南阳王石恢。 石虎时期 335年石虎迁都邺城（今河北临漳境内）。石虎非常残暴，征役无时，大兴土木，荒淫无度，社会矛盾十分尖锐。337年4月11日（二月辛巳），石虎称大赵天王，349年2月4日（正月初一辛未朔）正式即皇帝位。同年5月26日（四月己巳），患病而死。同年后赵爆发梁犊领导的雍凉戍卒举兵，一度攻克长安，有众40余万。同年石虎卒，其子为争帝位互相残杀。 后石虎时期 石虎死后，其养孙冉闵大杀石氏子孙及羯胡，次年（350年）自立为帝，改国号魏，史称冉魏。石虎子新兴王石祗在襄国称帝，与冉魏对抗。后石祗为得前燕相助，降称赵王。351年，石祗被手下刘显所杀，后赵亡。次年，其他幸存的石氏子孙投降东晋，也被杀及诛灭。 部分事件年表 264年，石勒出生。 303年，并州饥荒，石勒依靠甯驱，又改投李川。同年被贩卖给为奴隶。石勒遇到牧帅汲桑。 305年，成都王司马颖被河间王司马颙废去官位和皇太弟身份。汲桑与石勒率数百骑师附司马颍旧将公师藩。此时，汲桑才命石勒以石为姓，以勒为名。 306年，公师藩在白马县被苟晞击杀。 307年，汲桑自称大将军，声称要为上一年被杀的司马颖报仇。五月攻陷邺城。但九月败给苟晞。后汲桑在乐陵被晋兵所杀，石勒投汉国（刘渊）。 308年，石勒于九月攻陷邺城。十月刘渊称帝。刘渊授予石勒安东大将军、开府。 309年，石勒以汉人张宾为谋主，刁膺、张敬为股肱。刘渊授命石勒为镇东大将军，封汲郡公，石勒辞让封爵。 310年，石勒南渡黄河，进攻徐、豫、兖三州。又北渡黄河，攻略冀州击败晋冠军将军梁巨，威震河北。同年刘渊病逝。刘聪杀兄刘和继位，任命石勒为征东大将军、并州刺史、汲郡公。石勒辞让征东大将军。石勒进一步南侵，陆续攻陷襄城，宛城。 311年 石勒与王导对峙。石勒军粮不继，于是听从张宾建议，渡过沔水并进攻江夏，然后北归。途中先攻陷新蔡，再攻陷许昌。 三月，石勒在苦县宁平城追上司马越灵柩队伍，石勒歼灭晋军。 随后，石勒与呼延晏汇合，攻陷洛阳，俘虏晋怀帝。 七月，石勒生擒苟晞并任用为左司马。刘聪于是以石勒为幽州牧。 石勒消灭王弥，声称其谋反。刘聪忌惮石勒实力，反而加授镇东大将军、督并、幽二州诸军事、领并州刺史。 晋并州刺史刘琨将早年与石勒失散的生母以及侄儿石虎送返。石勒拒绝刘琨的招安。 312年，石勒放弃驻留南方，转而经营河北。 313年，石勒派石虎攻陷邺城。 314年，石勒攻打王浚，生擒王浚并送到襄国处斩。 316年，石勒伏击消灭刘琨助理，震动并州。刘琨投奔幽州刺史段匹䃅。 318年，刘聪死。国丈靳准杀死隐帝刘粲夺权。十月，刘曜称帝，任命石勒为大司马、大将军，加九锡，增封十郡，进爵为赵公。 319年，刘曜大封石勒，但随即返回，并杀死石勒所派使者。刘曜与石勒反目。十一月，石勒称大将军、大单于、领冀州牧、赵王，于襄国即赵王位，正式建立后赵，称赵王元年。 321年，石勒攻陷晋朝在河北的所有藩镇。 313年，祖逖开始北伐，双方互有攻伐。后双方决议修好，边境安定。 321年，祖逖病逝。 322年，石勒再次南侵，攻陷豫州。 323年，石勒派遣石虎攻灭割据青州的曹嶷。 324年，后赵与前赵开战。前赵被击败，战后后赵尽有司、豫、徐、兖四州之地。 328年，石虎进攻蒲阪，被刘曜击败。刘曜反攻洛阳。石勒亲自救援洛阳，击败刘曜并生擒之，押送到襄国。 329年，前赵太子刘熙放弃长安西奔上邽。前赵将领以长安城归降后赵。前赵的反攻被石虎击败。同年石勒杀死刘曜。前赵亡。 330年，石勒正式称帝。 331年，后赵前在邺城兴建都城。 333年，石勒患病，石虎入侍并诏不许亲戚大臣见石勒。七月石勒病逝，其子石弘继承皇位。同年，石勒妻刘太后与养子彭城王石堪拥立石勒子南阳王石恢欲举兵反对石虎，不幸事泄，刘太后被杀，石堪被捕活活烤死，石恢被召回。 334年，石弘表明愿意禅位，石虎拒绝。十一月石虎废石弘为海阳王，自己称居摄赵天王。同年石虎杀海阳王石弘、弘母程氏、石弘弟秦王石宏、南阳王石恢。 337年，石虎称大赵天王。 349年，2月4日，石虎正式即皇帝位，同年5月26日，病死。同年后赵爆发梁犊领导的雍凉戍卒举兵，一度攻克长安，有众40余万。石虎死后，其子为争帝位互相残杀。 350年，石虎养孙冉闵自立为帝，改国号为魏。石虎子新兴王石祗在襄国称帝，与冉魏对抗。后石祗为得前燕相助，降称赵王。 351年，石祗被手下刘显所杀，后赵亡。 352年，幸存石氏子孙投降东晋，被杀。 人物与世系 若干问题的研究 石勒为什么没有除掉石虎 这篇文章来自知乎上 泪痕春雨 的回答。 石勒曾说：“大丈夫行事当礌礌落落，如日月皎然，终不能如曹孟德、司马仲达父子，欺他孤儿寡妇，狐媚以取天下也。” 皇权政治下的历史书，大多喜欢宣扬石勒这番大言不惭的豪言壮语；却总喜欢模糊石勒说这些豪言壮语的时代背景。 石勒说这番话时是公元 332年 ，一年后（公元333年）石勒就死了。石勒刚死，他的“孤儿寡母”就开始被别人欺负了。又过了一年（公元334年），石勒的皇后（刘氏）、宠妃（程氏）就都人杀死了。当然了，他的儿子也一个不剩的全被人杀死了。皇帝都希望自己的家族，可以一世、二世、三世、乃至万世的统治天下。问题是，从始皇帝发出这种豪言后，这种豪言就已成了一种笑谈。始皇帝尸骨未寒，他的儿子、女儿，就已被赵高、李斯屠杀殆尽了。 “于是群臣诸公子有罪，辄下高，令鞠治之。杀大臣蒙毅等，公子十二人僇死咸阳市，十公主矺死于杜，财物入于县官，相连坐者不可胜数。” 秦始皇还有一个儿子（公子高），面对这种情景想逃跑；却害怕因此牵制全家人；于是只有主动上书请求自杀。 秦始皇还有三个儿子（公子闾兄弟三人），则被赐死。 当然了，秦始皇帝的长子扶苏早在二世当皇帝前，就被赐死了。见《史记、秦始皇本纪》，《史记、李斯列传》）而后来秦二世，也被赵高派人杀死了。 通过这些具体的记载；我们就可以知道，秦始皇已有十八个儿子，十个女儿被赵高、李斯合谋杀死了。 石勒临死时，内心肯定充满了太多的牵挂。因为专门欺负“孤儿寡母”的乱臣贼子，随时都可能在他死后出现。 皇权并没有什么神秘的、神圣的，皇帝与臣子的关系，那从来都是鱼大吃虾、虾大吃鱼。石勒虽然能让自己儿子继承皇位，但他儿子能不能稳这个位置，却是谁也不敢保证的。虽然说，“君叫臣死，臣不得死”。但是，如果臣子的势力，比君主的势力还大呢？ 看到石勒死后，他的老婆、儿子接连死于非命。我们也许会很容易的，从历史中找出石勒的失误。并且很自信的认为，假如石勒当时限制石虎的权力，甚至把石虎杀死，就不会出现这种后果了。 但这样评论历史，仅仅是人们居高临下的，用一种廉价的优越感去评论历史罢了。在谈论石勒的错误前，我们先看看石勒，是一个什么样的人。 石勒最初是一个奴隶，最后却在乱世之中建立了一个帝国。单凭石勒的这种成就，我们就应该知道，一个人想居高临下的评论石勒，那实在太不自量力了。 凭石勒的政治远见，肯定早已看出石虎的存在，对自己的“孤儿寡母”是一个潜在威胁。但一个人处于政治的旋涡中，本身就会面临众多两难的选择。留下石虎自然会威胁石勒的老婆、儿子，如果把石虎给清理出局，石勒的老婆、儿子就会安全吗？显然不会的！让石勒感到无所适从的问题在于，如果石勒把石虎这一系清理了，皇权自然不用面对来自石虎的威胁了。问题是，如果强大的外戚势力，去威胁皇权，那谁来保卫呢？ 削弱皇族的势力。这种做法，在石勒之前有人尝试过，在石勒之后有人尝试过。这种做法，固然使皇权躲过了来自皇族内部的威胁。问题是，这种做法通常会让整个皇族，面对来自外戚、权臣、将领、豪门的威胁。对石勒而言，他并不需要从太远的历史中寻找借鉴。他只需要看看他曾效命过的匈奴汉国就可以了。匈奴汉国的皇帝刘聪刚死。新皇帝刘粲就接受靳准的建议，开始有计划的清洗强势亲王。 二靳承间言之。粲诛其太宰、上洛王刘景，太师、昌国公刘顗，大司马、济南王刘骥，大司徒、齐王刘劢等。太傅朱纪、太尉范隆出奔长安。又诛其车骑大将军、吴王刘逞，骥母弟也。 结果呢，皇帝刚刚把强势亲王清洗掉，皇帝的全家老少就被靳氏全部消灭了。 准勒兵入宫，升其光极前殿，下使甲士执粲，数而杀之。刘氏男女无少长皆斩于东市。发掘元海、聪墓，焚烧其宗庙。 兄弟手足、叔伯子侄的势力强大，自然会威胁皇帝的利益。问题是，如果兄弟、叔伯、子侄这种至亲的骨肉，都不值得相信，外人就真值得相信吗？ 程遐曾一再劝石勒清除石虎。从后来的结果去看，我们总会认为，石勒没有听从程遐的忠言，才会酿成后来的悲剧。但事实真会这样简单吗？显然不是的。如果把石虎一系给清理了，强大的外戚势力，想控制石勒的儿子，石勒的儿子们有能力拒绝吗？更主要的是程遐就不是什么省油的灯。他本身也有可能威胁皇权的。 遐疾披去己，又恶宾之权盛。勒世子弘，即遐之甥也，自以有援，欲收威重于朝，乃使弘之母谮之曰：“张披与张宾为游侠，门客日百余乘，物望皆归之，非社稷之利也，宜除披以便国家。”勒然之。至是，披取急召不时至，因此遂杀之。宾知遐之间己，遂弗敢请。无几，以遐为右长史，总执朝政，自是朝臣莫不震惧，赴于程氏矣。（《晋书、石世龙载记》） 所以程遐一再请求，压制、甚至消灭石虎一系势力时，石勒威胁程瑕说：“卿当恐辅幼主之日，不得独擅帝舅之权故耳。吾亦当参卿于顾命，勿为过惧也。”【见《晋书、石勒载记》】 石勒这种言词本身，就是对程遐充满了不信任。因为这等于对程遐说：“你让我打击石虎，只是为自己擅权做准备罢了。”当然，更让程遐害怕的言词，石勒还没有明说。“你让我打击石虎，是为了自己擅权方便，你擅权之后，又想做什么呢？”这种话已没法再往下说了，因为再往下说，岂不是要直接说程遐想造反吗？匈奴汉国的靳准【也是外戚】，劝皇帝清除强势的皇族亲王。皇帝也认为，威胁自己的人，就是这几个强势的皇族亲王。真正的问题是，皇帝把这几个强势的皇族亲王除后，皇帝又靠什么驾驭强大的外戚呢？刘粲削弱了皇族的力量。但结果呢？当外戚靳准屠杀刘氏皇族时，整刘氏皇族就像绵羊一样任人屠宰了。事实上，石勒对石虎，也设置很多牵制。最简单而言，石勒的大老婆、小老婆，当时都是权倾朝野。石勒的大老婆刘皇后，很早就开始与石勒共同参与军机大事，并且拥有足够的政治影响力。史书上说“刘氏有胆略，勒每与之参决军事，佐勒建功业，有吕后之风，而不妒忌更过之。”按理说，石勒如此培养自己老婆地政治地位。恐怕随时会引出太后专权的危险。但结果呢？这个政治地位类似吕后的刘皇后，在石勒死后不到一年，就被人杀掉了。石勒的小老婆程氏，是皇太子石弘的亲妈。程氏的哥哥程遐，本身也是权倾朝野的重臣。按理说，程氏力量如此强大。石勒死后，后赵帝国很容易会出现外戚专权的事情。但结果呢？石勒死后不到一年，程氏兄妹就被人杀掉了。石勒让自己的二儿子（也就是太子石弘），在他活着的时候，就全面介入政治、军事。“勒令其太子省可尚书奏事，使中常侍严震参综可否，征伐刑断大事乃呈之。”“勒以弘镇邺，配禁兵万人，车骑所统五十四营悉配之，以骁骑领门臣祭酒王阳专统六夷以辅之。”石勒在让太子全面接管帝国主要权力之时。又封另一儿子石宏为秦王，让他坐镇西北；封另一个儿子石恢为南阳王，让他坐镇中原；封养子石堪为彭城王，让他坐镇东南。按理说，石勒这几个儿子都拥有如此庞大的军事、政治资源。很容易出现诸王相争的局面。但结果呢？石勒死后不到两年，他的亲儿子、干儿子一个也不剩的都被人杀死了。 皇权永远存在于危机伺服之中。尤其是在世家大族举足轻重的时代，在那种时代，一个人坐在皇位上，那就是如同坐在了风口浪尖上，不论他怎么设置，好像也是很难看到出路的。在这种背景下，也就出现了两晋南北朝那种乱局，总而言之，皇帝被废被杀如同家常便饭，帝国生生灭灭好像走马灯一样。]]></content>
  </entry>
  <entry>
    <title><![CDATA[成汉]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E6%88%90%E6%B1%89.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[西秦]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E8%A5%BF%E7%A7%A6.html</url>
    <content type="text"><![CDATA[公元385年，鲜卑酋长乞伏国仁在陇西称大单于，又被前秦封为苑川王，都勇士川【今甘肃榆中】。388年，其弟乞伏乾归立，称大单于，河南王，迁都金城【今甘肃兰州西】。400年为后秦所灭。409年，二月，乞伏干归自后秦返回苑川。七月，西秦复国，复都苑川。412年，乞伏炽磐又迁都枹罕【今甘肃临夏市东北】。 431年被夏国所灭。 乞伏国仁时期 乞伏国仁之父乞伏司繁受前秦天王苻坚封为南单于，并驻镇勇士川【今甘肃榆中】。秦建元十二年（376年），司繁死，乞伏国仁继位。前秦建元十九年（383年）淝水之战时，苻坚原命国仁为前将军，领先锋骑，后国仁叔父乞伏步颓叛于陇西，苻坚派国仁回师讨伐，步颓反而迎接国仁。及前秦淝水之战失利，国仁即趁机吞并其他部族，聚众共十多万。前秦太安元年（385年），苻坚为姚苌所杀后，国仁自称大都督、大将军、大单于、领秦、河二州牧，改元建义，建都勇士城。 派乞伏家的人去镇压乞伏家的叛乱，这是怎么想的 就在乞伏国仁自立次年，南安郡豪族祕宜就率领五万羌、胡人进攻乞伏国仁，并四面来攻。乞伏国仁决意先声夺人，于是自率五千人突袭祕宜，并大败对方。祕宜于是逃奔南安郡，同年便率三万多户人口归降。建义三年（387年），前秦皇帝苻登以乞伏国仁为大都督、都督杂夷诸军事、大将军、大单于、苑川王。同年乞伏国仁率军进攻密贵、裕苟及提伦三位鲜卑大人，又大败来攻的高平鲜卑首领没弈干及东胡金熙，密贵等三人于是大惧，率部归降。建义四年，乞伏国仁又击败了鲜卑人越质叱黎。同年国仁死，谥宣烈王，庙号烈祖，弟乞伏乾归继位。 虽然一般认为乞伏国仁是西秦建立者，惟其在位期间，只受前秦封为苑川王，尚未正式称秦王。一直至394年，国仁继承人乞伏乾归才称秦王。 乞伏乾归时期 建义四年（388年）乞伏国仁去世，群臣认为国仁子乞伏公府年幼，乃推乾归为大都督、大将军、大单于、河南王，改元太初，迁都金城（今甘肃兰州）。太初二年（389年）受前秦帝苻登封为金城王。]]></content>
  </entry>
  <entry>
    <title><![CDATA[九一八事变前蒋张关于东北问题的讨论]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E8%BF%91%E4%BB%A3%E5%8F%B2%2F%E6%B0%91%E5%9B%BD%2F%E5%8E%9F%E5%A7%8B%E5%8F%B2%E6%96%99%E9%9B%86%2F%E4%B9%9D%E4%B8%80%E5%85%AB%E4%BA%8B%E5%8F%98%E5%89%8D%E8%92%8B%E5%BC%A0%E5%85%B3%E4%BA%8E%E4%B8%9C%E5%8C%97%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%A8%E8%AE%BA.html</url>
    <content type="text"><![CDATA[其一 原文链接：知乎-理水的文章 日人对我国东北虎视眈眈已久。1931年夏以来，在东北，日本先后挑起万宝山事件和中村事件，在华北，挑动石友三叛乱，策动阎锡山回晋，迫使张学良抽调东北军精锐入关弹压局面。在这种情况下，蒋介石、张学良都预感到东北将有非常事件，并多次就东北问题进行讨论，最后达成采用“以不抵抗为抵抗”，寄望国联、依靠外交解决的战略方针。结合对岸新公布的资料，大致梳理一下九一八前蒋、张对于东北问题的讨论历程。 进入8月，东北局势日益紧张，驻沈独立第七旅王以哲派人到北平向张学良汇报，时任该旅参谋长的赵镇藩在《日军进攻北大营亲历记》中回忆： 基于上述种种情况，王以哲和我反复进行了研究，认为如果万一发生事变，我旅必将首当其冲。为了研究对策，遂于8月间召集第七旅上校以上军官和情报人员共同分析研究。大家一致判断必然要发生事故，当即将所得材料加以整理，交王以哲携赴北平向张学良报告，并请求将关内东北军调回一部分，以防万一。不久王以哲回沈阳，向我们传达了张学良的应变指示。王以哲说：“张副司令已经派人将情况报告了蒋介石，蒋指示暂不抵抗，准备好了再干，一切事先从外交解决；并告诉张学良要效法印度甘地对英国不合作的办法来应付日本，遇事要退让，军事上要避免冲突，外交上要采取拖延方针。”接着又接到张学良转来蒋介石的铣(8月16日)电，主要内容是：采取不抵抗政策，竭力退让，避免冲突，千万不要“逞一时之愤，置国家民族于不顾，希转饬遵照执行”等语。 虽然铣电原件至今尚未发现，但能够证伪该电的材料也并没有，甚至在九一八前，尚未见到一封蒋介石给张学良关于东北事件的电文。而近年来新披露的资料，恰好可以和铣电互相照应，可以说有力的佐证了该电的存在。 关于铣电，虽然原件未曾发现，但是九一八事变前日军方面曾接到了实际上一份“铣电”。这部分内容，参考其二。 8月24日，感到事态日趋严重的张学良致电陈群并转蒋介石，提出： 近来对日外交性情紧迫，彼国朝野上下公然密谋侵占我东北（彼方谓为满蒙），势甚积极，不可终日。弟曾尽力设法以谋疏解，终鲜效果，所有一切经维寅兄电达左右，荷蒙鉴誉，转呈总座，至深佩感。近数日来，情况益紧，……日人方面属有意动作，现已揭开面目，必将另造事端以为借口。似此情形，恐非退避所能了事。弟为此事，日夜焦虑，我兄卓识尽筹，对日外交研究有素，当此危急之时，我方应用何法以为应付，尚祈详赐指示并请密陈总座决定方策。弟意以为对立各种悬案应即与之开诚谈判，能解决者即解决之，其绝对不能许其要求者即拒绝之。为此了一件即少一件，而彼方即少一攻击之目标，是为釜底抽薪之计。总座明烛，几先对此必有良谋，亟望与外交方面负责人员切实商讨，指示遵行，不胜企祷。 这里的“似此情形，恐非退避所能了事”一句，显然意指之前蒋、张达成过“退避了事”的应对方略，这内容同铣电中提到的“采取不抵抗政策，竭力退让，避免冲突”是一致的。 电文1 电文2 8月28日，在官修《事略稿本》中，记载了蒋介石收到中村事件后的方应： 公叹曰：日人之侵略，其将日益加进乎 史略稿本原文 然而，蒋介石、张学良并没有调整应对策略。 9月6日，张学良发出给臧式毅、荣臻的“鱼电”，重申了铣电的要求 ： 现在日方外交渐趋吃紧，应付一切，亟宜力求稳慎。对于日人，无论其如何寻事，我方务当万方容忍，不可与之反抗，致酿事端。即希迅速密令各属，切实遵照注意为要。张学良。鱼子秘印。 不过张学良越发感到形势的严峻，两天之后的9月8日张学良发出给蒋介石的“限即刻到，不得停留”的齐申电，一方面表示已按蒋意下达鱼电（“特饬文武地方官竭力避免”），但同时报告日军有大规模入侵动向，希望蒋介石考虑应对措施： 日人于朝鲜暴动案发生后，百计寻事，特饬文武地方官竭力避免。近为中村失踪之事，由驻沈总领事严重交涉，语多挟制，东京方面陆军人员尤为激昂，显有借端侵略状态。我方已派人前往肇事地点详查，良不能亲自回辽，万分焦急。……内忧外患，应付殊难，仅密奉闻，敬乞指示。 电文3 按说张学良的齐申电规格已经相当之高（“限即刻到，不得停留”），用词已相当激动（内忧外患，应付殊难，仅密奉闻，敬乞指示），以张国府二把手的地位，蒋介石不可能没有表示，然而却没有齐申电的复电，这显然不合情理。但如果考虑何柱国在《“九一八”沈阳事变前后》记录的蒋张在石家庄的一次会面，那么蒋介石在接到张学良的齐申电后，决定和张面谈，就显得顺理成章： 张学良于九月十一日，在北平接到蒋介石的密电，叫他于十二日去石家庄与蒋会晤。那天上午，蒋、张分乘两辆专车，蒋介石的专车自汉口开来，张学良的专车从北平开来，就这样两个人都未下车，把两辆专车合拢后，在车厢里举行了秘密会谈。那时我正驻防在石家庄，得讯后提早在车站外围派部队布防警戒，以保安全；但专车及车站范围内，则均由蒋、张自带的卫队负责。 会谈后，张学良亲自告诉我，蒋介石对他说：“最近获得可靠情报，日军在东北马上要动手，我们的力量不足，不能打。我考虑到只有提请国际联盟主持正义，和平解决。我这次和你会面，最主要的是要你严令东北全军，凡遇到日军进攻，一律不准抵抗，如果我们回击了，事情就不好办了，明明是日军先开衅的，他们可以硬说是我们先打他的，他们的嘴大，我们的嘴小，到那时就分辩不清了。”过了一星期，九一八事变果然爆发了。 接下来，在官修《事略稿本》中，记载了蒋介石9月13日收到关东军高唱“击滅东北政权”的反应： 又闻日人高唱击滅东北政权，公曰：日人欲图东北，而其狡诈手段如此。其谁欺，欺天乎。独恨我国内之正多事耳。呜呼，岂天欲亡我中华乎。 事略稿本原文 9月14日，在官修《事略稿本》中，记载了蒋介石在得知日本进一步举动后方应，蒋介石考虑良久，仍然只是“严密注意”，寄望于这是日本的恫吓之举： 公考虑久之，曰：“日人之鬼魊诈险，吾当严密注意之也。” 事略稿本原文 可见，虽然各方情报让蒋介石虽然也感觉到事态严重，但蒋最后仍感“独恨我国内之正多事耳”，仍维持了既定的不抵抗立场。 不料，仅仅4天之后，蒋、张不愿意面对的“九一八”事变，还是发生了。 其二 原文链接：知乎-理水的文章 摘自《“九一八”全史》第一卷和第五卷（上）。 1、9月事变前陆海空总司令部给东北边防军司令长官公署密电。 密电内容 原文脚注标明密电内容如下：译自《日本外务省档案》，IMT523，《关东厅警务局长致外务次官信》，见该档案胶卷T66。 2、11月2日到5日江桥抗战决策过程 密电内容 密电内容 密电内容]]></content>
  </entry>
  <entry>
    <title><![CDATA[朝鲜战争不同时期TIME对于周恩来的报道]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E8%BF%91%E4%BB%A3%E5%8F%B2%2F%E7%8E%B0%E4%BB%A3%2F%E5%8E%9F%E5%A7%8B%E5%8F%B2%E6%96%99%E9%9B%86%2F%E6%9C%9D%E9%B2%9C%E6%88%98%E4%BA%89%E4%B8%8D%E5%90%8C%E6%97%B6%E6%9C%9FTIME%E5%AF%B9%E4%BA%8E%E5%91%A8%E6%81%A9%E6%9D%A5%E7%9A%84%E6%8A%A5%E9%81%93.html</url>
    <content type="text"><![CDATA[1951年《TIME》杂志的大背景是抗美援朝的第二年，联合国军开始反扑，美军开始采用绞肉机战术。这一期杂志的封面标题是《Communist Chou En-Lai， the US's enemy is also China's enemy》。 1954年《TIME》杂志的大背景是日内瓦会议，这次会议是美国第一次承认中国是世界霸主之一，并且《TIME》杂志认为这次会议是中国的完胜，给予周恩来作为政治家极高的评价。这一期杂志的封面是《RED CHINA'S CHOU EN-LAI，waging war and talking peace》。 1954年这期《TIME》杂志的封面或许能够让很多生活在幻想中的国人理解。能够坐下来谈和平，是因为我有发动战争而且不输的能力。 不知道大家是否感兴趣这两期《TIME》杂志里面具体写了什么？我先写一下概要。如果感兴趣的话，我把其中的细节翻译出来写给大家看。 1951年的《TIME》 1.1 美国内部在争论是否在雅尔塔会议上出卖了常凯申政府？ 1.2 为什么常凯申注定会失败，而且为什么美国不看好常凯申反攻大陆会成功？ 1.3 美军的迷茫，为什么不能攻过鸭绿江？1.4麦克阿瑟将军第一次被公开批评 1.5 以平壤为中心的三角地区将成为拉锯战中心，绞肉机战术将大规模实施 1.6 中国的内政，中国的经济可能崩溃 1.7苏联对中国的援助与武装 1.8中国可能承受的战争成本，以及这能否让中国放弃朝鲜的讨论 1954年的《TIME》 2.1 日内瓦会议（涉及越南问题、朝鲜问题、印度问题……）上英国、法国、美国相互挖坑2.2 奠边府战役还在打，法国基本上扛不住了2.3 如果法国扛不住，越南被分割成南北越，那么中国支持的北越必然统一全部越南2.4 周恩来在日内瓦会议上公开挑战美国，要求美国不要干预亚洲局势，并要求西方武装撤出东亚。2.5 周恩来尽管立场咄咄逼人，但他优美的外交风范和影响力被《TIME》杂志评价为第二个莫洛托夫、中国的尼赫鲁。《TIME》引用常凯申对周恩来的评价“ a reasonable communist”，马歇尔将军对周恩来的评价“friendship and esteem。2.6 美国认为中国取代苏联，成为朝鲜新的征服者。2.7 美国忧虑中国与苏联联手带来恐怖性效果。2.8 中国成为区域性大国已经不可避免，而且中国拥有无可撼动的人口、资源2.9 美国在探讨如何挑起中国与苏联之间的矛盾。2.10 美国分析中国第一个5年计划并对比苏联的第一个5年计划。并大胆预测，在强行工业化的过程中，农业产量必然不足（苏联的前车之鉴），中国遭遇大饥荒的概率很大。以及中国还会因为什么原因垮掉。 来源：知乎·王洪浩的回答]]></content>
  </entry>
  <entry>
    <title><![CDATA[常凯申微操集]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E8%BF%91%E4%BB%A3%E5%8F%B2%2F%E6%B0%91%E5%9B%BD%2F%E5%8E%9F%E5%A7%8B%E5%8F%B2%E6%96%99%E9%9B%86%2F%E5%B8%B8%E5%87%AF%E7%94%B3%E5%BE%AE%E6%93%8D%E9%9B%86.html</url>
    <content type="text"><![CDATA[抗战前 在贵州追剿红军期间，蒋中正给十六军军长李韫珩下达手令，让其不要听薛岳的，按蒋中正的手令行动 李俊张抱冰兄。兄部本晚务望赶到安南以北地区，明晚赶到安南与普安间之新庄。务限廿三日前达到盘县。薛主任在前方恐不明全般情况，故兄处以后以中之命令为准。 手令内容 1 手令内容 2 1931年8月21日，蒋下手令给熊式辉，详细指导布置如何进行烧杀： 对匪巢只有焚烧，乃能解决，请派飞机设法暂停轰炸，而专用火油在欲烧之区域内，使皮带或者分水壶分布火油。如此分划区域，每区约焚二三日，使匪恐慌，不能立足。 手令内容 3 手令内容 4 抗战 九一八后半个多月后的10月7日，日军军舰开到镇江，蒋公致电叶楚伧，要当地警局负责给日军买菜，并负责送货到船： 日海军明日又来镇江，增加一艘。请注意，如其水兵上岸买菜等事，最好分与其交涉，由当地警局为其代买送船，以免纠纷。 手令内容 5 抗战后]]></content>
  </entry>
  <entry>
    <title><![CDATA[长江改道工程]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E8%BF%91%E4%BB%A3%E5%8F%B2%2F%E7%8E%B0%E4%BB%A3%2F%E5%B7%A5%E7%A8%8B%2F%E9%95%BF%E6%B1%9F%E6%94%B9%E9%81%93%E5%B7%A5%E7%A8%8B.html</url>
    <content type="text"><![CDATA[原文出处（来自知乎-马前卒的回答） “万里长江，险在荆江”，荆江是长江中游的一段，上起湖北枝城，下迄湖南城陵矶。长江从三峡奔腾而下，进入“荆江”河段后水流湍急，走向摆动不定，导致河流蜿蜒曲折，仅从藕池口至城陵矶之间直线距离只有80公里，长江河流长度却达247公里，其间大弯小曲不下20余处。而监利县上车湾长江段（即环绕湖南华容集成垸河段），水道环绕则要四十多公里，而陆地4公里就可达到彼端。因此荆江又有“九曲回肠”之称。这样弯曲的河道既不利于航行，又由于水流不畅，洪水期极易泛滥成灾。 早在1936年我国水利专家章锡绶先生就提出“扬子江之患，荆河为甚，而上车湾实荆河之最险处，宜速积极开凿对岸之引河，以作根本之解决。”否则 荆江堤防若溃决，长江一泻千里，江汉平原将尽成泽国，而汉口市场，亦遭池鱼之叹。 章锡绶先生在长江上车湾河段实施裁弯截直工程的提议，经当时国内水利专家们和美国水利总工程师史笃培等详细研究，实地勘估，都认为确有必要实施，并制定了详细的工程方案和预算报告呈送至国民政府。但因当时国家处于连年内乱外患，对这一长江改道工程在国民党政府手中一直未能解决。 三十二年后，章锡绶先生提出的这个荆江裁弯治理的蓝图，终于在新中国政府手中得以实施。1968年底，国家正式批准实施长江上车湾河段改道工程。该工程是从湖南华容县境的长江天字一号段起，向南至洪山头段为止，开挖出5公里长、宽100多米、约20米深的人工河道，将这一段长江进行裁弯截直。为了实施这一工程 ，湘鄂两省政府动员了数万农民开挖河道。1968年底，不少长沙知青到华容插队落户“接受贫下中农再教育”，其中许多知青曾参加这一著名的长江改道开挖新河的劳动。 我下放所在的集成垸红旗大队，是离长江改道工地最近的几个大队之一。我到生产队的第三天，生产队长就安排了我们几个男知青去参加长江改道工程的劳动。我们到达工地，见数万民工如蚂蚁般的在狭长的荒洲上劳动，人山人海，场面很是壮观。当时开挖新河道工程已完成了一大半，河道已初见雏形。开挖河道就是将河床的泥土运至新河道两岸百余米的地方堆积成堤坝，那时没有使用一台所谓挖土机、推土机等机器设备，完全是用人工手挖肩挑。河道底部的泥土粘而含有水分，因此挖土不用锄头而用当地特有的一种挖土工具--铁锨铲，象切豆腐一样，把一大块一大块泥土切割，再装入筐萁运走。我们知青刚去还不会用铁锹就只能用肩去挑土了。其实挑土也很辛苦，从河床底部要将泥土挑到倒堆积土处，路途长，坡又陡，当时运土是采用分级接力运输办法，即一人挑一担土向上运送一段，另一人又将这担土接力运送上去。由于前几天刚下过一场大雪，运土的路都很泥泞，一不小心，鞋就陷进泥浆中拔不出来。知青们大多是刚从事这么繁重的劳动，整天用肩挑泥土，在泥泞中爬坡，感到很辛苦。我一、二天后肩膀就压红肿了，收工后躺在工棚里就不想爬起来………… 到1969年春节，新河道挖掘完工了，仅留下靠长江两端的河道未挖通，暂时以抵挡江水。我们集成垸的知青回长沙过春节，或去砖桥公社办事，来回都要从新开挖的河道中爬下爬上走过。直到那年3月份长江的江汛来了，长江水位达到一定标准后，有关部门动用炸药将新河道两端的泥坝炸毁。随着几声沉闷的爆炸声，滚滚长江从新河道奔流而下，新河道启用了。汹涌湍急的江水冲刷着河道两岸，更一步拓宽着河道，裁弯截直的河道才发挥作用。以后当地群众把这一段新开的长江河段称为“新河”，以后设立的渡口又叫“新河渡口”。 原文附图，红色部分就是农民和下乡知青一铲一铲挖出来的新长江。 然而这还不是全部的荆江截弯工程。看下面的百度地图和卫星图： 地图 卫星地图 连绵的长江牛轭湖（即截弯后的旧河道），约有一半是六七十年代战天斗地的成就，是无数农民和知青用肩膀挑出来的地理景观。这才是在太空中也能看得到的人力工程奇迹，从工程方面比较，长城瞬间就被比下去了]]></content>
  </entry>
  <entry>
    <title><![CDATA[淠史杭自流灌溉工程]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E8%BF%91%E4%BB%A3%E5%8F%B2%2F%E7%8E%B0%E4%BB%A3%2F%E5%B7%A5%E7%A8%8B%2F%E6%B7%A0%E5%8F%B2%E6%9D%AD%E8%87%AA%E6%B5%81%E7%81%8C%E6%BA%89%E5%B7%A5%E7%A8%8B.html</url>
    <content type="text"><![CDATA[原文出处（来自知乎-马前卒的回答） 淠【pì】史杭自流灌溉工程。是1958年大跃进时想出来的疯狂项目。61年曾被点名要求下马停工，但当地的干部和民工最终咬牙坚持到底，在大别山外围建出了一个超级丰产区。 在毛主席 “一定要把淮河修好” 的伟大号召下，安徽人民先后在大别山区修建了佛子岭、梅山、响洪甸、磨子潭、龙河口五大水库，拦蓄大别山区上游来水，减轻淮河干流防洪压力。五大水库的修建，拓展了安徽省委、省政府的治水思路，为综合利用水资源，彻底解除江淮丘陵地区的旱涝灾害，在科学规划的基础上作出了战略决策，决定兴建淠史杭沟通工程，连接五大水库，沟通淠河、史河、杭埠河三大自然河流，建设完整、系统、科学的灌溉网络。1958年6月，淠史杭工程指挥部正式成立。 1958年8月19日，灌区工程总指挥赵子厚在淠河灌区渠首横排头开挖第一锹土，拉开了淠史杭工程的建设序幕，百万安徽人民开始了建设淠史杭工程的伟大征程。当时，正值国家三年自然灾害，资金困难，技术匮乏，材料短缺，安徽人民发扬“自力更生、艰苦奋斗”精神不卑不弃，坚忍不拔。面对原始的施工工具，他们开展技术革新，创造了专攻切岭工程的“洞室爆破法”，发明了专攻“麻僵土”的劈土法，研制了垂直运输土工具“倒拉器”，以自己的聪明才智克服了工程建设中的千难万险；面对短缺的建筑材料，他们无私奉献，自制炸药，自建水泥厂，捐献木料，保证了骨干工程和重要建筑物的建筑用材；在1958—1972年14年间，他们胼手胝足，肩挑手抬，艰苦奋战，以铁锹、十字镐、独轮车等原始工具，大干4亿个工日，开挖了2.5万公里渠道，完成近6亿\(m^3\)土方，建成了横跨江淮、沟通三河、造福皖豫的特大型灌区，创造了新中国水利史上的人民丰碑。一代文豪郭沫若在参观淠史杭工程时赋诗称赞：“人民力量不寻常”。 淠史杭灌区工程示意图 淠史杭灌区工程示意图 水脉图和地形图对照 水脉图和地形图对照，可以看到这是一个结合山区水库和平原灌溉网，沟通不同水系的自流灌溉项目。这个工程主体也是靠人力和农业社会的物资完成的。五六十年代的中国也实在没有多少工业物资可投入。 1958年，入夏以后，连续70多天无透雨，塘坝干涸，田地龟裂，庄稼枯死，500多万亩农田成灾，尚有152万亩不能下种，全区有200万人投入抗旱。 1958年8月19日，淠史杭工程开工典礼在六安县苏埠镇南５公里的横排头隆重举行，这里曾是当年徐向前创造“苏家埠48天战役”大捷的战场，而今为了创造建设新中国的奇迹，六安人民再一次在这里誓师，向大自然宣战。中共六安地委第一书记杜维佑为典礼剪彩，专员兼淠史杭工程指挥赵子厚发布开工命令，挥锹破土。 开工初期，国家没给一分钱，地区财政也拿不出钱，所需物质基本上靠群众自筹。据统计，在一、二两个工期，群众自筹石料14.22万立方米，木材2.16万立方米，树材22万多棵，圆竹65万公斤，毛竹12万多根，旧钢铁437吨。开山炸石，没有炸药，就发动群众刮墙土熬硝，自制土炸药。没有水泥，就自建了三个水泥厂，用石臼舂，用碾子碾，石料破碎以后，用筛子筛，用手工搅拌。木料不足，许多群众把家中盖房子的木头、门板都献出来了，有的甚至把给老人准备的棺材都拆散抬到工地。11条干渠全面铺开，最高上工人数达67.8万，民工们挑着粮食和铺盖，从四面八方聚集到工地，每个民工一个工日补助0.25-0.5公斤口粮和一毛钱菜金。 下图是当年的施工场面和奖状。 施工图 奖状 淠史杭工程的影响有多大呢？ 中国淠河、史河、杭埠河3个毗邻灌区的总称。位于安徽省中西部和河南省中南部，地处大别山余脉的丘陵地带，横跨长江、淮河两大流域，总面积1.31万平方千米。灌区水源来自佛子岭水库、响洪甸水库、磨子潭水库、梅山水库和龙河口水库。总库容66亿立方米。该灌区于1958年开工 ，1959年开始灌溉农田，以后逐年续建配套，1987年干渠以上工程完工，支渠以下工程还在进行。工程以灌溉为主，兼有发电、航运、水产养殖、城市用水的综合利用工程，包括：淠河、史河、杭埠河三大渠首枢纽工程，7级渠道的2条总干渠，11条干渠，19条分干渠，总长1384千米；1.3万条支渠、斗渠、农渠，总长2.26万千米；大小渠系建筑物6万多座；中小型调节水库1066座和21万口塘坝，有效库容12.3亿立方米；抽水站、补水站总装机容量14.1万千瓦。该工程实现了40万公顷农田的自流灌溉，实灌面积达58万公顷，并解除了淠、史河下游的洪灾，减轻了淮河干流的洪灾。. 四五十万公顷农田从旱地变成旱涝保收的水浇地，这个说法貌似不容易形成直观概念。我们可以和名声更大的都江堰灌区（不只是都江堰枢纽）对比。到1950年的时候，都江堰灌区修了2000多年，总灌溉面积是18万公顷（解放后扩建到60万公顷）。这还依赖于川西极有利的地形。淠史杭工程用14年时间在贫瘠的大别山外围搞了三个都江堰灌区出来，不依赖电力的自流灌溉面积也相当于2个都江堰灌区。效果不言而喻。 灌区枢纽之一，颇有都江堰的味道 灌区图片 灌区工程的建设和运行，大大改善了皖西、皖中地区的农业生产条件，区域内的灌溉面积由兴建时的120万亩发展到现在的1000万亩，粮食年产量由兴建时12.3亿公斤提高到目前的50亿公斤左右，灌区17个县（区）有7个是国家级商品粮生产基地县，正常年份提供的商品粮不少于18亿公斤。淠史杭灌区是安徽乃至全国的粮食主产区，它以占安徽1/10的土地面积、1/6的耕地面积、1/5的有效灌溉面积生产1/4的粮食产量、1/3的水稻产量，奠定了安徽粮食主产省的重要地位（河南效果另计）。]]></content>
  </entry>
  <entry>
    <title><![CDATA[前赵]]></title>
    <url>%2Fknowledge-base%2Fhistory%2F%E4%B8%AD%E5%9B%BD%E5%8F%B2%2F%E4%B8%AD%E5%8F%A4%E5%8F%B2%2F%E4%B8%89%E5%9B%BD%E4%B8%A4%E6%99%8B%E5%8D%97%E5%8C%97%E6%9C%9D%2F%E5%8D%81%E5%85%AD%E5%9B%BD%E6%A6%82%E5%86%B5%2F%E5%89%8D%E8%B5%B5.html</url>
    <content type="text"><![CDATA[概况 317年汉赵（前赵）领土范围，当时汉赵、成汉及东晋形成后三国时代。317年昭武帝刘聪在位。 前赵，也称为汉赵。自304年由匈奴人刘渊建立，至329年，后赵攻陷上邽，杀赵太子刘熙为止，共存在26年，历经刘渊，(刘和)，刘聪, (刘粲)，刘曜，(刘熙)等君主（括号内的当政时间极短或者未称帝）。统治地区包含并州刺史部、雍州刺史部、秦州刺史部、豫州刺史部、司隶校尉部、冀州刺史部部分地区。 汉赵的建立 秦末汉初，漠北的匈奴成为一个强大帝国，并多次南下劫掠，在被汉朝打败后，一部分受到汉王朝控制。公元46年之后，东汉朝廷常以招引的方式，将边疆的草原各族内迁，以便监控或是增加兵源和劳动力。朝廷有意识的削弱边疆民族的势力，降低其地位，以方便监控。 到了西晋时，中国汉地北部、东部和西部，尤其是并州和关中一带，大量胡族与汉族杂住。史书记载“西北诸郡皆为戎居”，关中百万余口“戎狄居半”，对晋帝国呈现半包围形势。除了辽河流域的鲜卑和青海、甘肃的氐、羌外，大都由其原住地迁来。这些胡族逐渐成为汉人管辖下的编户，由于他们需要纳税，且时时受汉官欺压或歧视，因此心生不满，时有举兵之事。270年晋武帝时，河西鲜卑秃发树机能与匈奴刘猛率众内侵，直至九年后始平。294年晋惠帝时，匈奴郝散叛，不久平定。两年后其弟刘度元以齐万年为首，联合西北马兰羌、卢水胡举兵，晋将周处阵亡，此事至299年方平。而后郭钦与江统相继建议强制迁离胡族，江统更著有《徙戎论》，但晋室不予采纳。由于胡汉摩擦的状况没有改善，当朝廷元气大伤后，周边胡族便趁机举兵。 其中匈奴人刘渊统领五部匈奴，成都王司马颖结其为外援。304年司马颖遭王浚围攻，遣刘渊回并州发兵支援。刘渊回并州后乘机宣布独立，称汉王，自称继承汉朝正统【晋书作为官修史书，承认刘渊的血统，但有说法称，刘豹-刘渊父子本身就不是匈奴虚连题氏（挛鞮氏）王族的后裔，更不是匈奴传统四贵（呼衍氏、须卜氏、丘林氏、兰氏）之一，而是在西汉时降汉内迁的匈奴屠各部落。这一问题的考证，后文有专门章节探讨】。308年刘渊称帝并迁都至平阳，国号“汉”，后称“赵”。304年成汉与汉赵的建立，开启了“五胡十六国”时期。 实际上304年为刘渊起兵称王的时间，称帝时间在308年。 刘渊生平 刘渊出身屠各族（南匈奴），生于约252年，是西汉冒顿单于的后代挛鞮家族的人，该家族因西汉刘邦以来，长期与汉朝王室通婚，同时兼具汉朝王室与匈奴贵族的血脉，故汉名多采取汉朝王族的刘姓为姓氏【刘渊的血统时隙可能系冒人，见前注】。 东汉献帝年间，曹操统一华北地区后，重整匈奴五部，刘渊父亲刘豹原是匈奴王族的左贤王，在此一时期被曹操任命为“左部元帅”；而刘渊的母亲呼延氏，亦是《史记》纪载下的三大匈奴贵族姓氏之一，足见刘渊身份之高贵。 咸熙年间，刘渊到洛阳作任子，受到当时曹魏权臣司马昭厚待。司马炎篡魏建立西晋后，王浑向晋武帝司马炎推荐刘渊，武帝接见刘渊后亦对他十分欣赏，更打算任命他参与平灭东吴的事，但因孔恂和杨珧以“非我族类，其心必异”为由，担心一旦向刘渊委以重任并平灭东吴，他会在当地叛晋自立。武帝听后才将搁置这打算。及后秃发树机能先后击败秦州刺史胡烈及凉州刺史杨欣，李熹建议任用刘渊讨伐，但孔恂仍指刘渊可能会作乱凉州，武帝因而又否决了建议。当时在洛阳流浪的王弥【曹魏将领王颀之孙。西晋末年的叛民领袖，后归附汉国为将，官至大将军。后因被石勒所忌而被杀。】正要回故乡东莱，与刘渊饯别时，刘渊泣诉被人屡进谗言中伤，恐怕将会在洛阳遇害而不能再见到他。刘渊于是纵酒长啸，同坐的都因他流泪。齐王司马攸见刘渊后，更建议武帝杀刘渊，以免日后回匈奴五部所在的并州后会祸乱当地，但王浑反对。武帝同意王浑所言，最终没有杀刘渊。 正巧任匈奴左部帅的父亲刘豹于当时逝世，刘渊于是回到并州接替父亲左部帅之位。太康末年刘渊官拜北部都尉。永熙元年（290年），晋惠帝司马衷继位，由外戚杨骏辅政。杨骏为了拉拢远人，树立私恩，便任命刘渊为建威将军、五部大都督，封汉光乡侯。但至元康末年刘渊便因部下族人叛变出塞而免官。不久成都王司马颖出镇邺城（今河北临漳县西南），为拉拢刘渊而表他行宁朔将军、监五部军事，并召他至邺城。 当时八王之乱战火再起，赵王司马伦、齐王司马冏及长沙王司马乂先后以军事力量上台掌权，司马伦更曾篡位称帝，天下大乱，盗贼蜂起。刘渊叔祖父刘宣见此，决心乘着西晋朝政混乱振兴匈奴，于是秘密与族人推举刘渊为大单于，又派遣呼延攸到邺城通知刘渊。刘渊向司马颖请归不果，于是派呼延攸先回并州，命刘宣召集五部匈奴和在宜阳的一众胡人，名为支持司马颖，实质上却图谋叛变。 永安元年（304年）司马颖击败司马乂，成为皇太弟，任命刘渊为屯骑校尉。不久东海王司马越和陈昣等与惠帝征讨司马颖，司马颖又任命刘渊为辅国将军、督北城守事。及至惠帝兵败荡阴（今河南汤阴县）被俘至邺城，司马颖再任命刘渊为冠军将军，封&quot;卢奴伯&quot;。但在荡阴之战【战事由司马越为大都督，奉晋惠帝自洛阳兵向邺城，讨伐皇太弟司马颖。最终司马颖的军队于荡阴获胜，并俘晋惠帝至邺】后不久，东嬴公司马腾和安北将军王凌等就起兵讨伐司马颖，刘渊趁机向司马颖建议让他回匈奴五部领部众支援司马颖，共同抵抗司马腾和王凌的讨伐部队。司马颖同意并拜刘渊为北单于、参丞相军事。 刘渊回左国城（今山西吕梁市离石区）后，刘宣便为刘渊上大单于称号，二十日之间就聚众五万，定都离石。及后刘渊被司马腾盟友拓跋猗㐌和拓跋猗卢击败，同时司马颖亦因受不住王凌大军的进逼而弃守邺城，带惠帝逃回洛阳。刘渊在刘宣的反对下，最终决定不援救司马颖，迁至左国城（今山西吕梁市离石区东北），又吸引数万人归附。 永兴元年（304年）十一月，刘渊以自己祖先与汉朝宗室刘氏约为兄弟而自称“汉王”，建国号汉，改元元熙，并追尊蜀汉后主刘禅为孝怀皇帝，又设汉高祖刘邦、汉世祖刘秀、汉昭烈帝刘备、汉文帝刘恒、汉武帝刘彻、汉宣帝刘询、汉明帝刘庄和汉章帝刘炟等八位西汉、东汉和蜀汉皇帝的牌位；前三者为三祖，后五者为五宗，以汉室继承者自居。同时自置百官，正式建立一个脱离西晋朝廷的独立政权。 刘渊称王后，身为并州刺史的司马腾便派将军聂玄讨伐，但遭刘渊于大陵【今山西文水县】击败。司马腾知道聂玄兵败后十分恐惧，率并州二万多户人南下山东地区。刘渊亦派刘曜先后攻陷太原、泫氏、屯留、长子、中都等地方，扩阔领土。次年（305年），刘渊所派将领刘钦再度击败司马腾所派的讨伐军。同年并州爆发大饥荒，离石亦受影响，刘渊于是迁都黎亭。永嘉元年（307年），刘渊已攻陷并州大部分郡县，并派兵进攻新任并州刺史刘琨。但刘琨击败汉军，成功保著治所晋阳【今山西太原市】。战后刘琨努力经营并州，更离间收降刘渊部下杂虏，汉军向并州北部扩张的计划因而受阻。刘渊于是听从侍中刘殷和王育派兵进攻其他州郡，南侵进据长安和洛阳的建议；同时，汲桑、石勒、王弥、鲜卑陆逐延和氐酋大单于单征数个在其他地方的军事力量都相继归降刘渊，刘渊亦一一任官封爵，令汉国力量更为壮大；亦因这些加入者起事和影响的地方在冀州、徐州、青州等地，西晋受汉国侵袭的地区大大增加。永嘉二年（308年），刘渊攻破司州河东郡的蒲阪和平阳郡的平阳城【今山西临汾市】，更迁都蒲子【今山西交口县】，令两郡属下各县抵抗刘渊的营垒都全部投降。同时亦派刘聪、石勒等南攻太行山、赵、魏地区。 十月甲戌日（308年11月2日），刘渊称帝，改元永凤。永嘉三年（309年），太史令宣于脩之认为都城蒲子所处崎岖难以久安，建议迁都平阳。刘渊听从并立刻迁都至平阳，改元河瑞。刘渊及后派刘聪、王弥等进攻壶关，先破刘琨所派援军，后于长平击败晋东海王司马越所派的援军，成功攻陷壶关。刘渊于是先后于当年八月和十月派刘聪等领兵进攻洛阳，但都被晋军击败，刘渊唯有撤军。 次年刘渊病重，命太宰刘欢乐、太傅刘洋等宗室重臣入宫接受遗诏辅政。七月己卯日（8月19日），刘渊逝世，由太子刘和继位。九月辛未日（10月20日）下葬永光陵，谥光文皇帝，庙号高祖，后改太祖。 刘聪时期 八王之乱结束后，刘渊为了扩充版图，遣子刘聪掠夺洛阳，大将石勒及王弥掠夺关东各州。310年刘渊去世，谥光文皇帝，太子刘和即位。刘渊在死前任命军功卓著的四子刘聪为大司马、大单于，与太宰刘欢乐和太傅刘洋共录尚书事，并在都城平阳西置单于台。 刘和即位后，受宗正呼延攸、卫尉刘锐及素来厌恶刘聪的侍中刘乘进言唆摆，决意要消除诸王势力，尤其当时拥兵十万的刘聪。刘和不久就采取行动，但因刘聪有备而战，最终刘聪率军从西明门攻进皇宫，并于光极殿西室杀害刘和，又收捕逃到南宫的呼延攸等人，并将他们斩首示众。刘聪为了稳固地位，又杀死嫡兄刘恭。 310年，石勒经宛城、襄阳，掠夺江汉一带，隔年北返。当时关东发生蝗灾，洛阳缺粮，司马越弃晋怀帝于洛阳，率朝中重臣及诸将东行。而后怀帝动员诸将讨伐，司马越病逝，王衍率军归葬封国（在东海）。石勒趁王衍东行至苦县（今河南鹿邑县）时率军袭击，晋军精锐受屠尽亡，重臣降后被杀。 次年，又派前军大将军呼延晏领二万七千人进攻洛阳，行军至河南时就已十二度击败抵抗的晋军，杀三万多人。后刘曜、王弥和石勒都奉命与呼延晏会合。呼延晏在刘曜等人未到时就先行进攻洛阳城，攻陷平昌门并大肆抢掠，更于洛水焚毁晋怀帝打算出逃用的船只。刘曜等人到达后就一起攻进洛阳城，并攻进皇宫纵兵抢掠，尽收皇宫中的宫人和珍宝，又大杀官员和宗室。另外更俘掳晋怀帝和羊皇后，将他们移送到平阳，史称“永嘉之乱”。永嘉之乱后，刘聪又因晋牙门赵染叛晋归降而命刘曜(刘渊养子)和刘粲(刘聪长子)攻打关中，最终攻陷长安并杀晋南阳王司马模，并让刘曜据守长安。但不久就被晋冯翊太守索𬘭、安定太守贾疋和雍州刺史麹特等反击，刘曜等兵败，刘曜更被围困于长安。终于嘉平二年（永嘉六年，312年）被逼退出长安，撤回平阳。 313年晋怀帝被杀，晋愍帝于长安继立帝位，刘聪派刘曜持续攻打。316年晋愍帝投降，最后受辱被杀，至此西晋灭亡。 刘聪自嘉平三年（晋建兴二年，314年）十一月立刘粲为相国、大单于，总管各事务后，就将国事委托给他。自己则开始贪图享乐，次年更设上皇后、左皇后和右皇后以封妃嫔，造成“三后并立”。后来更立中皇后。在委托政务给刘粲的同时，刘聪亦宠信中常侍王沈、宣怀、俞容等人，刘聪因于后宫享乐而长时间不去朝会，群臣有事都会向王沈等人报告而不是上表送呈刘聪。而王沈亦大多不报告刘聪，只以自己喜恶去议决事项。王沈等人又贬抑朝中贤良，任命奸佞小人任官。刘聪又听信王沈等人的谗言，于建元二年（316年）二月杀特进綦毋达、太中大夫公师彧、尚书王琰等七名宦官厌恶的官员，侍中卜干哭着劝谏但就遭刘聪免为庶人。 太宰刘易、御史大夫陈元达、金紫光禄大夫刘延和刘聪子大将军刘敷都曾上表劝谏刘聪不要宠信宦官。但刘聪完全相信王沈等，都不听从。刘粲与王沈等人勾结，因此向刘聪大赞王沈等人，刘聪听后即将王沈等人封列侯。刘易见此又上表进谏，终令刘聪发怒，更亲手毁坏刘易的谏书，刘易于是怨愤而死；陈元达见刘易之死，亦对刘聪失望，愤而自杀。朝廷在王沈和刘粲等人把持之下纲纪全无，而且贪污盛行，臣下只会奉承上级；对后宫妃嫔宫人的赏赐丰盛，反而在外军队却资源不足。刘敷见此就曾多次劝谏，刘聪却责骂刘敷常常在他面前哭谏，令刘敷忧愤得病，不久逝世。 因为刘聪的完全信任，王沈和刘粲等人又与靳准联手诬称皇太弟刘乂叛变，不但废掉并杀害刘乂，更趁机诛除一些自己讨厌的官员，又坑杀平阳城中一万五千多名士兵。刘粲在刘乂死后被立为皇太子。 麟嘉三年（318年），刘聪患病，以太宰刘景、大司马刘骥、太师刘𫖮、太傅朱纪和太保呼延晏并录尚书事，又命范隆为守尚书令、仪同三司，靳准为大司空，二人皆决尚书奏事，以作辅政。七月癸亥日（8月31日）逝世，在位九年。谥为昭武皇帝，庙号烈宗。刘聪死后刘粲继立。 刘曜时期 刘聪灭西晋后安逸豪奢，疏忽政事，当时曹嶷、石勒等将领分别占据山东及关东。实际范围只有山西和刘曜镇守的关中。 麒嘉三年（晋太兴元年，318年），刘聪患病，征召刘曜为丞相，录尚书事，与石勒一同受遗诏辅政。但刘曜和石勒都辞让。刘聪于是任命刘曜为丞相、领雍州牧。同年刘聪死，太子刘粲登位。八月升刘曜为相国、都督中外诸军事，仍旧镇守长安。 刘粲随后继位。靳准心有异志，于是先打算铲除朝中刘氏势力，于是向刘粲诬称一众王公大臣想行废立之事，谋图诛杀皇太后靳月华及自己，改以刘粲弟刘骥掌权，劝刘粲尽早行动。但刘粲不接纳。靳准为了令刘粲听从自己，于是恐吓靳月华和皇后靳氏，称一旦刘粲被废，靳氏一族就会遭到诛杀。二人于是趁刘粲宠幸之机劝说刘粲，终令刘粲听从，并杀害刘景、刘𫖮、刘骥、齐王刘劢和大将军刘逞等人，朱纪和范隆则被逼出奔长安投靠刘曜。八月，刘粲于上林苑阅兵，谋图进攻拥兵在外的石勒，又以靳准为大将军，录尚书事。而刘粲又继续贪图酒色欢乐，将军政大权都交给靳准。而靳准亦扶植宗族势力，命堂弟靳明为车骑将军，靳康为卫将军。后靳准叛变，杀害刘粲和大杀刘氏，并自称汉天王，向东晋称藩。刘曜与石勒得知后共同平乱。 刘曜进兵平阳。十月，刘曜进占赤壁（今山西河津县西北赤石川），太保呼延晏等人从平阳前来归附，并兴早前因靳准诛杀王公而逃至长安的太傅朱纪等共推刘曜为帝。刘曜称帝后，派征北将军刘雅和镇北将军刘策进屯汾阴（今山西万荣），与石勒有掎角之势，共同讨伐靳准。 靳准先前已败于石勒，见刘曜和石勒现在共同讨伐自己，于是在十一月派侍中卜泰向石勒请和，但石勒将卜泰囚禁被送交刘曜。刘曜于是向卜泰说：“先帝刘粲在位时确实乱了伦常，司空靳准你执行伊尹和霍光废立之权，令我得以登位，实在是很大的功勋。若你早早迎接我入平阳，我就要将朝政大事都全部委托给你了，何止免死？你就为我人入城传话吧。”于是将卜泰送返平阳。靳准听到卜泰的传话后，因为自知当日夺权时杀了刘曜母亲胡氏和刘曜兄长，于是犹豫不决。十二月，靳康联结乔泰和王腾等人杀死靳准，共推尚书令靳明为主，又命卜泰带六颗传国玺向刘曜投降。此举令石勒十分愤怒，领兵进攻靳明，靳明大败而只得退入平阳，婴城固守。随后石勒与石虎一同进攻平阳，靳明于是向刘曜求救，刘曜于是派刘雅和刘策迎接，靳明于是带着一万五千名平阳人民逃出平阳。刘曜及后却大杀靳氏，一如靳准杀刘氏一样。在其欲纳靳康女为妾时，靳女说及家族被灭，号泣请死，刘曜出于哀怜才放过了靳康的一个儿子。 石勒在靳明逃离后亦攻入平阳，留兵戍守后东归，并于光初元年（晋太兴二年，319年）年初命左长史王脩献捷报给刘曜。刘曜于是派司徒郭汜授予他赵王和太宰、领大将军的职位，并加如同曹操辅东汉时的特殊礼待。但留仕刘曜的王脩舍人曹平乐却向刘曜称王脩此行其实是要来探听刘曜虚实，以让石勒趁机袭击刘曜。刘曜眼见其军队疲惫不堪，于是听信曹平乐之言，追还郭汜并处斩王脩。石勒及后从逃亡回来的王脩副手刘茂口中得知王脩被杀，因此大怒，开始与刘曜交恶。 刘曜回到长安后，即迁都长安，并设立宗庙、社稷坛和祭天地的南北郊。又改国号为“赵”，史称“前赵”。同年，石勒自称赵王，正式建立“后赵”。汉国就此一分为二。 后刘曜陆续平定上郡羌、仇池氐等关陇羌氐，威服前凉，雄踞关中。石勒则派石虎击败晋将段匹䃅夺幽州，击败曹嶷夺青州。 光初七年（324年），后赵司州刺史石生在新安击斩前赵河南太守尹平，并掠五千多户东归。自此前赵和后赵在河东、弘农之间就常有战事。光初八年（325年），后赵将领石佗攻前赵北羌王盆句徐，大掠而归。刘曜因而大怒，派中山王刘岳追击，自己更移屯富平作为声援，终大败后赵军并斩杀石佗。不久后赵西夷中郎将王腾以并州投降前赵。 五月，晋司州刺史李矩等因多次被后赵石生所攻，投靠前赵。刘曜于是派刘岳和呼延谟领兵与李矩等人共同进攻石生。但刘岳围困石生于金镛城时，被救援石生的石虎击败，退保石梁，更反被石虎所围；呼延谟亦被石虎所杀。刘曜于是亲自率兵救援刘岳，但及后却因军中夜惊而被逼退回长安。刘岳因无援而且物资缺乏，终被石虎所俘并送往后赵都城襄国（今河北邢台）。王腾亦为石虎击败并杀害，郭默和李矩亦被逼南归东晋，李矩长史崔宣则向后赵投降。此战令后赵尽得司州。 光初十一年（328年），石虎领四万人进攻河东，获五十多县反叛响应，于是进攻蒲阪。因杨难敌先于光初八年（325年）反攻前赵于光初六年（323年）所占领的仇池；又成功抵抗前赵于光初十年（327年）的攻击。另一方面前凉于光初十年知道前赵光初八年被后赵击败后，即恢复其晋朝的官爵，并侵略前赵。刘曜于是派河间王刘述领氐族和羌族兵众守备秦州以防仇池和前凉从后偷袭，自己则亲率全国精锐救援蒲阪。石虎恐惧退军，刘曜追击并在高候大败石虎，斩杀石曕。后刘曜又进攻石生所驻的金镛城，以千金堨之水灌城，又派兵攻汲郡和河内，令后赵荥阳太守尹矩和野王太守张进等投降。这次大败震动后赵人心。而刘曜此时却不安抚士众，只与宠臣饮酒博戏。 三个月后，石勒亲率大军救援石生，并命石堪等人在荥阳与石勒会师。刘曜在得悉石勒已渡黄河，才建议增加荥阳守戍和封锁黄马关以阻后赵军。不久洛水斥候与石勒前锋交战，刘曜从俘获的羯人口中得知石勒来攻的军队强盛才感惧怕，于是解金镛之围，在洛水以西布阵。石勒则领兵进入洛阳城。 后前赵前锋在西阳门与后赵军大战，刘曜亲自出战，但未出战就已饮酒数斗；出战后再饮酒一斗多。后赵将石堪乘其酒醉大败赵军，刘曜在昏醉中退走，期间堕马重伤，被石堪俘获。 刘曜被俘后被送往襄国，途中石勒派李永医治刘曜。到襄国后，石勒让他住在永丰小城，给予侍姬，更命令刘岳等人去探望刘曜。石勒后来命刘曜写信劝留守长安的太子刘熙尽快投降，但刘曜却在信中命令刘熙和大臣们匡正和维护国家，不要因为自己而放弃。石勒看见后感到厌恶，后来刘曜还是被石勒所杀。 刘熙时期 刘曜兵败为后赵所俘，刘熙成为前赵实际上的领导人，但并未登基称帝。石勒军乘胜西进，刘熙、刘胤等人放弃长安，逃奔上邽（今甘肃省天水市）。329年九月，后赵出兵攻占上邽，杀赵太子刘熙及诸王公侯、将相卿校以下三千余人，又在洛阳坑杀其王公及五郡屠各五千多人，并迁徙其百官、关东流民、秦雍大族九千多人到襄国，前赵灭亡。 部分事件年表 270年，河西鲜卑秃发树机能与匈奴刘猛率众内侵，9年后平定。 294年，晋惠帝时，匈奴郝散叛，不久平定。 296年，郝散之弟刘度元反叛，晋将周处阵亡。3年后平定。 299年，江统著《徙戎论》，未被采纳。 304年，刘渊独立，称汉王。 308年，刘渊称帝，国号“汉”，改元元熙。 309年，迁都至平阳。 310年，刘渊病重，于8月19日去世，太子刘和继位。 310年，刘和欲清除诸王势力失败，被刘聪所杀。刘聪为了稳固地位又杀死嫡兄刘恭。 311年，永嘉之乱，汉将石勒屠尽晋军精锐。汉军攻陷洛阳，俘虏晋怀帝。后刘聪派遣刘曜等进攻关中，攻陷长安。 312年，汉军被逼退出长安。 313年，晋怀帝被杀，晋愍帝在长安继位。 316年，晋愍帝投降，后受辱自杀。同年，刘聪听信谗言杀死皇太弟刘乂。 318年，刘聪去世。刘聪死后刘粲继立 319年，刘粲在外戚靳准唆使和恐吓下大杀宗室，并将权力交给靳准。靳准叛变，杀害刘粲和大杀刘氏，并自称汉天王，向东晋称藩。 319年，靳氏内乱，靳准被杀，靳明被推举为主。石勒进攻首都平阳，靳明向刘曜求救并逃离平阳。刘曜后将靳氏灭族（余一子）。后石勒攻入平阳。 319年，刘曜迁都长安，并称帝，改国号为赵，史称「前赵」。同年，石勒自称赵王，史称后赵。汉国由此分裂。 324年，后赵司州刺史石生在新安击斩前赵河南太守尹平，并掠五千多户东归。 325年，后赵将领石佗攻前赵北羌王盆句徐，大掠而归。 328年，328年刘曜进攻金墉城，以及汲郡和河内，后赵荥阳太守尹矩和野王太守张进等投降，后赵大震。石勒亲率大军救援金墉城。双方决战，前赵战败，刘曜被俘。前赵太子刘熙放弃长安逃往上邽。 329年，后赵出兵攻占上邽，杀赵太子刘熙及诸王公侯、将相卿校以下三千余人，又在洛阳坑杀其王公及五郡屠各五千多人，并迁徙其百官、关东流民、秦雍大族九千多人到襄国，前赵灭亡。 人物与世系 匈奴汉世系图 前赵世系图，其中赵宣成帝姓名不可考，刘曜生父，早亡，刘曜由刘渊抚养长大 若干问题研究 刘渊世袭是否为伪造 知乎上一篇回答阐中提过这个问题，不过过于简略。我有在搜索中发现了刘渊的族属与汉国前史这篇文章，比较详细。 旧时说“五胡乱华”的开先河者刘渊，其家事也成为那段纷乱历史中的一团迷雾。刘渊，字元海，十六国时期北方少数民族起兵反晋第一人。由于史书记载的混乱，自上世纪50年代以来，史学界对其匈奴贵族身份产生了诸多疑问，有的更认为其并非南匈奴贵族子弟，而是屠各部落人顶替的。这段公案至今仍没有比较全面的结论。 为什么史学界对其出身的会产生疑惑，其中最大的原因出在几种基本史料的相互矛盾上。 目前，我们了解匈奴汉赵国历史的基本史料，不外乎《晋书》、《资治通鉴》这几大出处，以《晋书》为最核心部分，《晋书》里又以《刘元海载记》最为系统。但其内容多为史学家诟病，在于其原始史料很可能出自汉赵国的御用史官著述，对刘渊家族多有回护，对其事迹描写羼杂了很多脱离事实的夸大。 其次是《晋书》的《北狄匈奴传》，系统描述匈奴的整体活动，尤其是叙述了多批匈奴进入内地的情况。相对比较客观的是《资治通鉴》，但由于时代已经较晚，通鉴的史料价值多在补充，而没有太多新的根本性材料。 目前争议最大的地方一是刘渊家族和东汉末年南匈奴单于的世系是否有造假。我们知道，目前能看到的南匈奴末代单于胡厨泉直到曹丕登基时仍然在世。这也是有关他的最后一次史料记载。其最后命运，史书不详。此后，在晋武帝时期还有匈奴单于出现在朝贺名单里，但名字缺如。 同时，在《载记》载记，史书体裁之一，记载不属于正统王朝的割据政权的事迹。汉·班固作史时最早列此目，后《晋书》、《四库全书》等沿用之。这里当指《晋书 刘元海载记》里写到，胡厨泉的儿子刘豹在南匈奴五部里逐渐做大，刘豹之子刘渊被魏晋朝廷召到洛阳为质子的事。以少数民族贵族子弟在首都为质子是秦汉以来的中央王朝对地方和边地势力上层的一种常见政治手段。一个目的是做人质，另外一个目的是让这些贵族子弟接受汉文化熏陶，产生彼此之间的文化融合。由于胡厨泉的下落不明，刘豹的身份也就跟着遭到质疑。史书没有留下刘豹的具体生平履历，有史学家在分析其生卒的时候发现一个可能，他要在70岁才生下刘渊。显得不近情理。对此，也有学者认为这样的推测还不足扳倒《载记》的世系。 另一个争议是在世系问题上引申出来的——刘渊家族的族属。很多学者无法理解《晋书北狄匈奴传》里提到的“屠各最豪贵，故得为单于”这10个字。屠各是西汉时期匈奴下属部落，很早投降了汉朝，其王子金日嘽备受汉武帝喜爱。这一支匈奴人的上层肯定是汉化最早也是最深刻的。有很多学者已经看到，西汉到西晋，屠各部落从西北逐渐向内地迁徙。在北部边境多有其活动迹象。屠各匈奴或匈奴屠各往往连成一个名词。而刘渊属下也多次被人称为屠各。如王弥称刘曜屠各子，介休县令贾浑的妻子叫汉国军人屠各奴。这又让人想起，北齐时期鲜卑人刘贵骂汉族士大夫：“一钱汉，直须死！”可见，这些话是一种蔑称。刘曜是屠各子，有人认为正说明其是屠各部人。但为什么刘渊家族是单于后裔却又是屠各部落了呢。于是有学者解释说，是屠各部人逐渐进入曹操分置的南匈奴五部地区，取得了领导权。将原来的南匈奴王室后裔排挤出去，到刘渊时期完成了这样的冒名顶替。于是大家都知道，屠各取得了南匈奴的单于位置。所谓匈奴和屠各合一了。 这个推理有一定的道理，最典型的论述可以看到陈勇先生《汉赵史论稿——匈奴屠各建国的政治史考察》。但就是在这本最近期的著作里，我们还是无法找到，刘渊家族是屠各的直接证据。所谓屠各贵族变为匈奴单于的说法，还是一个假设。从作者经常使用觉得、大概、或许这样的推论用语，可见本人也没有最后确定的判断。史学研究是最需要史料作为论据的。所谓刘渊是屠各人的说法，早在唐长孺先生的大作中已经有所叙述。也有学者如周伟洲先生认为屠各的说法是西晋以来的泛称，是概念上的转化，而不能说明刘渊家族的单于后裔身份是屠各冒领的。外界把南匈奴也称呼屠各，正如周伟洲先生所说，是西晋以来，屠各含义变化导致的。就此我也大胆假设一下，由于屠各部落比较早进入内地，金日磾王子又得到汉武帝的喜爱，这对屠各部落在内地的发展提供了某些便利。于是我们看到屠各逐渐在很多地方出现了。同时，中原汉族也逐渐将屠各部视为归化的匈奴人、臣服的匈奴人的代称。发展到西晋时期，屠各成了内迁匈奴人的另一种广泛称呼。如果这个推测成立，那么刘渊家族被称呼为屠各也就不足为奇了。 刘渊家族为屠各假说难以回答的一个问题是，如刘渊为屠各贵族，那么其必然不是一个单独家族进入山西南部的南匈奴五部地区，而是有相当的一批屠各部人迁徙到山西来。刘渊家族作为屠各首领，其手下必然有得力的追随者出现于史书。但很遗憾，我们现在的史料中看不到一例。相反，我们看到的是，匈奴贵族的大姓氏如呼延、须卜、乔等姓氏频频出现在汉国历史上，再就是汉国的皇亲刘氏家族，以及很多不了解其种族的刘氏出现在汉国的历史上。这样我们无法看到一个屠各部落整体进入南匈奴地区的过程。再退一步说，原南匈奴五部在三国时就有3万落，10几万人。刘渊如为屠各冒充单于后裔，外来的屠各部要达到这个目的，必然要有足够的武力，慑服原有南匈奴人，并且得到他们的普遍认同。这在三国以来逐渐脆弱的匈奴部落组织里，也还需要传统部落领袖的支持。屠各和南匈奴五部的融合不是简单的一蹴而就。但我们看到，刘渊族祖刘宣对刘渊全力支持，和分属两部的联盟关系完全不同。 为什么在刘豹、刘渊家族要在胡厨泉后改姓刘呢。这也是很多学者觉得迷惑的地方。有人认为这是屠各人夺取了单于之位后的做法。但实际上还有另外一个可能，就是刘渊家族都各有其本名，如后来的赫连勃勃，其另外一名是屈丐，这是其本族名字的音译。刘渊的名字十分汉化，名渊字元海，或许和乾卦的内容有关。而刘豹的名字则很可能是更为直接的来自意译。至于刘聪、刘曜等也是受汉民族地区影响改的的汉名。这个改名的时间可能在刘渊在洛阳为质子时就开始了。为其改名的人或许是刘渊的汉语老师或是洛阳的权贵们。这个改名过程十分彻底，再加上原始档案消失，以至我们已无法知道刘渊家族人的本名了。原南匈奴贵族也大多同时改为汉姓。题外话，能用汉名说明刘渊家族的汉化程度是比较高的。这和刘渊长期居住在洛阳接受汉文化教育关系甚大。 为什么刘渊的汉国只存在了不到四分之一个世纪就瓦解了呢？这是可以做为一篇论文来写的。其实不外乎以下几点：其一，匈奴贵族的汉化和原生态文化的矛盾。刘渊的汉化虽然比较深刻，但匈奴五部里的普通人就难说了。刘渊家族的汉化和本民族文化是并行存在的。刘聪立多位皇后的事情被汉族史官不耻，但这或许是匈奴阏氏制度的遗迹。后人说汉国的胡汉分治政策是创造，但其实那是在汉族和少数族社会之间的一个特殊形式。我们看辽代的南北面官制度可以理解为也是胡汉分治政策的地域形式。刘渊去世后，汉化一派还不足够控制局面，于是汉国没有巩固的政权基础，无法得到大多数汉族的支持。最有代表性的事件是刘聪杀死了西晋的两位被俘皇帝。这对汉族政权是非常大的耻辱，在民族文化心态上无疑留下了很大的伤疤。其二，汉国的势力远远不是北方最雄厚的。虽然汉国灭亡西晋，但同时北方各地已经出现了多个割据一方的地方政权。汉国局限在晋南豫北，后来刘曜前赵国局限在关中陇西。各北方少数民族受到匈奴起兵的刺激，纷纷割据。汉赵国没有取得他们的支持，而且还和鲜卑等长期互相攻击，这就使得汉国也无法取得更多少数民族的支持。其三，汉赵国内部的内乱导致政权严重不稳。如刘聪时，和汉国结盟的氐羌部落大量叛逃影响巨大。同时匈奴贵族内部斗争消耗严重。这些因素综合起来，魏晋时期的中国好似青涩的青年，十六国的血气方钢就是代表。汉赵国就好似一颗流星，突然闪耀出巨大的光芒，但又很快消失在夜空里了。 对刘渊家族来历、汉国历史的疑问的产生，现存史料叙述中的模糊不清是基本因素。十六国里，北方最早起兵的汉国灭亡西晋，是历史上第一次少数民族政权消灭了汉族中央政权，这是空前的，也成为后代少数民族政权的榜样。它们做大后效仿汉国，期望夺取全国统治权。十六国期间的前秦，后来的北魏、辽金、元清均是。但对其对立面的政权，如晋朝人来说，刘元海是无法容忍的元凶。我们现在看，唐代人修晋书，依然采取了来自十六国政权的史书为基本史料，特别是《十六国春秋》，这部以原各国史官记载为底本的著作。唐朝史官看来是秉承了聚各家于一的方法，体现了李世民为首的政权意志，采取了包容的心态看历史。于是他们把很可能是汉国史官原文的溢美之词采纳进来，成为《载记》部分，让读者自己去评判。这些内容成为后代了解中国这段纷乱历史的核心资料。《晋书》的取材的包容性在晚期的史书中是看不到的。宋元以后的正史，文字都被事先涂抹上一层过滤膜。很多原始生动的内容被滤掉了。文字也就显得枯燥和程式化。 对刘渊家族的身世、屠各名称的演变，南匈奴单于世系，这些问题还有很多待解之处。大胆假设的好处，在探讨汉国早期历史上可以得到充分的发挥。但小心的求证依然不可或缺。在没有充分证据情况下，不能仅凭臆断，进而无限制的推演历史进程。凡事必有出处，仍然是史学的基本规范、金科玉律。 尽管《晋书载记》有很多不尽如人意的地方，但仍要以其内容为基本出发点。对基础史料的信与不信是个大难题。我们无法苛求每个字都是真实的，更可况出于那段乱世的汉赵国史书呢。早有人说十六国历史难治，难在史料不足和自相矛盾处往往难以诠释。刘渊家族的背景和汉国早期史就是最典型的例子。文献记载缺失和自我矛盾，考古文献方面尚未提供新证据，或许未来会有出土文物方面的突破，那是后来者的事。 某位匈奴王子，本有其民族名，但后人知道的是他的汉族名字刘渊。经过几十年的韬光养晦，他秘密集聚了南匈奴五部的力量，在西晋末年回到离石左国城举起了反晋的汉旗。匈奴和汉朝曾形如水火，其后人却自称汉人外甥，改用汉朝皇帝的姓氏，建立另一汉国，灭掉了汉族建立的中央政权，一度成为北方霸主，打破了中国早期社会的汉族为核心的内循环社会生态，听起来好像是历史和人们开了个巨大的玩笑，但这确实又具有历史上的划时代意义。公元310年，刘渊称帝不久后死去，没有看到西晋灭亡，匈奴汉国的部队进入洛阳。我想如果他在世的话，洛阳也许就不会被无情的毁灭了。以刘渊的汉化程度，他可能真要定都洛阳。但历史无法假设，他的未经事业，要到魏孝文帝才得以实现。那是时隔近2个世纪以后的事了。这之间的巨大的时空就是北方少数民族和汉族融合的过程。北魏继承了汉国开创的历史轨迹前行，于是才有了北方的统一，为日后隋唐统一中国奠定了基础。 暂时放下仍然有待商榷的细枝末节，我们可以从基本史料中发现，以汉国开篇的北方少数民族政权前仆后继，在内地建立起诸多政权，如走马灯般旋起旋落。中原文化遭到极大的摧残，与此同时，北方汉族和少数民族在巨大的社会动荡中共存，逐渐融合。汉人南逃使南方得到第一次人口大规模输入和开辟。中国大地的这次大分裂中孕育了希望的种子。站在历史长河中的砥柱石上，或许能看得更远些。 有时候读史书好似侦探探案，好似医生在做手术，如在密林里发现古寺的兴奋旅行者。这是读史的特殊乐趣，是史学研究的独特乐趣。匈奴汉国故事呈现严重的碎片化，那些尚未拼接上的部分恰是给后人留下的最迷人的待解之谜。 所谓刘渊「复兴」汉朝的愿望 这篇文章来自马前卒在知乎的回答 山区老农民问【现在谁当毛主席？】，我们非常清楚他的意思，知道他想问现在谁是国家元首，甚至不会意识到他的语法不通，只会感慨农民的视角闭塞。类似地，不要以通读24史之后的视角考虑当时人的心态。刘渊不知道以后还有唐宋元明清等统一帝国，也不知道什么算是“正朔”。对于他们那个时代的人来说，汉朝是第一个也是唯一的“真帝国”。 什么是“真帝国”？如果你的历史知识比朝代表再深入一点点，对中国历史稍微有一些量化了解，能写出各个朝代持续的大致时间，了解各个政权的基本结构和控制范围，你就能能理解魏晋时期的人对“真帝国”的定义。汉朝实行单一制政权组织模式，建国不久就消除了异姓王，弱化了同姓王，血统稳定传承十几代；它始终以刘家为政权核心，政令通行全国；它统治下方圆几千里的知识分子都尊奉同一个文化体系，使用同一套文化符号；在那个时代，它就是统一帝国的代名词。 这样的帝国，汉之前没有，汉之后也没有。三皇五帝太渺茫，夏朝是传说，商周只是王室霸权下的松散联盟，秦朝几十年就亡国，而且文化不盛，魏晋立国不稳，战乱频繁，皇室被蛮族随便欺负。所以能代表中原王朝的政权只有汉朝，就连普通中原平民的称呼都固定为“汉子”和“女汉子”，他们的民族永远被称为汉族。 刘渊作为当时的中原霸主，他的最高梦想就是为自己的后代建立一个稳定的法统和道统，希望自己的子孙也像刘邦的子孙那样统治中国，如果说他需要一个榜样，他的榜样只能是汉朝。所以他坚持自己也是“刘家子孙”，要建立一个汉朝——或者说稳定的中国政权。这和刘渊自认的刘家血统毫无关系，你也不要指望刘渊对汉族或者刘邦本人有什么真正的感情——统治者永远不需要对子民有感情。 类似的例子很多。沙皇的“沙”，实际上来自于“凯撒”的东欧译音。但这并不意味着莫斯科的统治者打算给自己找个意大利祖先，只是因为他们自称第三罗马，试图拥有昔日东罗马帝系的权威罢了。而东罗马帝国大多数时间也根本和罗马没关系，但这不妨碍东罗马帝国的许多人自称罗马人。中世纪神圣罗马帝国的皇帝反复在加冕时重申自己是“罗马人的王”，但尖刻的伏尔泰会给出这样的评语：【既非神圣,也非罗马,更非帝国】。所以，刘渊就算成功地打败所有汉族和蛮族军阀，在长安或者洛阳建立了自己的“汉朝”，那也绝不是汉朝的重生。后来还有北周和北齐煊赫一时，春秋战国的那些贵族在天有灵就会开心吗？ 一些相关文献 载记第一 刘元海子和刘宣 汉赵国史 汉赵史论稿]]></content>
  </entry>
</search>
