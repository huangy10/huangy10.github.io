<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>治部少辅</title>
  
  <subtitle>大一大万大吉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.codewoody.com/"/>
  <updated>2019-04-16T06:57:54.854Z</updated>
  <id>http://www.codewoody.com/</id>
  
  <author>
    <name>Woody Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>清华GPA事件备份:2019.04.16</title>
    <link href="http://www.codewoody.com/posts/34235/"/>
    <id>http://www.codewoody.com/posts/34235/</id>
    <published>2019-04-16T06:42:27.000Z</published>
    <updated>2019-04-16T06:57:54.854Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.codewoody.com/uploads/big/d08181298573faecd2ad04bcdf7931dc.jpg" alt=""></p><p>文章链接 <a href="http://www.codewoody.com/posts/34235/">http://www.codewoody.com/posts/34235/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/d08181298573faecd2ad04bcdf7931dc.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;文章链接 &lt;a href=&quot;http://www.codewoody.
      
    
    </summary>
    
      <category term="杂谈" scheme="http://www.codewoody.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Haproxy支持Ipv6</title>
    <link href="http://www.codewoody.com/posts/12489/"/>
    <id>http://www.codewoody.com/posts/12489/</id>
    <published>2019-04-13T08:47:20.000Z</published>
    <updated>2019-04-19T08:15:59.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Haproxy"><a href="#Haproxy" class="headerlink" title="Haproxy"></a>Haproxy</h2><p><a href="http://www.haproxy.org/" target="_blank" rel="noopener">Haproxy is a reliable, high performance TCP/HTTP Load Balancer</a></p><p>这是官网对于Haproxy的介绍，其作用的类似于Nginx，是一个均衡负载的服务器。其相比于Nginx的好处是其代理TCP流量的功能配置起来非常的简单。我这里主要拿Haproxy来配置Shadowsocks的跳板机。</p><p>前一段时间，GFW的墙好像又加高了，很多时候在教育网外连接服务器不是很可靠。所以我考虑干脆在教育网环境下做一个跳板服务器，这样在外面可以先跳到教育网，然后再从教育网过墙。</p><p>教育网的另一个好处是有IPv6。貌似IPv6上面的拦截比较弱，而且，绝大多数的高校对于IPv6都是免流量费的。因此，我们可以从IPv4公口进，然后走IPv6出。</p><h2 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h2><p>不过，问题是通过apt安装的haproxy是<a href="https://github.com/Entware/Entware-ng/issues/426" target="_blank" rel="noopener">不支持IPv6的</a>！</p><p>我们只能自己动手从源码编译了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.haproxy.org/download/1.7/src/haproxy-1.7.2.tar.gz</span><br><span class="line">tar -xzf haproxy-1.7.2.tar.gz</span><br><span class="line">cd haproxy-1.7.2</span><br><span class="line">make TARGET=linux2626 USE_GETADDRINFO=1</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>文章链接 <a href="http://www.codewoody.com/posts/12489/">http://www.codewoody.com/posts/12489/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Haproxy&quot;&gt;&lt;a href=&quot;#Haproxy&quot; class=&quot;headerlink&quot; title=&quot;Haproxy&quot;&gt;&lt;/a&gt;Haproxy&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.haproxy.org/&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="ss" scheme="http://www.codewoody.com/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>政史:珍珠港事件前日方决策过程梳理</title>
    <link href="http://www.codewoody.com/posts/10462/"/>
    <id>http://www.codewoody.com/posts/10462/</id>
    <published>2019-04-08T14:05:57.000Z</published>
    <updated>2019-04-10T13:36:37.978Z</updated>
    
    <content type="html"><![CDATA[<p>在知乎上看到的比较好的回答，作为备份放在这里：</p><ol><li>原文链接：<a href="https://www.zhihu.com/question/306368870/answer/639051842" target="_blank" rel="noopener">https://www.zhihu.com/question/306368870/answer/639051842</a></li><li>archive.is上的备份网页：<a href="http://archive.is/4dOL3" target="_blank" rel="noopener">http://archive.is/4dOL3</a></li></ol><a id="more"></a><p><img src="https://imgs.codewoody.com/uploads/big/b38e3bdd40d9c4234935f6853ff6d154.jpg" alt="珍珠港俯视图（1941年10月30日）"></p><p>以下是原文内容：</p><p>因为再不突袭，日本人这大东亚战争就算是白打了。</p><p>咱们这里需要补充一个小知识，在20世纪30年代末，日本的能源结构是这样的：80%的石油来自美国，10%的石油来自东印度群岛，只有7%左右的石油可以自给。那么问题来了，日本从918开始折腾到40年，找到能替代美国的石油生产地了么？</p><p>没有。不仅石油高度依赖美国，铁和各种军需物资都严重依赖美国，甚至可以这么说，要是没有美国人提供的这些物资，日本这侵华战争就根本打不起来。</p><blockquote><p>1937年美国对日出口总值为2.89亿美元,其中石油、精炼油、废钢铁、原棉这四项战略物资就达1,42亿美元,约占二分之一。以石油一项而论,日本所需石油来自美国的份额,1937年占80%,1939年占85%。——齐世荣.绥靖政策研究.,北京：首都师范大学出版社,1998：413<br>据统计，1937－1938年，日本从美国进口的军需品占其军需品总进口额的55%。1937年，美对日废钢铁的出口量是1931年的40倍之多。——杨玉圣.中国人的美国观.上海: 复旦大学出版社，1997：152<br>（1937、1938年日本）从美国输入铁合金为77.53%和82.71%,铜的比例高达95.18%和90.89%,煤油及其产品为6.271%和65.57%,汽车及零件为9.241%和64%,飞机及零件为70.19%和7.692%,金属工作母机为69.53%和67.09%。——沈庆林.中国抗战时期的国际援助.上海人民出版社,2000：53</p></blockquote><p>这就是二战中最讽刺的地方，美国人是日本人在二战前期最主要石油来源国，而且没有之一。日本人觉得不能任由老美这么掐着自己的脖子，于是1934年出台了《石油工业法》表示要加强本国石油产业建设，效果……一般吧；然后37年又搞了个《合成油法案》，表示要开动大日本帝国先进之科技手段以煤改油，效果……更一般。</p><p>考虑到1937年日本的财政收入才47亿日元，而以当时的汇率来看大概3日元可以折合1美元，大家可以感受一下每年日美之间几亿美元的进口额意味着什么。而更倒霉的是虽然侵华战争开始以后日军进展极其顺利，然而中国是个贫穷的农业国，重工业基础极其薄弱，而工业建设又是个耗时巨大、烧钱极多的活儿……所以日本人十分郁闷地发现自己这仗是越打越大，然而钱却都进了美国人的兜。</p><p>这就是为什么37年日本人在扬子江上炸了美国船，罗斯福把这事按下去的原因之一——顺便一提，日本人为了平事掏出来了2214007.36刀，1937年的两百万美元啊……日本人在占领区甚至搞了一次“抵制美货”的闹剧，然而美国人对此并不在意：有本事你抵制我的石油啊？</p><p>美国国内群众此时对日本人的反感情绪已经是十分强烈了，甚至有几百名学生代表参与了焚烧日本丝绸的行动。等到了1938年美国政府觉得实在不能再这么容忍日本人了！必须上点手段了！于是政府向上百家工厂写信：<strong>建议不要跟日本人做生意</strong>。</p><p>这就是赫赫有名的“道义禁运”</p><blockquote><p>6月11日,赫尔在记者招待上公开谴贵对和平居民的空袭轰炸,随后他写给美国148家注册出口飞机和飞机部件的厂家,表示:政府强烈反对把飞机和航空设备出售给世界上任何对和平居民进行轰炸的国家——赫尔回忆录·第一卷：569</p></blockquote><p>道义禁运的效果极其明显，立竿见影，日本人37年从美国进口的飞机及部件达到248.4万美元，38年为1745.4万美元，增长了7倍。<br>这么拖拖拖一直拖到39年重庆轰炸，美国人民一看艾玛这太惨了，咱们真的不能再卖给日本人石油了，罗斯福表示那不成啊，你不卖给他石油了他狗急跳墙去打英荷东印度群岛怎么办？为了避免战争扩大咱们还是继续做生意吧……</p><p>对日本人来讲，事情非常尴尬——你要是想继续从美国人手里拿到物资，就必须按照美国人的意思，控制战争规模；而你想控制战争规模又控制不下来，TG在敌后遍地开花，老蒋死活就不投降，你占领的地方地大物博可就是没有好用的石油，重工业基础又弱到不行。所以日本人思前想后，最后还是向东南亚伸出了魔爪。</p><p>1939年2月，日本占领海南岛；3月，日本人又搞定了距马尼拉700英里的南沙群岛；6月，派兵封锁天津英租界，7月强迫英国人跟自己一起建设“东亚新秩序”，正在欧洲被希特勒搞得焦头烂额的英国人几乎没怎么犹豫，就在7月24号跟日本人签订了“有田——克莱琪协定”，承认了日本在中国有“特殊需要”。</p><p>这下美国人终于坐不住了，7月26号美国政府正式通知日本没，咱们那个美日商约即将在六个月后废止——半年时间，你自己想想清楚，到底还要不要铁和石油了。日本人终于发现这自己扛不住啊！赶紧还是跟美国人谈谈吧，于是9月25日，海军稳健派、熟悉米英鬼畜内部动向之大将野村吉三郎任专职外相，开始跟美国进行谈判，美国人说这事好办，你们开放长江下游、尊重我们在华权利，有钱大伙一起赚嘛！只要你们肯把中国的利益让出来一点，咱们这个商约还是可以再签的。</p><p>未果。</p><p>这期间的态势十分有趣，日本人在诺门坎吃了大败仗，彻底打消了北进的念头；敌后大规模扫荡、扫荡、再扫荡，八路就是扫不干净；正面战场进入相持状态，长沙会战、随枣会战都没能达成预定的战略目标，日本国内的经济开始遭不住了。</p><p>美国人此时反而比较克制，由于罗斯福担心“再进一步就会激怒日本”，所以1940年1月日美商约失效之后两国的贸易竟然还在诡异的继续着，然而谁也不知道这样的日子会持续多久。</p><p>对日本来说，他们必须做出选择了。</p><p>1940年3月，日本拟定了军需物资自给自足计划，将更多的精力投入到了东南亚</p><blockquote><p>日本政府深切关怀足以改变荷属东印度群岛现状的任何事态——1940年4月15日,外相有田八郎讲话,太平洋战争史·第二卷：21</p></blockquote><p>日本人在东南亚的脚步越来越快，而美国人则在抓紧时间，卖出自己的最后一份石油。所以一方面是日趋紧张的局势，而另一方面则是不断攀升的石油贸易，美孚石油在7月18日向国务院报告，说日本人提出要买下他们的全部产量！美国政府内部已经吵到不可开交，罗斯福接到的报告说假如我们再不限制日本人购买航空汽油，我们自己军队就可能出现6到9个月的汽油供应不足！</p><p>在巨大的压力面前罗斯福终于决定对日本进行禁运，经过漫长的扯皮与大撕逼之后，政府官员们最终达成了一致，在7月26日宣布对航空发动机燃料及润滑油和第一号高熔度的废钢铁实行出口管制。先总统 蒋公激动地浑身颤抖，跟美国大使表示艾玛你们太够意思了！</p><blockquote><p>总统和国务卿的伟大而辉煌的举动，减轻了中国自卷入冲突以来面临的极严峻的危机。——先总统 蒋公</p></blockquote><p>在这个后来被无数人称颂的禁运限制里，国务院表示辛烷值87以上的航空汽油都必须禁运！</p><blockquote><p>日本人：解释解释，什么叫“辛烷值87以上的航空汽油都必须禁运”？<br>国务院：难道你不懂什么叫禁运？<br>日本人：我要你解释解释，什么叫他妈的“辛烷值87以上的航空汽油都必须禁运”？<br>石油公司：87号以上禁运的意思，就是他妈的87号以下不！禁！运！，还有，往86号航空汽油里加铅可以他妈的提高辛烷值！你懂了没有！？<br>日本人：哦大哥，原来这就是他妈的禁运啊！小弟明白了！</p></blockquote><p>于是1940年7月到12月，日本从美国进口的86号航空汽油同比增加了550%。</p><p>此时日本的经济已经开始在崩溃的边缘上晃悠了，国家总动员法的条款几乎已经全都实施了，结果40年日本西部和朝鲜还遭遇了旱灾，粮食收成不好，好多人连吃大米都成了问题。关键是此时日本的外汇储备也接近枯竭，再这么拖下去用不了多久你想买都买不成了！最后高层达成一致，再不对东南亚下手咱们就得先完蛋了。于是1941年7月2日，御前会议最终制定了《适应形势变化的帝国国策纲要》，表示就算是跟米英鬼畜开战，咱们也得南进！7月24日，日本出兵印度支那南部。</p><p>然后罗斯福炸了：老子不禁运你石油就是为了不让你打那边，你自己心里没点数么？于是26号冻结了日本在美的全部资产；英国人表示弟儿你说的对，我们也禁运，然后切断了日本在婆罗洲的石油供给。27号荷兰人跟进，冻结日本资产。这下子事情再也没有回转的余地了。</p><p>日本人的精神一下子紧张了起来（……为什么才紧张！？），军方此前一直认为我把印度支那南部这么一占，你们这些米英鬼畜还不得乖乖坐下来跟我和谈么？咱们这和平近在眼前啊！</p><blockquote><p>……以此确保东亚的战略要地。由此或可使英美荷死心不再压迫日本,并给重庆政府以打击,以找到解决日中战争的突破口,进而或许有助于打开日荷谈判。所以只有尽快抓住时机实行“战略上先发制人之措施”,才能避免同英美作战,此即不战而胜之上策——信天清三郎,日本外交史·下册：668</p></blockquote><p>1941年11月，两艘日本油轮自洛杉矶附近海域空载而归。大怒的日本人……切断了英美使馆的取暖油供应。（……我是一直没搞懂日本人的脑回路）而在此之前，8月份美国人已经提出了自己的条件：日本从中国撤军、各国在中国机会均等以及日本改变三国同盟，这个条件被日本人毫不犹豫地拒绝了。9月6日，日本御前会议批准了《帝国国策施行要点》，指出10月上旬外交依然没有进展，则准备开战。</p><p>日本人最开始的计划是咱们先赶紧在东南亚占地盘，然后建立个防御圈——考虑到东南亚还有个美属菲律宾，那美国人妥妥是要来跟咱们打的，到时候咱们舰队决战，拼个你死我活！</p><p>然后联合舰队的指挥官山本五十六对此表示了不同意见——美国人啥工业能力？你什么工业能力？心里没点数么？既然已经料到要打，那为什么不趁着美国人还没有完全动员的时候直接先下手为强？要知道，海军要想重建，那难度可比陆军难多了。咱们一鼓作气消灭美国的太平洋海上力量，然后趁着美国人重建海军无暇的关口逼他就范，承认咱们大日本帝国在亚洲的霸权那是十分合理的！</p><p>11月20日，日本向美国提出最后一个谈判方案，日本人表示这绝对是自己最后的底线了</p><blockquote><p>1.日本政府和美国政府都保证,除了目前己驻有日军的法属印度支那以外,不向东南亚和南太平洋地区的任何地方进行任何武装进军。<br>2.一俟日本和中国之间恢复和平,或在太平洋地区建立了公正的和平,日本政府保证撤走目前驻扎在法属印度支那的军队。同时,日本政府宣布在本协议(以后将包含在最后协议中)订立时,准备把现驻法属印支南部的军队移驻该地区北部.<br>3.日美两国政府将进行合作,以保证两国在荷属东印度群岛取得所需要的货物和商品。<br>4.日本政府和美国相互保证把通商关系恢复到日方资金被冻结前的状态.美国政府将按日本所需的数量供应石油。<br>5.美国政府保证不采取任何措施和行动,不利于日本和中国之间为谋求全面和平所作的努力。——United States Department of State.Papers relating to the foreign relations of the United States, Japan, 1931–1941, Volume II</p></blockquote><p>美国人对此表示难以置信，并回复了一份由国务卿起草的备忘录，基本上重申了自己在8月份提出的要求。美国人所不知道的，是在自己做出这个回复以前，一支规模空前的舰队已经在单冠湾集结完毕了，那上面的飞行员此前曾反复地练习过如何低空投放鱼雷和炸弹。罗斯福此时还在犹豫要不要向日本示好，以挽回两国之间的关系，11月22日美国国务院远东司甚至接到命令，起草一份新的草案，有限度地恢复对日本的石油、食品及药物供应。然而由于中国及英国的强烈反对，这份草案最终也没能实施。</p><p>1941年12月1日，日本御前会议做出了决定：与美国开战。</p><p>1941年12月7日，珍珠港事件爆发，美国太平洋舰队遭到重创。</p><p>1942年，日本军队逼近东印度群岛的巴厘巴板炼油厂，1943年第一季度，日本的石油危机大大缓和。</p><blockquote><p>石油问题已经基本得到解决——东条英机·1943</p></blockquote><p>以上。</p><hr><p>后记：这篇文章的作者设置了禁止转载，不过我这博客也没什么人看，我放在这里也是为了备份，也许将来某天知乎挂了或者作者决定退出知乎了删除了这篇问答？另外，作者的这篇文章里面还是有一些戏谑口吻的地方，我打算围绕着作者写的主干，做一做考据，让这篇文章能够成为之后“键政”的有力资料。</p><p>文章链接 <a href="http://www.codewoody.com/posts/10462/">http://www.codewoody.com/posts/10462/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在知乎上看到的比较好的回答，作为备份放在这里：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原文链接：&lt;a href=&quot;https://www.zhihu.com/question/306368870/answer/639051842&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/306368870/answer/639051842&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;archive.is上的备份网页：&lt;a href=&quot;http://archive.is/4dOL3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://archive.is/4dOL3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.codewoody.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="政治" scheme="http://www.codewoody.com/tags/%E6%94%BF%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>996 License 1.0</title>
    <link href="http://www.codewoody.com/posts/12613/"/>
    <id>http://www.codewoody.com/posts/12613/</id>
    <published>2019-04-08T02:07:49.000Z</published>
    <updated>2019-04-08T02:56:18.458Z</updated>
    
    <content type="html"><![CDATA[</p><p>Copyright (c) <year> <copyright holders=""></copyright></year></p><p>996 License Version 1.0 (Draft)</p><p>Permission is hereby granted to any individual or legal entity obtaining a copy<br>of this licensed work (including the source code, documentation and/or related<br>items, hereinafter collectively referred to as the “licensed work”), free of<br>charge, to deal with the licensed work for any purpose, including without<br>limitation, the rights to use, reproduce, modify, prepare derivative works of, publish,<br>distribute and sublicense the licensed work, subject to the following<br>conditions:</p><ol><li><p>The individual or the legal entity must conspicuously display, without<br>modification, this License on each redistributed or derivative copy of the<br>Licensed Work.</p></li><li><p>The individual or the legal entity must strictly comply with all applicable<br>laws, regulations, rules and standards of the jurisdiction relating to labor and<br>employment where the individual is physically located or where the individual<br>was born or naturalized; or where the legal entity is registered or is operating<br>(whichever is stricter). In case that the jurisdiction has no such laws,<br>regulations, rules and standards or its laws, regulations, rules and standards<br>are unenforceable, the individual or the legal entity are required to comply<br>with Core International Labor Standards.</p></li><li><p>The individual or the legal entity shall not induce or force its employee(s),<br>whether full-time or part-time, or its independent contractor(s), in any<br>methods, to agree in oral or written form, to directly or indirectly restrict,<br>weaken or relinquish his or her rights or remedies under such laws, regulations,<br>rules and standards relating to labor and employment as mentioned above, no<br>matter whether such written or oral agreement are enforceable under the laws of<br>the said jurisdiction, nor shall such individual or the legal entity limit, in<br>any methods, the rights of its employee(s) or independent contractor(s) from<br>reporting or complaining to the copyright holder or relevant authorities<br>monitoring the compliance of the license about its violation(s) of the said<br>license.</p></li></ol><p>THE LICENSED WORK IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS<br>FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT<br>HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION<br>OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN ANY WAY CONNECTION<br>WITH THE LICENSED WORK OR THE USE OR OTHER DEALINGS IN THE LICENSED WORK.</p><p>版权所有（c）&lt;年份&gt;&lt;版权持有人&gt;</p><p>反996许可证版本1.0</p><p>在符合下列条件的情况下，特此免费向任何得到本授权作品的副本（包括源代码、文件和/或相关内容，以下统称为“授权作品”）的个人和法人实体授权：被授权个人或法人实体有权以任何目的处置授权作品，包括但不限于使用、复制，修改，衍生利用、散布，发布和再许可：</p><ol><li>个人或法人实体必须在许可作品的每个再散布或衍生副本上包含以上版权声明和本许可证，不得自行修改。</li><li>个人或法人实体必须严格遵守与个人实际所在地或个人出生地或归化地、或法人实体注册地或经营地（以较严格者为准）的司法管辖区所有适用的与劳动和就业相关法律、法规、规则和标准。如果该司法管辖区没有此类法律、法规、规章和标准或其法律、法规、规章和标准不可执行，则个人或法人实体必须遵守国际劳工标准的核心公约。</li><li>个人或法人不得以任何方式诱导或强迫其全职或兼职员工或其独立承包人以口头或书面形式同意直接或间接限制、削弱或放弃其所拥有的，受相关与劳动和就业有关的法律、法规、规则和标准保护的权利或补救措施，无论该等书面或口头协议是否被该司法管辖区的法律所承认，该等个人或法人实体也不得以任何方法限制其雇员或独立承包人向版权持有人或监督许可证合规情况的有关当局报告或投诉上述违反许可证的行为的权利。</li></ol><p>该授权作品是”按原样”提供，不做任何明示或暗示的保证，包括但不限于对适销性、特定用途适用性和非侵权性的保证。在任何情况下，无论是在合同诉讼、侵权诉讼或其他诉讼中，版权持有人均不承担因本软件或本软件的使用或其他交易而产生、引起或与之相关的任何索赔、损害或其他责任。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/kattgu7/996-License-Draft/" target="_blank" rel="noopener">https://link.zhihu.com/?target=https%3A//github.com/kattgu7/996-License-Draft/</a></p><p>文章链接 <a href="http://www.codewoody.com/posts/12613/">http://www.codewoody.com/posts/12613/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Developer’s Life Matters&lt;/p&gt;
&lt;style&gt;
svg {
  border: 3px solid #fff;
  border-radius: 150px;
  width: 150px;
  height: 150px;
  background: #de335e;
  margin: auto !important;
  display: block;
}
&lt;/style&gt;

&lt;p&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;512px&quot; viewbox=&quot;0 0 464 464&quot; width=&quot;512px&quot;&gt;&lt;g&gt;&lt;path d=&quot;m24 144c-4.414062 0-8 3.585938-8 8v120h16v-120c0-4.414062-3.585938-8-8-8zm0 0&quot; data-original=&quot;#000000&quot; data-old_color=&quot;#ffffff&quot; fill=&quot;#ffffff&quot; class=&quot;active-path&quot;/&gt;&lt;path d=&quot;m104 256h-32c-10.414062 0-19.214844 6.710938-22.527344 16h77.046875c-3.304687-9.289062-12.105469-16-22.519531-16zm0 0&quot; data-original=&quot;#000000&quot; data-old_color=&quot;#ffffff&quot; fill=&quot;#ffffff&quot; class=&quot;active-path&quot;/&gt;&lt;path d=&quot;m56 417.472656v-97.472656h-16v97.472656c-9.304688 3.304688-16 12.09375-16 22.527344 0 13.257812 10.742188 24 24 24s24-10.742188 24-24c0-10.433594-6.695312-19.222656-16-22.527344zm0 0&quot; data-original=&quot;#000000&quot; data-old_color=&quot;#ffffff&quot; fill=&quot;#ffffff&quot; class=&quot;active-path&quot;/&gt;&lt;path d=&quot;m0 288h464v16h-464zm0 0&quot; data-original=&quot;#000000&quot; data-old_color=&quot;#ffffff&quot; fill=&quot;#ffffff&quot; class=&quot;active-path&quot;/&gt;&lt;path d=&quot;m48 248.207031c.089844-.070312.160156-.144531.246094-.207031-.085938-.0625-.15625-.136719-.246094-.207031zm0 0&quot; data-original=&quot;#000000&quot; data-old_color=&quot;#ffffff&quot; fill=&quot;#ffffff&quot; class=&quot;active-path&quot;/&gt;&lt;path d=&quot;m101.121094 192h-29.121094c-13.230469 0-24 10.769531-24 24s10.769531 24 24 24h29.121094c13.230468 0 24-10.769531 24-24s-10.769532-24-24-24zm0 0&quot; data-original=&quot;#000000&quot; data-old_color=&quot;#ffffff&quot; fill=&quot;#ffffff&quot; class=&quot;active-path&quot;/&gt;&lt;path d=&quot;m143.191406 272h304.335938c-3.992188-35.945312-34.527344-64-71.527344-64h-192c-11.128906 0-22.257812 2.625-32.191406 7.601562l-11.214844 5.605469c-1.363281 10.3125-6.609375 19.320313-14.289062 25.609375 8.542968 5.769532 14.757812 14.742188 16.886718 25.183594zm0 0&quot; data-original=&quot;#000000&quot; data-old_color=&quot;#ffffff&quot; fill=&quot;#ffffff&quot; class=&quot;active-path&quot;/&gt;&lt;path d=&quot;m413.273438 80-29.882813-69.734375-33.503906 92.140625-9.605469-14.40625h-52.28125v-72c0-8.824219-7.175781-16-16-16h-80c-8.824219 0-16 7.175781-16 16v40h-69.273438l-18.117187 42.265625-30.488281-83.859375-22.402344 33.59375h-35.71875v16h44.28125l9.597656-14.40625 33.503906 92.140625 29.890626-69.734375h58.726562v40c0 8.824219 7.175781 16 16 16h16v24h16v40h16v-40h16v-24h16c8.824219 0 16-7.175781 16-16v-8h43.71875l22.402344 33.59375 30.496094-83.859375 18.109374 42.265625h61.273438v-16zm-157.273438-16h-16v16h-16v-16h-16v-16h16v-16h16v16h16zm0 0&quot; data-original=&quot;#000000&quot; data-old_color=&quot;#ffffff&quot; fill=&quot;#ffffff&quot; class=&quot;active-path&quot;/&gt;&lt;path d=&quot;m424 417.472656v-97.472656h-16v97.472656c-9.304688 3.304688-16 12.09375-16 22.527344 0 13.257812 10.742188 24 24 24s24-10.742188 24-24c0-10.433594-6.695312-19.222656-16-22.527344zm0 0&quot; data-original=&quot;#000000&quot; data-old_color=&quot;#ffffff&quot; fill=&quot;#ffffff&quot; class=&quot;active-path&quot;/&gt;&lt;/g&gt;&lt;/svg&gt;&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.codewoody.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>OC和Swift混编Frameowork优雅指南</title>
    <link href="http://www.codewoody.com/posts/56606/"/>
    <id>http://www.codewoody.com/posts/56606/</id>
    <published>2019-04-04T06:09:04.000Z</published>
    <updated>2019-04-04T06:29:41.111Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.codewoody.com/uploads/big/b5d15c27a9f2a989d35696f515aec8d6.jpeg" alt="cover"><br><a href="https://github.com/LeoMobileDeveloper/Blogs/blob/master/Swift/%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%BC%80%E5%8F%91Swift%E5%92%8CObjective%20C%E6%B7%B7%E7%BC%96%E7%9A%84Framework.md" target="_blank" rel="noopener">本文主要参考了优雅地开发Swift和Object C混编的Framework</a>。不过实际发现，完全按照文章里面”优雅的解决方案“里面的说法操作，还是没法成功。我这里根据实际情况作出了调整。<br><a id="more"></a></p><ol><li>参考的文章中在“优雅的解决方案”这个section之前的内容都是好用的，你可以用用来创建一个兼容OC和Swift的Cooca Touch Framework。</li><li>这里说的“优雅”，指的是控制OC部分接口保留的问题（详情可以参考原文部分）</li></ol><p>原文里面只说了具体的操作步骤，没有高屋建瓴地说出这种方法的实际思路：事实上，采用<code>module.modulemap</code>的方法是将OC部分打包成一个可以使用Swfit语句进行导入(import)的模块。以这个视角，我们再来梳理一下操作步骤：</p><h4 id="新建一个module-modulemap文件"><a href="#新建一个module-modulemap文件" class="headerlink" title="新建一个module.modulemap文件"></a>新建一个<code>module.modulemap</code>文件</h4><p>文件里的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module OCSource [system] &#123;</span><br><span class="line">    //由于module.modulemap和OCSource.h是在同一个文件夹的，如果不是同一个，路径要写全</span><br><span class="line">    header &quot;OCSource.h&quot;</span><br><span class="line">    export *</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有一个容易犯错的问题是将这里的模块名字, OCSource命名为了Cocoa Touch Framework的名字。这样会导致编译出错，错误信息会提示你Module名字重复定义。这里的名字要区别的Framework的名字，具体是什么可以自己自由选择。不过推荐和头文件的名字一致</p></blockquote><p>后一步操作是把<code>module.modulemap</code>的路径添加到Build Settings的<code>Import Paths</code>中，这是为了让我们在Swift里面<code>import</code>这个module的时候能够找到目标.</p><p><img src="https://imgs.codewoody.com/uploads/big/f9b81bd3d7c4bff9b05b4548ed039922.png" alt="Import Paths in Build Settings"></p><p>那么，这里的<code>$(SRCROOT)/MixFramework</code>其实就是指的<code>module.modulemap</code>的路径。</p><h4 id="将OCSouce-h文件的权限改为project"><a href="#将OCSouce-h文件的权限改为project" class="headerlink" title="将OCSouce.h文件的权限改为project"></a>将<code>OCSouce.h</code>文件的权限改为project</h4><p><img src="https://imgs.codewoody.com/uploads/big/7d7b91d9291919efb1de5b5c3543655d.png" alt="Header Visibility Settings"></p><p>这可以让<code>OCSource.h</code>不再对外可见。<br>然后，删除MixFramework.h(umbrella header)中#import 的OC header。</p><hr><p>原文的内容到此结束，但是其实还是不够的。这时候如果编译，会发现你在Framework内部的Swift使用OCSource的地方都会报错说OCSource不存在。因为将<code>OCSource.h</code>从umbrella header中删除之后Swift就无法看到这个文件了。然而，通过<code>module.modulemap</code>文件我们将<code>OCSource.h</code>及相关的OC文件打包成了了一个Swift模块，因此我们可以在Swift代码中import进来：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> OCSource</span><br></pre></td></tr></table></figure><p>在报错的Swift文件中添加这个导入，就可以解决这个问题了.</p><p>文章链接 <a href="http://www.codewoody.com/posts/56606/">http://www.codewoody.com/posts/56606/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/b5d15c27a9f2a989d35696f515aec8d6.jpeg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/LeoMobileDeveloper/Blogs/blob/master/Swift/%20%E4%BC%98%E9%9B%85%E7%9A%84%E5%BC%80%E5%8F%91Swift%E5%92%8CObjective%20C%E6%B7%B7%E7%BC%96%E7%9A%84Framework.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;本文主要参考了优雅地开发Swift和Object C混编的Framework&lt;/a&gt;。不过实际发现，完全按照文章里面”优雅的解决方案“里面的说法操作，还是没法成功。我这里根据实际情况作出了调整。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="ios" scheme="http://www.codewoody.com/tags/ios/"/>
    
      <category term="swift" scheme="http://www.codewoody.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Universal(Fat) Framework for Swift Projects</title>
    <link href="http://www.codewoody.com/posts/28461/"/>
    <id>http://www.codewoody.com/posts/28461/</id>
    <published>2019-04-03T03:41:42.000Z</published>
    <updated>2019-04-03T05:59:46.740Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.codewoody.com/uploads/big/ec2894c1da024327344a0c2fb0f0e55a.jpg" alt="Cocoa Touch Framework"></p><p>最近在给朋友做一个项目，要求将涉及到的算法内容整理成一个单独的framework，这样可以隐藏算法细节，方便交付。这个需求可以很容易地通过<a href="https://medium.com/@Rageeni16/create-cocoa-touch-framework-and-publish-it-be9ad6535f33" target="_blank" rel="noopener">Cocoa Touch Framework</a>实现。不过在交付的时候存在一个头疼的问题：默认情况下，Xcode在编译Cocoa Touch Framework时只会编译出支持模拟器或者真机的Framework，而无法编译出同时支持模拟器和真机的Framework，即Universal(Fat) Framework。这一需求还需要进一步地利用一些系统脚本来实现。<br><a id="more"></a></p><p>这里假设你已经有了一个能够正常工作，编译的包含Cocoa Touch Framework的工程。我这里实现时使用的是Xcode10.2。</p><blockquote><p>事实上我在调研中发现了很多不同的实现编译Universal Framework的教程，但是他们并不总是有用，我这里只遴选了我自己测试通过没有问题的思路。这一思路通过Archive过程来打包输出framework</p></blockquote><p>首先从Xcode左上角选择Cocoa Touch Framework的默认scheme，然后点击Edit Scheme</p><p><img src="https://imgs.codewoody.com/uploads/big/c98bd864a870a5fa23da8ec4b330fd51.png" alt="Edit Scheme"></p><p>在Archive的post-action中添加一个运行脚本(New Run Script Action)</p><p><img src="https://imgs.codewoody.com/uploads/big/8928535c1633ad1bfab117bd46b5b20c.png" alt="New Run Script Action"></p><p>脚本内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> &gt; /tmp/<span class="variable">$&#123;PROJECT_NAME&#125;</span>_archive.log 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">UNIVERSAL_OUTPUTFOLDER=<span class="variable">$&#123;BUILD_DIR&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-universal</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"true"</span> == <span class="variable">$&#123;ALREADYINVOKED:-false&#125;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"RECURSION: Detected, stopping"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">export</span> ALREADYINVOKED=<span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make sure the output directory exists</span></span><br><span class="line">mkdir -p <span class="string">"<span class="variable">$&#123;UNIVERSAL_OUTPUTFOLDER&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Building for iPhoneSimulator"</span></span><br><span class="line">xcodebuild -workspace <span class="string">"<span class="variable">$&#123;WORKSPACE_PATH&#125;</span>"</span> -scheme <span class="string">"<span class="variable">$&#123;TARGET_NAME&#125;</span>"</span> -configuration <span class="variable">$&#123;CONFIGURATION&#125;</span> -sdk iphonesimulator -destination <span class="string">'platform=iOS Simulator,name=iPhone 6'</span> ONLY_ACTIVE_ARCH=NO ARCHS=<span class="string">'i386 x86_64'</span> BUILD_DIR=<span class="string">"<span class="variable">$&#123;BUILD_DIR&#125;</span>"</span> BUILD_ROOT=<span class="string">"<span class="variable">$&#123;BUILD_ROOT&#125;</span>"</span> ENABLE_BITCODE=YES OTHER_CFLAGS=<span class="string">"-fembed-bitcode"</span> BITCODE_GENERATION_MODE=bitcode clean build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1. Copy the framework structure (from iphoneos build) to the universal folder</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Copying to output folder"</span></span><br><span class="line"><span class="comment"># 这行是在我参考的脚本的基础上添加进去的。脚本在运行过程中有一个问题：在试图将</span></span><br><span class="line"><span class="comment"># archive过程中生成的device framework拷贝进来时，总是拷贝的framework文件夹</span></span><br><span class="line"><span class="comment"># 的内容，而非整个文件夹，所以我们这里手动创建这个文件夹</span></span><br><span class="line">mkdir -p <span class="string">"<span class="variable">$&#123;UNIVERSAL_OUTPUTFOLDER&#125;</span>/<span class="variable">$&#123;FULL_PRODUCT_NAME&#125;</span>"</span></span><br><span class="line">cp -R <span class="string">"<span class="variable">$&#123;ARCHIVE_PRODUCTS_PATH&#125;</span><span class="variable">$&#123;INSTALL_PATH&#125;</span>/<span class="variable">$&#123;FULL_PRODUCT_NAME&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;UNIVERSAL_OUTPUTFOLDER&#125;</span>/<span class="variable">$&#123;FULL_PRODUCT_NAME&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2. Copy Swift modules from iphonesimulator build (if it exists) to the copied framework directory</span></span><br><span class="line">SIMULATOR_SWIFT_MODULES_DIR=<span class="string">"<span class="variable">$&#123;BUILD_DIR&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphonesimulator/<span class="variable">$&#123;TARGET_NAME&#125;</span>.framework/Modules/<span class="variable">$&#123;TARGET_NAME&#125;</span>.swiftmodule/."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"SIMULATOR_SWIFT_MODULES_DIR: <span class="variable">$&#123;SIMULATOR_SWIFT_MODULES_DIR&#125;</span>"</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$&#123;SIMULATOR_SWIFT_MODULES_DIR&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">cp -R <span class="string">"<span class="variable">$&#123;SIMULATOR_SWIFT_MODULES_DIR&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;UNIVERSAL_OUTPUTFOLDER&#125;</span>/<span class="variable">$&#123;TARGET_NAME&#125;</span>.framework/Modules/<span class="variable">$&#123;TARGET_NAME&#125;</span>.swiftmodule"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3. Create universal binary file using lipo and place the combined executable in the copied framework directory</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Combining executables"</span></span><br><span class="line">lipo -create -output <span class="string">"<span class="variable">$&#123;UNIVERSAL_OUTPUTFOLDER&#125;</span>/<span class="variable">$&#123;FULL_PRODUCT_NAME&#125;</span>/<span class="variable">$&#123;EXECUTABLE_PATH&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;BUILD_DIR&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphonesimulator/<span class="variable">$&#123;EXECUTABLE_PATH&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;ARCHIVE_PRODUCTS_PATH&#125;</span><span class="variable">$&#123;INSTALL_PATH&#125;</span>/<span class="variable">$&#123;EXECUTABLE_PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4. Create universal binaries for embedded frameworks</span></span><br><span class="line"><span class="comment">#for SUB_FRAMEWORK in $( ls "$&#123;UNIVERSAL_OUTPUTFOLDER&#125;/$&#123;TARGET_NAME&#125;.framework/Frameworks" ); do</span></span><br><span class="line"><span class="comment">#BINARY_NAME="$&#123;SUB_FRAMEWORK%.*&#125;"</span></span><br><span class="line"><span class="comment">#lipo -create -output "$&#123;UNIVERSAL_OUTPUTFOLDER&#125;/$&#123;TARGET_NAME&#125;.framework/Frameworks/$&#123;SUB_FRAMEWORK&#125;/$&#123;BINARY_NAME&#125;" "$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/$&#123;SUB_FRAMEWORK&#125;/$&#123;BINARY_NAME&#125;" "$&#123;ARCHIVE_PRODUCTS_PATH&#125;$&#123;INSTALL_PATH&#125;/$&#123;TARGET_NAME&#125;.framework/Frameworks/$&#123;SUB_FRAMEWORK&#125;/$&#123;BINARY_NAME&#125;"</span></span><br><span class="line"><span class="comment">#done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 5. Convenience step to copy the framework to the project's directory</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Copying to project dir"</span></span><br><span class="line">yes | cp -Rf <span class="string">"<span class="variable">$&#123;UNIVERSAL_OUTPUTFOLDER&#125;</span>/<span class="variable">$&#123;FULL_PRODUCT_NAME&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;PROJECT_DIR&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">open <span class="string">"<span class="variable">$&#123;PROJECT_DIR&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><blockquote><p>上述脚本的内容主要来自于<a href="https://gist.github.com/eladnava/0824d08da8f99419ef2c7b7fb6d4cc78" target="_blank" rel="noopener">export-fat-swift-dynamic-framework</a>，我在这里根据实际情况进行了更改</p></blockquote><p>此时执行archive操作(Product-&gt;Archive)完成后会自动弹出Finder窗口显示新生成的framework的位置（应当就是位于项目根目录下）。</p><p>文章链接 <a href="http://www.codewoody.com/posts/28461/">http://www.codewoody.com/posts/28461/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/ec2894c1da024327344a0c2fb0f0e55a.jpg&quot; alt=&quot;Cocoa Touch Framework&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在给朋友做一个项目，要求将涉及到的算法内容整理成一个单独的framework，这样可以隐藏算法细节，方便交付。这个需求可以很容易地通过&lt;a href=&quot;https://medium.com/@Rageeni16/create-cocoa-touch-framework-and-publish-it-be9ad6535f33&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cocoa Touch Framework&lt;/a&gt;实现。不过在交付的时候存在一个头疼的问题：默认情况下，Xcode在编译Cocoa Touch Framework时只会编译出支持模拟器或者真机的Framework，而无法编译出同时支持模拟器和真机的Framework，即Universal(Fat) Framework。这一需求还需要进一步地利用一些系统脚本来实现。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="ios" scheme="http://www.codewoody.com/tags/ios/"/>
    
      <category term="swift" scheme="http://www.codewoody.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>时局图：论扛着红旗反红旗</title>
    <link href="http://www.codewoody.com/posts/8446/"/>
    <id>http://www.codewoody.com/posts/8446/</id>
    <published>2019-03-25T04:16:40.000Z</published>
    <updated>2019-03-25T04:18:12.799Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.codewoody.com/uploads/big/465c7e96d5c79b75283b8bc144e5cf73.jpeg" alt="论扛着红旗反红旗"><br><a id="more"></a></p><p>文章链接 <a href="http://www.codewoody.com/posts/8446/">http://www.codewoody.com/posts/8446/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/465c7e96d5c79b75283b8bc144e5cf73.jpeg&quot; alt=&quot;论扛着红旗反红旗&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.codewoody.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="政治" scheme="http://www.codewoody.com/tags/%E6%94%BF%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>JS:图像截取部分(Image Cropping)</title>
    <link href="http://www.codewoody.com/posts/2543/"/>
    <id>http://www.codewoody.com/posts/2543/</id>
    <published>2019-03-13T05:29:19.000Z</published>
    <updated>2019-03-13T06:00:25.806Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.codewoody.com/uploads/big/8cd3e0e5fe6f9051e2c67646cc1e7dbc.jpg" alt="Cover"></p><p>这里我们讨论的图像截取部分是指从一个完整的大图中截取一小部分出来。当然，使用js实现。<br><a id="more"></a></p><blockquote><p>这边文章基本整理自<a href="https://yellowpencil.com/blog/cropping-images-with-javascript/" target="_blank" rel="noopener">Cropping images with Javascript</a>，<br>添加了一些我的评论</p></blockquote><p>例如，我们要从这样的大图中：</p><p><img src="https://imgs.codewoody.com/uploads/big/f6551d523ea8c642cd663a1b9b3e024d.jpeg" alt="大图"></p><p>截取出</p><p><img src="https://imgs.codewoody.com/uploads/big/2208ad7dfbd59e73fa2ba244fcb41487.jpeg" alt="小图"></p><p>使用H5中的canvas可以简单地解决这个问题。</p><h2 id="1-载入原图像"><a href="#1-载入原图像" class="headerlink" title="1. 载入原图像"></a>1. 载入原图像</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadTimer;</span><br><span class="line"><span class="keyword">var</span> imgObject = <span class="keyword">new</span> Image();</span><br><span class="line">imgObject.src = <span class="string">'images/fozzie.jpg'</span>;</span><br><span class="line">imgObject.onLoad = onImgLoaded();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onImgLoaded</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (loadTimer != <span class="literal">null</span>) clearTimeout(loadTimer);</span><br><span class="line">  <span class="keyword">if</span> (!imgObject.complete) &#123;</span><br><span class="line">    loadTimer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      onImgLoaded();</span><br><span class="line">    &#125;, <span class="number">3</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    onPreloadComplete();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意这里我们为了演示是读取的图片文件内容，实际上除了图像文件，这里的“图像”还可以是其他形式，例如video元素，别的canvas等。</p></blockquote><h2 id="2-当图片完成载入以后，重新绘制你要截取的那一部分"><a href="#2-当图片完成载入以后，重新绘制你要截取的那一部分" class="headerlink" title="2. 当图片完成载入以后，重新绘制你要截取的那一部分"></a>2. 当图片完成载入以后，重新绘制你要截取的那一部分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onPreloadComplete</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//call the methods that will create a 64-bit version of thumbnail here.</span></span><br><span class="line">  <span class="keyword">var</span> newImg = getImagePortion(imgObject, <span class="number">120</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">80</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="comment">//place image in appropriate div</span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"images"</span>).innerHTML = <span class="string">"&lt;img alt="</span><span class="string">" src="</span><span class="string">"+newImg+"</span><span class="string">" /&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>onPreloadComplete</code>函数会在图像载入完成以后调用。在这个函数中我们会调用实际完成图片截取的函数<code>getImagePortion</code></p><h2 id="3-图像截取"><a href="#3-图像截取" class="headerlink" title="3. 图像截取"></a>3. 图像截取</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">getImagePortion(imgObj, newWidth, newHeight, startX, startY, ratio)&#123;</span><br><span class="line"> <span class="comment">/* the parameters: - the image element - the new width - the new height - the x point we start taking pixels - the y point we start taking pixels - the ratio */</span></span><br><span class="line"> <span class="comment">//set up canvas for thumbnail</span></span><br><span class="line"> <span class="keyword">var</span> tnCanvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line"> <span class="keyword">var</span> tnCanvasContext = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"> tnCanvas.width = newWidth; tnCanvas.height = newHeight;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/* use the sourceCanvas to duplicate the entire image. This step was crucial for iOS4 and under devices. Follow the link at the end of this post to see what happens when you don’t do this */</span></span><br><span class="line"> <span class="keyword">var</span> bufferCanvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line"> <span class="keyword">var</span> bufferContext = bufferCanvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"> bufferCanvas.width = imgObj.width;</span><br><span class="line"> bufferCanvas.height = imgObj.height;</span><br><span class="line"> bufferContext.drawImage(imgObj, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/* now we use the drawImage method to take the pixels from our bufferCanvas and draw them into our thumbnail canvas */</span></span><br><span class="line"> tnCanvasContext.drawImage(bufferCanvas, startX,startY,newWidth * ratio, newHeight * ratio,<span class="number">0</span>,<span class="number">0</span>,newWidth,newHeight);</span><br><span class="line"> <span class="keyword">return</span> tnCanvas.toDataURL();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的函数时原作者给出的方法，他先将图像完整地画到一个canvas(<code>bufferCanvas</code>)上，再将这个canvas对应的目标区域画到<code>tnCanvas</code>上，根据注释来看，似乎是出于性能或者适配方面的考虑。不过就我在开发桌面端网页时，可以直接将<code>imgObj</code>画到<code>tnCanvas</code>上。</p></blockquote><p>文章链接 <a href="http://www.codewoody.com/posts/2543/">http://www.codewoody.com/posts/2543/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/8cd3e0e5fe6f9051e2c67646cc1e7dbc.jpg&quot; alt=&quot;Cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里我们讨论的图像截取部分是指从一个完整的大图中截取一小部分出来。当然，使用js实现。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="js" scheme="http://www.codewoody.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>【转载】IOS的一些设计规范</title>
    <link href="http://www.codewoody.com/posts/23804/"/>
    <id>http://www.codewoody.com/posts/23804/</id>
    <published>2019-03-05T04:09:27.000Z</published>
    <updated>2019-03-05T04:10:48.463Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.codewoody.com/uploads/big/73da26e439c2fe4f88b0346301c87036.jpg" alt="如图"></p><p>文章链接 <a href="http://www.codewoody.com/posts/23804/">http://www.codewoody.com/posts/23804/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/73da26e439c2fe4f88b0346301c87036.jpg&quot; alt=&quot;如图&quot;&gt;&lt;/p&gt;
&lt;p&gt;文章链接 &lt;a href=&quot;http://www.codewood
      
    
    </summary>
    
      <category term="其他" scheme="http://www.codewoody.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="ios" scheme="http://www.codewoody.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Mac: 将APP打包成dmg</title>
    <link href="http://www.codewoody.com/posts/62609/"/>
    <id>http://www.codewoody.com/posts/62609/</id>
    <published>2019-03-01T03:24:45.000Z</published>
    <updated>2019-03-01T03:29:47.407Z</updated>
    
    <content type="html"><![CDATA[<ol><li>创建一个新的文件夹，将APP放到这个新文件夹中</li><li>打开Disk Utility &gt; File &gt; New Image &gt; Image from Folder.（中文的话，是磁盘工具 &gt; 文件 &gt; 新建映像 &gt; 来自文件夹的映像…）<br><img src="https://imgs.codewoody.com/uploads/big/3f29adf12997da9b969067c013879676.png" alt="磁盘工具操作"></li><li>在弹出的窗口中，选择在第一步中新建的文件夹</li><li>选择输出dmg文件的存储位置，然后点击保存按钮<br><img src="https://imgs.codewoody.com/uploads/big/8f7ca60b7031464feb4027f14d1c528b.png" alt="保存页面"></li></ol><p>文章链接 <a href="http://www.codewoody.com/posts/62609/">http://www.codewoody.com/posts/62609/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;创建一个新的文件夹，将APP放到这个新文件夹中&lt;/li&gt;
&lt;li&gt;打开Disk Utility &amp;gt; File &amp;gt; New Image &amp;gt; Image from Folder.（中文的话，是磁盘工具 &amp;gt; 文件 &amp;gt; 新建映像 &amp;gt; 
      
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="MacOS" scheme="http://www.codewoody.com/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>【转载】在小米电视和小米盒子上看YOUTUBE</title>
    <link href="http://www.codewoody.com/posts/5827/"/>
    <id>http://www.codewoody.com/posts/5827/</id>
    <published>2019-02-25T06:41:32.000Z</published>
    <updated>2019-03-05T04:09:48.235Z</updated>
    
    <content type="html"><![CDATA[</p><p>使用小米电视和小米盒子看YouTube上的视频，是很多中国电视用户很想做的事情，下面，我就介绍一种很简单的方法，不用ROOT小米电视或小米盒子，不用重装系统，几分钟的设置就可以在小米电视和小米盒子上看YouTube的方法。</p><p>首先需要下载两个APK应用，第一个是<a href="https://smartyoutubetv.github.io/" target="_blank" rel="noopener">SmartYouTubeTV</a>，点击这里下载最新版SmartYouTubeTV，将其复制到U盘。第二个是Shadowsocks，访问<a href="https://www.apkmirror.com/" target="_blank" rel="noopener">apkmirror</a>网站，搜索Shadowsocks，找到最新版后，下载universal的apk到U盘即可。</p><p>之后，打开小米电视或小米盒子，在“设置-账户与安全”里，选择“允许安装未知来源的应用”。插入U盘，将上述两个apk文件安装到电视上。</p><p>最后，在Shadowsocks上设置好服务器地址，打开SmartYouTubeTV，选择第一个，然后可以选择登陆Google账号，登陆的时候，会让用户在手机上访问 youtube.com/activate 来登陆激活，登陆好了后，电视即可和电脑浏览器的YouTube同步了。</p><p>Smart YouTube TV里登陆Google账号后，你会发现，YouTube里的订阅、上传、历史什么的功能全部可以正常使用了，完美支持小米遥控器控制，观看视频体验极佳，完全不亚于官方的应用。</p><p>当然，用户也可以选择安装官方的YouTube应用，但必须安装Google框架等一堆东西，使用体验可能还未必好。</p><p>文章链接 <a href="http://www.codewoody.com/posts/5827/">http://www.codewoody.com/posts/5827/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/3a0199722bba55dfde8d97ff1aac0f5b.jpg&quot; alt=&quot;youtube&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="翻墙" scheme="http://www.codewoody.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>如何在普通网络环境下上北邮人</title>
    <link href="http://www.codewoody.com/posts/54288/"/>
    <id>http://www.codewoody.com/posts/54288/</id>
    <published>2019-02-25T05:26:40.000Z</published>
    <updated>2019-02-25T06:42:10.179Z</updated>
    
    <content type="html"><![CDATA[<p>在学校里看剧、电影，下载破解游戏基本都靠<a href="bt.byr.cn">北邮人</a>。一方面资源比较全，另一方面是走IPv6，不需要走计费的校园网IPv4流量。不过由于北邮人只支持IPv6，而国内IPv6基本只有校园网有。问题来了，怎么在校外的纯IPv4环境下使用IPv6 Only的北邮人呢？<br><img src="https://imgs.codewoody.com/uploads/big/1b99a38129580435479cfa72b086b3b5.jpg" alt="IPv6"><br><a id="more"></a></p><h2 id="从IPv4到IPv6"><a href="#从IPv4到IPv6" class="headerlink" title="从IPv4到IPv6"></a>从IPv4到IPv6</h2><p>这是最重要的一步。你首先需要一个支持IPv6的VPS。国内目前支持IPv6的好像只有阿里云？，即便支持，国内的IPv6 VPS又贵又难用（需要申请）。因此最好的方案是采用海外的VPS。听起来用海外的VPS会很慢？其实海外的VPS主要是延时高，其实速度还是挺快的，而且P2P传输业务受到延时的影响挺小的，实测利用我的VPS可以达到5MB/s的P2P下载速度（在服务器上看上下行都是5MB/s，基本跑满了100M的带宽）。我用的VPS是<a href="www.digitalocean.com">Digital Ocean</a>的旧金山节点。价格是$5一个月。平均下来每天一块钱吧。注意创建Droplet的时候要自己勾选IPv6（添加IPv6是免费的）。</p><p><img src="https://imgs.codewoody.com/uploads/big/c052a17e4f29aea937edaec279b366e9.png" alt="选择IPv6"></p><p>在服务器上我部署了Shadowsocks服务。SS服务器可以直接无痛支持IPv4到IPv6的转换。关于如何部署Shadowsocks，这方面的教程文章网上汗牛充栋，我这里就不提供了。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>首先需要将北邮人的网址bt.byr.cn添加到Shadowsocks客户端的代理列表。</p><p><img src="https://imgs.codewoody.com/uploads/big/e9cf5e6db36fbdccf7fc9c4f330ce8b0.png" alt="Shadowsocks选项"></p><p>点击Shadowsocks小飞机，选择“编辑PAC用户自定规则”。在弹出的框中输入<code>||bt.byr.cn</code>：</p><p><img src="https://imgs.codewoody.com/uploads/big/b2e5cef758cd665368a3ecb56e139a32.png" alt="编辑PAC用户自定规则"></p><p>然后你就能在IPv4网络环境下打开北邮人的网页啦。</p><p>接下来是设置下载客户端uTorrent的网络设置。打开uTorrent的设置(Preferences)，进入到Network。进行如下设置：</p><p><img src="https://imgs.codewoody.com/uploads/big/6281a4baa6ef2e535ce877dbf455ac6a.png" alt="uTorrent设置"></p><blockquote><p>注意：上面的Socks5设置中，端口会与你的Shadowsocks设置有关。如果你没有动过相关设置的话，应该就是1086端口。<br>查看你的Shadowsocks客户端Sock5代理端口设置的方式是单击Shadowsocks小飞机，选择偏好设置，在弹出的窗口中点击“高级”，其中“本地Socks5监听端口”即为应该填写到uTorrent设置中的代理端口。</p></blockquote><p>大功告成！_(:з」∠)_</p><p>文章链接 <a href="http://www.codewoody.com/posts/54288/">http://www.codewoody.com/posts/54288/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学校里看剧、电影，下载破解游戏基本都靠&lt;a href=&quot;bt.byr.cn&quot;&gt;北邮人&lt;/a&gt;。一方面资源比较全，另一方面是走IPv6，不需要走计费的校园网IPv4流量。不过由于北邮人只支持IPv6，而国内IPv6基本只有校园网有。问题来了，怎么在校外的纯IPv4环境下使用IPv6 Only的北邮人呢？&lt;br&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/1b99a38129580435479cfa72b086b3b5.jpg&quot; alt=&quot;IPv6&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SimpleOpenNI在Processing导出应用中的库引用问题</title>
    <link href="http://www.codewoody.com/posts/65501/"/>
    <id>http://www.codewoody.com/posts/65501/</id>
    <published>2019-02-22T08:15:14.000Z</published>
    <updated>2019-02-25T05:27:39.116Z</updated>
    
    <content type="html"><![CDATA[<p>在Processing中使用SimpleOpenNI时，如果尝试将本来能够正常运行的pde文件导出成应用，那么在运行时会出现<code>java.lang.UnsatisfiedLinkError</code>这个错误。详细信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Can&apos;t load SimpleOpenNI library (libSimpleOpenNI.jnilib) : java.lang.UnsatisfiedLinkError: Can&apos;t load library: /SimpleOpenNI/library/libSimpleOpenNI.jnilib</span><br><span class="line">Verify if you installed SimpleOpenNI correctly.</span><br><span class="line">http://code.google.com/p/simple-openni/wiki/Installation</span><br><span class="line"></span><br><span class="line">java.lang.UnsatisfiedLinkError: SimpleOpenNI.SimpleOpenNIJNI.swig_module_init()V</span><br><span class="line">at SimpleOpenNI.SimpleOpenNIJNI.swig_module_init(Native Method)</span><br><span class="line">at SimpleOpenNI.SimpleOpenNIJNI.&lt;clinit&gt;(SimpleOpenNIJNI.java:290)</span><br><span class="line">at SimpleOpenNI.ContextWrapper.&lt;init&gt;(ContextWrapper.java:54)</span><br><span class="line">at SimpleOpenNI.SimpleOpenNI.&lt;init&gt;(SimpleOpenNI.java:253)</span><br><span class="line">at Sketch.settings(Sketch.java:28)</span><br><span class="line">at processing.core.PApplet.handleSettings(PApplet.java:954)</span><br><span class="line">at processing.core.PApplet.runSketch(PApplet.java:10786)</span><br><span class="line">at processing.core.PApplet.main(PApplet.java:10511)</span><br><span class="line">at Main.main(Main.java:7)</span><br></pre></td></tr></table></figure><p>根据错误信息，是在读取<code>libSimpleOpenNI.jnilib</code>这个库文件时失败导致的。奇怪的是，程序尝试读取的路径是：<code>/SimpleOpenNI/library/libSimpleOpenNI.jnilib</code>。这是一个很奇怪的绝对路径。也<a href="https://forum.processing.org/two/discussion/1253/has-anyone-successfully-exported-a-processing-app-using-simple-openni-on-mac-os-x" target="_blank" rel="noopener">有人</a>尝试直接将库文件复制到这个全局路径的位置，可以让程序运行起来。可是这种方法也太不优雅了。</p><h2 id="为什么会出现这种现象？"><a href="#为什么会出现这种现象？" class="headerlink" title="为什么会出现这种现象？"></a>为什么会出现这种现象？</h2><p>通过IntelliJ可以打开<code>SimpleOpenNI.jar</code>查看代码细节。可以看到<code>SimpleOpenNI.class</code>中确定载入库文件路径的方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        String var0 = System.getProperty(<span class="string">"os.name"</span>).toLowerCase();</span><br><span class="line">        String var1 = <span class="string">"SimpleOpenNI"</span>;</span><br><span class="line">        String var2 = System.getProperty(<span class="string">"os.arch"</span>).toLowerCase();</span><br><span class="line">        <span class="keyword">if</span> (var0.indexOf(<span class="string">"win"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var0.indexOf(<span class="string">"nix"</span>) &lt; <span class="number">0</span> &amp;&amp; var0.indexOf(<span class="string">"linux"</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (var0.indexOf(<span class="string">"mac"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                var1 = <span class="string">"lib"</span> + var1 + <span class="string">".jnilib"</span>;</span><br><span class="line">                nativLibPath = getLibraryPathLinux() + <span class="string">"/SimpleOpenNI/library/"</span>;</span><br><span class="line">                nativDepLibPath = nativLibPath + <span class="string">"osx/"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nativLibPath = <span class="string">"/SimpleOpenNI/library/linux"</span>;</span><br><span class="line">            <span class="keyword">if</span> (var2.indexOf(<span class="string">"86"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                var1 = var1 + <span class="string">"32"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var2.indexOf(<span class="string">"64"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                var1 = <span class="string">"lib"</span> + var1 + <span class="string">"64.so"</span>;</span><br><span class="line">                nativLibPath = getLibraryPathLinux() + <span class="string">"/SimpleOpenNI/library/"</span>;</span><br><span class="line">                nativDepLibPath = nativLibPath + <span class="string">"linux64/"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.load(nativLibPath + var1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsatisfiedLinkError var5) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Can't load SimpleOpenNI library ("</span> + var1 + <span class="string">") : "</span> + var5);</span><br><span class="line">            System.out.println(<span class="string">"Verify if you installed SimpleOpenNI correctly.\nhttp://code.google.com/p/simple-openni/wiki/Installation"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _initFlag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意到在生成库文件路径时，<code>/SimpleOpenNI/library/libSimpleOpenNI.jnilib</code>，前面应该会添加<code>getLibraryPathLinux()</code>的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getLibraryPathLinux</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        URL var0 = SimpleOpenNI.class.getResource(<span class="string">"SimpleOpenNI.class"</span>);</span><br><span class="line">        <span class="keyword">if</span> (var0 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String var1 = var0.toString().replace(<span class="string">"%20"</span>, <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> var2 = var1.indexOf(<span class="number">47</span>);</span><br><span class="line">            <span class="keyword">boolean</span> var3 = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">int</span> var4 = var1.indexOf(<span class="string">"/SimpleOpenNI/library"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span> &lt; var2 &amp;&amp; -<span class="number">1</span> &lt; var4 ? var1.substring(var2, var4) : <span class="string">""</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我尝试了在不同环境下,<code>SimpleOpenNI.class.getResource(&quot;SimpleOpenNI.class&quot;)</code>下运行的结果。发现：</p><ol><li>在pde运行时，获取到的是独立的<code>SimpleOpenNI.jar</code>下的路径，例如：<code>/Users/lena/Documents/Processing/libraries/SimpleOpenNI/library/SimpleOpenNI.jar!/SimpleOpenNI/SimpleOpenNI.class</code></li><li>在导出应用中运行时，获取到的是打包后应用内的，例如<code>.../MySketch/application.macosx/MySketch.app/Contents/Java/SimpleOpenNI.jar!/SimpleOpenNI/SimpleOpenNI.class</code></li></ol><p>在函数<code>getLibraryPathLinux</code>中，程序会定位<code>/SimpleOpenNI/library</code>这个字符串，然后取出这个子字符串前的内容构成的路径。上述第二种情形内，SimpleOpenNI.jar被打包到应用内后，不在处于<code>/SimpleOpenNI/library</code>这个前缀目录下，所以导致定位失败。</p><h2 id="如何解决这个问题。"><a href="#如何解决这个问题。" class="headerlink" title="如何解决这个问题。"></a>如何解决这个问题。</h2><p>在无法直接修改SimpleOpenNI的源代码的情况下，要修复这个问题，就要想办法把<code>SimpleOpenNI.jar</code>放到<code>SimpleOpenNI/library</code>目录下。我使用的macOS系统，下面的方法都是在Mac下测试。不过基本思路可以迁移到Windows上。</p><p>在生成的App上右键选择显示包内容。可以查看其内部结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Info.plist</span><br><span class="line">├── Java</span><br><span class="line">│   ├── Sketch.jar</span><br><span class="line">│   ├── NiTE2</span><br><span class="line">│   ├── SimpleOpenNI.jar</span><br><span class="line">│   ├── SimpleOpenNI32.dll</span><br><span class="line">│   ├── SimpleOpenNI64.dll</span><br><span class="line">│   ├── core.jar</span><br><span class="line">│   ├── data</span><br><span class="line">│   ├── gluegen-rt-natives-macosx-universal.jar</span><br><span class="line">│   ├── gluegen-rt.jar</span><br><span class="line">│   ├── javamp3-1.0.3.jar</span><br><span class="line">│   ├── jogl-all-natives-macosx-universal.jar</span><br><span class="line">│   ├── jogl-all.jar</span><br><span class="line">│   ├── jsyn-20171016.jar</span><br><span class="line">│   ├── libSimpleOpenNI.jnilib</span><br><span class="line">│   ├── libSimpleOpenNI64.so</span><br><span class="line">│   ├── osx</span><br><span class="line">│   ├── sound.jar</span><br><span class="line">│   ├── win32</span><br><span class="line">│   └── win64</span><br><span class="line">├── MacOS</span><br><span class="line">│   └── Sketch</span><br><span class="line">├── PkgInfo</span><br><span class="line">├── PlugIns</span><br><span class="line">│   └── jdk1.8.0_181.jdk</span><br><span class="line">└── Resources</span><br><span class="line">    ├── en.lproj</span><br><span class="line">    └── sketch.icns</span><br></pre></td></tr></table></figure><p>可以看到<code>SimpleOpenNI.jar</code>位于<code>Java</code>目录下。我尝试过直接在此处创建目录<code>SimpleOpenNI/library</code>并把<code>SimpleOpenNI.jar</code>放进去。但是运行提示无法找到<code>SimpleOpenNI.jar</code>。这需要在APP运行时进一步指定<code>CLASSPATH</code>。有一种方法是直接在Info.plist文件里面添加<code>-Djava.class.path</code>运行属性，或者添加<code>ClASSPATH</code>环境变量，但是这种方法会要求你手动填写所有需要使用的jar依赖，甚至是包括processing的jar文件。这对于后续维护和修改很不利。所以这里我采取了另一种取巧的办法。</p><p>进入<code>Contents/MacOS</code>目录，删除原来的<code>Sketch</code>文件(你看到的应该是和你的Processing程序同名的文件，我这里用Sketch来代替)。新建一个同名的空白的文本文件，然后在文件中添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(dirname $&#123;BASH_SOURCE&#125;)</span>"</span></span><br><span class="line"><span class="built_in">cd</span> ../..</span><br><span class="line">APP_ROOT=$(<span class="built_in">pwd</span>)</span><br><span class="line"><span class="built_in">cd</span> Contents/Java</span><br><span class="line"></span><br><span class="line">JAR_LIBS=$(ls *.jar | tr <span class="string">"\n"</span> <span class="string">":"</span>)</span><br><span class="line"><span class="comment"># 添加SimpleOpenNI.jar</span></span><br><span class="line">JAR_LIBS=<span class="variable">$&#123;JAR_LIBS&#125;</span>./SimpleOpenNI/library/SimpleOpenNI.jar</span><br><span class="line"></span><br><span class="line">APP_NAME=$(basename <span class="string">"<span class="variable">$&#123;BASH_SOURCE&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：如果你内嵌的jdk的版本不同，要把jdk1.8.0_181.jdk替换成对应的版本</span></span><br><span class="line"><span class="comment"># 如果你没有在app内部内嵌jdk，这里修改成JAVA_BIN=java，使用系统全局的java即可</span></span><br><span class="line">JAVA_BIN=<span class="variable">$&#123;APP_ROOT&#125;</span>/Contents/PlugIns/jdk1.8.0_181.jdk/Contents/Home/jre/bin/java</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;JAVA_BIN&#125;</span> \</span><br><span class="line">-Djna.nosys=<span class="literal">true</span> \</span><br><span class="line">-Djava.ext.dirs=<span class="variable">$APP_ROOT</span>/Contents/PlugIns/jdk1.8.0_181.jdk/Contents/Home/jre/lib/ext \</span><br><span class="line">-Xdock:icon=<span class="variable">$APP_ROOT</span>/Contents/Resources/sketch.icns \</span><br><span class="line">-Djava.library.path=<span class="variable">$APP_ROOT</span>/Contents/Java \</span><br><span class="line">-Dapple.laf.useScreenMenuBar=<span class="literal">true</span> \</span><br><span class="line">-Dcom.apple.macos.use-file-dialog-packages=<span class="literal">true</span> \</span><br><span class="line">-Dcom.apple.macos.useScreenMenuBar=<span class="literal">true</span> \</span><br><span class="line">-Dcom.apple.mrj.application.apple.menu.about.name=<span class="variable">$&#123;APP_NAME&#125;</span> \</span><br><span class="line">-classpath <span class="variable">$&#123;JAR_LIBS&#125;</span> <span class="variable">$&#123;APP_NAME&#125;</span></span><br></pre></td></tr></table></figure><p>为这个文件添加可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./Sketch</span><br></pre></td></tr></table></figure><p>将<code>~/Documents/Processing/libraries/SimpleOpenNI</code>整个文件夹拷贝进导出APP的<code>Contents/Java目录下</code>。然后就可以运行了。</p><p>文章链接 <a href="http://www.codewoody.com/posts/65501/">http://www.codewoody.com/posts/65501/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Processing中使用SimpleOpenNI时，如果尝试将本来能够正常运行的pde文件导出成应用，那么在运行时会出现&lt;code&gt;java.lang.UnsatisfiedLinkError&lt;/code&gt;这个错误。详细信息如下：&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
      <category term="processing" scheme="http://www.codewoody.com/categories/processing/"/>
    
    
      <category term="processing" scheme="http://www.codewoody.com/tags/processing/"/>
    
      <category term="debug" scheme="http://www.codewoody.com/tags/debug/"/>
    
      <category term="java" scheme="http://www.codewoody.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks中继:从IPv4到IPv6</title>
    <link href="http://www.codewoody.com/posts/6289/"/>
    <id>http://www.codewoody.com/posts/6289/</id>
    <published>2019-02-21T09:00:17.000Z</published>
    <updated>2019-02-21T09:33:01.634Z</updated>
    
    <content type="html"><![CDATA[<p>最近墙又双叒叕加高了。在春节前就发现自己的VPS无法连接，后来发现还好只是端口被封禁，换成其他的端口就能使用了。不过这才撑了半个月新的端口访问又不太稳定了。如果再换端口，或许也可以。但是不是长久之计。不过我的VPS是支持IPv6的，一般来说，墙对于IPv6流量的拦截比较弱。或许可以想办法先把自己的流量转换成IPv6然后再出去。<br><img src="https://imgs.codewoody.com/uploads/big/7a59f2881bd41ba1fabc7e1cbce460a4.png" alt="Hello GFW, Goodbye GFW"><br><a id="more"></a></p><blockquote><p>我也设想过要不要给代理添加混淆的功能，处于以下几方面的考虑，还是选择了流量转换的方案：</p><ol><li>手机端部分ss应用不支持混淆；</li><li>未来混淆还是可能被针对性的拦截。但是IPv6则不会。GFW拦截还是拦截大鱼不拦截小鱼的。国内目前IPv6的使用范围仍然非常小，而且基本只限于教育网。因此IPv6在未来的很长一段时间内不会成为GFW的针对目标</li></ol></blockquote><p>我们这里使用HAProxiy来完成这一功能。</p><h2 id="安装HAProxy"><a href="#安装HAProxy" class="headerlink" title="安装HAProxy"></a>安装HAProxy</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.haproxy.org/download/1.7/src/haproxy-1.7.2.tar.gz</span><br><span class="line">tar -xzf haproxy-1.7.2.tar.gz</span><br><span class="line">make TARGET=linux2826 USE_GETADDRINFO=1</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>注意，在倒数第二行的make命令中，TARGET需要根据你的内核版本来选择。<code>USE_GETADDRINFO</code>的作用是使得HAProxy可以对域名采用DNS查询来获取IP。使用包管理器安装的HAProxy是不带这个功能的。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">        ulimit-n  51200</span><br><span class="line">        daemon  # run as daemon</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">        log    global</span><br><span class="line">        mode    tcp</span><br><span class="line">        option    dontlognull</span><br><span class="line">        timeout connect 1000</span><br><span class="line">        timeout client 150000</span><br><span class="line">        timeout server 150000</span><br><span class="line"></span><br><span class="line">frontend ss-in</span><br><span class="line">        bind *:port # 跳板机监听端口</span><br><span class="line">        default_backend ss-out</span><br><span class="line"></span><br><span class="line">backend ss-out</span><br><span class="line">        server server1 vps_host:vps_ss_port maxconn 20480</span><br></pre></td></tr></table></figure><p>设置文件位于<code>/etc/haproxy/haproxy.cfg</code>。在完成设置后，使用<code>sudo haproxy -f /etc/haproxy/haproxy.cfg</code>来运行。</p><p>文章链接 <a href="http://www.codewoody.com/posts/6289/">http://www.codewoody.com/posts/6289/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近墙又双叒叕加高了。在春节前就发现自己的VPS无法连接，后来发现还好只是端口被封禁，换成其他的端口就能使用了。不过这才撑了半个月新的端口访问又不太稳定了。如果再换端口，或许也可以。但是不是长久之计。不过我的VPS是支持IPv6的，一般来说，墙对于IPv6流量的拦截比较弱。或许可以想办法先把自己的流量转换成IPv6然后再出去。&lt;br&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/7a59f2881bd41ba1fabc7e1cbce460a4.png&quot; alt=&quot;Hello GFW, Goodbye GFW&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Shadowsocks" scheme="http://www.codewoody.com/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>【转载】无人机击落客机只是时间问题</title>
    <link href="http://www.codewoody.com/posts/48586/"/>
    <id>http://www.codewoody.com/posts/48586/</id>
    <published>2019-02-17T09:29:29.000Z</published>
    <updated>2019-03-05T04:09:38.494Z</updated>
    
    <content type="html"><![CDATA[<p>我是一个无人机集群技术的研究者，从最近开始我打算集中整理发布一些无人机，尤其是无人机集群技术的新进展以及评论文章。<a id="more"></a></p><p>原文链接：<a href="https://www.technologyreview.com/s/612656/its-only-a-matter-of-time-before-a-drone-takes-down-a-passenger-plane/" target="_blank" rel="noopener">It’s only a matter of time before a drone takes down a passenger plane</a></p><p><img src="https://imgs.codewoody.com/uploads/big/0166e9fa673aa5ee62aa118a58836f7f.jpg" alt="Cover"></p><p>2018年12月，英国第二大机场盖特威克机场，发现有一架无人机飞过机场，不得不关闭一天，几十万旅客受到影响。目前还不知道这架无人机是谁操作，为什么要飞入机场。</p><p>这个事件表明，无人机对商业航空已经构成威胁。更严重的是，”反无人机”技术起不了多大作用。无人机已经变得太便宜，太强大，客机将不可避免地受到影响。无论是开枪、无线电干扰、或者其他措施，都无法可靠地保护客机。这可能听起来危言耸听，但我们对无人机真的缺乏办法。</p><p>现在，消费者可以买到的最便宜无人机，只需要25美元。这些产品接受遥控器的无线信号，相对容易防范，只要干扰它们的无线电信号，就可以了。稍微昂贵的无人机有 GPS 芯片，这种无人机可以编程设置一个”地理围栏”，防止它们飞入指定的地理坐标范围内。</p><p>但是，上面的这些措施，只能防住普通消费者从正规渠道买到的无人机。对于具有中等技术水平的人来说，制造一架无人机很容易，自制无人机也不需要 GPS 芯片。它们也不一定需要与操作员通信，才能保持飞行，这使得无线电干扰无效。而且，强度太大的干扰信号，反而可能会影响到本来要保护的客机。</p><p>可以肯定的是，一架无人机攻击一架客机，成功机会不大。这是因为在起飞和着陆时（最容易遭遇无人机的阶段），客机的移动速度非常快，通常在每小时150到200英里之间，很少有无人机能够以50~70英里/小时的速度飞行，所以客机应该可以避开无人机。此外，飞机的设计可以承受鸟撞，如果一架无人机意外撞到客机，客机可能只会受到轻微损坏，很可能还是能够安全降落。</p><p>但是，如果无人机成群飞行，事情就会发生变化。虽然单个无人机很难攻击飞机，但是在客机的飞行路径上放置30架无人机，就可能会发生变化。考虑到无人机的价格，多架无人机群体攻击是很容易的。如果通过编程，找出客机的引擎（通过红外传感或通过图像），然后无人机携带少量爆炸物，撞击可能会致命。</p><p>总之，对于那些蓄意攻击客机的半自动或全自动无人机集群，根本就没有好的技术对策。</p><p>文章链接 <a href="http://www.codewoody.com/posts/48586/">http://www.codewoody.com/posts/48586/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是一个无人机集群技术的研究者，从最近开始我打算集中整理发布一些无人机，尤其是无人机集群技术的新进展以及评论文章。
    
    </summary>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/categories/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
    
      <category term="无人机" scheme="http://www.codewoody.com/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Netlink:用户空间与内核空间交互</title>
    <link href="http://www.codewoody.com/posts/2348/"/>
    <id>http://www.codewoody.com/posts/2348/</id>
    <published>2019-01-22T08:29:18.000Z</published>
    <updated>2019-01-22T08:59:24.910Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/questions/20975566/what-is-the-best-way-to-communicate-a-kernel-module-with-a-user-space-program" target="_blank" rel="noopener">Reference</a></p><h1 id="1-什么是Netlink"><a href="#1-什么是Netlink" class="headerlink" title="1 什么是Netlink"></a>1 什么是Netlink</h1><p>Netlink is a socket family that supplies a messaging facility based on the <strong>++BSD socket interface++</strong> to send and retrieve kernel-space information from user-space.  Netlink is portable, highly extensible and it supports <strong>++event-based notifications++</strong>.</p><blockquote><p>从这段描述来看Netlink可以提供类似socket接口，这意味着我们能够传输比较大量的，结构化的数据。另外，Netlink还提供了基于时间通知的功能，也适合我们时刻监控系统动态。</p></blockquote><p>Netlink是一种面向数据表(datagram-oriented)的连通用户空间和内核空间的<strong>++消息系统++</strong>。同时，Netlink也可以用于进程间通信(InterProcess Communication, IPC)。我们这里只关注前者。Netlink构筑与通用的BSD scoket基础设施之上，因此支持使用<code>socket()</code>, <code>bind()</code>, <code>sendmsg()</code>, <code>recvmsg()</code>和其他通常的socket polling操作。</p><blockquote><p>一般的BSD socket使用的是固定格式的数据结构(如AF_INET或者AF_RAW)。Netlink则提供更加可扩展的数据格式。</p></blockquote><h1 id="2-Netlink的典型应用场景"><a href="#2-Netlink的典型应用场景" class="headerlink" title="2 Netlink的典型应用场景"></a>2 Netlink的典型应用场景</h1><p>当前Netlink主要应用场景是网络相关应用，包括：</p><ul><li>advanced routing</li><li>IPsec key management tools</li><li>firewall state synchronization</li><li>uesr-space packet enqueuing</li><li>border gateway routing protocols</li><li>wireless mesh routing protocols</li></ul><blockquote><p>这个应用场景与我们的需要时契合的</p></blockquote><h1 id="3-Netlink总线"><a href="#3-Netlink总线" class="headerlink" title="3 Netlink总线"></a>3 Netlink总线</h1><p>Netlink允许最多32条内核空间总线。一般来说每个总线都关联到一个内核子系统中（多个子系统也可以共享一个总线）。总线共享的例子包括：</p><ol><li><code>nfnetlink</code>：所有防火墙相关子系统共享</li><li><code>rtnetlink</code>：网络设备管理，路由和队列管理</li></ol><blockquote><p>关于Netlink总线，我发现了一个内核的<a href="https://lwn.net/Articles/746776/" target="_blank" rel="noopener">patch</a>，其中提到，”This patchset aims to improve this situation by add ing a new NETLINK_DESC bus with two commands…”</p></blockquote><h1 id="4-Netlink通信类型"><a href="#4-Netlink通信类型" class="headerlink" title="4 Netlink通信类型"></a>4 Netlink通信类型</h1><p>Netlink支持两种通信类型：</p><ol><li>Unicast：一对一通信，即一个内核子系统对应一个用户空间程序。这种通信模式一般用来发送命令，或者获取命令执行的结果。</li><li>Multicast：一对多通信。通常的场景是一个内核态模块向多个用户态监听者发送消息。这种监听者被划分为多个不同的组。一条Netlink总线可以提供多个组，用户空间可以订阅到一个或者多个组来获取对应的信息。最多可以创建<div id="nv60rt" data-type="math" data-display="inline" data-align="left" data-src="https://cdn.nlark.com/__latex/f19901f1c817ad846a411e6712e8db66.svg" data-text="2%5E%7B32%7D" data-width="22" data-height="24"><img src="https://cdn.nlark.com/__latex/f19901f1c817ad846a411e6712e8db66.svg" width="22"></div>个组。</li></ol><p><img src="https://imgs.codewoody.com/uploads/big/fd04efbb980d5c7939ee72218283967a.png" alt="Example scenario of unicast and multicast Netlink sockets"></p><p>上图给出了Unicast和Multicast的图示。注意这里unicast是同步的，multicast是异步的。</p><h1 id="5-Netlink消息格式"><a href="#5-Netlink消息格式" class="headerlink" title="5 Netlink消息格式"></a>5 Netlink消息格式</h1><p>一般来说，Netlink消息对齐到32bit，其内部数据是<a href="https://www.quora.com/What-are-network-byte-order-and-host-byte-order-in-computer-networking" target="_blank" rel="noopener">host-byte order</a>. 一个Netlink消息总由一段16bytes的header组成，header的格式为<code>struct nlmsghdr</code>（定义在<code>&lt;include/linux/netlink.h&gt;</code>中）</p><p><img src="https://imgs.codewoody.com/uploads/big/a852f3eedef7daa85d67253ce736fc4d.png" alt="Layout of a Netlink message header"></p><p>header包含如下字段：</p><ul><li>消息长度（32bits,  包含header的长度）</li><li>消息类型（16bits）。消息类型的划分有两大类别：数据消息和控制消息。其中数据消息的类型取决于内核模块所允许的取值。控制消息类型则对所有Netlink子系统是一致的。控制消息的类型目前一共有四种。<ul><li><code>NLMSG_NOOP</code>: 不对对应任何实质操作，只用来检测Netlink总线是否可用</li><li><code>NLMSG_ERROR</code>：该消息包含了错误信息</li><li><code>NLMSG_DONE</code>：this is the trailing message that is part of a multi-part message. A  multi-part message is composed of a set of messages all with the <code>NLM_F_MULTI</code> flag set.</li><li><code>NLMSG_OVERRUN</code>：没有使用</li></ul></li><li>消息标识(16bits)。一些例子如下：<ul><li><code>NLM_F_REQUEST</code>: 如果这个标识被设置了，表明这个消息代表了一个请求。从用户空间发往内核空间的请求必须要设置这个标识，否则内核子系统必须要回复一个<code>invalid argument(EINVAL)</code>的错误信息。</li><li><code>NLM_F_CREATE</code>: 用户空间想要发布一个命令，或者创建一个新的配置。</li><li><code>NLM_F_EXCL</code>: 通常和NLM_F_CREATE一起使用，用来出发配置已经存在的错误信息。</li><li><code>NLM_F_REPLACE</code>: 用户空间想要替换现有配置。</li><li><code>NLM_F_APPEND</code>: 想现有配置添加配置。这种操作一般针对的是有序的数据，如路由表。</li><li><code>NLM_F_DUMP</code>: 用户应用想要和内核应用进行全面重新同步。这中消息的结果是一系列的multipart message。</li><li><code>NLM_F_MULTI</code>: this is a multi-part message. A Netlink subsystem replies with a multi-part message if it has previously received a request from user-space with the NLM F DUMP flag set.</li><li><code>NLM_F_ACK</code>: 设置了这个标识后，内核会返回一个确认信息表明一个请求已经执行。如果这个flag没有返回，那么错误信息会作为sendmsg()函数的返回值同步返回。</li><li><code>NLM_F_ECHO</code>:  if this flag is set, the user-space application wants to get a report back via unicast of the request that it has send. 注意通过这种方式获取信息后，这个程序不会再通过事件通知系统获取同样的信息。</li></ul></li><li>Sequence Number (32bits):  The sequence number is used as a tracking cookie since the kernel does not change the sequence number value at all<ul><li>可以和NLM_F_ACK一起使用，用户空间用来确认一个请求被正确地发出了。</li><li>Netlink uses the same sequence number in the messages that are sent as reply to a given request</li><li>For event-based notifications from kernel-space, this is always zero.</li></ul></li><li>Port-ID (32bits): 包含了Netlink分配的一个数字ID。Netlink使用不同的port ID来确定同一个用户态进程打开的不同socket通道。第一个socket的默认port ID是这个进程的PID(Process ID)。在下面这些场景下，port ID为0：<ul><li>消息来自内核空间</li><li>消息发送自用户空间，我们希望Netlink能够自动根据socket通道的port ID自动设置消息的port ID</li></ul></li></ul><p>以上是通用Netlink header格式。一些内核子系统会进一步定义自己的header格式，这样不同的子系统可以共享同一个Netlink socket总线。这种情形成为GetNetlink。</p><h1 id="6-Netlink负载"><a href="#6-Netlink负载" class="headerlink" title="6 Netlink负载"></a>6 Netlink负载</h1><h2 id="6-1-Type-Length-Value-TLV-格式"><a href="#6-1-Type-Length-Value-TLV-格式" class="headerlink" title="6.1 Type-Length-Value(TLV)格式"></a>6.1 Type-Length-Value(TLV)格式</h2><p><img src="https://imgs.codewoody.com/uploads/big/a852f3eedef7daa85d67253ce736fc4d.png" alt="An example of a hypothetical Netlink payload in TLV format"></p><p>Netlink的消息格式由TLV格式的属性组成。TLV属性分为Length,  Type和Payload三部分。这种格式具有很强的可扩展性。在内核中，TLV属性的header定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  &lt;------- NLA_HDRLEN ------&gt; &lt;-- NLA_ALIGN(payload)--&gt;</span></span><br><span class="line"><span class="comment"> * +---------------------+- - -+- - - - - - - - - -+- - -+</span></span><br><span class="line"><span class="comment"> * |        Header       | Pad |     Payload       | Pad |</span></span><br><span class="line"><span class="comment"> * |   (struct nlattr)   | ing |                   | ing |</span></span><br><span class="line"><span class="comment"> * +---------------------+- - -+- - - - - - - - - -+- - -+</span></span><br><span class="line"><span class="comment"> *  &lt;-------------- nlattr-&gt;nla_len --------------&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nlattr</span> &#123;</span></span><br><span class="line">    __u16           nla_len;</span><br><span class="line">    __u16           nla_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>nla_type</code>：属性的取值很大程度上取决于内核空间子系统定义。不过Netlink预先定了两个重要的比特位：<ul><li>NLA_F_NETSTED: 是否是嵌套属性。即在payload部分，以TLV的格式存储了更多的属性。</li><li>NLA_F_NET_BYTEORDER: payload内容的字节顺序（是否是network byte order(1))</li></ul></li><li><code>nla_len</code>: 注意，尽管payload部分会按照32bit进行对齐，这里的长度内容是不包含对齐补全的bit的。另外，这里的长度值包含了header。</li></ul><h1 id="7-Netlink错误消息"><a href="#7-Netlink错误消息" class="headerlink" title="7 Netlink错误消息"></a>7 Netlink错误消息</h1><p><img src="https://imgs.codewoody.com/uploads/big/a852f3eedef7daa85d67253ce736fc4d.png" alt="Layout of a Netlink error message"></p><p>Netlink提供了一种包含了Netlink error header的消息类型，其格式如上图所示。这个header定义为<code>struct nlmsgerr</code> (<code>&lt;include/linux/netlink.h&gt;</code>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nlmsgerr</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span>error;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nlmsghdr</span> <span class="title">msg</span>;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * followed by the message contents unless NETLINK_CAP_ACK was set</span></span><br><span class="line"><span class="comment"> * or the ACK indicates success (error == 0)</span></span><br><span class="line"><span class="comment"> * message length is aligned with NLMSG_ALIGN()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * followed by TLVs defined in enum nlmsgerr_attrs</span></span><br><span class="line"><span class="comment"> * if NETLINK_EXT_ACK was set</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>error</code>: 错误类型。定义在<code>error.h</code>中，可以用<code>perror()</code>解析。</li><li>Netlink消息，为触发此错误的消息内容。<blockquote><p>With regards to message integrity, the kernel subsystems that support Netlink usually report invalid argument (EINVAL) via recvmsg() if user-space sends a malformed message</p></blockquote></li></ul><h1 id="8-GeNetlink"><a href="#8-GeNetlink" class="headerlink" title="8 GeNetlink"></a>8 GeNetlink</h1><p>前文我们提到过GetNetlink了。这一技术是为了缓解Netlink总线数量过少的问题。GeNetlink allows to register up to 65520 families that share a single Netlink bus. Each family is intended to be equivalent to a virtual bus。其中，每个family通过一个唯一的string name and ID number来注册。其中string name作为主键，而ID number在不同的系统中可能不同。</p><h1 id="9-Netlink开发"><a href="#9-Netlink开发" class="headerlink" title="9 Netlink开发"></a>9 Netlink开发</h1><p>Netlink开发涉及到内核空间和用户空间双边的开发。Linux提供了很多帮助函数来见过Netlink开发中重复性的解析，验证，消息构建的操作。</p><h2 id="9-1-用户空间开发"><a href="#9-1-用户空间开发" class="headerlink" title="9.1 用户空间开发"></a>9.1 用户空间开发</h2><p>从用户空间这一侧来看，Netlink sockets实现在通用的BSD socket接口之上。因此，在用户空间开发Netlink和开发TCP/IP socket应用是很类似的。不过，同其他典型的BSD socket应用相比，Netlink存在以下的不同之处：</p><ol><li>Netlink sockets do not hide protocol details to user-space as other protocols to. 即，Netlink会直接处理原始数据本身，用户空间的开发也要直接处理原始数据格式的负载。</li><li>Errors that  comes from Netlink and kernel subsystems are not returned by recvmsg() as an integer. Instead, errors are encapsulated in the Netlink error message. 唯一的例外是No buffer space error (<code>ENOBUFS</code>)，这个错误是表明无法将Netlink消息放入队列。标准的通用socket错误，同样也是从<code>recvmsg()</code>中以integer形式返回。</li></ol><blockquote><p>涉及用户空间的Netlink开发的有两个库：<a href="https://www.infradead.org/~tgr/libnl/" target="_blank" rel="noopener">libnl</a>和<a href="https://netfilter.org/projects/libmnl/" target="_blank" rel="noopener">libmnl</a>。这些库都是用C开发，用来简化Netlink开发。Netlink用户空间的进一步开发可以参考这两个库的例子和教程。</p><p>原始API的文档：<a href="https://www.systutorials.com/docs/linux/man/7-netlink/" target="_blank" rel="noopener">https://www.systutorials.com/docs/linux/man/7-netlink/</a></p></blockquote><h3 id="9-1-1-打开socket"><a href="#9-1-1-打开socket" class="headerlink" title="9.1.1 打开socket"></a>9.1.1 打开socket</h3><p>下面来阐述一下用户空间的Netlink开发的重要事项。前面提到Netlink使用了BSD socket的接口。一般而言，创建socket的接口长这样子（<a href="http://web.mit.edu/macdev/Development/MITSupportLib/SocketsLib/Documentation/sockets.html" target="_blank" rel="noopener">socket接口</a>）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span> <span class="params">(<span class="keyword">int</span> family, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>第一个参数<code>family</code>是socket的大类。在开发TCP/IP应用的时候，这里总是<code>AF_INET</code>。而在Netlink中，这里总是设置为<code>AF_NETLINK</code>。</li><li><code>type</code>可以选择<code>SOCK_RAW</code>或者<code>SOCK_DGRAM</code>。不过Netlink并不会区分这两者。</li><li>protocol为Netlink场景下定义的具体协议类型，现有的主要协议包括：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_ROUTE0<span class="comment">/* Routing/device hook*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_UNUSED1<span class="comment">/* Unused number*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_USERSOCK2<span class="comment">/* Reserved for user mode socket protocols */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_FIREWALL3<span class="comment">/* Unused number, formerly ip_queue*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_SOCK_DIAG4<span class="comment">/* socket monitoring*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_NFLOG5<span class="comment">/* netfilter/iptables ULOG */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_XFRM6<span class="comment">/* ipsec */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_SELINUX7<span class="comment">/* SELinux event notifications */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_ISCSI8<span class="comment">/* Open-iSCSI */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_AUDIT9<span class="comment">/* auditing */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_FIB_LOOKUP10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_CONNECTOR11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_NETFILTER12<span class="comment">/* netfilter subsystem */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_IP6_FW13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_DNRTMSG14<span class="comment">/* DECnet routing messages */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_KOBJECT_UEVENT15<span class="comment">/* Kernel messages to userspace */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_GENERIC16</span></span><br><span class="line"><span class="comment">/* leave room for NETLINK_DM (DM Events) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_SCSITRANSPORT18<span class="comment">/* SCSI Transports */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_ECRYPTFS19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_RDMA20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_CRYPTO21<span class="comment">/* Crypto layer */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_INET_DIAGNETLINK_SOCK_DIAG</span></span><br></pre></td></tr></table></figure><blockquote><p>我们可以直接使用NETLINK_USERSOCK供自己使用，或者自己定义一个新的量。</p></blockquote><blockquote><p>这里的protocol应当对应的是1.1.3中提到的总线。推理过程如下：</p><ol><li><a href="https://lwn.net/Articles/746776/" target="_blank" rel="noopener">https://lwn.net/Articles/746776/</a> 这个链接中提叫的patch描述中称：This patch set aims to improve this situation by adding a new NETLINK_DESC bus with two commands</li><li>在<a href="#8642ah">参考文献</a>中谈论Netlink总线时，聚到了rtnetlink这个例子。根据rtnetlink的<a href="http://man7.org/linux/man-pages/man7/rtnetlink.7.html" target="_blank" rel="noopener">man page</a>，<br><code style="background-color: rgb(255, 255,255)"><br>#include &lt;asm/types.h&gt;<br>#include &lt;linux/netlink.h&gt;<br>#include &lt;linux/rtnetlink.h&gt;<br>#include &lt;sys/socket.h&gt;<br><br><br>rtnetlink_socket = socket(AF_NETLINK, int socket_type, NETLINK_ROUTE);<br></code></li></ol></blockquote><h3 id="9-1-2-绑定socket地址"><a href="#9-1-2-绑定socket地址" class="headerlink" title="9.1.2 绑定socket地址"></a>9.1.2 绑定socket地址</h3><p>在打开了一个socket之后，我们需要为socket绑定一个本地地址。Netlink的地址格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_nl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">sa_family_t</span>    nl_family;  <span class="comment">/* AF_NETLINK   */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> nl_pad;     <span class="comment">/* zero         */</span></span><br><span class="line">  __u32          nl_pid;     <span class="comment">/* process pid */</span></span><br><span class="line">  __u32          ;  <span class="comment">/* mcast groups mask */</span></span><br><span class="line">&#125; nladdr;</span><br></pre></td></tr></table></figure><blockquote><p>这里的nl_pid可以通过getpid()这个函数来获取当前进程的pid来进行赋值</p></blockquote><p>如果要在一个进程的多个线程中打开多个socket，可以用如下公式生成<code>nl_pid</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_self() &lt;&lt; <span class="number">16</span> | getpid();</span><br></pre></td></tr></table></figure><p><code>struct socketadd_nl</code>中的<code>nl_groups</code>为bit mask，代表了广播分组。当设置为0时代表单播消息。</p><p>确定地址后可以将其绑定到socket</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fd为socket()返回的句柄</span></span><br><span class="line">bind(fd, (struct sockaddr*)&amp;nladdr, <span class="keyword">sizeof</span>(nladdr));</span><br></pre></td></tr></table></figure><h3 id="9-1-3-发送Netlink消息"><a href="#9-1-3-发送Netlink消息" class="headerlink" title="9.1.3 发送Netlink消息"></a>9.1.3 发送Netlink消息</h3><p>为了发送Netlink消息，我们还需要创建一个<code>struct socketaddr_nl</code>作为发送的目的地址。如果消息是发送给内核的，那么<code>nl_pid</code>和<code>nl_groups</code>都要设置为0。如果这个消息是一个多播消息，那么需要设置<code>nl_groups</code>的对应比特。设置好目的地址之后，我们可以开始组装<code>sentmsg()</code>API需要的消息格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> <span class="title">msg</span>;</span></span><br><span class="line">msg.msg_name = (<span class="keyword">void</span> *)&amp;(nladdr);</span><br><span class="line">msg.msg_namelen = <span class="keyword">sizeof</span>(nladdr);</span><br></pre></td></tr></table></figure><p>上面是socket的通用header，我们还需要设置Netlink自己的Message  header这里<code>struct nlmsghdr</code>定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nlmsghdr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __u32 nlmsg_len;   <span class="comment">/* Length of message */</span></span><br><span class="line">  __u16 nlmsg_type;  <span class="comment">/* Message type*/</span></span><br><span class="line">  __u16 nlmsg_flags; <span class="comment">/* Additional flags */</span></span><br><span class="line">  __u32 nlmsg_seq;   <span class="comment">/* Sequence number */</span></span><br><span class="line">  __u32 nlmsg_pid;   <span class="comment">/* Sending process PID */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在1.5中我们队各个字段的含义有了详细的介绍。按照对应的含义进行设置。<br>Netlink的消息由Netlink header和payload组成。因此我们需要一次性创建包含header和payload的内存块。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nlmsghdr</span> *<span class="title">nlh</span> = (<span class="title">struct</span> <span class="title">nlmsghdr</span> *)<span class="title">malloc</span>(<span class="title">NLMSG_SPACE</span>(<span class="title">MAX_PAYLOAD</span>));</span> </span><br><span class="line"><span class="built_in">memset</span>(nlh, <span class="number">0</span>, NLMSG_SPACE(MAX_PAYLOAD));</span><br><span class="line">nlh-&gt;nlmsg_len = NLMSG_SPACE(MAX_PAYLOAD);</span><br><span class="line">nlh-&gt;nlmsg_pid = getpid();</span><br><span class="line">nlh-&gt;nlmsg_flags = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>此处使用的<code>NLMSG_SPACE</code>宏定义是Netlink提供的工具，其定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NLMSG_LENGTH(len) ((len) + NLMSG_HDRLEN)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NLMSG_SPACE(len) NLMSG_ALIGN(NLMSG_LENGTH(len))</span></span><br></pre></td></tr></table></figure><p>这个宏做了两件事：</p><ol><li>在长度上加上header的长度</li><li>将Payload进行32bit对齐</li></ol><p>设置好负载内容后（负载数据段可以通过<span data-type="color" style="color:rgb(206, 103, 0)"><code>NLMSG_DATA</code></span><span data-type="color" style="color:rgb(197, 200, 198)"><code>(nlh)</code></span>来获取），就可以发送了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iov</span>;</span></span><br><span class="line"></span><br><span class="line">iov.iov_base = (<span class="keyword">void</span> *)nlh;</span><br><span class="line">iov.iov_len = nlh-&gt;nlmsg_len;</span><br><span class="line"></span><br><span class="line">msg.msg_iov = &amp;iov;</span><br><span class="line">msg.msg_iovlen = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">sendmsg(fd, &amp;msg, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="9-1-3-接收Netlink消息"><a href="#9-1-3-接收Netlink消息" class="headerlink" title="9.1.3 接收Netlink消息"></a>9.1.3 接收Netlink消息</h3><p>接收过程是类似的。接收程序需要提前分配一个足够的buffer来接收Netlink消息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_nl</span> <span class="title">nladdr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> <span class="title">msg</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iov</span>;</span></span><br><span class="line"></span><br><span class="line">iov.iov_base = (<span class="keyword">void</span> *)nlh;</span><br><span class="line">iov.iov_len = MAX_NL_MSG_LEN;</span><br><span class="line">msg.msg_name = (<span class="keyword">void</span> *)&amp;(nladdr);</span><br><span class="line">msg.msg_namelen = <span class="keyword">sizeof</span>(nladdr);</span><br><span class="line"></span><br><span class="line">msg.msg_iov = &amp;iov;</span><br><span class="line">msg.msg_iovlen = <span class="number">1</span>;</span><br><span class="line">recvmsg(fd, &amp;msg, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="9-2-内核空间开发"><a href="#9-2-内核空间开发" class="headerlink" title="9.2 内核空间开发"></a>9.2 内核空间开发</h2><h3 id="9-2-1-创建新的Netlink协议类型"><a href="#9-2-1-创建新的Netlink协议类型" class="headerlink" title="9.2.1 创建新的Netlink协议类型"></a>9.2.1 创建新的Netlink协议类型</h3><p>除非要复用内核既有Netlink协议类型，不然最好定义一个自己用的总线类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETLINK_TEST 31</span></span><br></pre></td></tr></table></figure><p>这个定义可以加在<code>netlink.h</code>中，或者放在模块的头文件里。</p><h3 id="9-2-2-创建socket"><a href="#9-2-2-创建socket" class="headerlink" title="9.2.2 创建socket"></a>9.2.2 创建socket</h3><p>在用户态，我们通过<code>socket()</code>接口来创建socket，而在内核中，我们使用如下的API：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *</span></span><br><span class="line"><span class="class"><span class="title">netlink_kernel_create</span>(<span class="title">struct</span> <span class="title">net</span> *<span class="title">net</span>, <span class="title">int</span> <span class="title">unit</span>, <span class="title">struct</span> <span class="title">netlink_kernel_cfg</span> *<span class="title">cfg</span>);</span></span><br></pre></td></tr></table></figure><ul><li><code>net</code>一般固定为全局变量<code>init_net</code></li><li><code>unit</code>即为协议类型，我们在这里填上<code>NETLINK_TEST</code></li><li><code>cfg</code>为Netlink的内核设置</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">netlink_kernel_cfg</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>groups;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>flags;</span><br><span class="line"><span class="keyword">void</span>(*input)(struct sk_buff *skb);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span>*<span class="title">cb_mutex</span>;</span></span><br><span class="line"><span class="keyword">int</span>(*bind)(struct net *net, <span class="keyword">int</span> group);</span><br><span class="line"><span class="keyword">void</span>(*unbind)(struct net *net, <span class="keyword">int</span> group);</span><br><span class="line"><span class="keyword">bool</span>(*compare)(struct net *net, struct sock *sk);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中<code>input</code>是必须要设置的，是socket在接收到一个消息后的回调函数。回调函数的一个例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_nl_recv_msg</span><span class="params">(struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nlmsghdr</span> *<span class="title">nlh</span>;</span></span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sk_buff</span> *<span class="title">skb_out</span>;</span></span><br><span class="line">    <span class="keyword">int</span> msg_size;</span><br><span class="line">    <span class="keyword">char</span> *msg = <span class="string">"Hello from kernel"</span>;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line"></span><br><span class="line">    printk(KERN_INFO <span class="string">"Entering: %s\n"</span>, __FUNCTION__);</span><br><span class="line"></span><br><span class="line">    msg_size = <span class="built_in">strlen</span>(msg);</span><br><span class="line"></span><br><span class="line">    nlh = (struct nlmsghdr *)skb-&gt;data;</span><br><span class="line">    printk(KERN_INFO <span class="string">"Netlink received msg payload:%s\n"</span>, (<span class="keyword">char</span> *)nlmsg_data(nlh));</span><br><span class="line">    pid = nlh-&gt;nlmsg_pid; <span class="comment">/*pid of sending process */</span></span><br><span class="line"></span><br><span class="line">    skb_out = nlmsg_new(msg_size, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!skb_out)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        printk(KERN_ERR <span class="string">"Failed to allocate new skb\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nlh = nlmsg_put(skb_out, <span class="number">0</span>, <span class="number">0</span>, NLMSG_DONE, msg_size, <span class="number">0</span>);</span><br><span class="line">    NETLINK_CB(skb_out).dst_group = <span class="number">0</span>; <span class="comment">/* not in mcast group */</span></span><br><span class="line">    <span class="built_in">strncpy</span>(nlmsg_data(nlh), msg, msg_size);</span><br><span class="line"></span><br><span class="line">    res = nlmsg_unicast(nl_sk, skb_out, pid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (res &lt; <span class="number">0</span>)</span><br><span class="line">        printk(KERN_INFO <span class="string">"Error while sending bak to user\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-3-从内核向用户态程序发送消息"><a href="#9-2-3-从内核向用户态程序发送消息" class="headerlink" title="9.2.3 从内核向用户态程序发送消息"></a>9.2.3 从内核向用户态程序发送消息</h3><p>正如在用户空间的发送流程那样，发送消息需要先设置一个socket接收地址。设置接收地址需要通过<code>NETLIN_CB</code>宏访问skb从control buffer中存储的netlink参数（<code>struct netlink_skb_parms</code>）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">netlink_skb_parms</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">scm_creds</span><span class="title">creds</span>;</span><span class="comment">/* Skb credentials*/</span></span><br><span class="line">__u32portid;</span><br><span class="line">__u32dst_group;</span><br><span class="line">__u32flags;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span>*<span class="title">sk</span>;</span></span><br><span class="line"><span class="keyword">bool</span>nsid_is_set;</span><br><span class="line"><span class="keyword">int</span>nsid;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中重要的参数时<code>dst_group</code>和<code>flags</code>。<br>如果要发送的数据包是单播数据包，发送方式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NETLINK_CB(skb_out).dst_group = <span class="number">0</span>; <span class="comment">/* not in mcast group */</span></span><br><span class="line">res = nlmsg_unicast(nl_sk, skb_out, pid);</span><br></pre></td></tr></table></figure><blockquote><p>这里的目标pid可以通过接收到的消息<code>nlh-&gt;nlmsg_pid</code>获取</p></blockquote><p>如果要发送的数据包是多播：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = nlmsg_multicast(nl_sk, skbout, own_pid, group, flags);</span><br></pre></td></tr></table></figure><blockquote><ol><li>此处的own_pid是传输自己的pid来纺织消息传递给自己。因此内核态在这里填写0</li><li>NETLNK_CB(skb_out).dst_group会在发送函数内设置。</li></ol></blockquote><h1 id="10-Further-Reading"><a href="#10-Further-Reading" class="headerlink" title="10 Further Reading"></a>10 Further Reading</h1><ul><li><a href="https://www.linuxjournal.com/article/7356" target="_blank" rel="noopener">Kernel Korner - Why and How to Use Netlink Socket</a></li><li><a href="https://gist.github.com/arunk-s/c897bb9d75a6c98733d6" target="_blank" rel="noopener">https://gist.github.com/arunk-s/c897bb9d75a6c98733d6</a></li></ul><p>文章链接 <a href="http://www.codewoody.com/posts/2348/">http://www.codewoody.com/posts/2348/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/20975566/what-is-the-best-way-to-communicate-a-kernel-module-with-a-user-space-program&quot; targ
      
    
    </summary>
    
      <category term="kernel" scheme="http://www.codewoody.com/categories/kernel/"/>
    
    
      <category term="linux" scheme="http://www.codewoody.com/tags/linux/"/>
    
      <category term="kernel" scheme="http://www.codewoody.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>使用iptables和route来建立起Linux的网关设置</title>
    <link href="http://www.codewoody.com/posts/32824/"/>
    <id>http://www.codewoody.com/posts/32824/</id>
    <published>2019-01-22T08:00:49.000Z</published>
    <updated>2019-01-22T08:06:21.104Z</updated>
    
    <content type="html"><![CDATA[<br>本文翻译自：<a href="https://www.systutorials.com/1372/setting-up-gateway-using-iptables-and-route-on-linux/" target="_blank" rel="noopener">Setting Up Gateway Using iptables and route on Linux</a>。<br>网络资源的分享是非常重要的，而建立起一个网关来进行网络分享是一个比较好的解决方案。在Linux系统中创建和设置网关非常简单，成本低廉，而且性能可靠。</p><h1 id="1-Linux网络设置"><a href="#1-Linux网络设置" class="headerlink" title="1 Linux网络设置"></a>1 Linux网络设置</h1><p>假定我们要处理的Linux有如下的配置：</p><ul><li>NIC1: eth0, ip: 192.168.0.1，连接到局域网(LAN)</li><li>NIC2: eth1, ip: 1.2.3.4, 连接到公网</li></ul><p><img src="https://imgs.codewoody.com/uploads/big/6f341c57eb221eab557015034a7c4c0e.png" alt="网络拓扑图"></p><p>现在我们希望将分享这台机器的网络连接给LAN网络上的其他电脑(ip: 192.168.0.0/16)</p><h1 id="2-设置网关"><a href="#2-设置网关" class="headerlink" title="2 设置网关"></a>2 设置网关</h1><p>下面提到的所有操作都需要root权限来执行。</p><h2 id="2-1-操作IP路由表"><a href="#2-1-操作IP路由表" class="headerlink" title="2.1 操作IP路由表"></a>2.1 操作IP路由表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip route add 192.168.0.0/16 dev eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="comment"># route add -net 192.168.0.0/16 dev eth0</span></span><br></pre></td></tr></table></figure><h2 id="2-2-启用Linux-IP-转发-IP-Forwarding"><a href="#2-2-启用Linux-IP-转发-IP-Forwarding" class="headerlink" title="2.2 启用Linux IP 转发(IP Forwarding)"></a>2.2 启用Linux IP 转发(IP Forwarding)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.ipv4.ip.forward=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="comment"># echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span></span><br></pre></td></tr></table></figure><p>你也可以直接编辑<code>/etc/sysctl.conf</code>来持久化这一设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure><h2 id="2-3-通过iptables设置源地址映射-SNAT"><a href="#2-3-通过iptables设置源地址映射-SNAT" class="headerlink" title="2.3 通过iptables设置源地址映射(SNAT)"></a>2.3 通过iptables设置源地址映射(SNAT)</h2><p>将（其他电脑发送的）包的源地址修改为网关的源地址。iptables会自动将响应包的目的地址替换成正确的IP地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o eth1 -j SNAT --to-source 1.2.3.4</span><br></pre></td></tr></table></figure><p>除了使用SNAT，也可以使用MASQUERADE:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o eth1 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>注意，对于静态IP而言，SNAT的方式要更好一些。根据iptables man page:</p><blockquote><p>This target is only valid in the nat table, in the POSTROUTING chain. It should only be used with dynamically assigned IP (dialup) connections: if you have a static IP address, you should use the SNAT target. Masquerading is equivalent to specifying a mapping to the IP address of the interface the packet is going out, but also has the effect that connections are forgotten when the interface goes down. This is the correct behavior when the next dialup is unlikely to have the same interface address (and hence any established connections are lost anyway).</p></blockquote><p>你还需要确保其他iptables不会阻拦对应的连接。如果你有这方面的问题，可以尝试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -F</span><br><span class="line">iptables -t nat -F</span><br><span class="line">iptables -t nat -A POSTROUTING ! -d 192.168.0.0/16 -o eth1 -j SNAT --to-source 1.2.3.4</span><br></pre></td></tr></table></figure><p>上面的代码可以允许所有的接入连接。不过这会存在一些安全性问题。</p><h1 id="3-客户端配置"><a href="#3-客户端配置" class="headerlink" title="3 客户端配置"></a>3 客户端配置</h1><p>客户端配置主要是把网关设置成192.168.0.1。例如如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip route add default via 192.168.0.1 dev eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="comment"># route add default gw 192.168.0.1 eth0</span></span><br></pre></td></tr></table></figure><p>文章链接 <a href="http://www.codewoody.com/posts/32824/">http://www.codewoody.com/posts/32824/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网络资源的分享是非常重要的，而建立起一个网关来进行网络分享是一个比较好的解决方案。在Linux系统中创建和设置网关非常简单，成本低廉，而且性能可靠。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/6f341c57eb221eab557015034a7c4c0e.png&quot; alt=&quot;网络拓扑图&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="linux" scheme="http://www.codewoody.com/tags/linux/"/>
    
      <category term="iptables" scheme="http://www.codewoody.com/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>树莓派上搭建视频流服务的方法尝试</title>
    <link href="http://www.codewoody.com/posts/28769/"/>
    <id>http://www.codewoody.com/posts/28769/</id>
    <published>2018-12-26T13:43:19.000Z</published>
    <updated>2018-12-27T02:42:39.095Z</updated>
    
    <content type="html"><![CDATA[<p>最近实验需要在树莓派上搭建一个简单的视频服务，而且，希望画质一定的情况下，消耗的带宽越少越好。关于带宽的问题，其实开始并没有考虑太多，但是在尝试用<code>uv4l</code>工具创建mpeg流的时候发现，尽管分辨率很低（720p）不到，需要的数据率却达到了大约5MB/s。我们待测试的通信层不具备这样高的传输传输能力。因此需要想办法把数据率降下来。综上，我们需要产生一个编码后的视频流，如H264。<br><a id="more"></a></p><p>幸运的是我发现了<a href="https://github.com/131/h264-live-player" target="_blank" rel="noopener">h264-live-player</a>这个项目。这个项目是基于Node.js的工程，利用Websocket传输H264编码数据，在客户端用<code>Broadway</code>解码，而服务端的H264流通过<code>raspivid</code>产生。</p><p>在接下来的部分，我先简要介绍一下Raspivid的使用，然后介绍一下<code>h264-live-player</code>的情况。如果只是想上手使用，可以直接拉到最后。</p><h1 id="Raspivid"><a href="#Raspivid" class="headerlink" title="Raspivid"></a><a href="https://www.raspberrypi.org/documentation/usage/camera/raspicam/raspivid.md" target="_blank" rel="noopener">Raspivid</a></h1><p><code>raspivid</code>是一个在树莓派上用于捕捉视频数据的命令行工具。在<code>h264-live-player</code>中，<code>lib/raspivid.js</code>文件调用了这个命令来产生H264的视频流。在这个文件中使用的命令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raspivid -t 0 -o - -w WIDTH -h HEIGHT -fps FPS</span><br></pre></td></tr></table></figure><p>其中，<code>-t 0</code>表示捕捉的时间不限。<code>-o -</code>表示将H264流输出到<code>stdout</code>。后面的<code>-w</code>, <code>-h</code>, <code>-fps</code>则分别是制定画面的宽高还有帧率。在<code>raspivid</code>命令产生H264流后，<code>h264-live-player</code>会通过一系列的回调函数通过Websocket将H264数据发送给前端。</p><h1 id="h264-live-player-关键代码解析。"><a href="#h264-live-player-关键代码解析。" class="headerlink" title="h264-live-player 关键代码解析。"></a><a href="tps://github.com/huangy10/h264-live-player" target="_blank" rel="noopener">h264-live-player</a> 关键代码解析。</h1><blockquote><p>注意，原作者的工程里面存在一些问题，其中重点是客户端刷新后视频流解析会出现异常。我在我的fork中修复了这些问题，还做了一些其他的改进。因此这里的介绍都以我的fork中的代码为准。</p></blockquote><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>首先还是要看<code>lib/raspivid.js</code>这个文件。<code>RpiServer</code>这个类继承于<code>Server</code>，<code>Server</code>中预留了<code>get_feed</code>给子类实现，器作用是产生视频流。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">get_feed() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.streamer !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.streamer.kill();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> msk = <span class="string">"raspivid -t 0 -o - -w %d -h %d -fps %d"</span>;</span><br><span class="line">    <span class="keyword">var</span> cmd = util.format(msk, <span class="keyword">this</span>.options.width, <span class="keyword">this</span>.options.height, <span class="keyword">this</span>.options.fps);</span><br><span class="line">    <span class="built_in">console</span>.log(cmd);</span><br><span class="line">    <span class="keyword">var</span> streamer = spawn(<span class="string">'raspivid'</span>, [<span class="string">'-t'</span>, <span class="string">'0'</span>, <span class="string">'-o'</span>, <span class="string">'-'</span>, <span class="string">'-w'</span>, <span class="keyword">this</span>.options.width, <span class="string">'-h'</span>, <span class="keyword">this</span>.options.height, <span class="string">'-fps'</span>, <span class="keyword">this</span>.options.fps, <span class="string">'-pf'</span>, <span class="string">'baseline'</span>]);</span><br><span class="line">    streamer.on(<span class="string">"exit"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">code</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (code) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Failure"</span>, code);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.streamer = streamer;</span><br><span class="line">    <span class="keyword">return</span> streamer.stdout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数返回的是<code>raspivid</code>子进程的<code>stdout</code>流，也即H264流。</p><p>然后我们来看<code>lib/_server.js</code>文件中<code>_Server</code>的定义。注意<code>start_feed</code>这个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">start_feed() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readStream) &#123;</span><br><span class="line">      <span class="keyword">this</span>.readStream.end();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> readStream = <span class="keyword">this</span>.get_feed();</span><br><span class="line">    <span class="keyword">this</span>.readStream = readStream;</span><br><span class="line"></span><br><span class="line">    readStream = readStream.pipe(<span class="keyword">new</span> Splitter(NALseparator));</span><br><span class="line">    readStream.on(<span class="string">"data"</span>, <span class="keyword">this</span>.broadcast);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数在客户端发起播放流的请求后调用。这里<code>Server</code>调用子类实现的<code>get_feed</code>函数获取视频流，然后视频流上注册<code>data</code>事件的回调函数。</p><blockquote><p>这里需要解释一下<code>readStream = readStream.pipe(new Splitter(NALseparator));</code>这行代码。这里我们为视频流增加了一个<code>Splitter</code>，生成<code>Splitter</code>的参数为一个<code>Buffer</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> NALseparator    = <span class="keyword">new</span> Buffer([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]);<span class="comment">//NAL break</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>在H264规范中，帧中间的会插入<code>00 00 00 01</code>作为帧间隔标识。这里插入的<code>Splitter</code>的作用是，在每次遇到<code>NALseperator</code>形式的字符流时，将之前收到的数据作为一个<code>chunk</code>，调用<code>data</code>事件的回调函数。</p></blockquote><p>再来看看<code>broadcast</code>函数。在视频流收到一定的函数时会调用这个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">broadcast(data) &#123;</span><br><span class="line">    <span class="keyword">this</span>.wss.clients.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (socket.readyState !== WebSocket.OPEN) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(socket.buzy)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      socket.buzy = <span class="literal">true</span>;</span><br><span class="line">      socket.buzy = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      socket.send(Buffer.concat([NALseparator, data]), &#123; <span class="attr">binary</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span> <span class="title">ack</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">        socket.buzy = <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的代码非常简单，核心就是通过<code>socket.send</code>将数据发送给客户端。注意这里的数据的内容是<code>Buffer.concat([NALseperator, data])</code>。这是因为<code>Splitter</code>会截断分隔符。</p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端的代码集中在<code>vendor/wsavc/index.js</code>中。重点是下面这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> framesList = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.ws.onmessage = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> evt.data == <span class="string">"string"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.cmd(<span class="built_in">JSON</span>.parse(evt.data));</span><br><span class="line">    <span class="keyword">this</span>.pktnum++;</span><br><span class="line">    <span class="keyword">var</span> frame = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(evt.data);</span><br><span class="line">    <span class="comment">//log("[Pkt " + this.pktnum + " (" + evt.data.byteLength + " bytes)]");</span></span><br><span class="line">    <span class="comment">//this.decode(frame);</span></span><br><span class="line">    framesList.push(frame);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shiftFrame = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!running)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(framesList.length &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    log(<span class="string">"Dropping frames"</span>, framesList.length);</span><br><span class="line">    framesList = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> frame = framesList.shift();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(frame) &#123;</span><br><span class="line">    <span class="keyword">this</span>.decode(frame);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(shiftFrame);</span><br><span class="line">&#125;.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shiftFrame();</span><br></pre></td></tr></table></figure><p>在接收到服务器发送的数据时，数据会被转换成<code>Uint8Array</code>，然后压入到一个队列中。而在<code>shiftFrame</code>这个函数会周期性的调用，从队列中取出数据进行解码。解码后会触发<code>Broadway</code>解码器的<code>onPictureDecoded</code>回调，在这个回调中<code>canvas</code>中的图像会被更新。</p><h1 id="h264-live-player的部署和使用"><a href="#h264-live-player的部署和使用" class="headerlink" title="h264-live-player的部署和使用"></a>h264-live-player的部署和使用</h1><h2 id="安装Node-js到树莓派"><a href="#安装Node-js到树莓派" class="headerlink" title="安装Node.js到树莓派"></a>安装Node.js到树莓派</h2><p>SSH登录到树莓派，然后运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get dist-upgrade</span><br><span class="line"></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><p>使用下面的命令来验证安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br><span class="line">v8.14.1</span><br><span class="line"><span class="meta">$</span><span class="bash"> npm -v    <span class="comment"># npm是Node.js的包管理器</span></span></span><br><span class="line">6.4.1</span><br></pre></td></tr></table></figure><h2 id="安装h264-live-player"><a href="#安装h264-live-player" class="headerlink" title="安装h264-live-player"></a>安装h264-live-player</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载仓库</span></span><br><span class="line">git clone git@gitlab.vlionthu.com:tdma-uav/raspberry-pi-video-stream.git player</span><br><span class="line"></span><br><span class="line">cd player</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd player</span><br><span class="line">node server_rpi.js</span><br></pre></td></tr></table></figure><p>上面的运行方法会在terminal中启动服务脚本。如果要这个程序常驻后台，可以尝试使用<a href="http://pm2.keymetrics.io/" target="_blank" rel="noopener">pm2</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g pm2    # 安装pm2，这里的-g表示安装到全局环境下</span><br><span class="line"></span><br><span class="line">cd player    # cd to player folder</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">pm2 start ./server-rpi.js \</span><br><span class="line">    -i 1 \</span><br><span class="line">    --name "video-stream" \</span><br><span class="line">    -o "/home/pi/player/stdout.log" \</span><br><span class="line">    -e "/home/pi/player/stderr.log"</span><br></pre></td></tr></table></figure><h2 id="在网页端访问摄像头"><a href="#在网页端访问摄像头" class="headerlink" title="在网页端访问摄像头"></a>在网页端访问摄像头</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://rasp_ip:8080</span><br></pre></td></tr></table></figure><p>可以通过添加<code>/?r</code>的query参数来上下翻转画面。</p><p>文章链接 <a href="http://www.codewoody.com/posts/28769/">http://www.codewoody.com/posts/28769/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近实验需要在树莓派上搭建一个简单的视频服务，而且，希望画质一定的情况下，消耗的带宽越少越好。关于带宽的问题，其实开始并没有考虑太多，但是在尝试用&lt;code&gt;uv4l&lt;/code&gt;工具创建mpeg流的时候发现，尽管分辨率很低（720p）不到，需要的数据率却达到了大约5MB/s。我们待测试的通信层不具备这样高的传输传输能力。因此需要想办法把数据率降下来。综上，我们需要产生一个编码后的视频流，如H264。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="折腾" scheme="http://www.codewoody.com/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="树莓派" scheme="http://www.codewoody.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Injection in Node.js | 2016</title>
    <link href="http://www.codewoody.com/posts/30333/"/>
    <id>http://www.codewoody.com/posts/30333/</id>
    <published>2018-12-15T09:41:10.000Z</published>
    <updated>2018-12-18T02:19:03.635Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/posts/61013/">上一篇文章</a>中我们初步讨论的Dependency Injection的一些理念。在这篇文章中，我翻译了awilix模块的作者Jeff Hansen的文章：<a href="https://medium.com/@Jeffijoe/dependency-injection-in-node-js-2016-edition-f2a88efdd427" target="_blank" rel="noopener">Dependency Injection in Node.js - 2016 edition</a>。原文包含三个部分，我在这里直接整理成为一篇完整的文章。</p><a id="more"></a><blockquote><p>在翻译中我以传到核心思想为主，故不会太拘泥于一些细节问题。对于一些插科打诨的话，如果不是特别有意思的话，也许不会翻译。</p></blockquote><p><img src="https://imgs.codewoody.com/uploads/big/a3409d0fa20c30e7116c01c4d7ac4f1e.jpeg" alt="作者Jeff Hansen"></p><hr><h1 id="Part-I"><a href="#Part-I" class="headerlink" title="Part I"></a>Part I</h1><p>在2015年，RisingStack写了<a href="https://blog.risingstack.com/dependency-injection-in-node-js/" target="_blank" rel="noopener">一篇关于Dependency Injection(缩写为DI)的文章</a>，解释了什么是DI，以及如何手动实现。如果你还没有阅读这篇文章，我强烈建议你先阅读以下那篇文章。这样你对于本文的一些概念会有更加清晰的理解。</p><blockquote><p>这里提到的RisingStack的文章的中文版可以在我的博客里找到: <a href="/posts/61013/">Node.js | Dependency Injection</a>。</p></blockquote><p>在这一系列文章中，我会扩展一下手动实现的DI，为什么这种做法是糟糕的，以及我们如何最终能够让DI的现实变得优雅 – 甚至比require/imports方式要更好。我将要证明Node中使用DI可以不像之前的做法那样沉闷。这都要归功于在ES6中引入的新特性：Proxies（直译就是代理）。</p><p>我100%肯定作为一个Node的开发者，你会见过某种形式的DI。借鉴一下RisingStack文章中的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    store: <span class="built_in">require</span>(<span class="string">'connect-session-knex'</span>)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>session needs a store! - 这种存储的具体实现方式是多样的 ：redis，MySQL。Express本身并不关心背后的实现。我们来看下面的这个例子 – 非DI实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> db <span class="keyword">from</span> <span class="string">'../mydatabase'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    getToDos: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> db.query(<span class="string">'select * from todos'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中我们直接导入了db模块，因此这个文件就依赖于db模块在磁盘上的具体存储位置，以及依赖于特定的是方式。在大多数场景下这并不算一个大问题。不过这种方式让测试变得更加困难 – 不至于无法进行测试，但是无论如何都变得更加地困难了。另外，这个模块还假定db模块已经准备好了（例如：数据库连接已经建立起来了）。</p><p>如果我们进一步将上面的代码转化成为对于测试友好的DI实现方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">makeTodosService</span> (<span class="params">&#123; db &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getTodos: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> db.query(<span class="string">'select * from todos'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么上面两个例子有什么区别呢？在下面的DI实现的例子中我们不是export出一个对象，而是export出一个生成这种对象的函数。这个函数同时阐明了为了创建此种对象所需要的依赖。</p><p>如果你熟悉在其他语言中的DI实现，如Java, C#，还有PHP。下面这个使用ES6的类实现的例子可能更受你喜欢一些：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodosService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(&#123; db &#125;) &#123;</span><br><span class="line">        <span class="keyword">this</span>.db = db</span><br><span class="line">    &#125;</span><br><span class="line">    getTodos() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.db.query(<span class="string">'select * from todos'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过从个人角度我还是更喜欢函数的方法：不用担心this的上下文的问题。</p><p>测试上面这个基于DI的例子非常简单 – 你不再需要担心对require进行修修补补来替代数据库模块从而连接到测试数据库。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Todo Service'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    beforeEach(() &#123;</span><br><span class="line">        subject = makeTodosService(&#123;</span><br><span class="line">            db: testDatabaseSomehow</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'work'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> todos = <span class="keyword">await</span> subject.getTodos(</span><br><span class="line">            expect(todos.length).to.equal(<span class="number">3</span>)</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Part-II"><a href="#Part-II" class="headerlink" title="Part II"></a>Part II</h1><p>在这个部分我们来构思一个Todo APP。</p><p>在我们开始折腾API框架和其他乱七八糟的部分之前，我们来大致搭建一下项目的骨架 – the service and data access。为了可读性的考虑我在这里使用了ES7的async-await机制。</p><p>然我们来开始我们的Todos Service - 这个模块来负责处理所有的业务逻辑。</p><p>我会在下面的代码片段那种使用不同的风格（函数式或者是面向对象的）来证明，这些具体的代码风格并不本质，你可以使用任何你喜欢的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// todosService.js</span></span><br><span class="line"><span class="keyword">import</span> assert <span class="keyword">from</span> <span class="string">'assert'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Using object destructring to make it look good</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">makeTodosService</span> (<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="regexp">//</span> <span class="string">"repository"</span> is a fancy term to describe an object</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="regexp">//</span> that is used to retrieve data from a datasource - the actual</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="regexp">//</span> data source does not matter. Could be a database, a REST API,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="regexp">//</span> or some IoT things like sensors or what ever</span></span></span><br><span class="line"><span class="function"><span class="params">    todosRepository,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="regexp">//</span> We also want info about the user that is using the service,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="regexp">//</span> so we can restrict access to only their own todos.</span></span></span><br><span class="line"><span class="function"><span class="params">    currentUser</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    assert(todosRepositry, <span class="string">'opts.todosRepository is required.'</span>)</span><br><span class="line">    assert(currentUser, <span class="string">'opts.currentUser is required.'</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// Gets todos for the current user</span></span><br><span class="line">        getTodos: <span class="keyword">async</span>(query) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> todos = <span class="keyword">await</span> todosRepository.find(&#123;</span><br><span class="line">                <span class="comment">// can be ALL, INCOMPLETED, COMPLETED</span></span><br><span class="line">                filter: query.filter,</span><br><span class="line">                userId: currentUser.id</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> todos</span><br><span class="line">        &#125;,</span><br><span class="line">        createTodo: <span class="keyword">async</span> (data) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> newTodo = <span class="keyword">await</span> todosRepository.create(&#123;</span><br><span class="line">                text: data.text,</span><br><span class="line">                userId: currentUser.id,</span><br><span class="line">                completed: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> newTodo</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        updateTodo: <span class="keyword">async</span> (todoId, data) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> todo = <span class="keyword">await</span> todosRepository.get(todoId)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// verify that we are allowed to modify this todo</span></span><br><span class="line">            <span class="keyword">if</span> (todo.userId !== currentUser.id) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Forbidden'</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> updatedTodo = <span class="keyword">await</span> todosRepository.update(todoId, &#123;</span><br><span class="line">                text: data.text,</span><br><span class="line">                completed: data.completed</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> updatedTodo</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        deleteTodo: <span class="keyword">async</span> (todoId) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> todo = <span class="keyword">await</span> (todoId)</span><br><span class="line">            <span class="keyword">const</span> todo = <span class="keyword">await</span> todosRepository.get(todoId);</span><br><span class="line">            <span class="keyword">if</span> (todo.userId !== currentUser.id) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Forbidden'</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> todoRepository.delete(todoId)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码有点长，但是并没有什么太fancy的东西。我们并没有依赖于外部库（除了自带的assert模块用于输入检验）。不过，我们导出的函数其实有两个依赖：</p><ul><li><code>todosRepository</code> – 给予todos数据库访问的对象（我们并不关心具体的实现细节）。</li><li><code>currentUser</code> – 正在使用这个服务的用户。注意我们并不知道这个对象从何处生成，也不关心这些细节。</li></ul><p>我们继续往下走，给出todos repository的一个不错的实现方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// todosRepository.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Let's do an in-memory implementation for now.</span></span><br><span class="line"><span class="keyword">const</span> _todos = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodosRepository</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Making all methods async makes them return promises!</span></span><br><span class="line">    <span class="keyword">async</span> find(query) &#123;</span><br><span class="line">        <span class="keyword">const</span> filtered = _todos.filter(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// Check the user id</span></span><br><span class="line">            <span class="keyword">if</span> (todo.userId !== query.userId) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// check the filter</span></span><br><span class="line">            <span class="keyword">if</span> (query.filter === <span class="string">"COMPLETED"</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> todo.completed === <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (query.filter === <span class="string">"INCOMPLETED"</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> todo.completed === <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filtered</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> get(id) &#123;</span><br><span class="line">        <span class="keyword">const</span> todo = _todos.find(<span class="function"><span class="params">x</span> =&gt;</span> x.id === id)</span><br><span class="line">        <span class="keyword">return</span> todo</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> create(data) &#123;</span><br><span class="line">        <span class="keyword">const</span> newTodo = &#123;</span><br><span class="line">            id: <span class="built_in">Date</span>.now(),</span><br><span class="line">            text: data.text,</span><br><span class="line">            userId: data.userId,</span><br><span class="line">            completed: data.completed</span><br><span class="line">        &#125;</span><br><span class="line">        _todos.push(newTodo)</span><br><span class="line">        <span class="keyword">return</span> newTodo</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> update(id, data) &#123;</span><br><span class="line">        <span class="keyword">const</span> todo = <span class="keyword">await</span> <span class="keyword">this</span>.get(id)</span><br><span class="line">        <span class="built_in">Object</span>.assign(todo, data)</span><br><span class="line">        <span class="keyword">return</span> todo</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">delete</span>(id) &#123;</span><br><span class="line">        <span class="keyword">const</span> todo = <span class="keyword">await</span> <span class="keyword">this</span>.get(id)</span><br><span class="line">        _todos.splice(todo, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码只是todos repository的一个in-memory实现。任何时候我们准备好的时候，可以替换成MySQL，Rethink，MongoDB等存储后端，只要具有同形式的API就可以了。Typescript和Flow在这里可以发挥很大的作用。</p><h2 id="把系统粘合起来"><a href="#把系统粘合起来" class="headerlink" title="把系统粘合起来"></a>把系统粘合起来</h2><p>在我们进入到RESTful API之前，让我们先把上门两个模块在测试中整合起来。下面的方法被称为“穷人式的DI”，不过别担心，在后面我们会展示更加fancy的做法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> makeTodosService <span class="keyword">from</span> <span class="string">'./todosService'</span></span><br><span class="line"><span class="keyword">import</span> TodosRepository <span class="keyword">from</span> <span class="string">'./todosRepository'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Todos System'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">'works'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// This is how DI is done manually</span></span><br><span class="line">        <span class="keyword">const</span> todosService = makeTodosService(&#123;</span><br><span class="line">            todosRepository: <span class="keyword">new</span> TodosRepository(),</span><br><span class="line">            <span class="comment">// Let's fake it til we make it!</span></span><br><span class="line">            currentUser: &#123;</span><br><span class="line">                id: <span class="number">123</span>,</span><br><span class="line">                name: <span class="string">'Jeff'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Todos Service already knows who's creating it!</span></span><br><span class="line">        <span class="keyword">const</span> created = <span class="keyword">await</span> todosService.create(&#123;</span><br><span class="line">            text: <span class="string">'Write Medium article'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        expect(created.userId).to.equal(<span class="number">123</span>, <span class="string">'user id should match currentUser'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> todos = <span class="keyword">await</span> todosService.getTodos(&#123;</span><br><span class="line">            filter: <span class="string">'ALL'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        expect(todos.length).to.equal(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> todosService.update(todo.id, &#123;</span><br><span class="line">            completed: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> incompleteTodos = <span class="keyword">await</span> todosService.getTodos(&#123;</span><br><span class="line">            filter: <span class="string">'INCOMPETED'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        expect(incompleteTodos.length).to.equal(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> completedTodos = <span class="keyword">await</span> todosService.getTodos&#123;</span><br><span class="line">            filter: <span class="string">'COMPLETED'</span></span><br><span class="line">        &#125;</span><br><span class="line">        expect(completedTodos.length).to.equal(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>看到上面的代码你可能会想：“这里的代码不是已经知道了两个模块了么？”。没错，在一个真实的APP中（下文中我们会提及），还是需要有一个知道所有使用的模块的单一置信源（source of truth）。在我们倒腾DI黑科技的时候，我们把这个部分的代码称为：组合根（The Composition Root，译者按：这个名字放在中文下太绕口了）。这是在应用中将所有的模块胶合在一起的地方。Composition Root可能长这个样子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cosnt currentUser = &#123;</span><br><span class="line">    id: <span class="number">123</span>,</span><br><span class="line">    name: <span class="string">'Jeff'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todoRepository = <span class="keyword">new</span> TodosRepository()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todosService = makeTodosService(&#123;</span><br><span class="line">    todosRepository,</span><br><span class="line">    currentUser</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    todosService,</span><br><span class="line">    todosRepository</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个代码，我知道你一定在想：“我现在还不知道这个currentUser具体是指哪个用户呢！我要构建的是一个Web应用，这种方法根本没用！”。你说的对。有两种方法来手动解决这个问题：</p><ul><li>为所有需要currentUser的方法手动传递这个参数 – 这也太坑了。</li><li>将实例化过程推迟到你拥有了所有的数据之后（译者按：即在已知了currentUser之后再调用工厂函数初始化todosService）– 这种方法也不好，你需要在很多的地方重复地进行实例化。</li></ul><p>为了进一步解释以下第二点，下面给出一个例子。例子中使用到了Koa Router</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> KoaRouter()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"/todos"</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> todosService = makeTodosService(&#123;</span><br><span class="line">        todosRepository: <span class="keyword">new</span> TodosRepository(),</span><br><span class="line">        currentUser: ctx.state.user</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ctx.body = <span class="keyword">await</span> todosService.getTodos(ctdx.request.query)</span><br><span class="line">    ctx.status = <span class="number">200</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">"/todos"</span>. async (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> todosService = makeTodosService(&#123;</span><br><span class="line">        todosRepository: <span class="keyword">new</span> TodosRepository(),</span><br><span class="line">        currentUser: ctx.state.user</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// and so on</span></span><br></pre></td></tr></table></figure><p>这还只是涉及到两个模块。想象一下要是需要处理10个模块（这还只是对于小型的应用）。没错，第二种方法也是很糟糕的。</p><h1 id="Part-III"><a href="#Part-III" class="headerlink" title="Part III"></a>Part III</h1><p>Angular曾经是在JavaScript世界中第一个引入了DI的大型框架。他们的做法是使用函数的字符串表达来提取使用的模块名称。在当时这是唯一的做法。</p><p>有一些人尝试将DI功能从Angular中独立出来做成一个独立模块。但是问题是，大多数DI模块要求你的所有代码都要围绕着特定的DI系统来开发，这位违背了DI设计理念的初衷。</p><blockquote><p>DI的作用是减少程序模块之间的耦合程度，提高代码的可维护性。在这种目标下，DI系统的设计应当尽可能减少对于其它业务代码的影响。如果为了使用DI要对业务代码结构进行大范围的改动的话就得不偿失了。</p></blockquote><p>我们希望能够在不改动我们的service和repository模块的情况下使用DI机制。</p><h2 id="关于Awilix-The-DI-container-you-deservce"><a href="#关于Awilix-The-DI-container-you-deservce" class="headerlink" title="关于Awilix - The DI container you deservce"></a>关于Awilix - The DI container you deservce</h2><p>如果你不知道DI容器是什么，下面是一个简短的解释。DI容器的功能是将系统中的模块整合起来，从而让开发者不再需要太关注这些DI的实现细节问题。在前面两个Part中我们给出的示例代码：实例化services和repositories，确保service获取repository对象。这些工作都将由DI容器来完成。</p><p>Awilix就是这样的一个容器，其实现是基于ES6 Proxies，这一意味着不再需要对函数的参数进行字符串解析。</p><p>现在让我们回到开头的todo应用。让我们使用Awilix来将各个模块整合起来。我们将会使用Koa 2来实现Web API。先让我们来安装这些依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S koa@next koa-router@next awilix awilix-koa</span><br></pre></td></tr></table></figure><p>这里的awilix-koa模块让Awlix和Koa的搭配更加易用。现在让我们从composition root开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// configureContainer.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContainer, asClass, asFunction &#125; <span class="keyword">from</span> <span class="string">'awilix'</span></span><br><span class="line"><span class="keyword">import</span> makeTodosService <span class="keyword">from</span> <span class="string">'./todosService'</span></span><br><span class="line"><span class="keyword">import</span> TodosRepository <span class="keyword">from</span> <span class="string">'./todosRepository'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">configureContainer</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> container = createContainer()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ordering does not matter</span></span><br><span class="line">    container.register(&#123;</span><br><span class="line">        <span class="comment">// Notice the scoped() at the end - this signals</span></span><br><span class="line">        <span class="comment">// Awilix that we gonna want a new instance per "scope"</span></span><br><span class="line">        todosService: asFunction(makeTodosService).scoped(),</span><br><span class="line">        <span class="comment">// We only want a single instance of this for the apps</span></span><br><span class="line">        <span class="comment">// lifetime (it does not deal with user context)</span></span><br><span class="line">        <span class="comment">// so we can reuse it!</span></span><br><span class="line">        todosRepository: asClass(TodosRepository).singliton()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> container</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这看起来已经非常不错了。不过如果你有超过100个服务需要注册，Awilix提供了<a href="https://github.com/jeffijoe/awilix#auto-loading-modules" target="_blank" rel="noopener">自动化的工具</a>。</p><p>现在让我们来配置Koa应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">import</span> Koa <span class="keyword">from</span> <span class="string">'koa'</span></span><br><span class="line"><span class="keyword">import</span> KoaRouter <span class="keyword">from</span> <span class="string">'koa-router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; asValue &#125; <span class="keyword">from</span> <span class="string">'awilix'</span></span><br><span class="line"><span class="keyword">import</span> &#123; scopePerRequest, makeInvoker &#125; <span class="keyword">from</span> <span class="string">'awilix-koa'</span></span><br><span class="line"><span class="keyword">import</span> configureContainer <span class="keyword">from</span> <span class="string">'./configureContainer'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> KoaRouter()</span><br><span class="line"><span class="keyword">const</span> container = configureContainer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// This installs a scoped container into our</span></span><br><span class="line"><span class="comment">// context - we will use this to register our current user</span></span><br><span class="line">app.use(scopePerRequest(container))</span><br><span class="line"><span class="comment">// Let's do that now!</span></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.state.container.register(Value)(&#123;</span><br><span class="line">        <span class="comment">// Imagine some auth middleware somewhere...</span></span><br><span class="line">        <span class="comment">// This makes currentUser available to all services</span></span><br><span class="line">        currentUser: ctx.state.user</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now our handlers will be able to resolve a todos service</span></span><br><span class="line"><span class="comment">// using DI!</span></span><br><span class="line"><span class="comment">// P.S: be a good dev and use multiple files. ;)</span></span><br><span class="line"><span class="keyword">const</span> todosAPI = (&#123; todosService &#125; =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getTodos: <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> todos = <span class="keyword">await</span> todosService.getTodos(ctx.request.query)</span><br><span class="line">            ctx.body = todos</span><br><span class="line">            ctx.status = <span class="number">200</span></span><br><span class="line">        &#125;,</span><br><span class="line">        createTodos: <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> todo = <span class="keyword">await</span> todosService.createTodo(ctx.request.body)</span><br><span class="line">            ctx.body = todo</span><br><span class="line">            ctx.status = <span class="number">201</span></span><br><span class="line">        &#125;,</span><br><span class="line">        updateTodo: <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> updated = <span class="keyword">await</span> todosService.updateTodo(</span><br><span class="line">                ctx.params.id,</span><br><span class="line">                ctx.request.body</span><br><span class="line">            )</span><br><span class="line">            ctx.body = updated,</span><br><span class="line">            ctx.status = <span class="number">200</span></span><br><span class="line">        &#125;,</span><br><span class="line">        deleteTodo: <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">            <span class="keyword">await</span> todosService.deleteTodo(</span><br><span class="line">                ctx.params.id,</span><br><span class="line">                ctx.request.body</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Awilix magic will run the above function</span></span><br><span class="line"><span class="comment">// every time a request comes in, so we have</span></span><br><span class="line"><span class="comment">// a set of scoped services per request</span></span><br><span class="line"><span class="keyword">const</span> api = makeInvoker(todosAPI)</span><br><span class="line">router.get(<span class="string">'/todos'</span>, api(<span class="string">'getTodos'</span>))</span><br><span class="line">router.post(<span class="string">'/todos'</span>, api(<span class="string">'createTodos'</span>))</span><br><span class="line">router.patch(<span class="string">'/todos/:id'</span>, api(<span class="string">'updateTodo'</span>))</span><br><span class="line">router.patch(<span class="string">'/todos/:id'</span>, api(<span class="string">'deleteTodo'</span>))</span><br><span class="line"></span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.listen(<span class="number">1337</span>)</span><br></pre></td></tr></table></figure><p>上面的代码还只是一个简单的雏形，不过你现在已经有了构建大规模项目的基础。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>DI是一个很有用的东西，不过手动去实现DI是一件糟心的事情。这也是Awilix这种DI容器扮演作用的地方。</p><p>文章链接 <a href="http://www.codewoody.com/posts/30333/">http://www.codewoody.com/posts/30333/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/posts/61013/&quot;&gt;上一篇文章&lt;/a&gt;中我们初步讨论的Dependency Injection的一些理念。在这篇文章中，我翻译了awilix模块的作者Jeff Hansen的文章：&lt;a href=&quot;https://medium.com/@Jeffijoe/dependency-injection-in-node-js-2016-edition-f2a88efdd427&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dependency Injection in Node.js - 2016 edition&lt;/a&gt;。原文包含三个部分，我在这里直接整理成为一篇完整的文章。&lt;/p&gt;
    
    </summary>
    
      <category term="形而上" scheme="http://www.codewoody.com/categories/%E5%BD%A2%E8%80%8C%E4%B8%8A/"/>
    
    
      <category term="翻译" scheme="http://www.codewoody.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="nodejs" scheme="http://www.codewoody.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Node.js | Dependency Injection</title>
    <link href="http://www.codewoody.com/posts/61013/"/>
    <id>http://www.codewoody.com/posts/61013/</id>
    <published>2018-12-12T15:40:11.000Z</published>
    <updated>2018-12-12T16:30:22.959Z</updated>
    
    <content type="html"><![CDATA[<p>Dependency Injection这个概念是我之前在实习的时候做Java开发的时候接触的。Dependency Injection可以大大降低模块之间的耦合度，提高系统的可扩展性和鲁棒性，不过这个概念对于新人来说理解起来还是存在比较大的障碍。由于当时实习的时间比较短，对于这个概念我并没有吃透。这次学习Node.js的时候，又在awilix这个库里面遇到了这个概念。以此为契机就来好好学习一些Dependency Injection和其后的设计逻辑与方法。</p><p>下面的内容翻译自：<a href="https://blog.risingstack.com/dependency-injection-in-node-js/" target="_blank" rel="noopener">Dependency Injection in Node.js</a>。这篇文章浅显地介绍了Dependency Injection的基本理念。选择这篇文章是因为我在阅读awilix模块作者关于Dependency Injection的系列文章中时，作者在开篇提议阅读此文。</p><p>不过这篇文章毕竟是2015年的文章，在js的一些语法和模块细节上和今时今日的有些不同，但是并不妨碍我们对于其核心理念的理解。<a id="more"></a></p><h1 id="使用Dependency-Injection的理由"><a href="#使用Dependency-Injection的理由" class="headerlink" title="使用Dependency Injection的理由"></a>使用Dependency Injection的理由</h1><h2 id="解耦-Decoupling"><a href="#解耦-Decoupling" class="headerlink" title="解耦 (Decoupling)"></a>解耦 (Decoupling)</h2><p>Dependency Injection使你的模块耦合度降低，从而提升代码的可维护性。</p><h2 id="更简单的单元测试"><a href="#更简单的单元测试" class="headerlink" title="更简单的单元测试"></a>更简单的单元测试</h2><p>比起需要硬编码的依赖关系，你可以将依赖关系传输进入你要用的模块。在大多数场合下使用这种范式你不必要使用proxyquire这样的模块。</p><blockquote><p>这一段作者写的比较含糊。其实意思是在使用Dependency Injection场景下，我们在独立测试一些单元功能的时候，对于其他模块可以通过注入Mock对象，从而将待测试的模块独立出来进行测试。</p></blockquote><h2 id="更快速的开发"><a href="#更快速的开发" class="headerlink" title="更快速的开发"></a>更快速的开发</h2><p>在使用了Dependency Injection的场景下，在接口定义好了以后，开发会更加容易，Merge conflict会更少。</p><h1 id="如何在Node-js中使用Dependency-Injection"><a href="#如何在Node-js中使用Dependency-Injection" class="headerlink" title="如何在Node.js中使用Dependency Injection"></a>如何在Node.js中使用Dependency Injection</h1><p>下面我们来看看如何在不适用Dependency Injection的前提下开发应用，然后看看如何进行转化。</p><h2 id="不使用Dependency-Injection的例子"><a href="#不使用Dependency-Injection的例子" class="headerlink" title="不使用Dependency Injection的例子"></a>不使用Dependency Injection的例子</h2><p>下面是一段简单的没有使用Dependency Injection的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// team.js</span></span><br><span class="line"><span class="keyword">var</span> User = <span class="built_in">require</span>(<span class="string">'./user'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTeam</span>(<span class="params">teamId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> User.find(&#123;<span class="attr">teamId</span>: teamId&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.getTeam = getTeam;</span><br></pre></td></tr></table></figure><p>对应的测试可能是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// team.spec.js</span></span><br><span class="line"><span class="keyword">var</span> Team = <span class="built_in">require</span>(<span class="string">'./team'</span>);</span><br><span class="line"><span class="keyword">var</span> User = <span class="built_in">require</span>(<span class="string">'/user'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Team'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">'#getTeam'</span>, <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> users = [&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">id</span>: <span class="number">2</span>&#125;];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.sandbox.stub(User, find, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(users);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> team = <span class="keyword">yield</span> team.getTeam();</span><br><span class="line"></span><br><span class="line">        expect(team).to.eql(users);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在上面的代码中我们做的是创建了一个名为<code>team.js</code>的模块，该模块可以返回属于一个team的用户列表。为了实现这一功能，我们导入<code>User</code>模块，然后我们再调用其<code>find</code>方法返回用户列表。</p><p>看起来不错，是吗？但是当我们需要进行测试时，我们必须要使用<a href="https://sinonjs.org/" target="_blank" rel="noopener">sinon</a>的test stubs.</p><p>在测试文件中，我们需要引入User模块，为其stub一个<code>find</code>方法。注意，我们在这里要使用sandbox功能，这样我们不需在测试完成后回复<code>find</code>的原函数。</p><blockquote><p>注意：如果原始对象使用了<code>Object.freeze</code>，那么stubs将不会起作用。</p></blockquote><h2 id="使用Dependency-Injection的例子"><a href="#使用Dependency-Injection的例子" class="headerlink" title="使用Dependency Injection的例子"></a>使用Dependency Injection的例子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// team.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Team</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Team.prototype.getTeam = <span class="function"><span class="keyword">function</span>(<span class="params">teamId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.options.User.find(&#123;<span class="attr">teamId</span>: teamId&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Team(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以使用下面的这个文件来进行测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// team.spec.js</span></span><br><span class="line"><span class="keyword">var</span> Team =- <span class="built_in">require</span>(<span class="string">'./team'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Team'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">'#getTeam'</span>, <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> users = [&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">id</span>: <span class="number">2</span>&#125;];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> fakeUser = &#123;</span><br><span class="line">            find: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(users);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> team = Team.create(&#123;</span><br><span class="line">            User: fakeUser</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> team = <span class="keyword">yield</span> team.getTeam();</span><br><span class="line"></span><br><span class="line">        expect(team).to.eql(users);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那么，使用了Dependency Injection的版本同之前的版本有什么区别呢？首先你可能注意到的是这里使用了<a href="https://blog.risingstack.com/fundamental-node-js-design-patterns/" target="_blank" rel="noopener">工厂模式</a>：我们使用这种设计模式来将options/dependencies inject到新创建的对象中 - 这里是我们注入<code>User</code>模块的方法。</p><p>在测试文件中我们还需要创建一个fake model来代表<code>User</code>模块，然后将这个伪造的模块传递给工厂函数。很简单，不是吗？</p><h1 id="Dependency-Injection-in-Real-Projects"><a href="#Dependency-Injection-in-Real-Projects" class="headerlink" title="Dependency Injection in Real Projects"></a>Dependency Injection in Real Projects</h1><p>你可以在非常多的开源项目中发现Dependency Injection的例子。例如，你在日常工作中常常用到的Express/Koa的大部分中间件都使用了这种技术。</p><h2 id="Express-Middlewares"><a href="#Express-Middlewares" class="headerlink" title="Express Middlewares"></a>Express Middlewares</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    store: <span class="built_in">require</span>(<span class="string">'connect-session-knex'</span>);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>上面的代码片段使用了基于工厂模式的Dependency Injection：对应session中间件我们传递了一个<code>connect-session-knex</code>模块。这个模块需要实现<code>session</code>模块调用需要的借口。</p><p>在这个例子中，<code>connect-session-knex</code>模块需要实现下面的方法：</p><ul><li><code>store.destroy(sid, callback)</code></li><li><code>store.get(sid, callback)</code></li><li><code>store.set(sid, session, callback)</code></li></ul><h2 id="Hapi-plugins"><a href="#Hapi-plugins" class="headerlink" title="Hapi plugins"></a>Hapi plugins</h2><p>Dependency Injection的概念还可以在Hapi中找到。下面的例子中，<code>handlebars</code>模块被作为view engine注入给Hapi使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.views(&#123;</span><br><span class="line">    engines: &#123;</span><br><span class="line">        html: <span class="built_in">require</span>(<span class="string">'handlebars`)</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    relativeTo: __dirname,</span></span><br><span class="line"><span class="string">    path: '</span>templates<span class="string">'</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><p>文章链接 <a href="http://www.codewoody.com/posts/61013/">http://www.codewoody.com/posts/61013/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dependency Injection这个概念是我之前在实习的时候做Java开发的时候接触的。Dependency Injection可以大大降低模块之间的耦合度，提高系统的可扩展性和鲁棒性，不过这个概念对于新人来说理解起来还是存在比较大的障碍。由于当时实习的时间比较短，对于这个概念我并没有吃透。这次学习Node.js的时候，又在awilix这个库里面遇到了这个概念。以此为契机就来好好学习一些Dependency Injection和其后的设计逻辑与方法。&lt;/p&gt;
&lt;p&gt;下面的内容翻译自：&lt;a href=&quot;https://blog.risingstack.com/dependency-injection-in-node-js/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dependency Injection in Node.js&lt;/a&gt;。这篇文章浅显地介绍了Dependency Injection的基本理念。选择这篇文章是因为我在阅读awilix模块作者关于Dependency Injection的系列文章中时，作者在开篇提议阅读此文。&lt;/p&gt;
&lt;p&gt;不过这篇文章毕竟是2015年的文章，在js的一些语法和模块细节上和今时今日的有些不同，但是并不妨碍我们对于其核心理念的理解。
    
    </summary>
    
      <category term="形而上" scheme="http://www.codewoody.com/categories/%E5%BD%A2%E8%80%8C%E4%B8%8A/"/>
    
    
      <category term="翻译" scheme="http://www.codewoody.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="nodejs" scheme="http://www.codewoody.com/tags/nodejs/"/>
    
  </entry>
  
</feed>
