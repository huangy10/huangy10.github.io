<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>治部少辅</title>
  
  <subtitle>大一大万大吉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.codewoody.com/"/>
  <updated>2018-11-13T08:30:25.312Z</updated>
  <id>http://www.codewoody.com/</id>
  
  <author>
    <name>Woody Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自建图床: Lychee</title>
    <link href="http://www.codewoody.com/posts/65048/"/>
    <id>http://www.codewoody.com/posts/65048/</id>
    <published>2018-11-13T07:07:47.000Z</published>
    <updated>2018-11-13T08:30:25.312Z</updated>
    
    <content type="html"><![CDATA[<p>之前用的图床sm.ms的图片突然挂了。不知道为何，图片还是能够上传，但是访问图片的链接会出<code>ERR_SPDY_PROTOCOL_ERROR</code>的错误。</p><p><img src="https://imgs.codewoody.com/uploads/big/16c748b80a481535efeb2d271e14e4dd.png" alt="ERR_SPDY_PROTOCOL_ERROR错误示意图"></p><p>正好我自己的翻墙服务器的硬盘长期富余。虽然只有十几个G，搭建一个自己图床还是够用的。更重要的是，Dogital Ocean的服务器的流量非常多（我买的$5的服务器的流量有一个T）。我选择的开源图床框架是<a href="https://github.com/electerious/Lychee" target="_blank" rel="noopener">Lychee</a>。这个框架支持Docker安装，可以省很多事情。</p><h2 id="1-Docker安装Lychee"><a href="#1-Docker安装Lychee" class="headerlink" title="1. Docker安装Lychee"></a>1. Docker安装Lychee</h2><p>常规的安装方法可以参考<a href="https://github.com/electerious/Lychee/blob/master/docs/Installation.md" target="_blank" rel="noopener">官方文档</a>。我这里只介绍Docker方式。如果你没有什么特别的需求，Docker方式应该是非常适合你的。</p><blockquote><p>注：这篇教程只是对于我的操作过程的一个记录，因此对于一些依赖环境的安装没有面面俱到。这些问题，都可以面向google进行解决。</p></blockquote><h3 id="1-1-Docker环境准备"><a href="#1-1-Docker环境准备" class="headerlink" title="1.1 Docker环境准备"></a>1.1 Docker环境准备</h3><p>首先你要安装一个Docker环境。在Ubuntu上，安装非常简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install docker-io</span><br></pre></td></tr></table></figure><p>有时还需要将你当前用户加入到<code>docker</code>组中，这样每次执行<code>docker</code>命令不需要加<code>sudo</code>了。这个操作可能在安装过程中自动完成了，如果你发现<code>docker</code>命令执行时提示有权限相关的问题，可以运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo adduser user docker</span><br></pre></td></tr></table></figure><p>注意确保一下<code>docker-compose</code>也安装完毕了。我们需要通过<code>docker-compose</code>来将Lychee和数据库组装在一起。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose -v</span><br><span class="line">docker-compose version 1.17.1, build 6d101fb</span><br></pre></td></tr></table></figure><h3 id="1-2-安装Lychee"><a href="#1-2-安装Lychee" class="headerlink" title="1.2 安装Lychee"></a>1.2 安装Lychee</h3><p>首先创建好目录树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lychee</span><br><span class="line">|-- config</span><br><span class="line">|-- db</span><br><span class="line">|-- pictures</span><br><span class="line">|-- docker-compose.yml</span><br></pre></td></tr></table></figure><p>其中，<code>config</code>和<code>pictures</code>分别用来存储Lychee的设置和图片文件。<code>db</code>文件夹则是用于数据库，这三个文件夹需要你手动创建。<code>docker-compose.yml</code>文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  lychee:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">linuxserver/lychee</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - lychee-db:</span><span class="string">lychee-db</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/path/to/lychee/config:/config</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/path/to/lychee/pictures:/pictures</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8000</span><span class="string">:80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  lychee-db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mariadb:10</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/path/to/lychee/db:/var/lib/mysql</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_ROOT_PASSWORD=&lt;choose</span> <span class="string">root</span> <span class="string">password&gt;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_DATABASE=&lt;db</span> <span class="string">name&gt;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_USER=&lt;username&gt;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_PASSWORD=&lt;username&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>目前我没发现lychee的这个镜像支持用环境变量来配置数据库信息。所以上面对应的数据库信息后续需要在网页端手动输入。</p></blockquote><p>然后在这个文件夹下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure><p>然后访问<code>http://yourdoman.com:8000</code>就可以访问了。</p><h3 id="1-3-Lychee配置"><a href="#1-3-Lychee配置" class="headerlink" title="1.3 Lychee配置"></a>1.3 Lychee配置</h3><p>在访问上述网页之后，Lychee会提示我们输入数据库信息。</p><p><img src="https://imgs.codewoody.com/uploads/big/257d81510bc5d03dfac4948844222f46.png" alt="Lychee 配置"></p><p>注意这里的Database Host要填写<code>lychee-db</code>。其他的设置与上面的<code>docker-compose.yml</code>文件中的一致即可。</p><p>而后按照提示创建登录账户：</p><p><img src="https://imgs.codewoody.com/uploads/big/2ac1ded0feb822e54fad9838655f1bdb.png" alt="创建账户"></p><h2 id="2-Lychee-Advanced"><a href="#2-Lychee-Advanced" class="headerlink" title="2. Lychee Advanced"></a>2. Lychee Advanced</h2><h3 id="2-1-使用Nginx进行反向代理"><a href="#2-1-使用Nginx进行反向代理" class="headerlink" title="2.1 使用Nginx进行反向代理"></a>2.1 使用Nginx进行反向代理</h3><p>Nginx配置文件如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">server_name</span> imgs.codewoody.com;</span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">50M</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://localhost:8000;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-启用HTTPS"><a href="#2-2-启用HTTPS" class="headerlink" title="2.2 启用HTTPS"></a>2.2 启用HTTPS</h3><p>目前来看，<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s encrypt</a>仍然是个人建站启用HTTPS的不二之选。其使用教程可以说是非常简明了，具体参考<a href="https://certbot.eff.org/" target="_blank" rel="noopener">certbot</a>。</p><p>文章链接 <a href="http://www.codewoody.com/posts/undefined/">http://www.codewoody.com/posts/undefined/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前用的图床sm.ms的图片突然挂了。不知道为何，图片还是能够上传，但是访问图片的链接会出&lt;code&gt;ERR_SPDY_PROTOCOL_ERROR&lt;/code&gt;的错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads
      
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="折腾" scheme="http://www.codewoody.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>这个博客是如何建立起来的</title>
    <link href="http://www.codewoody.com/posts/53793/"/>
    <id>http://www.codewoody.com/posts/53793/</id>
    <published>2018-11-05T08:16:48.000Z</published>
    <updated>2018-11-13T06:09:17.804Z</updated>
    
    <content type="html"><![CDATA[<p>在博客问题上我可是折腾了很多回了，先是尝试了wordpress（来来回回很多次），不过wordpress使用起来，感觉还是太“重”，很多东西配置起来非常麻烦(包括主题设置，甚至是Markdown支持)。后来迁移到简书上面，被国家政策教做人(一篇关于Shadowsocks的文章被屏蔽了，有种吃苍蝇的感觉)。思前想后，还是自己host自己的博客好。<a id="more"></a>最终我是选择了Hexo + Github的方案，好处如下：</p><ol><li>对Markdown支持比较好</li><li>不需要自己折腾服务器</li><li>用Git管理非常方便</li></ol><p>在这篇文章里，我整理一下整个博客的搭建过程。</p><h2 id="1-Hexo-Setup"><a href="#1-Hexo-Setup" class="headerlink" title="1. Hexo Setup"></a>1. Hexo Setup</h2><p><a href="http://link.zhihu.com/?target=https://github.com/hexojs/hexo" target="_blank" rel="noopener">Hexo</a>是一款基于Node.js的<strong>静态</strong>博客框架，可以生成静态页面部署在Github和Heroku上面。Hexo的搭建过程如下：</p><ol><li>申请域名</li><li>创建Github仓库</li><li>安装Hexo及其依赖</li><li>绑定域名</li></ol><h3 id="1-1-申请域名"><a href="#1-1-申请域名" class="headerlink" title="1.1 申请域名"></a>1.1 申请域名</h3><p>虽然部署在Github上Github会提供一个免费的域名，但是如果有自己的独立域名的话，网站会更像”博客”一点。申请域名的地方有很多，我的域名是选用的阿里云的。传送门：<a href="http://link.zhihu.com/?target=https://www.aliyun.com/" target="_blank" rel="noopener">阿里云-为了无法计算的价值</a>。</p><h3 id="1-2-创建Github仓库"><a href="#1-2-创建Github仓库" class="headerlink" title="1.2 创建Github仓库"></a>1.2 创建Github仓库</h3><p>在Github中创建一个名字为username.github.io的仓库，注意这里的username需要替换为你自己的用户名。例如我的仓库名字为<a href="https://github.com/huangy10/huangy10.github.io" target="_blank" rel="noopener">huangy10.github.io</a>。</p><blockquote><p>你可以尝试在这个仓库中添加一个名为index.html的文件，在其中接入hello world。然后访问<a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> 就可以看到这个页面了。<br>不过注意尝试之后删除这个仓库重新创建。后面我们在部署Hexo的时候最好让这个仓库是空的。</p></blockquote><h3 id="1-3-安装Hexo及其依赖"><a href="#1-3-安装Hexo及其依赖" class="headerlink" title="1.3 安装Hexo及其依赖"></a>1.3 安装Hexo及其依赖</h3><h4 id="1-3-1-安装Git，并配置好SSH秘钥"><a href="#1-3-1-安装Git，并配置好SSH秘钥" class="headerlink" title="1.3.1 安装Git，并配置好SSH秘钥"></a>1.3.1 安装Git，并配置好SSH秘钥</h4><p>这里Github有全面的教程，传送门：<a href="https://try.github.io/" target="_blank" rel="noopener">https://try.github.io/</a></p><h4 id="1-3-2-安装Node-js"><a href="#1-3-2-安装Node-js" class="headerlink" title="1.3.2 安装Node.js"></a>1.3.2 安装Node.js</h4><p>Mac平台下面安装Node.js非常简单，可以通过<a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>进行安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><blockquote><p>如果没有安装Homebrew，可以在Terminal中输入下面这个命令快速安装：<br><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p></blockquote><p>安装完成后可以通过<code>node -v</code>来验证安装是否成功，并查看安装版本。进一步通<code>npm -v</code>来检查npm也正确安装了。</p><h4 id="1-3-3-安装Hexo"><a href="#1-3-3-安装Hexo" class="headerlink" title="1.3.3 安装Hexo"></a>1.3.3 安装Hexo</h4><p>使用npm来安装Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>完成安装以后，挑选一个合适的路径，然后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>这个命令会在当前文件夹中创建一个名为blog的文件夹。博客相关的文件都会存储在这个文件夹中。<code>cd</code>进入这个文件夹，然后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 在本地运行一个测试服务器来伺服静态文件</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后在浏览器中访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以访问自己的网站了。</p><p><img src="https://i.loli.net/2018/11/07/5be288ab96418.png" alt="博客初始页面"></p><p>我们来看一下Hexo博客项目下的目录结构：</p><p><img src="https://i.loli.net/2018/11/07/5be28a0345e4c.png" alt="Hexo目录结构"></p><p>其中比较重要的是：</p><ul><li><code>_config.yml</code>是整个项目的配置文件，<a href="https://zh.wikipedia.org/zh/YAML" target="_blank" rel="noopener">YAML格式</a>；</li><li><code>public</code>是发布的静态文件内容。注意这个文件会在<code>hexo g</code>命令后重新生成，其中内容会被重置；</li><li><code>source</code>是工程源文件，其中的<code>_posts</code>文件夹存储了博文的Markdown文件。其中的其他文件，则会在<code>hexo g</code>命令的作用下发布到<code>public</code>文件夹中；</li><li><code>themes</code>存储了博客的主题。在各个主题自己内部也有自己的<code>_config.yml</code>文件，用来定制化模板的参数。</li></ul><h3 id="1-4-Hexo部署"><a href="#1-4-Hexo部署" class="headerlink" title="1.4 Hexo部署"></a>1.4 Hexo部署</h3><p>我们选择将Hexo部署到Github上。打开博客项目根目录下的<code>_config.yml</code>文件，跳到最后，修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">git-repo-path(ssh方式，不要用https)</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master(不出意外就填写master)</span></span><br></pre></td></tr></table></figure><p>保存退出。</p><p>然后我们需要安装一个git部署的工具:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>三个命令，就可以逐步完成清理之前的生成，重新生成静态文件，将静态文件部署到Github上。全部完成后访问<a href="http://username.github.io" target="_blank" rel="noopener">username.github.io</a> 。就可以看到站点了。</p><h2 id="2-Hexo-Advanced"><a href="#2-Hexo-Advanced" class="headerlink" title="2. Hexo Advanced"></a>2. Hexo Advanced</h2><h3 id="2-1-自定义域名"><a href="#2-1-自定义域名" class="headerlink" title="2.1 自定义域名"></a>2.1 自定义域名</h3><p>使用github提供的免费域名还是不够fancy，我还是希望使用自己的域名。首先进入域名管理后台，添加两条记录。分别是</p><ul><li>yourdomain.com 添加一条A记录，指向username.github.io对应的ip地址。（这个ip地址可以通过ping命令看到）</li><li><a href="http://www.yourdomain.com" target="_blank" rel="noopener">www.yourdomain.com</a> 添加一条CNAME记录，指向username.github.io</li></ul><p>然后在本地博客工程中的<code>public</code>文件夹下，添加一个<code>CNAME</code>文件，文件中写入自定义的域名<code>www.yourdomain.com</code>。重新三连：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean; hexo g; hexo d</span><br></pre></td></tr></table></figure><p>这是输入<code>https://www.yourdomain.com</code>就可以访问自己的网站了（可能需要等一段时间让dns刷新）</p><h3 id="2-2-更换主题"><a href="#2-2-更换主题" class="headerlink" title="2.2 更换主题"></a>2.2 更换主题</h3><p>自己搭建博客的乐趣之一就是各种更换主题。Hexo有自己的主题市场：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a>。我选择的主题是<a href="https://github.com/BoizZ/hexo-theme-laughing" target="_blank" rel="noopener">laughing</a>。这个主题比较简洁，而且支持响应式布局。不过，这个主题支持的多说这个评论平台已经关闭了。其安装过程如下（其他的主题的安装方式大同小异）：</p><p>首先安装主题依赖的<code>pug</code>模板引擎:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug --save</span><br></pre></td></tr></table></figure><p>然后将主题文件夹下载到<code>themes</code>目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes</span><br><span class="line">git clone git@github.com:BoizZ/hexo-theme-laughing.git</span><br></pre></td></tr></table></figure><p>最后修改博客项目根目录下的<code>_config.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-laughing</span></span><br></pre></td></tr></table></figure><p>主题的配置方式可以参考主题的<a href="https://github.com/BoizZ/hexo-theme-laughing#%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3" target="_blank" rel="noopener">Github文档</a>。需要注意的是，文档中所说的<code>_config.yml</code>文件是指的主题文件夹中的配置文件，而非博客项目根目录下的配置文件。</p><h3 id="2-3-插件"><a href="#2-3-插件" class="headerlink" title="2.3 插件"></a>2.3 插件</h3><p>Hexo提供了很多<a href="https://hexo.io/zh-cn/docs/plugins.html" target="_blank" rel="noopener">插件</a>来增强博客的功能。这个部分我也正在研究。这里我列出一下目前我安装了的插件：</p><ul><li>hexo-addlink: 在文章末尾中添加本文的链接</li><li>hexo-generator-feed: 生成rss订阅</li><li>hexo-generator-sitemap: 生成站点地图</li></ul><p>文章链接 <a href="http://www.codewoody.com/posts/undefined/">http://www.codewoody.com/posts/undefined/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在博客问题上我可是折腾了很多回了，先是尝试了wordpress（来来回回很多次），不过wordpress使用起来，感觉还是太“重”，很多东西配置起来非常麻烦(包括主题设置，甚至是Markdown支持)。后来迁移到简书上面，被国家政策教做人(一篇关于Shadowsocks的文章被屏蔽了，有种吃苍蝇的感觉)。思前想后，还是自己host自己的博客好。
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Hexo" scheme="http://www.codewoody.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://www.codewoody.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.codewoody.com/posts/16107/"/>
    <id>http://www.codewoody.com/posts/16107/</id>
    <published>2018-11-05T05:01:41.633Z</published>
    <updated>2018-11-05T05:01:41.634Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>文章链接 <a href="http://www.codewoody.com/posts/undefined/">http://www.codewoody.com/posts/undefined/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
