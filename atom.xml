<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>治部少辅</title>
  
  <subtitle>大一大万大吉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.codewoody.com/"/>
  <updated>2019-10-03T06:57:18.133Z</updated>
  <id>http://www.codewoody.com/</id>
  
  <author>
    <name>治部少辅</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weekly-15</title>
    <link href="http://www.codewoody.com/posts/8941/"/>
    <id>http://www.codewoody.com/posts/8941/</id>
    <published>2019-10-03T06:46:36.000Z</published>
    <updated>2019-10-03T06:57:18.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="国庆大阅兵">国庆大阅兵</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/TypEKtdYN6w" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="facebook总部一名中国籍员工跳楼"><a href="https://www.williamlong.info/archives/5838.html" target="_blank" rel="noopener">Facebook总部一名中国籍员工跳楼</a></h3><p>Facebook一名中国籍员工从公司位于加州门洛帕克（Menlo Park）的总部大楼四楼跳楼身亡。据悉，该员工已经在美国工作8年，但他仍没有拿到绿卡，只有工作签证，又要养家糊口，不能和上司翻脸，只好忍气吞声，最终不堪重负结束了自己的生命。</p><p>据华商报报道，自杀者为38岁的华人男子陈勤（音译）。根据领英页面显示，陈勤今年38岁，浙江大学毕业，到美国后在南加州大学攻读硕士，去年3月入职Facebook公司。</p><h3 id="十一香港继续骚乱"><a href="https://www.dw.com/zh/香港十一多区衝突﹕警開六槍-一人中彈重伤/a-50656186?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">十一香港继续骚乱</a></h3><p>中国庆祝国庆70周年当天，香港多个地区发生民众游行示威活动，演變為激烈警民衝突。警方除了使用催泪弹和水炮車驱散示威者，更多次開真槍，導致一名示威青年中槍。當局公佈最少74人受伤送院，數人情況危殆及嚴重。</p><h3 id="科技新闻">科技新闻</h3><ul><li><a href="https://www.williamlong.info/archives/5843.html" target="_blank" rel="noopener">百度浏览器正式停止服务</a></li><li><a href="https://www.williamlong.info/archives/5842.html" target="_blank" rel="noopener">华为已生产出可绕过所有美国零部件的5G基站</a>，并早在今年的8月和9月对新基站进行了测试。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;
&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/2a13a1f6e2fc5597d43f109d84c99528.jpg&quot; alt=&quot;大家国庆快乐。&quot;&gt;&lt;figcaption&gt;大家国庆快乐。&lt;/figcaption&gt;
&lt;/figure&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-14</title>
    <link href="http://www.codewoody.com/posts/57900/"/>
    <id>http://www.codewoody.com/posts/57900/</id>
    <published>2019-09-23T03:39:56.000Z</published>
    <updated>2019-09-27T07:21:05.555Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.codewoody.com/uploads/big/d05d886a3394d1e6e42509d6920141ef.jpeg"></p><a id="more"></a><p>临近国庆，GFW也是越来越高了，大量现有的梯子都挂了，我的梯子也不能直连了。不过好在我在国内有一台支持Ipv6的服务器。大概是因为Ipv6的普及率还不够高，因此Ipv6还没有被严格封禁，可以利用这台服务器作为跳板机跳出去。具体的方法可以参考我的这几篇博文：</p><ul><li><a href="/_posts/2019-02-21-Shadowsocks中继-从Ipv4到Ipv6.md">Shadowsocks中继-从Ipv4到Ipv6</a></li><li><a href="/_posts/2019-04-13-Haproxy支持Ipv6.md">Haproxy支持Ipv6</a></li></ul><h2 id="新闻">新闻</h2><h3 id="英国高院裁定首相让议会休会违法"><a href="https://cn.reuters.com/article/uk-court-johnson-suspending-parliament-0-idCNKBS1W916R?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">英国高院裁定首相让议会休会违法</a></h3><p>英国最高法院周二裁定，首相约翰逊建议伊丽莎白女王让议会休会的行为违法，因此议会不算休会。</p><h3 id="中国第一艘两栖攻击舰下水"><a href="https://www.yicai.com/news/100343739.html" target="_blank" rel="noopener">中国第一艘两栖攻击舰下水</a></h3><figure><img src="https://imgs.codewoody.com/uploads/big/7cbac6b9a9761385633ce44e3bbd9f8f.jpg" alt="9月25日上午，中国海军首艘两栖攻击舰下水仪式在上海举行。"><figcaption>9月25日上午，中国海军首艘两栖攻击舰下水仪式在上海举行。</figcaption></figure><p><a href="https://zh.wikipedia.org/wiki/075%E5%9E%8B%E4%B8%A4%E6%A0%96%E6%94%BB%E5%87%BB%E8%88%B0" target="_blank" rel="noopener">075型两栖攻击舰</a>是中国人民解放军海军正在设计建造的一种大型两栖攻击舰，此舰为解放军海军最大的两栖战舰，设有机库，能搭载近30架各型直升机，拥有直通甲板，可同时起降多架直升机，同时设有坞舱，可作为两栖车辆和气垫登陆艇的母船，可以运送士兵、步兵战车、主战坦克等展开登陆作战，这将使中国海军能更顺利进行两栖作战，提升解放军的登陆力量。</p><p>预计明年3月该型号的两栖攻击舰还有一艘下水。</p><p><img src="https://imgs.codewoody.com/uploads/big/d5a7cea8e6abbe5b3a4cd8c82b185a3c.jpg"></p><h3 id="北京大兴机场投入运营"><a href="https://www.zhihu.com/question/48264362" target="_blank" rel="noopener">北京大兴机场投入运营</a></h3><p><img src="https://imgs.codewoody.com/uploads/big/cec234d0300527f7bf2de58a620b26ca.jpg"></p><p>北京大兴国际机场 9 月 25 日将迎来首航，届时，也标志着该机场正式投入运营。大兴机场被英国《卫报》评为「新世界七大奇迹」之首。2015 年，机场航站楼工程开工建设；2017 年 6 月，航站楼钢结构封顶；2018 年 12 月，机场跑道道面全面贯通；2019 年，主体工程全部竣工。</p><h3 id="美国众议院通过有关弹劾特朗普的一项决议"><a href="https://www.zhihu.com/question/345899888/answer/836097003" target="_blank" rel="noopener">美国众议院通过有关弹劾特朗普的一项决议</a></h3><p>美国国会众议院司法委员会当地时间12日表决通过一项决议，为弹劾总统相关调查确立准则。这也是该委员会就弹劾现任美国总统特朗普通过的第一项决议。</p><p>事件起因是有人匿名举报川普通乌克兰。。。举报者说7月25日川普打电话给新当选的乌克兰总统泽连斯基，以4亿美元军事援助款项为要挟，8次要求乌克兰调查拜登儿子在乌克兰的腐败案件。</p><p>作为反击，川普周三上午立刻公布了自己的<a href="https://www.nytimes.com/interactive/2019/09/25/us/politics/trump-ukraine-transcript.html" target="_blank" rel="noopener">电话录音文本</a>力证清白。30分钟的通话记录显示，川普只提了两次拜登的名字，只是请求泽连斯基继续调查拜登家族贪腐案，完全没有用军事援助来要挟。</p><p>另外，周一标普收盘2992点，周二佩洛西（众议院议长）宣布「通过弹劾相关决议」，标普下点0.8%，周三特朗普公开电话记录，标普上涨0.6%。</p><h3 id="其他新闻">其他新闻</h3><ul><li><a href="https://www.dw.com/zh/《香港人权与民主法案》过第一关-中批外国干预「险恶用心」/a-50587949?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">美国参众两院的外交委员会在周三这天，通过了多项涉及香港的法案</a>，包括《香港人权与民主法案》、《保护香港法案》以及支持港人自由权利的决议案。相关人士指出，预计在10月中这些法案就能获得全院通过，立法成功。</li><li><a href="https://www.nme.com/news/music/vinyl-set-outsell-cds-first-time-since-1986-2545781" target="_blank" rel="noopener">黑胶唱片的销售额自1986年以后第一次超过CD</a></li><li><a href="https://finance.sina.com.cn/stock/usstock/c/2019-09-01/doc-iicezueu2542877.shtml" target="_blank" rel="noopener">韩国2018年生育率降低至 0.98</a>，成为全球唯一一个生育率跌破1的国家。</li><li><a href="https://cn.reuters.com/article/pentagon-deployment-mideast-0926-thur-idCNKBS1WC00B?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">美国五角大楼向沙特调派雷达和爱国者导弹电池，以加强沙特的防御</a>，本月沙特石油设施遭遇了有史以来规模最大的袭击，造成沙特石油产量缩减50%，占全球产量的5%。</li><li><a href="https://www.dw.com/zh/法国前总统希拉克逝世/a-50596161?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">法国前总统希拉克逝世</a></li><li><a href="https://www.zhihu.com/question/346910419/answer/835262623" target="_blank" rel="noopener">印度「维克兰特」号在建航母电脑内的硬盘、内存、CPU丢失</a>: 印度警方答复是，在船厂外是有监控的，但航母内部没有监控，所以追查十分困难。</li></ul><h2 id="资源">资源</h2><ul><li><a href="https://www.visual-paradigm.com/cn/guide/uml-unified-modeling-language/what-is-uml/" target="_blank" rel="noopener">中文 UML 教程</a></li><li><a href="https://javabrains.io/" target="_blank" rel="noopener">Java学习资源</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/d05d886a3394d1e6e42509d6920141ef.jpeg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Qt on Mac摸索记录 - 其四</title>
    <link href="http://www.codewoody.com/posts/41659/"/>
    <id>http://www.codewoody.com/posts/41659/</id>
    <published>2019-09-20T04:17:50.000Z</published>
    <updated>2019-09-23T03:34:52.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件与信号events-and-signals">事件与信号(Events and signals)</h2><p>事件系统在任何GUI框架中都是非常重要的，所有的GUI应用都是事件驱动的(Event-driven)。这些信号可以是用户产生，也可能是程序内部产生。在一个事件模型中，有如下三个重要的部分</p><ul><li>event source</li><li>event object</li><li>event target</li></ul><p>其中，event source是指产生事件的对象，一般在产生事件的同时，其内部状态也发生了变化。event object则是指描述事件本身的对象。event target则是需要响应这些事件的对象。</p><p>当我们调用<code>QApplication::exec</code>函数时，应用进入主循环中(main loop)。主循环负责获取事件并将事件发送给合适的响应对象。Qt实现了独特的signal and slot机制。这一机制是对C++变成语言的扩展。这里，信号(signal)和槽(slot)用于对象之间的通信，其中信号在事件发生时产生。槽一般是一个正常的C++函数，当指定信号触发时这个函数会被调用。信号和槽需要事先进行连接。</p><h3 id="鼠标点击">鼠标点击</h3><p>我们之前已经见过了在<code>QPushButton</code>上应用信号与槽的机制来处理点击事件。这里不再赘述，参考<a href="/posts/24435/#%E6%8C%89%E9%92%AE%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92">按钮与交互</a>这个部分。</p><h3 id="按键响应">按键响应</h3><p>下面的这个例子显示了按键响应的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// keypress.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyPress</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    KeyPress(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keyPressEvent</span><span class="params">(QKeyEvent * e)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// keypress.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QKeyEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"keypress.h"</span></span></span><br><span class="line"></span><br><span class="line">KeyPress::KeyPress(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> KeyPress::keyPressEvent(QKeyEvent *event) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (event-&gt;key() == Qt::Key_Escape) &#123;  </span><br><span class="line">       qApp-&gt;quit();</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"keypress.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  KeyPress window;</span><br><span class="line">  </span><br><span class="line">  window.resize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Key press"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意<code>keyPressEvent</code>是父类<code>QWidget</code>的一个<a href="https://doc.qt.io/qt-5/qwidget.html#keyPressEvent" target="_blank" rel="noopener">虚函数</a>。故这里我们不直接使用到槽函数。</p><h3 id="qmoveevent"><code>QMoveEvent</code></h3><p>这个事件代表Widget移动的过程，同样是通过override父类的虚函数实现的。见下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// move.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Move</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Move(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveEvent</span><span class="params">(QMoveEvent *e)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// move.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMoveEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"move.h"</span></span></span><br><span class="line"></span><br><span class="line">Move::Move(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Move::moveEvent(QMoveEvent *e) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> x = e-&gt;pos().x();</span><br><span class="line">  <span class="keyword">int</span> y = e-&gt;pos().y();</span><br><span class="line">  </span><br><span class="line">  QString text = QString::number(x) + <span class="string">","</span> + QString::number(y);</span><br><span class="line"></span><br><span class="line">  setWindowTitle(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"move.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  Move window;</span><br><span class="line">  </span><br><span class="line">  window.resize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Move"</span>);</span><br><span class="line">  window.show();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="断开信号和槽的联系">断开信号和槽的联系</h3><p>信号和槽可以通过槽连接气力啊，也可以断开。断开通过<code>disconnect</code>函数来实现，其参数形式应当和connect时的参数一致。例如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect(clickBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Disconnect::onClick);</span><br><span class="line"><span class="comment">// ... </span></span><br><span class="line">disconnect(clickBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>,</span><br><span class="line">    &amp;Disconnect::onClick);</span><br></pre></td></tr></table></figure><h3 id="timer">Timer</h3><p>Timer是周期性发出的事件（当然也可以用来做single shot）。Timer的典型例子就是用来实现一个时钟：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Timer(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timerEvent</span><span class="params">(QTimerEvent *e)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    QLabel *label;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"timer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QHBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTime&gt;</span></span></span><br><span class="line"></span><br><span class="line">Timer::Timer(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line">        </span><br><span class="line">  QHBoxLayout *hbox = <span class="keyword">new</span> QHBoxLayout(<span class="keyword">this</span>);</span><br><span class="line">  hbox-&gt;setSpacing(<span class="number">5</span>);               </span><br><span class="line">           </span><br><span class="line">  label = <span class="keyword">new</span> QLabel(<span class="string">""</span>, <span class="keyword">this</span>);</span><br><span class="line">  hbox-&gt;addWidget(label, <span class="number">0</span>, Qt::AlignLeft | Qt::AlignTop);</span><br><span class="line"></span><br><span class="line">  QTime qtime = QTime::currentTime();</span><br><span class="line">  QString stime = qtime.toString();</span><br><span class="line">  label-&gt;setText(stime);</span><br><span class="line">   </span><br><span class="line">  startTimer(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Timer::timerEvent(QTimerEvent *e) &#123;</span><br><span class="line">    </span><br><span class="line">  Q_UNUSED(e);</span><br><span class="line">  </span><br><span class="line">  QTime qtime = QTime::currentTime();</span><br><span class="line">  QString stime = qtime.toString();</span><br><span class="line">  label-&gt;setText(stime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"timer.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  Timer window;</span><br><span class="line">  </span><br><span class="line">  window.resize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Timer"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>startTimer</code>和<code>timerEvent</code>都是父类提供的函数。</p><h2 id="qwidget">QWidget</h2><p>这里梳理一下常用的基础控件类型。这些类都是<code>QWidget</code>的子类。</p><h3 id="qlabel"><code>QLabel</code></h3><p><code>QLabel</code>用来展示文字和<strong>图片</strong>，不涉及用户操作。</p><h3 id="qslider"><code>QSlider</code></h3><p><code>QSlider</code>提供了便捷的连续数字选择器。长这个样子：</p><p><img src="https://imgs.codewoody.com/uploads/big/eaea3516103f00b8a146e529ab5aa805.png" style="width: 202px; border: none"></p><h3 id="qcombobox"><code>QComboBox</code></h3><p><code>QComboBox</code>可以让我们从有限的下拉选项中选择。</p><p><img src="https://imgs.codewoody.com/uploads/big/aa45fd3c952bdd3f98fb8be349d789a9.png" style="width: 302px; border: none"></p><h3 id="qspinbox"><code>QSpinBox</code></h3><p>用来处理可以递增递减的离散数字</p><p><img src="https://imgs.codewoody.com/uploads/big/eb2b88936b46c8877b5c1b84746c0c85.png" style="width: 252px; border: none"></p><h3 id="qlineedit"><code>QLineEdit</code></h3><p>单行文字输入，这个我们之前已经接触过了。</p><h3 id="statusbar"><code>Statusbar</code></h3><p>状态栏，通过<code>statusBar()</code>函数来获取。</p><h3 id="其他">其他</h3><p>还有好多控件就不一一说明了，很多看名字就能知道是做什么用的：</p><ul><li><code>QCheckBox</code></li><li><code>QListWidget</code></li><li><code>QProgressBar</code></li><li><code>QPixmap</code></li><li><code>QSpliter</code></li><li><code>QTableWidget</code></li></ul><h2 id="绘图">绘图</h2><blockquote><p>这个部分也是我需要关注的重点，如何自由地绘图</p></blockquote><p><code>QPainter</code>是我们进行绘图操作的画板。绘图过程在<code>paintEvent</code>函数(<code>QWidget</code>的函数)中完成。</p><p>我们首先来看一个绘制直线的例子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lines.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lines</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Lines(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawLines</span><span class="params">(QPainter *qp)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lines.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lines.h"</span></span></span><br><span class="line"></span><br><span class="line">Lines::Lines(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Lines::paintEvent(QPaintEvent *e) &#123;</span><br><span class="line">    </span><br><span class="line">  Q_UNUSED(e);</span><br><span class="line">  </span><br><span class="line">  <span class="function">QPainter <span class="title">qp</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">  drawLines(&amp;qp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Lines::drawLines(QPainter *qp) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function">QPen <span class="title">pen</span><span class="params">(Qt::black, <span class="number">2</span>, Qt::SolidLine)</span></span>;  </span><br><span class="line">  qp-&gt;setPen(pen);</span><br><span class="line">  qp-&gt;drawLine(<span class="number">20</span>, <span class="number">40</span>, <span class="number">250</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">  pen.setStyle(Qt::DashLine);</span><br><span class="line">  qp-&gt;setPen(pen);</span><br><span class="line">  qp-&gt;drawLine(<span class="number">20</span>, <span class="number">80</span>, <span class="number">250</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">  pen.setStyle(Qt::DashDotLine);</span><br><span class="line">  qp-&gt;setPen(pen);</span><br><span class="line">  qp-&gt;drawLine(<span class="number">20</span>, <span class="number">120</span>, <span class="number">250</span>, <span class="number">120</span>);</span><br><span class="line"></span><br><span class="line">  pen.setStyle(Qt::DotLine);</span><br><span class="line">  qp-&gt;setPen(pen);</span><br><span class="line">  qp-&gt;drawLine(<span class="number">20</span>, <span class="number">160</span>, <span class="number">250</span>, <span class="number">160</span>);</span><br><span class="line"></span><br><span class="line">  pen.setStyle(Qt::DashDotDotLine);</span><br><span class="line">  qp-&gt;setPen(pen);</span><br><span class="line">  qp-&gt;drawLine(<span class="number">20</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">  QVector&lt;qreal&gt; dashes;</span><br><span class="line">  qreal space = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  dashes &lt;&lt; <span class="number">1</span> &lt;&lt; space &lt;&lt; <span class="number">5</span> &lt;&lt; space;</span><br><span class="line"></span><br><span class="line">  pen.setStyle(Qt::CustomDashLine);</span><br><span class="line">  pen.setDashPattern(dashes);</span><br><span class="line">  </span><br><span class="line">  qp-&gt;setPen(pen);</span><br><span class="line">  qp-&gt;drawLine(<span class="number">20</span>, <span class="number">240</span>, <span class="number">250</span>, <span class="number">240</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>main.cpp</code>的文件内容很简单，我们之后就不放了。</p></blockquote><p>在这个例子中我们用六种不同的笔触画了六根线，如下图：</p><p><img src="https://imgs.codewoody.com/uploads/big/d6a80beb64a9a390c3ebd109f3900178.png" style="width: 50%; border: none"></p><blockquote><p>更高阶的绘图还是看原教程吧，内容太多了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要介绍事件与信号，以及更多的常见控件。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程 - Qt - C++" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B-Qt-C/"/>
    
  </entry>
  
  <entry>
    <title>Qt on Mac摸索记录 - 其三</title>
    <link href="http://www.codewoody.com/posts/24435/"/>
    <id>http://www.codewoody.com/posts/24435/</id>
    <published>2019-09-19T05:01:46.000Z</published>
    <updated>2019-09-20T06:30:48.638Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列的摸索是在研究<a href="http://zetcode.com/gui/qt5/" target="_blank" rel="noopener">Qt Tutorial</a>英文教程的基础上，克服在macOS上遇到的若干问题写下的记录。前面两篇我们还是在研究比较基础的模块，还没有涉及具体的GUI部分。从这篇开始我们来研究GUI开发。</p><a id="more"></a><h2 id="first-program-more">First program, more</h2><p>在第一篇文章里面我们写了一个简单的窗口程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    QWidget window;</span><br><span class="line"></span><br><span class="line">    window.resize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">    window.setWindowTitle(<span class="string">"Simple example"</span>);</span><br><span class="line">    window.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们将其扩展一下。</p><h3 id="鼠标图标的例子">鼠标图标的例子</h3><p>这个例子将展示控件的组合方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cursors</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFrame&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGridLayout&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cursors</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Cursors(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Cursors::Cursors (QWidget *parent)</span><br><span class="line">  : QWidget (parent)</span><br><span class="line">&#123;</span><br><span class="line">  QFrame* frame1 = <span class="keyword">new</span> QFrame(<span class="keyword">this</span>);</span><br><span class="line">  frame1-&gt;setFrameStyle(QFrame::Box);</span><br><span class="line">  frame1-&gt;setCursor(Qt::SizeAllCursor);</span><br><span class="line"></span><br><span class="line">  QFrame *frame2 = <span class="keyword">new</span> QFrame(<span class="keyword">this</span>);</span><br><span class="line">  frame2-&gt;setFrameStyle(QFrame::Box);</span><br><span class="line">  frame2-&gt;setCursor(Qt::WaitCursor) ;</span><br><span class="line"></span><br><span class="line">  QFrame *frame3 = <span class="keyword">new</span> QFrame(<span class="keyword">this</span>);</span><br><span class="line">  frame3-&gt;setFrameStyle(QFrame::Box);</span><br><span class="line">  frame3-&gt;setCursor(Qt::PointingHandCursor);</span><br><span class="line"></span><br><span class="line">  QGridLayout *grid = <span class="keyword">new</span> QGridLayout(<span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(frame1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  grid-&gt;addWidget(frame2, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  grid-&gt;addWidget(frame3, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  setLayout(grid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>*argv[])</span> </span>&#123;</span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">  Cursors window;</span><br><span class="line">  window.resize(<span class="number">350</span>, <span class="number">150</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Cursors"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行界面如下：</p><p><img src="https://imgs.codewoody.com/uploads/big/1a14bb5978e2f4d7844b005ed289dbf6.png" style="width: 70%; border: none"></p><p>将鼠标放到不同的框里面，鼠标的图标形态会发生变化。</p><h3 id="按钮与数据交互">按钮与数据交互</h3><p>我们来写一个累加累减小工具。这次我们需要写三个文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plusminus.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlusMinus</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    PlusMinus(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnPlus</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnMinus</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    QLabel *lbl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plusminus.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plusminus.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGridLayout&gt;</span></span></span><br><span class="line"></span><br><span class="line">PlusMinus::PlusMinus(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line">  QPushButton *plsBtn = <span class="keyword">new</span> QPushButton(<span class="string">"+"</span>, <span class="keyword">this</span>);</span><br><span class="line">  QPushButton *minBtn = <span class="keyword">new</span> QPushButton(<span class="string">"-"</span>, <span class="keyword">this</span>);</span><br><span class="line">  lbl = <span class="keyword">new</span> QLabel(<span class="string">"0"</span>, <span class="keyword">this</span>);</span><br><span class="line">  </span><br><span class="line">  QGridLayout *grid = <span class="keyword">new</span> QGridLayout(<span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(plsBtn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  grid-&gt;addWidget(minBtn, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  grid-&gt;addWidget(lbl, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  setLayout(grid);  </span><br><span class="line"></span><br><span class="line">  connect(plsBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;PlusMinus::OnPlus);</span><br><span class="line">  connect(minBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;PlusMinus::OnMinus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PlusMinus::OnPlus() &#123;</span><br><span class="line">  <span class="keyword">int</span> val = lbl-&gt;text().toInt();</span><br><span class="line">  val++;</span><br><span class="line">  lbl-&gt;setText(QString::number(val));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PlusMinus::OnMinus() &#123;</span><br><span class="line">  <span class="keyword">int</span> val = lbl-&gt;text().toInt();</span><br><span class="line">  val--;</span><br><span class="line">  lbl-&gt;setText(QString::number(val));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plusminus.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  PlusMinus window;</span><br><span class="line"></span><br><span class="line">  window.resize(<span class="number">300</span>, <span class="number">190</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Plus minus"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在原版英文教程中没有给出编译方法<span class="foot-note-span">【即没有给出pro文件的内容】</span>，这里可能会有一些坑要踩。我们首先来看一下源文件中有什么不太一样的地方，然后给出编译的方法。</p><p>我们来看<code>plusminus.h</code>文件。首先我们要注意到<code>Q_OBJECT</code>这个宏。这个宏放在这里是我们使用Qt提供的信号与回调（槽）<span class="foot-note-span">【我也是刚开始学习，这里描述措辞后续可能需要更改】</span>的必要条件。宏的内容，实际上是定义了一些函数和属性，并且<code>qmake</code>编译系统在扫描到这个文件时，会自动生成实现这些函数的文件。另一需要注意的点是，在<code>OnPlus</code>和<code>OnMinus</code>声明的前面有<code>private slots</code>字段。这里的<code>slots</code>也是一个特殊的宏，起作用是将其后的函数标注为可供Qt事件响应系统的回调函数。</p><p>要编译这几个文件，在处理pro文件时需要注意这么几点：</p><ol type="1"><li>添加<code>Headers += plusminus.h</code>。如果没有这句话，编译系统就无法为<code>Q_OBJECT</code>标注的类创建需要的源文件，导致链接时出现<code>Undefined symbols for architecture XXX</code>类型的错误。</li><li>这里编译过程的中间临时文件比较多，建议在pro文件里面添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OBJECTS_DIR=tmp</span><br><span class="line">MOC_DIR=tmp</span><br></pre></td></tr></table></figure><p>完整的pro文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">######################################################################</span><br><span class="line"># Automatically generated by qmake (3.1) Wed Sep 18 17:05:09 2019</span><br><span class="line">######################################################################</span><br><span class="line"></span><br><span class="line">TEMPLATE = app</span><br><span class="line">TARGET = learnQt</span><br><span class="line">INCLUDEPATH += .</span><br><span class="line"></span><br><span class="line"># You can make your code fail to compile if you use deprecated APIs.</span><br><span class="line"># In order to do so, uncomment the following line.</span><br><span class="line"># Please consult the documentation of the deprecated API in order to know</span><br><span class="line"># how to port your code away from it.</span><br><span class="line"># You can also select to disable deprecated APIs only up to a certain version of Qt.</span><br><span class="line">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0</span><br><span class="line"></span><br><span class="line">OBJECTS_DIR=tmp</span><br><span class="line">MOC_DIR=tmp</span><br><span class="line"></span><br><span class="line"># Input</span><br><span class="line">SOURCES += main.cpp plusminus.cpp</span><br><span class="line">HEADERS += plusminus.h</span><br><span class="line"></span><br><span class="line">QT += widgets</span><br></pre></td></tr></table></figure><p>程序运行的界面如下：</p><p><img src="https://imgs.codewoody.com/uploads/big/d8119dbb52ad1289549bb8e29916dcba.png" style="width: 70%; border: none"></p><h2 id="menus-and-toobars"><a href="http://zetcode.com/gui/qt5/menusandtoolbars/" target="_blank" rel="noopener">Menus and toobars</a></h2><p>这里来介绍菜单和工具栏的使用。尽管在不同的操作系统下他们长的不一样，但是Qt提供了一致的接口。</p><h3 id="简单的例子">简单的例子</h3><p>下面的例子给出了最简单的Menu功能演示。我们分成三个文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simplemenu.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleMenu</span> :</span> <span class="keyword">public</span> QMainWindow &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    SimpleMenu(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simplemenu.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"simplemenu.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMenu&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMenuBar&gt;</span></span></span><br><span class="line"></span><br><span class="line">SimpleMenu::SimpleMenu(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent) &#123;</span><br><span class="line">    </span><br><span class="line">  QAction *quit = <span class="keyword">new</span> QAction(<span class="string">"&amp;Quit"</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  QMenu *file;</span><br><span class="line">  file = menuBar()-&gt;addMenu(<span class="string">"&amp;File"</span>);</span><br><span class="line">  file-&gt;addAction(quit);</span><br><span class="line"></span><br><span class="line">  connect(quit, &amp;QAction::triggered, qApp, QApplication::quit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"simplemenu.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line"></span><br><span class="line">  SimpleMenu window;</span><br><span class="line"></span><br><span class="line">  window.resize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Simple menu"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子在Mac上运行没法看到&quot;File&quot;这个菜单栏选项。为什么呢？这是因为在MAC中，名称为<code>Quit</code>的Action会被自动整合到名称为应用名的首个菜单项目里面去。要看到独立的<code>File</code>菜单选项，需要把<code>Quit</code>改成其他名字就好了。</p><img src="https://imgs.codewoody.com/uploads/big/4eafd4e6e49effd13e8b92370496204c.png" style="width: 70%"><figcaption>图片出处：https://forum.qt.io/topic/98908/menubar-in-macos-not-working/9</figcaption><p><br> Qt 的官方网文档在<a href="https://doc.qt.io/qt-5/qmenubar.html#details" target="_blank" rel="noopener">这里</a>说明了原因:</p><blockquote><p>Qt for macOS also provides a menu bar merging feature to make QMenuBar conform more closely to accepted macOS menu bar layout. The merging functionality is based on string matching the title of a QMenu entry. These strings are translated (using <code>QObject::tr()</code>) in the &quot;QMenuBar&quot; context. If an entry is moved its slots will still fire as if it was in the original place. The table below outlines the strings looked for and where the entry is placed if matched:</p></blockquote><p><img src="https://imgs.codewoody.com/uploads/big/9079590b1679702a8da8ca51be4c6573.png" style="border: none"></p><h3 id="toolbar">Toolbar</h3><blockquote><p>这部分最近应该用不到，先不实验，把教程内容搬过来</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#include &lt;QMainWindow&gt;</span><br><span class="line">#include &lt;QApplication&gt;</span><br><span class="line"></span><br><span class="line">class Toolbar : public QMainWindow &#123;</span><br><span class="line">    </span><br><span class="line">  Q_OBJECT  </span><br><span class="line"></span><br><span class="line">  public:</span><br><span class="line">    Toolbar(QWidget *parent = 0);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;toolbar.h&quot;</span><br><span class="line">#include &lt;QToolBar&gt;</span><br><span class="line">#include &lt;QIcon&gt;</span><br><span class="line">#include &lt;QAction&gt;</span><br><span class="line"></span><br><span class="line">Toolbar::Toolbar(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent) &#123;</span><br><span class="line">    </span><br><span class="line">  QPixmap newpix(&quot;new.png&quot;);</span><br><span class="line">  QPixmap openpix(&quot;open.png&quot;);</span><br><span class="line">  QPixmap quitpix(&quot;quit.png&quot;);</span><br><span class="line">  </span><br><span class="line">  QToolBar *toolbar = addToolBar(&quot;main toolbar&quot;);</span><br><span class="line">  toolbar-&gt;addAction(QIcon(newpix), &quot;New File&quot;);</span><br><span class="line">  toolbar-&gt;addAction(QIcon(openpix), &quot;Open File&quot;);</span><br><span class="line">  toolbar-&gt;addSeparator();</span><br><span class="line">  QAction *quit = toolbar-&gt;addAction(QIcon(quitpix), </span><br><span class="line">      &quot;Quit Application&quot;);</span><br><span class="line">  </span><br><span class="line">  connect(quit, &amp;QAction::triggered, qApp, &amp;QApplication::quit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"toolbar.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  Toolbar window;</span><br><span class="line"></span><br><span class="line">  window.resize(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"QToolBar"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布局">布局</h2><p>这个部分开始我们来将布局方面的知识，这也是我最为关注的部分。布局有两种方式：</p><ul><li>absolute positioning</li><li>layout managers</li></ul><h3 id="绝对定位">绝对定位</h3><p>绝对定位要求显式指定各个Widget的位置和大小。关于绝对定位我们需要注意如下几点：</p><ul><li>Widget的位置和大小不会因为窗口resize而变化</li><li>使用绝对定位在不同平台上看起来可能不会不一样（通常会很糟糕）</li><li>改变字体会导致布局出错</li><li>如果我们试图修改布局，那那么需要进行大量的重构，这是非常费时的</li></ul><p>综合上面的原因，除了一些必须的场景以外，我们一般都是使用布局管理器。</p><p>下面是一个使用绝对布局的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// absolute.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDesktopWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextEdit&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Absolute</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">     Absolute(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Absolute::Absolute(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line">        </span><br><span class="line">  QTextEdit *ledit = <span class="keyword">new</span> QTextEdit(<span class="keyword">this</span>);</span><br><span class="line">  ledit-&gt;setGeometry(<span class="number">5</span>, <span class="number">5</span>, <span class="number">200</span>, <span class="number">150</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  Absolute window;</span><br><span class="line"></span><br><span class="line">  window.setWindowTitle(<span class="string">"Absolute"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>setGeometry()</code>函数用来设置绝对位置坐标和大小。</p><p>下面我们开始介绍典型的布局管理器。</p><h3 id="box布局">Box布局</h3><p><code>QVBoxLayout</code>这个类将Widget垂直放置。Widget通过<code>addWidget</code>函数添加。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// verticalbox.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerticalBox</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    VerticalBox(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// verticalbox.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"verticalbox.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line">VerticalBox::VerticalBox(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line"></span><br><span class="line">  QVBoxLayout *vbox = <span class="keyword">new</span> QVBoxLayout(<span class="keyword">this</span>);</span><br><span class="line">  vbox-&gt;setSpacing(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  QPushButton *settings = <span class="keyword">new</span> QPushButton(<span class="string">"Settings"</span>, <span class="keyword">this</span>);</span><br><span class="line">  settings-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);</span><br><span class="line">  QPushButton *accounts = <span class="keyword">new</span> QPushButton(<span class="string">"Accounts"</span>, <span class="keyword">this</span>);</span><br><span class="line">  accounts-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);</span><br><span class="line">  QPushButton *loans = <span class="keyword">new</span> QPushButton(<span class="string">"Loans"</span>, <span class="keyword">this</span>);</span><br><span class="line">  loans-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);</span><br><span class="line">  QPushButton *cash = <span class="keyword">new</span> QPushButton(<span class="string">"Cash"</span>, <span class="keyword">this</span>);</span><br><span class="line">  cash-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);</span><br><span class="line">  QPushButton *debts = <span class="keyword">new</span> QPushButton(<span class="string">"Debts"</span>, <span class="keyword">this</span>);</span><br><span class="line">  debts-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);</span><br><span class="line"></span><br><span class="line">  vbox-&gt;addWidget(settings);</span><br><span class="line">  vbox-&gt;addWidget(accounts);</span><br><span class="line">  vbox-&gt;addWidget(loans);</span><br><span class="line">  vbox-&gt;addWidget(cash);</span><br><span class="line">  vbox-&gt;addWidget(debts);</span><br><span class="line"></span><br><span class="line">  setLayout(vbox);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们创建了五个垂直堆叠的按钮，并且让五个按钮再长、宽两个方向尽可能扩展(Expanding)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"verticalbox.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  VerticalBox window;</span><br><span class="line"></span><br><span class="line">  window.resize(<span class="number">240</span>, <span class="number">230</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"VerticalBox"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后长这个样子:</p><p><img src="https://imgs.codewoody.com/uploads/big/55d090d11407c6ee692f29a525f97e0c.png" style="width: 50%; border: none"></p><p>类似于<code>QVboxLayout</code>, <code>QHBoxLayout</code>提供了水平排列的布局。垂直布局和水平布局可以联合起来使用。在下面这个例子中我们在窗口右下角添加两个水平分布的按钮。这就是通过混合使用垂直于水平分布实现的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// buttons.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buttons</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Buttons(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    QPushButton *okBtn;</span><br><span class="line">    QPushButton *applyBtn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"buttons.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QHBoxLayout&gt;</span></span></span><br><span class="line"></span><br><span class="line">Buttons::Buttons(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line"></span><br><span class="line">  QVBoxLayout *vbox = <span class="keyword">new</span> QVBoxLayout(<span class="keyword">this</span>);</span><br><span class="line">  QHBoxLayout *hbox = <span class="keyword">new</span> QHBoxLayout();</span><br><span class="line"></span><br><span class="line">  okBtn = <span class="keyword">new</span> QPushButton(<span class="string">"OK"</span>, <span class="keyword">this</span>);</span><br><span class="line">  applyBtn = <span class="keyword">new</span> QPushButton(<span class="string">"Apply"</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  hbox-&gt;addWidget(okBtn, <span class="number">1</span>, Qt::AlignRight);</span><br><span class="line">  hbox-&gt;addWidget(applyBtn, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  vbox-&gt;addStretch(<span class="number">1</span>);</span><br><span class="line">  vbox-&gt;addLayout(hbox);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"buttons.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line"></span><br><span class="line">  Buttons window;</span><br><span class="line"></span><br><span class="line">  window.resize(<span class="number">290</span>, <span class="number">170</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Buttons"</span>);</span><br><span class="line">  window.show();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个更加复杂的布局嵌套的例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nesting.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layouts</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Layouts(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nesting.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QListWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"nesting.h"</span></span></span><br><span class="line"></span><br><span class="line">Layouts::Layouts(QWidget *parent)</span><br><span class="line">  : QWidget (parent)</span><br><span class="line">&#123;</span><br><span class="line">  QVBoxLayout *vbox = <span class="keyword">new</span> QVBoxLayout();</span><br><span class="line">  QHBoxLayout *hbox = <span class="keyword">new</span> QHBoxLayout(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  QListWidget *lw = <span class="keyword">new</span> QListWidget(<span class="keyword">this</span>);</span><br><span class="line">  lw-&gt;addItem(<span class="string">"The Omen"</span>); </span><br><span class="line">  lw-&gt;addItem(<span class="string">"The Exorcist"</span>);</span><br><span class="line">  lw-&gt;addItem(<span class="string">"Notes on a scandal"</span>);</span><br><span class="line">  lw-&gt;addItem(<span class="string">"Fargo"</span>);</span><br><span class="line">  lw-&gt;addItem(<span class="string">"Capote"</span>);</span><br><span class="line"></span><br><span class="line">  QPushButton *add = <span class="keyword">new</span> QPushButton(<span class="string">"Add"</span>, <span class="keyword">this</span>);</span><br><span class="line">  QPushButton *rename = <span class="keyword">new</span> QPushButton(<span class="string">"Rename"</span>, <span class="keyword">this</span>);</span><br><span class="line">  QPushButton *remove = <span class="keyword">new</span> QPushButton(<span class="string">"Remove"</span>, <span class="keyword">this</span>);</span><br><span class="line">  QPushButton *removeall = <span class="keyword">new</span> QPushButton(<span class="string">"Remove All"</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  vbox-&gt;setSpacing(<span class="number">3</span>);</span><br><span class="line">  vbox-&gt;addStretch(<span class="number">1</span>);</span><br><span class="line">  vbox-&gt;addWidget(add);</span><br><span class="line">  vbox-&gt;addWidget(rename);</span><br><span class="line">  vbox-&gt;addWidget(remove);</span><br><span class="line">  vbox-&gt;addWidget(removeall);</span><br><span class="line">  vbox-&gt;addStretch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  hbox-&gt;addWidget(lw);</span><br><span class="line">  hbox-&gt;addSpacing(<span class="number">15</span>);</span><br><span class="line">  hbox-&gt;addLayout(vbox);</span><br><span class="line"></span><br><span class="line">  setLayout(hbox);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"nesting.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  Layouts window;</span><br><span class="line">  </span><br><span class="line">  window.setWindowTitle(<span class="string">"Layouts"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序运行得到的界面如下图：</p><p><img src="https://imgs.codewoody.com/uploads/big/101a9aba9e4ecc35c723622cc32e2bc3.png" style="width: 70%; border: none"></p><h3 id="form布局">Form布局</h3><p><code>QFormLayout</code>可以处理典型的表格输入的布局。其子Widgets被分为两列，分别是Label和输入控件（例如<code>QLineEdit</code>或者<code>QSpinBox</code>)。 Form布局的使用见下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// form.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormEx</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    FormEx(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// form.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFormLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"form.h"</span></span></span><br><span class="line"></span><br><span class="line">FormEx::FormEx(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line">        </span><br><span class="line">  QLineEdit *nameEdit = <span class="keyword">new</span> QLineEdit(<span class="keyword">this</span>);</span><br><span class="line">  QLineEdit *addrEdit = <span class="keyword">new</span> QLineEdit(<span class="keyword">this</span>);</span><br><span class="line">  QLineEdit *occpEdit = <span class="keyword">new</span> QLineEdit(<span class="keyword">this</span>);</span><br><span class="line">  </span><br><span class="line">  QFormLayout *formLayout = <span class="keyword">new</span> QFormLayout;</span><br><span class="line">  <span class="comment">// 调整Label的对齐规则为水平右对齐，垂直居中</span></span><br><span class="line">  formLayout-&gt;setLabelAlignment(Qt::AlignRight | Qt::AlignVCenter);</span><br><span class="line">  formLayout-&gt;addRow(<span class="string">"Name:"</span>, nameEdit);</span><br><span class="line">  formLayout-&gt;addRow(<span class="string">"Email:"</span>, addrEdit);</span><br><span class="line">  formLayout-&gt;addRow(<span class="string">"Age:"</span>, occpEdit);</span><br><span class="line">  </span><br><span class="line">  setLayout(formLayout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"form.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line"></span><br><span class="line">  FormEx window;</span><br><span class="line"></span><br><span class="line">  window.setWindowTitle(<span class="string">"Form example"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行得到的界面如下：</p><p><img src="https://imgs.codewoody.com/uploads/big/1f92dfbe6c1b7bd1cdc16b7e56902b5a.png" style="width: 50%; border: none"></p><h3 id="网格布局">网格布局</h3><p>网格布局使用<code>QGridLayout</code>这个类，我们已经在前面的例子中见过了。这是一个强大的布局工具。英文教程中给了两个例子，其中Review那个例子要更加复杂一些，我们使用那个来说明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// review.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Review</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Review(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// review.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGridLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"review.h"</span></span></span><br><span class="line"></span><br><span class="line">Review::Review(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line"></span><br><span class="line">  QGridLayout *grid = <span class="keyword">new</span> QGridLayout(<span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;setVerticalSpacing(<span class="number">15</span>);</span><br><span class="line">  grid-&gt;setHorizontalSpacing(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  QLabel *title = <span class="keyword">new</span> QLabel(<span class="string">"Title:"</span>, <span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(title, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  title-&gt;setAlignment(Qt::AlignRight | Qt::AlignVCenter);</span><br><span class="line"></span><br><span class="line">  QLineEdit *edt1 = <span class="keyword">new</span> QLineEdit(<span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(edt1, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  QLabel *author = <span class="keyword">new</span> QLabel(<span class="string">"Author:"</span>, <span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(author, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  author-&gt;setAlignment(Qt::AlignRight | Qt::AlignVCenter);</span><br><span class="line"></span><br><span class="line">  QLineEdit *edt2 = <span class="keyword">new</span> QLineEdit(<span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(edt2, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  QLabel *review = <span class="keyword">new</span> QLabel(<span class="string">"Review:"</span>, <span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(review, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  review-&gt;setAlignment(Qt::AlignRight | Qt::AlignTop);</span><br><span class="line"></span><br><span class="line">  QTextEdit *te = <span class="keyword">new</span> QTextEdit(<span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(te, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  setLayout(grid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"review.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line"></span><br><span class="line">  Review window;</span><br><span class="line"></span><br><span class="line">  window.setWindowTitle(<span class="string">"Review"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用<code>QGridLayout::addWidget</code>参数的时候，除了行列号以外，剩下两个数字分别表示行列的Span。函数定义：</p><p><img src="https://imgs.codewoody.com/uploads/big/5c99b1d0a4824c8cd573cdff321a926b.png"></p><p>程序运行得到的界面是</p><p><img src="https://imgs.codewoody.com/uploads/big/8bfeb8877347930a9b2cab06e963a7af.png" style="width: 70%; border: none"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个系列的摸索是在研究&lt;a href=&quot;http://zetcode.com/gui/qt5/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Qt Tutorial&lt;/a&gt;英文教程的基础上，克服在macOS上遇到的若干问题写下的记录。前面两篇我们还是在研究比较基础的模块，还没有涉及具体的GUI部分。从这篇开始我们来研究GUI开发。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://www.codewoody.com/tags/C/"/>
    
      <category term="Qt" scheme="http://www.codewoody.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>【转载】5G大战,美国败像已露</title>
    <link href="http://www.codewoody.com/posts/58026/"/>
    <id>http://www.codewoody.com/posts/58026/</id>
    <published>2019-09-19T02:29:08.000Z</published>
    <updated>2019-09-19T02:30:54.676Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.williamlong.info/archives/5822.html" target="_blank" rel="noopener">来源</a></p><p>为了将中国企业排除在新一代通信标准5G之外，美国发动高科技战已过去1年有余。世界的数据网将不断分裂为相互隔绝的2个，一个美国主导，另一个中国主导——当初这样的担忧出现扩大。</p><p>　　美国谷歌前董事长施密特也是敲响这一警钟的人之一。但是，美国、日本今后面对的情况也许比这个警钟更严厉，不仅是世界5G基础设施的一半，中国企业有掌握更多份额的可能性。在对亚洲各国采访的过程中，我禁不住这样想。</p><p>　　传输庞大信息的5G网可以看作是人类身体上的大动脉。只要将其控制，在政治和军事方面，中国的影响力便可能进一步加强。</p><p>　　但是，如果仅观察华盛顿大张旗鼓采取的对华强硬举措，容易令人感到正在加强攻势的是美方。</p><p>　　美国2018年8月通过《国防授权法》，决定将华为技术和中兴通讯（ZTE）排除出美国。点燃了高科技战争的导火索。</p><p>　　经过1年的宽限期，美国政府自今年8月13日起，禁止美国政府机构采购华为和中兴通讯的产品。1年后起，对于采用两家公司等产品的民营企业，也将被禁止与美国政府交易。</p><p>　　美国担心如果让两家中国企业进入本国5G领域，重要信息可能被窃取。虽然中国否认这种危险，但美国正在敦促同盟国和友好国家也将两家企业排除出5G网。</p><p>　　美国政府计划在事实上禁止向华为出口美国造零部件和软件。这将对于无法使用美国谷歌软件的华为智能手机终端构成打击。</p><p>　　但是，要问能在多大程度上将2家中国企业排除出5G基础设施，局势对美国极为不利。与美国统一步调、决定排除华为的国家目前只有日本和澳大利亚。英国和法国都表示“正在讨论”，而德国则坚持“难以排除”的立场。</p><p>　　在英德的通信基础设施中，华为已在4G领域浸透。德国政府内部有声音表示，“事到如今，让我们在5G中排除（中国企业），也是难为人的要求”。</p><p>　　在这样背景下，左右中美5G战争形势的是亚洲的走向。8月下旬，在曼谷举行的“日本-东盟媒体合作论坛”（主办方为日本的国际交流基金）的讨论非常耐人寻味。在亚洲记者讨论世界局势的情况下，成为主要话题的是中美的5G战争。东南亚的大部分与会者都断言，美国难以战胜中国。</p><p>　　的确，这种迹象很明显。柬埔寨采用华为的技术，将于年内启动5G服务。马来西亚和泰国也在5月底宣布不抵制华为。</p><p>　　在菲律宾、印度尼西亚和缅甸，当地的通信大型企业与华为和中兴通讯签署合同，显示出在5G领域展开合作的趋势。</p><p>　　原因何在？第一，能替代华为和中兴通讯的选项过度缺乏。从移动通信基础设施来看，这2家企业占到世界市场的近4成份额。虽然欧洲的爱立信（29％）和诺基亚（23.4％）也拥有较高份额，但在价格竞争中无法与中国企业相匹敌。</p><p>　　东南亚的经济专家表示，与中国2家企业相比，爱立信和诺基亚的价格高出2——3成。对东南亚和印度来说不合算。</p><p>　　另外一个原因在于美国自身。在批评中国的同时，美国自身也参与情报间谍活动——这种不信任感在亚洲内部不断增强。</p><p>　　知道可能存在被中国获取信息的危险，但是，美国或许也在利用先进的高科技，大肆监视外国的通信，获取信息——东南亚的当局者和安全专家透露出这样的不满。</p><p>　　东南亚冷眼旁观的是美国的间谍活动。美国国家安全局（NSA）前雇员斯诺登爆料称，美国政府侵入各国政府和企业的网络，暗中获取信息。</p><p>　　也就是说，在信息被拿走的风险方面，中国和美国没有什么区别。在伊斯兰人口众多的印度尼西亚、马来西亚、巴基斯坦和文莱等国，甚至有看法认为，与中国相比，信息被美国窃取更为可怕。</p><p>　　受长达20年的阿富汗和中东战争的影响，在亚洲的伊斯兰圈，对美国的感情芥蒂沉淀下来。一位前外交官的话很有代表性。</p><p>　　他说：“正如萨达姆·侯赛因领导的伊拉克那样，美国将向不听话的国家投下炸弹。但是，中国将向看不顺眼的国家投下金钱（投资），还是中国更好。”</p><p>　　要想抗衡华为和中兴通讯，欧洲和日韩的通信企业必须提高价格竞争力，建立能扩大市场份额的体制。美国或许有必要进一步共享所谓依赖中国企业的风险，在此基础上，为了在6G领域掌握主导权加快投资。日本通信商NTT最近成功开发出着眼于6G的新技术。中美数字主导权的竞争不会止步于5G，下一场战争已经打响。</p><p>　　稿源：日经中文网，作者：秋田浩之</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.williamlong.info/archives/5822.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;来源&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了将中国企业排除在新一代通信标准5G之外，美国发动高科技战已过去1
      
    
    </summary>
    
      <category term="杂谈" scheme="http://www.codewoody.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Qt on Mac摸索记录 - 其二</title>
    <link href="http://www.codewoody.com/posts/54018/"/>
    <id>http://www.codewoody.com/posts/54018/</id>
    <published>2019-09-18T17:11:03.000Z</published>
    <updated>2019-09-19T04:58:02.047Z</updated>
    
    <content type="html"><![CDATA[<p>跟着<a href="./posts/46595/">上一篇</a>继续。本篇介绍Qt重新造的轮子：容器系统和文件操作系统。</p><a id="more"></a><h2 id="容器">容器</h2><p>按理说标准库里面就有各种容器的实现了，这里重新造轮子了？</p><p>容器分为了两类：序列容器 和 关联容器。</p><h3 id="qvector">QVector</h3><p>动态数组容器，内部本质就是内存连续的数组，从而使得随机存取的效率非常高。但是对于元素的删除插入操作性能会比较差。对于长度很大的序列，推荐采用链表实现的的<code>QList</code>。</p><p><code>QVector</code>的例子如下。使用非常简单，不再赘述。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QVector&lt;<span class="keyword">int</span>&gt; vals = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"The size of the vector is: "</span> &lt;&lt; vals.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"The first item is: "</span> &lt;&lt; vals.first() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"The last item is: "</span> &lt;&lt; vals.last() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    vals.append(<span class="number">6</span>);</span><br><span class="line">    vals.prepend(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"Elements: "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : vals) &#123;</span><br><span class="line">        out &lt;&lt; val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="qlist"><code>QList</code></h3><p><code>QList</code> 也是序列容器，内部是链表实现。其随机访问、删除、插入操作效率都比较高。因此是 Qt 中最常用的容器。参考下面👇这个例子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QList&lt;QString&gt; authors = &#123;<span class="string">"Balzac"</span>, <span class="string">"Tolstoy"</span>, </span><br><span class="line">        <span class="string">"Gulbranssen"</span>, <span class="string">"London"</span>&#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; authors.size(); ++i) &#123;</span><br><span class="line">  </span><br><span class="line">        out &lt;&lt; authors.at(i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    authors &lt;&lt; <span class="string">"Galsworthy"</span> &lt;&lt; <span class="string">"Sienkiewicz"</span>;</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"***********************"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::sort(authors.begin(), authors.end());</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"Sorted:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (QString author : authors) &#123;</span><br><span class="line">  </span><br><span class="line">        out &lt;&lt; author &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="qstringlist"><code>QStringList</code></h3><p>为字符串做了优化的列表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QList&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QString <span class="built_in">string</span> = <span class="string">"coin, book, cup, pencil, clock, bookmark"</span>;</span><br><span class="line">    QStringList items = <span class="built_in">string</span>.split(<span class="string">","</span>);</span><br><span class="line">    <span class="function">QStringListIterator <span class="title">it</span><span class="params">(items)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        out &lt;&lt; it.next().trimmed() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="qset"><code>QSet</code></h3><p>集合可以确保其中存储的值是唯一的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSet&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QSet&lt;QString&gt; cols1 = &#123;<span class="string">"yellow"</span>, <span class="string">"red"</span>, <span class="string">"blue"</span>&#125;;</span><br><span class="line">    QSet&lt;QString&gt; cols2 = &#123;<span class="string">"blue"</span>, <span class="string">"pink"</span>, <span class="string">"orange"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"There are "</span> &lt;&lt; cols1.size() &lt;&lt; <span class="string">" values in the set"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    cols1.insert(<span class="string">"brown"</span>);</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"There are "</span> &lt;&lt; cols1.size() &lt;&lt; <span class="string">" values in the set"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    cols1.unite(cols2);</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"There are "</span> &lt;&lt; cols1.size() &lt;&lt; <span class="string">" values in the set"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (QString val : cols1) &#123;</span><br><span class="line">        out &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QList&lt;QString&gt; lcols = cols1.values();</span><br><span class="line">    <span class="built_in">std</span>::sort(lcols.begin(), lcols.end());</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"*********************"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"Sorted:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (QString val : lcols) &#123;</span><br><span class="line">        out &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到合并(<code>unite()</code>)后重复元素被移除了，只留下一份。</p><h3 id="qmap"><code>QMap</code></h3><p><code>QMap</code>是关联式容器，存储key-value对。下面是<code>QMap</code>使用的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMap&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QMap&lt;QString, <span class="keyword">int</span>&gt; items = &#123; &#123;<span class="string">"coins"</span>, <span class="number">5</span>&#125;, &#123;<span class="string">"books"</span>, <span class="number">3</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">    items.insert(<span class="string">"bottles"</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    QList&lt;<span class="keyword">int</span>&gt; values = items.values();</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"Values:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : values) &#123;</span><br><span class="line">        out &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QList&lt;QString&gt; keys = items.keys();</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"Keys:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (QString key : keys) &#123;</span><br><span class="line">        out &lt;&lt; key &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QMapIterator&lt;QString, <span class="keyword">int</span>&gt; it(items);</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"Pairs:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        it.next();</span><br><span class="line">        out &lt;&lt; it.key() &lt;&lt; <span class="string">": "</span> &lt;&lt; it.value() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义排序">自定义排序</h3><p>自定义排序其实就是要自定义比较函数。以下面的类为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// book.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Book(QString, QString);</span><br><span class="line">        <span class="function">QString <span class="title">getAuthor</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">        <span class="function">QString <span class="title">getTitle</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        QString author;</span><br><span class="line">        QString title;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// book.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"book.h"</span></span></span><br><span class="line"></span><br><span class="line">Book::Book(QString auth, QString tit) &#123;</span><br><span class="line">    author = auth;</span><br><span class="line">    title = tit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QString Book::getAuthor() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> author;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QString Book::getTitle() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用自定义的方式排序如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"book.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compareByTitle</span><span class="params">(<span class="keyword">const</span> Book &amp;b1, <span class="keyword">const</span> Book &amp;b2)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> b1.getTitle() &lt; b2.getTitle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QList&lt;Book&gt; books = &#123;</span><br><span class="line">        Book(<span class="string">"Jack London"</span>, <span class="string">"The Call of the Wild"</span>),</span><br><span class="line">        Book(<span class="string">"Honoré de Balzac"</span>, <span class="string">"Father Goriot"</span>),</span><br><span class="line">        Book(<span class="string">"Leo Tolstoy"</span>, <span class="string">"War and Peace"</span>),</span><br><span class="line">        Book(<span class="string">"Gustave Flaubert"</span>, <span class="string">"Sentimental education"</span>),</span><br><span class="line">        Book(<span class="string">"Guy de Maupassant"</span>, <span class="string">"Une vie"</span>),</span><br><span class="line">        Book(<span class="string">"William Shakespeare"</span>, <span class="string">"Hamlet"</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::sort(books.begin(), books.end(), compareByTitle);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Book book : books) &#123;</span><br><span class="line">        out &lt;&lt; book.getAuthor() &lt;&lt; <span class="string">": "</span> &lt;&lt; book.getTitle() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件系统">文件系统</h2><p>这里涉及<code>QFile</code>, <code>QDir</code>, <code>QFileInfo</code>三个类。其中<code>QFile</code>负责操作文件（读取和写入），<code>QDir</code>提供了访问路径结构及其内容的接口，<code>QFileInfo</code>提供了与独立于操作系统的文件信息，包括文件名、文件存储的路径，访问时间，修改时间，权限，文件所有权信息。</p><h3 id="文件大小">文件大小</h3><p>文件的大小通过<code>QFileInfo::size()</code>函数来获取。见下面的完整例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">    qWarning(<span class="string">"Usage: file_size file"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  QString filename = argv[<span class="number">1</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!QFile(filename).exists()) &#123;</span><br><span class="line">    qWarning(<span class="string">"The file does not exist"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function">QFileInfo <span class="title">fileinfo</span><span class="params">(filename)</span></span>;</span><br><span class="line">  </span><br><span class="line">  qint64 size = fileinfo.size();</span><br><span class="line">  </span><br><span class="line">  QString str = <span class="string">"The size is: %1 bytes"</span>;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; str.arg(size) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取文件内容">读取文件内容</h3><p>读取文件之前需要打开文件，并基于这个文件创建流。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">"colours"</span>)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!file.open(QIODevice::ReadOnly)) &#123;</span><br><span class="line">    qWarning(<span class="string">"Cannot open file for reading"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">in</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!in.atEnd()) &#123;</span><br><span class="line">    QString line = in.readLine();</span><br><span class="line">    out &lt;&lt; line &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入文件内容">写入文件内容</h3><p>要写入文件需要文件以写入模式打开。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">  QString filename = <span class="string">"distros"</span>;</span><br><span class="line">  <span class="function">QFile <span class="title">file</span><span class="params">(filename)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (file.open(QIODevice::WriteOnly)) &#123;</span><br><span class="line">      </span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"Xubuntu"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"Arch"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"Debian"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"Redhat"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"Slackware"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      </span><br><span class="line">    qWarning(<span class="string">"Could not open file"</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  file.close(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制文件">复制文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">      qWarning(<span class="string">"Usage: copyfile source destination"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  QString source = argv[<span class="number">1</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!QFile(source).exists()) &#123;</span><br><span class="line">      qWarning(<span class="string">"The source file does not exist"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">QString <span class="title">destin</span><span class="params">(argv[<span class="number">2</span>])</span></span>;</span><br><span class="line"></span><br><span class="line">  QFile::copy(source, destin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件信息的获取">文件信息的获取</h3><ul><li>文件所有者：<code>QFileInfo::group()</code>和<code>QFileInfo::owner()</code>，返回的都是<code>QString</code>;</li><li>修改时间: <code>QFileInfo::lastRead()</code>和<code>QFileInfo::lastModified()</code>，返回的是<code>QDateTime</code>;</li><li>文件路径：参见下面的例子</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filepath.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">      out &lt;&lt; <span class="string">"Usage: file_times file"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  QString filename = argv[<span class="number">1</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="function">QFileInfo <span class="title">fileinfo</span><span class="params">(filename)</span></span>;</span><br><span class="line">  </span><br><span class="line">  QString absPath = fileinfo.absoluteFilePath();</span><br><span class="line">  QString baseName = fileinfo.baseName();</span><br><span class="line">  QString compBaseName = fileinfo.completeBaseName();</span><br><span class="line">  QString fileName = fileinfo.fileName();</span><br><span class="line">  QString suffix = fileinfo.suffix();</span><br><span class="line">  QString compSuffix = fileinfo.completeSuffix();</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; <span class="string">"Absolute file path: "</span> &lt;&lt; absPath &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"Base name: "</span> &lt;&lt; baseName &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"Complete base name: "</span> &lt;&lt; compBaseName &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"File name: "</span> &lt;&lt; fileName &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"Suffix: "</span> &lt;&lt; suffix &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"Whole suffix: "</span> &lt;&lt; compSuffix &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./file_path ~/Downloads/qt-everywhere-opensource-src-5.5.1.tar.gz </span><br><span class="line">Absolute file path: /home/janbodnar/Downloads/qt-everywhere-opensource-src-5.5.1.tar.gz</span><br><span class="line">Base name: qt-everywhere-opensource-src-5</span><br><span class="line">Complete base name: qt-everywhere-opensource-src-5.5.1.tar</span><br><span class="line">File name: qt-everywhere-opensource-src-5.5.1.tar.gz</span><br><span class="line">Suffix: gz</span><br><span class="line">Whole suffix: 5.1.tar.gz</span><br></pre></td></tr></table></figure><ul><li>权限信息：通过<code>QFile::permissions</code>方法可以权限信息，具体的例子如下：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">      out &lt;&lt; <span class="string">"Usage: permissions file"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  QString filename = argv[<span class="number">1</span>];</span><br><span class="line">  </span><br><span class="line">  QFile::Permissions ps = QFile::permissions(filename);</span><br><span class="line">  </span><br><span class="line">  QString fper;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::ReadOwner) &#123;</span><br><span class="line">      fper.append(<span class="string">'r'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::WriteOwner) &#123;</span><br><span class="line">      fper.append(<span class="string">'w'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::ExeOwner) &#123;</span><br><span class="line">      fper.append(<span class="string">'x'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::ReadGroup) &#123;</span><br><span class="line">      fper.append(<span class="string">'r'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::WriteGroup) &#123;</span><br><span class="line">      fper.append(<span class="string">'w'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::ExeGroup) &#123;</span><br><span class="line">      fper.append(<span class="string">'x'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::ReadOther) &#123;</span><br><span class="line">      fper.append(<span class="string">'r'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::WriteOther) &#123;</span><br><span class="line">      fper.append(<span class="string">'w'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::ExeOther) &#123;</span><br><span class="line">      fper.append(<span class="string">'x'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; fper &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作路径directories">操作路径(directories)</h3><ul><li>创建文件夹: <code>QDir::mkdir()</code>，返回布尔值表明创建是否成功。<code>QDir::mkpath()</code>也是创建文件夹 ，其区别在于<code>mkpath()</code>函数会同时创建缺少的父文件夹。</li><li>重命名: <code>QDir::exists()</code>, 文件是否存在。</li><li>获取 一些特殊的文件夹的位置：<ul><li><code>QDir::currentPath()</code></li><li><code>QDir::homePath()</code></li><li><code>QDir::tempPath()</code></li><li><code>QDir::rootPath()</code></li></ul></li><li>输出文件夹内的内容</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDir&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">      qWarning(<span class="string">"Usage: list_dir directory"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  QString directory = argv[<span class="number">1</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="function">QDir <span class="title">dir</span><span class="params">(directory)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">      qWarning(<span class="string">"The directory does not exist"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  dir.setFilter(QDir::Files | QDir::AllDirs);</span><br><span class="line">  dir.setSorting(QDir::Size | QDir::Reversed);</span><br><span class="line"></span><br><span class="line">  QFileInfoList <span class="built_in">list</span> = dir.entryInfoList();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> max_size = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  foreach (QFileInfo finfo, <span class="built_in">list</span>) &#123;</span><br><span class="line">      QString name = finfo.fileName();</span><br><span class="line">      <span class="keyword">int</span> size = name.size();</span><br><span class="line">      <span class="keyword">if</span> (size &gt; max_size) &#123;</span><br><span class="line">          max_size = size;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> len = max_size + <span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; QString(<span class="string">"Filename"</span>).leftJustified(len).append(<span class="string">"Bytes"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.size(); ++i) &#123;</span><br><span class="line">    QFileInfo fileInfo = <span class="built_in">list</span>.at(i);</span><br><span class="line">    QString str = fileInfo.fileName().leftJustified(len);</span><br><span class="line">    str.append(QString(<span class="string">"%1"</span>).arg(fileInfo.size()));</span><br><span class="line">    out &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟着&lt;a href=&quot;./posts/46595/&quot;&gt;上一篇&lt;/a&gt;继续。本篇介绍Qt重新造的轮子：容器系统和文件操作系统。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://www.codewoody.com/tags/C/"/>
    
      <category term="Qt" scheme="http://www.codewoody.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt on Mac摸索记录 - 其一</title>
    <link href="http://www.codewoody.com/posts/46595/"/>
    <id>http://www.codewoody.com/posts/46595/</id>
    <published>2019-09-18T09:18:25.000Z</published>
    <updated>2019-09-18T17:10:35.116Z</updated>
    
    <content type="html"><![CDATA[<p>我参考<a href="http://zetcode.com/gui/qt5/introduction/" target="_blank" rel="noopener">http://zetcode.com/gui/qt5/introduction/</a>这个链接入坑，使用macOS。网上看起来是Windows和Linux的教程居多，这个链接里的教程初看起来应该也是基于Linux的。谁让Mac的市场占有率低呢。</p><a id="more"></a><h2 id="first-try">First Try</h2><h3 id="show-version">Show version</h3><p>首先是从官网下载了GUI形式的安装器安装的Qt，Qt的默认安装位置是<code>~/Qt</code>。安装的Qt版本是5.13.1。首先参照教程熟悉一下编译过程。教程链接里给出的例子是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// version.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Qt version: "</span> &lt;&lt; qVersion() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译的命令是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -o version version.cpp -I/usr/local/qt5/include/QtCore -I/usr/local/qt5/include -L/usr/local/qt5/lib -lQt5Core -fPIC</span><br></pre></td></tr></table></figure><p>不过这个编译命令在Mac上无法成功。我使用的是如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">g++ -o version version.cpp \</span><br><span class="line"><span class="meta">#</span><span class="bash"> Include path，需要指向包含QtCore的头文件的位置</span></span><br><span class="line">-Ipath/to/qt/5.13.1/clang_64/lib/QtCore.framework/Headers \</span><br><span class="line"><span class="meta">#</span><span class="bash"> -F指定framework的路径，-framework则用来指明使用的framework的名字</span></span><br><span class="line">-F/Users/lena/qt/5.13.1/clang_64/lib -framework QtCore</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在mac上g++其实也是调用的clang，这里加上这个避免一些warning</span></span><br><span class="line">-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX10.13.sdk \</span><br><span class="line">-mmacosx-version-min=10.12 \</span><br><span class="line"><span class="meta">#</span><span class="bash"> rpath是程序在运行的时候载入动态库（即QtCore.framework）的位置</span></span><br><span class="line">-Wl,-rpath,/path/to/5.13.1/clang_64/lib</span><br><span class="line">-pipe -stdlib=libc++ -O2 -std=gnu++11  -Wall -W -fPIC</span><br></pre></td></tr></table></figure><p>编译成功后调用<code>./version</code>就可以看到运行成功并输出Qt版本了。</p><h3 id="first-gui">First GUI</h3><p>下面我们来测试一个简单的GUI例子。首先新建一个文件如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simple.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    QWidget window;</span><br><span class="line"></span><br><span class="line">    window.resize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">    window.setWindowTitle(<span class="string">"Simple example"</span>);</span><br><span class="line">    window.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用<code>qmake</code>工具，运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake -project</span><br></pre></td></tr></table></figure><p>这个命令会创建一个项目文件<code>simple.pro</code><span class="foot-note-span">【文件的名字与根目录文件夹的名字相同】</span>。文件的内容应该类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">######################################################################</span><br><span class="line"># Automatically generated by qmake (3.0) Fri Oct 30 17:11:00 2015</span><br><span class="line">######################################################################</span><br><span class="line"></span><br><span class="line">TEMPLATE = app</span><br><span class="line">TARGET = simple</span><br><span class="line">INCLUDEPATH += .</span><br><span class="line"></span><br><span class="line"># Input</span><br><span class="line">SOURCES += simple.cpp</span><br><span class="line"></span><br><span class="line">QT += widgets</span><br></pre></td></tr></table></figure><p>注意最后一行，需要我们手动添加QtWidget模块。然后运行<code>qmake</code>命令，生成编译使用的Makefile。然后就可以编译了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>程序运行后会弹出一个空的窗口。</p><p><img src="https://imgs.codewoody.com/uploads/big/a9f573fd0cf4761bfac223bce02a0560.png" style="width: 50%; border: none"></p><h2 id="strings">Strings</h2><p>Qt 引入了<code>QString</code>来加强字符串处理的能力。</p><p><code>QtString</code>表示一个Unicode字符串，其存储字符串为16比特的<code>QChars</code>。每个<code>QChar</code>代表一个Unicode 4.0字符。不同于很多其他的变成语言，<code>QtString</code>可以被修改<span class="foot-note-span">【如Python的字符串就是静态的，“修改”字符串实际是生成新的字符串】</span>。</p><p>这里主要是了解<code>QtString</code>的能力，汇总记录就可以了，没有必要编译运行。</p><h3 id="初始化">初始化</h3><p>有多种初始化方法，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QString str1 = <span class="string">"The night train"</span>;</span><br><span class="line">   out &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">QString <span class="title">str2</span><span class="params">(<span class="string">"A yellow rose"</span>)</span></span>;</span><br><span class="line">   out &lt;&lt; str2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">string</span> s1 = <span class="string">"A blue sky"</span>;</span><br><span class="line">   QString str3 = s1.c_str(); </span><br><span class="line">   out &lt;&lt; str3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">string</span> s2 = <span class="string">"A thick fog"</span>;</span><br><span class="line">   QString str4 = QString::fromLatin1(s2.data(), s2.size());</span><br><span class="line">   out &lt;&lt; str4 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">char</span> s3[] = <span class="string">"A deep forest"</span>;</span><br><span class="line">   <span class="function">QString <span class="title">str5</span><span class="params">(s3)</span></span>;</span><br><span class="line">   out &lt;&lt; str5 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问字符串元素">访问字符串元素</h3><p>如前文所述，<code>QString</code>由<code>QChar</code>组成，我们可以使用<code>[]</code>操作符或者<code>at()</code>函数来访问元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QString a = <span class="string">"Eagle"</span>;</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; a[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; a[<span class="number">4</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; a.at(<span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (a.at(<span class="number">5</span>).isNull()) &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"Outside the range of the string"</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串长度">字符串长度</h3><p>与字符串长度相关的函数有三个： <code>size()</code>, <code>count()</code>和<code>length</code>。三个函数的作用是一样的。</p><h3 id="字符串构建">字符串构建</h3><p>参考如下的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span> <span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  QString s1 = <span class="string">"There are %1 white roses"</span>;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">  out &lt;&lt; s1.args(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  QString s2 = <span class="string">"The tree is %1 m high"</span>;</span><br><span class="line">  <span class="keyword">double</span> h = <span class="number">5.65</span>;</span><br><span class="line"></span><br><span class="line">  out &lt;&lt; s2.args(h) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  QString s3 = <span class="string">"We have %1 lemons and %2 oranges"</span>;</span><br><span class="line">  <span class="keyword">int</span> ln = <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">int</span> on = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  out &lt;&lt; s3.arg(ln).arg(on) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待被替换的占位符用<code>%</code>开头，后面借数字。需要注意的是多个占位符需要替换时，需要多次调用<code>args()</code>函数，而非为<code>args()</code>函数传递多个参数。</p><h3 id="子字符串substring">子字符串(Substring)</h3><p>这里涉及<code>left()</code>，<code>mid()</code>，<code>right()</code>三个函数，分别代表从左侧开始的Substring，中间一段的Substring，右侧开始的Substring。见下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QString str = <span class="string">"The night train"</span>;</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; str.right(<span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; str.left(<span class="number">9</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; str.mid(<span class="number">4</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">QString <span class="title">str2</span><span class="params">(<span class="string">"The big apple"</span>)</span></span>;</span><br><span class="line">   <span class="function">QStringRef <span class="title">sub</span><span class="params">(&amp;str2, <span class="number">0</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; sub.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历字符串">遍历字符串</h3><p><code>QString</code>遵循了C++的通常做法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  QString str = <span class="string">"There are many stars."</span>;</span><br><span class="line">  </span><br><span class="line">  foreach (QChar qc, str) &#123;</span><br><span class="line">    out &lt;&lt; qc &lt;&lt; <span class="string">" "</span>;  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (QChar *it=str.begin(); it!=str.end(); ++it) &#123;</span><br><span class="line">    out &lt;&lt; *it &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); ++i) &#123;</span><br><span class="line">    out &lt;&lt; str.at(i) &lt;&lt; <span class="string">" "</span>;    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串比较">字符串比较</h3><p><code>QString::compare()</code>函数用来比较两个字符串。该函数返回一个整型数。如果返回值小于0，那么第一个字符串小于第二个字符串；如果返回0，两个字符串相等；如果返回值大于0，那么第一个字符串大于第二个字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_EQUAL 0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QString a = <span class="string">"Rain"</span>;</span><br><span class="line">   QString b = <span class="string">"rain"</span>;</span><br><span class="line">   QString c = <span class="string">"rain\n"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (QString::compare(a, b) == STR_EQUAL) &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"a, b are equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"a, b are not equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; <span class="string">"In case insensitive comparison:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (QString::compare(a, b, Qt::CaseInsensitive) == STR_EQUAL) &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"a, b are equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"a, b are not equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (QString::compare(b, c) == STR_EQUAL) &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"b, c are equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"b, c are not equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   c.chop(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; <span class="string">"After removing the new line character"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (QString::compare(b, c) == STR_EQUAL) &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"b, c are equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"b, c are not equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>Qt::CaseInsensitive</code>表示无视大小写的比较。</p><h3 id="字符串解析">字符串解析</h3><p>这里指将字符串解析为数字类型。这里涉及<code>toInt()</code>, <code>toFloat()</code>, <code>toLong()</code>等函数。反过来，<code>setNum()</code>函数可以将数字类型转化成字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  QString s1 = <span class="string">"12"</span>;</span><br><span class="line">  QString s2 = <span class="string">"15"</span>;</span><br><span class="line">  QString s3, s4;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; s1.toInt() + s2.toInt() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n1 = <span class="number">30</span>;</span><br><span class="line">  <span class="keyword">int</span> n2 = <span class="number">40</span>;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; s3.setNum(n1) + s4.setNum(n2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符类型">字符类型</h3><p><code>QChar</code>类型可以肥尾数字，祖母，空格以及标点符号，<code>QChar</code>提供了识别这些类型的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line">  <span class="keyword">int</span> digits  = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> letters = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> spaces  = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> puncts  = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  QString str = <span class="string">"7 white, 3 red roses."</span>;</span><br><span class="line">  </span><br><span class="line">  foreach(QChar s, str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.isDigit()) &#123;</span><br><span class="line">      digits++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.isLetter()) &#123;</span><br><span class="line">      letters++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.isSpace()) &#123;</span><br><span class="line">      spaces++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.isPunct()) &#123;</span><br><span class="line">      puncts++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; QString(<span class="string">"There are %1 characters"</span>).arg(str.count()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; QString(<span class="string">"There are %1 letters"</span>).arg(letters) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; QString(<span class="string">"There are %1 digits"</span>).arg(digits) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; QString(<span class="string">"There are %1 spaces"</span>).arg(spaces) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; QString(<span class="string">"There are %1 punctuation characters"</span>).arg(puncts) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改字符串">修改字符串</h3><p>修改字符串的函数可以分为两类，一类返回一个修改后的副本，原字符串保持不变(如<code>toLower()</code>)；另一类是直接原地修改原字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QString str = <span class="string">"Lovely"</span>;</span><br><span class="line">   str.append(<span class="string">" season"</span>);</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   str.remove(<span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line">   out &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   str.replace(<span class="number">7</span>, <span class="number">3</span>, <span class="string">"girl"</span>);</span><br><span class="line">   out &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   str.clear();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (str.isEmpty()) &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"The string is empty"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串对齐">字符串对齐</h3><p>这里指输出格式调整，将输出的内容左对齐(<code>leftJustified()</code>)或者右对齐(<code>rightJustified()</code>)。如下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QString field1 = <span class="string">"Name: "</span>;</span><br><span class="line">   QString field2 = <span class="string">"Occupation: "</span>;</span><br><span class="line">   QString field3 = <span class="string">"Residence: "</span>;</span><br><span class="line">   QString field4 = <span class="string">"Marital status: "</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> width = field4.size();</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; field1.rightJustified(width, <span class="string">' '</span>) &lt;&lt; <span class="string">"Robert\n"</span>;</span><br><span class="line">   out &lt;&lt; field2.rightJustified(width, <span class="string">' '</span>) &lt;&lt; <span class="string">"programmer\n"</span>;</span><br><span class="line">   out &lt;&lt; field3.rightJustified(width, <span class="string">' '</span>) &lt;&lt; <span class="string">"New York\n"</span>;</span><br><span class="line">   out &lt;&lt; field4.rightJustified(width, <span class="string">' '</span>) &lt;&lt; <span class="string">"single\n"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">          Name: Robert</span><br><span class="line">    Occupation: programmer</span><br><span class="line">     Residence: New York</span><br><span class="line">Marital status: single</span><br></pre></td></tr></table></figure><h3 id="escaping">Escaping</h3><p>Qt5 提供了 <code>toHtmlEscapted()</code> 方法，将字符串中涉及的html下特殊的字符，如<code>&lt;, &gt;, &amp;, &quot;</code>等，替换成HTML下的编码。如</p><p>处理文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line"></span><br><span class="line">    for (int i=1; i&lt;=10; i++) &#123;</span><br><span class="line">        printf(&quot;Bottle %d\n&quot;, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html_escape.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">"cprog.c"</span>)</span></span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (!file.open(QIODevice::ReadOnly)) &#123;</span><br><span class="line">        qWarning(<span class="string">"Cannot open file for reading"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">in</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line"></span><br><span class="line">    QString allText = in.readAll();</span><br><span class="line">    out &lt;&lt; allText.toHtmlEscaped() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    file.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./html_escape</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &amp;lt;stdio.h&amp;gt;</span></span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line"></span><br><span class="line">    for (int i=1; i&amp;lt;=10; i++) &#123;</span><br><span class="line">        printf(&amp;quot;Bottle %d\n&amp;quot;, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="date-and-time">Date and Time</h2><p>这个部分还是继续讲 Qt 扩展的数据类型。本次涉及<code>QDate</code>，<code>QTime</code> 和 <code>QDateTime</code> 三个类。</p><p><code>QDate</code> 用于管理格里高利历的日历。<code>QTime</code>处理时钟，<code>QDateTime</code>则是二者的结合。</p><h3 id="初始化-日期时间对象">初始化 日期&amp;时间对象</h3><p>日期和时间对象的初始化有两种基本方法：要么用构造函数直接复制，要么构造一个空的对象后续赋值。参见下面的粒子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDate&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 年 - 月 - 日</span></span><br><span class="line">  <span class="function">QDate <span class="title">dt1</span><span class="params">(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">12</span>)</span></span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"The date is "</span> &lt;&lt; dt1.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  QDate dt2;</span><br><span class="line">  dt2.setDate(<span class="number">2015</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">  out &lt;&lt; <span class="string">"The date is "</span> &lt;&lt; dt2.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 时 - 分 - 秒 - 毫秒</span></span><br><span class="line">  <span class="function">QTime <span class="title">tm1</span><span class="params">(<span class="number">17</span>, <span class="number">30</span>, <span class="number">12</span>, <span class="number">55</span>)</span></span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; tm1.toString(<span class="string">"hh:mm:ss.zzz"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  QTime tm2;</span><br><span class="line">  tm2.setHMS(<span class="number">13</span>, <span class="number">52</span>, <span class="number">45</span>, <span class="number">155</span>);</span><br><span class="line">  out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; tm2.toString(<span class="string">"hh:mm:ss.zzz"</span>) &lt;&lt; <span class="built_in">endl</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="当前时间">当前时间</h3><p>见下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDate&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QDate cd = QDate::currentDate();</span><br><span class="line">   QTime ct = QTime::currentTime();</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; <span class="string">"Current date is: "</span> &lt;&lt; cd.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Current time is: "</span> &lt;&lt; ct.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，源文件不能叫<code>time.cpp</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QDate cd = QDate::currentDate();</span><br></pre></td></tr></table></figure><p>返回的当前的日期。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QTime ct = QTime::currentTime();</span><br></pre></td></tr></table></figure><p>返回当前的时间。<code>toString()</code>函数则将的日期和时间对象转化成字符串。</p><h3 id="比较日期">比较日期</h3><p>关系操作符和用来比较日期（在日历上的位置）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDate&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">QDate <span class="title">dt1</span><span class="params">(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">  <span class="function">QDate <span class="title">dt2</span><span class="params">(<span class="number">2014</span>, <span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (dt1 &lt; dt2) &#123;</span><br><span class="line">    out &lt;&lt; dt1.toString() &lt;&lt; <span class="string">" comes before "</span></span><br><span class="line">      &lt;&lt; dt2.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    out &lt;&lt; dt1.toString() &lt;&lt; <span class="string">" comes after "</span></span><br><span class="line">      &lt;&lt; dt2.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闰年">闰年</h3><p>使用<code>QDate::isLeapYear()</code>函数来判断</p><h3 id="日期时间-格式">日期/时间 格式</h3><h4 id="预定义日期格式">预定义日期格式</h4><p>Qt 有一些内建的日期格式。<code>QDate</code> 的 <code>toString()</code>函数可以接收一个日期格式描述对象作为参数。默认的参数是<code>Qt::TextDate</code>。一些其他的格式见下面的粒子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dateformats.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDate&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QDate cd = QDate::currentDate();</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::TextDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::ISODate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::SystemLocaleShortDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::SystemLocaleLongDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::DefaultLocaleShortDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::DefaultLocaleLongDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::SystemLocaleDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::LocaleDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Today is Sat Oct 31 2015</span><br><span class="line">Today is 2015-10-31</span><br><span class="line">Today is 10/31/15</span><br><span class="line">Today is Saturday, October 31, 2015</span><br><span class="line">Today is 10/31/15</span><br><span class="line">Today is Saturday, October 31, 2015</span><br><span class="line">Today is 10/31/15</span><br><span class="line">Today is 10/31/15</span><br></pre></td></tr></table></figure><h4 id="自定义日期格式">自定义日期格式</h4><p>如下表：</p><p><img src="https://imgs.codewoody.com/uploads/big/ea0c02b56040b78459362caf3e6b191d.png"></p><h4 id="预定义时间格式">预定义时间格式</h4><p>和日期的类似，时钟对象的<code>toString()</code>也接收格式描述对象参数。默认的是<code>Qt::TextDate</code>。其他格式如下例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QTime ct = QTime::currentTime();</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::TextDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::ISODate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::SystemLocaleShortDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::SystemLocaleLongDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::DefaultLocaleShortDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::DefaultLocaleLongDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::SystemLocaleDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::LocaleDate) &lt;&lt; <span class="built_in">endl</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The time is 15:58:26</span><br><span class="line">The time is 15:58:26</span><br><span class="line">The time is 3:58 PM</span><br><span class="line">The time is 3:58:26 PM CET</span><br><span class="line">The time is 3:58 PM</span><br><span class="line">The time is 3:58:26 PM CET</span><br><span class="line">The time is 3:58 PM</span><br><span class="line">The time is 3:58 PM</span><br></pre></td></tr></table></figure><h4 id="自定义时间格式">自定义时间格式</h4><p><img src="https://imgs.codewoody.com/uploads/big/cd840ad4822bc2779c19877df931bcf5.png"></p><h3 id="其他工具函数">其他工具函数</h3><ul><li><code>daysOfWeek()</code>: 周几，1表示周一，7表示周日；</li><li><code>daysInMonth()</code>: 在月中的第几天；</li><li><code>daysInYear():</code>: 在年中的第几天；</li><li><code>isValid()</code>: 验证日期是否有效；</li><li><code>daysTo()</code>，<code>daysFrom</code>：计算日期的间距；</li></ul><h3 id="qdatetime类"><code>QDateTime</code>类</h3><p><code>QDateTime</code>类是日期和时间的组合，其接口也非常类似。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我参考&lt;a href=&quot;http://zetcode.com/gui/qt5/introduction/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://zetcode.com/gui/qt5/introduction/&lt;/a&gt;这个链接入坑，使用macOS。网上看起来是Windows和Linux的教程居多，这个链接里的教程初看起来应该也是基于Linux的。谁让Mac的市场占有率低呢。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://www.codewoody.com/tags/C/"/>
    
      <category term="Qt" scheme="http://www.codewoody.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks 完全手册</title>
    <link href="http://www.codewoody.com/posts/36409/"/>
    <id>http://www.codewoody.com/posts/36409/</id>
    <published>2019-09-16T05:07:02.000Z</published>
    <updated>2019-09-16T05:49:01.289Z</updated>
    
    <content type="html"><![CDATA[<p>目前我的博客里面还是Shadowsocks相关的文章看的人最多，所以我这里干脆汇总整理一下。</p><h2 id="什么是shadowsocks">什么是Shadowsocks</h2><p>Shadowsocks 据传早期是由一名知乎员工(clowwwindy)开发，从一开始就是不属于任何公司的开源软件。不过在Shadowsocks广为流行之后，这名员工被有关部门请去喝茶，其本人Github名下的Shadowsocks代码仓库也被清空，只留下内容为「Removed due to regulations」。不过 Shadowsocks 的代码被很多人Fork，所以Shadowsocks的活力并未受到影响。</p><p>后来Shadowsocks又被开发者（breakwa11）发展成ShadowsocksR，加了很多加密、流量混淆插件，比原版更安全、更稳定、更快速。不过这名作者随后被人肉，代码被迫删除。</p><p>Shadowsocks 为一种<strong>代理</strong>软件。对于软件工程不熟悉的人，通常会混淆<strong>代理</strong>与<strong>VPN</strong>二者的概念，网络上有很多文章来讲解这二者的区别。按照「<a href="https://www.howtogeek.com/247190/whats-the-difference-between-a-vpn-and-a-proxy/" target="_blank" rel="noopener">What’s the Difference Between a VPN and a Proxy?</a>」这篇文章的说法，代理的作用为隐藏你的真实IP，让你以服务器的IP的身份来访问站点。不过代理的链接并不一定保证加密。另外，代理的实现层级比较高，一般的应用程序需要主动连接代理才会进行访问。而VPN的核心特点链接加密。且VPN的实现层级比较低，可以全局起效果。</p><h2 id="shadowsocks部署">Shadowsocks部署</h2><h3 id="海外服务器">海外服务器</h3><p>任何翻墙技术的本质都是将网络流量发送给一台位于中国大陆防火墙之外的服务器，由服务器访问目标网站再把响应数据发送给客户端。因此，一台海外服务器是必须的。目前云计算技术成熟，租赁一台海外的虚拟服务器的唯一困难，基本就是你需要一张VISA信用卡来支付美元。没有VISA，PayPal应该也是可以的，PayPal可以绑定借记卡。</p><p>有非常多的厂商提供虚拟服务器租赁服务，这个可以按照价格和服务器的地理位置，根据自己的需要选择。我自己选择的是DigitalOcean位于洛杉矶的机房。Ping的延时大概在200ms以内。另外还需要补充的是，对于校园网用户，国内的校园网大多支持Ipv6且Ipv6部分的流量是不计费的。因此在租赁服务器时选择支持Ipv6的机器就非常重要了。</p><p>Shadowsocks服务对于服务器的性能要求不高，因此一般选择最便宜的一档就可以了，例如DigitalOcean最便宜的一档是1GB内存，单核CPU，25GB SSD磁盘，1 TB流量，价格5美元/月，并且支持Ipv6。</p><h3 id="shadowsocks服务端安装">Shadowsocks服务端安装</h3><p>Shadowsocks 发展到今日已经是相当成熟的大众产品了，有众多安装方法可供选择。这里我选择了<a href="https://teddysun.com/" target="_blank" rel="noopener">teddysun</a>开发的一键安装脚本系列。</p><blockquote><p>teddysun 的脚本在广为流行之后，也开始面临了当局的压力，放弃了更新，并且删除了教程文章。Shadowsocks发展到今天，真是有很多人付出心血的结果。</p></blockquote><p>teddysun本人的Github项目仓库的代码在master分支上还有保留，故方便使用。</p><p>一般情况下，我们使用<code>shadowsocks-all.sh</code>脚本就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前我的博客里面还是Shadowsocks相关的文章看的人最多，所以我这里干脆汇总整理一下。&lt;/p&gt;
&lt;h2 id=&quot;什么是shadowsocks&quot;&gt;什么是Shadowsocks&lt;/h2&gt;
&lt;p&gt;Shadowsocks 据传早期是由一名知乎员工(clowwwindy)开发，
      
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Shadowsocks" scheme="http://www.codewoody.com/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-13</title>
    <link href="http://www.codewoody.com/posts/8301/"/>
    <id>http://www.codewoody.com/posts/8301/</id>
    <published>2019-09-16T03:25:59.000Z</published>
    <updated>2019-09-23T03:34:06.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="格力集团欲400亿卖掉格力电器"><a href="https://www.zhihu.com/question/319348233" target="_blank" rel="noopener">格力集团欲400亿卖掉格力电器</a></h3><p>观察者网【格力集团欲400亿“卖掉”格力电器 富士康或接盘】 格力电器控股权从1991年成立以来一直属于珠海市国资委旗下格力集团。但在4月8日，格力集团拟通过公开征集受让方的方式协议转让格力集团持有的格力电器总股本15%的股票。本次转让完成后，公司控股股东和实际控制人可能将发生变更。</p><p>一名珠海国资人士透露，近来富士康科技集团在珠海进行了大规模投资，有可能成为潜在的接盘方。</p><h3 id="电影杀人回忆的故事原型真凶疑似被发现"><a href="https://www.zhihu.com/question/346644375" target="_blank" rel="noopener">电影《杀人回忆》的故事原型真凶疑似被发现</a></h3><p><img src="https://imgs.codewoody.com/uploads/big/86cfe07d183298dcca59d16a7ba3de63.jpeg" style="width: 50%"></p><p>不过按键已经超过了韩国刑法规定的追诉时效，嫌疑人无法被提起公诉并定罪。</p><blockquote><p>按照韩国的法律规定，2007年之前发生的案件的公诉时效是15年，因为这是同一个犯罪嫌疑人连续杀人，公诉期按照最后一个案件的发生日期来计算 -- 可惜最后一个杀人案是在1991年4月23日发生的，到现在已经28年，已经过了公诉时效，也就是说从法律上不能再对犯罪人处以刑罚了。</p></blockquote><h3 id="中美关系">中美关系</h3><ul><li>中央财办副主任、财政部副部长廖岷拟于<a href="https://news.ifeng.com/c/7q2LkwSwKvo" target="_blank" rel="noopener">本周三率团访美</a>，与美方就中美经贸问题进行磋商，为10月份在华盛顿举行的第十三轮中美经贸高级别磋商做准备。</li></ul><h3 id="香港后续">香港后续</h3><ul><li><a href="https://www.dw.com/zh/时局动荡-穆迪将香港信用评级展望调至-负面/a-50449907?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">穆迪调低香港信用评级展望至负面</a>。</li><li>美国众议院院长佩洛西 (Nancy Pelosi) 9月18日在华府<a href="https://www.dw.com/zh/佩洛西见香港倡议人士%20中前官员对港发出警告/a-50489299?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">接见黄之锋与何韵诗等数名香港倡议人士</a>，并藉此向中国政府喊话，表示美国国会基于人权，支持香港「反送中」示威的运动者。</li></ul><h3 id="关于台湾的若干消息">关于台湾的若干消息</h3><h4 id="大陆20个城市恢复金马澎个人游"><a href="https://news.ifeng.com/c/7q1RRCtC4YW" target="_blank" rel="noopener">大陆20个城市恢复金马澎个人游</a></h4><p>金门县政府稍早宣布，大陆出入境管理部门公告，自本月20日起恢复受理金门、马祖、澎湖“小三通”个人旅游签注申请，“对长期仰赖‘小三通’的金门观光产业，无疑是一剂强心针，昔日陆客穿梭大街小巷的荣景，将可望再现。”相当于福建省、浙江省、江西省与广东省等20个城市，自20日起可循“小三通”到金门、马祖与澎湖个人游。</p><p>在台湾这几个地方也是归于中华民国福建省管辖的。</p><h4 id="所罗门群岛和台湾断交">所罗门群岛和台湾断交</h4><p><img src="https://imgs.codewoody.com/uploads/big/743a97d06c038821e0c7c1691a0d400b.png"></p><p>台湾“中央社”16日下午发布消息称，所罗门群岛总理梅纳西·索加瓦雷16日召开内阁会议，决定中断与台湾的关系，与中国大陆建交。随后，台外事部门召开记者会证实这一消息，并称台当局与所罗门群岛“断交”。</p><p>目前台湾所谓“友邦”数量降至16个。</p><p><img src="https://imgs.codewoody.com/uploads/big/a861e850f77376cdf288f69586949cf0.jpg"></p><h4 id="基里巴斯和台湾断交"><a href="http://www.chinaqw.com/hqhr/2019/09-20/232095.shtml" target="_blank" rel="noopener">基里巴斯和台湾断交</a></h4><p>20日的消息，太平洋岛国基里巴斯与台湾断交</p><h4 id="郭台铭与柯文哲相继宣布不参加2020选举"><a href="https://news.ifeng.com/c/7q2MGfzEpzk" target="_blank" rel="noopener">郭台铭与柯文哲相继宣布不参加2020选举</a></h4><p>鸿海集团前董事长郭台铭16日深夜宣布不参加2020年台湾地区领导人连署登记，先前与郭台铭达成参选默契的台北市长柯文哲将如何回应？会不会自己跳出来参选？今早近九点，柯文哲在市政会议前接受媒体联访，导报驻台记者获悉，柯文哲也宣布不选2020。</p><p>于此同时，民进党前副总统<a href="https://www.dw.com/zh/郭台铭不选总统-韩国瑜盼见面/a-50453416?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">吕秀莲宣布参选</a>。</p><h3 id="其他新闻">其他新闻</h3><ul><li><a href="https://cn.reuters.com/article/sa-drone-iran-attack-evidence-0919-idCNKBS1W403H?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">沙特展示油田袭击为伊朗所为的证据</a></li><li><a href="https://www.zhihu.com/question/346762535/answer/829159422" target="_blank" rel="noopener">9月19日 华为在德国发布Mate 30系列</a></li><li><a href="https://www.zhihu.com/question/346772743" target="_blank" rel="noopener">9月19日 李荣浩和杨丞琳宣布结婚</a></li></ul><h2 id="资源">资源</h2><ul><li><a href="http://zetcode.com/gui/pyqt5/" target="_blank" rel="noopener">PyQt5 tutorial</a></li><li><a href="http://www.todayonhistory.com" target="_blank" rel="noopener">历史上的今天</a></li><li><a href="https://www.appinn.com/100000-ai-faces/" target="_blank" rel="noopener">10万张不哟啊肖像权的人脸照片</a></li><li><a href="https://fullstackopen.com/en/" target="_blank" rel="noopener">现代web开发</a></li><li><a href="https://www.wiz.cn/zh-cn/docker" target="_blank" rel="noopener">为知笔记发布Docker服务端</a></li></ul><h2 id="言论">言论</h2><ul><li><p>信息的商业模式，不应该是收费，而是应该鼓励更多的人消费它。</p></li><li><p>当你遇到需要同时获取多个子组件数据，或者两个组件之间需要相互通讯的情况时，需要把子组件的 state 数据提升至其共同的父组件当中保存。之后父组件可以通过 props 将状态数据传递到子组件当中。这样应用当中所有组件的状态数据就能够更方便地同步共享了。 -- <a href="https://zh-hans.reactjs.org/tutorial/tutorial.html#lifting-state-up" target="_blank" rel="noopener">React 官方教程</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/9accee2f5e4d12ebbf9ca17cf289bf96.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-12</title>
    <link href="http://www.codewoody.com/posts/57516/"/>
    <id>http://www.codewoody.com/posts/57516/</id>
    <published>2019-09-09T02:09:30.000Z</published>
    <updated>2019-09-21T06:21:49.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="brexit与欧盟atad法案">Brexit与欧盟ATAD法案</h3><p>读王孟源的文章，总是能让人获得新的观察问题的视角。在他最新的<a href="http://blog.udn.com/MengyuanWang/129262086" target="_blank" rel="noopener">《【英國】談Brexit》</a>一文中，王孟源就提到了英国脱欧同欧盟将要实施的反避税指令ATAD(Anti Tax Avoidance Directive)有关。简而言之，应该这种老牌资本主义国家的土豪有着各种各样的避税法门，这在英国尤其「严重」。英国历代议会收到这些土豪的掣肘严重，一直无法解决这一问题。不过欧盟内福利国家多，避税传统没有英国强，且各国地方土豪，对于布鲁塞尔的欧盟官僚影响力要更弱。因此欧盟得以整合力量来解决这些土豪避税的问题。但是ATAD无疑是动了英国土豪的命根子。一个端倪是前几年ATAD刚刚开始立法过程，Brexit忽然就成为英国政坛的主流。由于ATAD预定在2020年1月1日正式生效<span class="foot-note-span">【Member States will have until 1 January 2020 to transpose the Directive into national laws and regulations(<a href="https://www.ey.com/gl/en/services/tax/international-tax/alert--eu-council-adopts-directive-atad-2-to-address-hybrid-mismatches-with-third-countries" target="_blank" rel="noopener">来源</a>)】</span>，预计脱欧势力必然会在这个时间节点之前尽一切努力达成无协议脱欧。</p><p>相反，如果无法在2020年1月1日ATAD开始实施之前完成脱欧，脱欧派的立场可能会软化，转而追求软脱欧甚至是重新公投。</p><h3 id="苹果发布新iphone及其他新品"><a href="https://www.zhihu.com/pin/1154851195238612992" target="_blank" rel="noopener">苹果发布新iPhone及其他新品</a></h3><p><img src="https://imgs.codewoody.com/uploads/big/cc90e51a3b1e9d909761ac9d2b51e171.png"></p><p>今天(11日)凌晨，苹果在 Steve Jobs Theater 召开了一年一度的秋季发布会，发布了 iPhone 11、iPhone 11 Pro、iPhone 11 Pro Max、新一代 Apple Watch 以及全新的 10.2 英寸入门款 iPad。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/eEJJt5PoLhY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="马云正式宣布不再担任阿里巴巴董事局主席"><a href="https://www.zhihu.com/question/345303992" target="_blank" rel="noopener">马云正式宣布不再担任阿里巴巴董事局主席</a></h3><p>9月10日教师节，阿里巴巴创办人、「乡村教师」马云将正式卸任董事局主席一职，而今日也正是阿里巴巴集团创办20周年整，马云昨日亲身到访阿里巴巴位于杭州的总部滨江园区，向同事道别。根据内地媒体报道，马云所到之处人山人海、水泄不通，而他最后一日工作因提早下班，故此没有本月全勤奖。</p><p><img src="https://imgs.codewoody.com/uploads/big/dfe2f570ff16c40f8cd777a62edbace3.jpeg"></p><h3 id="沙特两处石油设施遭到无人机袭击"><a href="https://www.bbc.com/zhongwen/simp/world-49691790" target="_blank" rel="noopener">沙特两处石油设施遭到无人机袭击</a></h3><p>也门胡赛武装宣布对此次事件负责，称其动用10架无人机进行袭击。不过美国国务卿蓬佩奥指责伊朗在幕后主使。而伊朗则指责美国说谎。沙特没有透露石油设施遭到攻击的细节，只说没有人员伤亡，但表示石油产能受到影响。沙特能源部长阿卜杜勒阿齐兹亲王表示，受影响减少的产能(约500万桶，约占全球产能5%)，其中一部分将有庞大的石油储备替代。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">....sufficient to keep the markets well-supplied. I have also informed all appropriate agencies to expedite approvals of the oil pipelines currently in the permitting process in Texas and various other States.</p>— Donald J. Trump (@realDonaldTrump) <a href="https://twitter.com/realDonaldTrump/status/1173354645642764289?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 15, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>对于原油市场而言，这是有史以来最严重的供应突然中断，规模超过了1990年8月萨达姆突然入侵科威特时的水平。根据美国能源部数据，此次供应减量规模也超出了1979年伊朗伊斯兰革命时的水平。周六针对沙特的袭击致使原油市场周一开盘出现了剧烈震荡，9月16日，受沙特油田事故影响，美原油开盘跳涨约15%，达5月以来的最高点，布伦特原油开盘暴涨，涨幅一度扩大至19%，为1988年期货开始交易以来美元计价最大涨幅。</p><p><img src="https://imgs.codewoody.com/uploads/big/1b0a1abdf7808058932d26e76dacee47.png"></p><h3 id="香港后续">香港后续</h3><p>本周香港的暴力冲突仍然在继续。不过，除了陆续警民冲突之外，民众之间的互相攻击开始增加。</p><ul><li><a href="https://www.dw.com/zh/黄之锋飞抵柏林-将香港比作「冷战时的德国」/a-50345270?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">黄之锋到达德国</a>，周一顺利如期出席德国媒体于首都柏林举办的活动。</li><li><a href="https://www.dw.com/zh/德国外长会见黄之锋-引发中德口水仗/a-50345270?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">德国外长会见黄之锋</a></li><li><a href="https://www.dw.com/zh/出价近300亿-香港证交所向伦敦提出-世纪婚约/a-50387535?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">港交所发布公告，已经正式向伦敦交易所提出合并要约。</a>，不过伦敦交易所<a href="https://www.dw.com/zh/伦敦拒绝香港证交所的-世纪婚约/a-50387535?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">拒绝了</a>。</li></ul><h3 id="其他新闻">其他新闻</h3><ul><li><a href="https://www.zhihu.com/question/344732424" target="_blank" rel="noopener">迪士尼宣布允许游客带自用食品进入园区</a></li><li><a href="https://www.thepaper.cn/newsDetail_forward_4367227" target="_blank" rel="noopener">印度「月船 2 号」登陆月球失败</a>，在距离月球表面2.1公里处失联。</li><li><a href="http://www.customs.gov.cn/customs/xwfb34/302425/2586202/index.html" target="_blank" rel="noopener">8月 中国出口同步减少1%</a></li><li><a href="https://www.theguardian.com/business/2019/sep/08/boeing-777x-test-halted-after-reports-of-cargo-door-failure" target="_blank" rel="noopener">波音暂停新机型 777X测试</a>: 在进行地面高压应力测试时，波音 777X 的测试机的一扇货舱门向外爆炸，目前，777X 的联邦航空管理局（FAA）认证测试已被暂停。</li><li><a href="https://www.dw.com/zh/英国国会-关门-强制休会期启动/a-50356111?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">9月9日 英国国会强制休会期启动</a>，此论休会将延续到10月14日。</li><li><a href="https://cn.reuters.com/article/britain-scotland-court-boris-johnson-091-idCNKCS1VW199?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">9月11日 苏格兰法院裁定首相约翰逊让议会休会五周不合法</a></li><li><a href="http://world.huanqiu.com/photo/2019-09/2945219.html?agt=15422" target="_blank" rel="noopener">特朗普开除国家安全事务助理博尔顿</a></li><li><a href="https://www.dw.com/zh/媒体：所罗门政府讨论与台湾断交/a-50420457?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">所罗门群岛可能与台湾断交，赶在十一前和大陆建交</a></li><li><a href="https://cn.reuters.com/article/taiwan-politics-0912-thur-idCNKCS1VX07M?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">郭台铭退出国民党，参选在即</a></li><li><a href="https://www.zhihu.com/question/346155012" target="_blank" rel="noopener">西班牙 95:75 战胜阿根廷夺得男篮世界杯冠军</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/7dddde33ffaa44d9cd474e774983497c.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>正则匹配的一些研究</title>
    <link href="http://www.codewoody.com/posts/30513/"/>
    <id>http://www.codewoody.com/posts/30513/</id>
    <published>2019-09-03T03:50:50.000Z</published>
    <updated>2019-09-03T04:05:06.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元字符和语法">元字符和语法</h2><figure><img src="https://imgs.codewoody.com/uploads/big/dccd456ebd9bc0d9f05205583de18634.png" alt="Python支持正则表达式元字符和语法"><figcaption>Python支持正则表达式元字符和语法</figcaption></figure><h2 id="模式研究">模式研究</h2><h3 id="浮点数匹配">浮点数匹配</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r'-?(\d+(?:\.\d+)?(?:e-?\d+)?)'</span></span><br></pre></td></tr></table></figure><p>这个模式能够匹配所有的数字模式，包括正负数，科学计数法模式。这里注意一下<code>(?:)</code>这个模式，代表这个括号标出的元组不参与编号，在输 输出的结果中也不会单列出来。</p><h3 id="汉字">汉字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r'^[\u4e00-\u9fa5]&#123;0,&#125;$ '</span></span><br></pre></td></tr></table></figure><h3 id="邮箱">邮箱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r'^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$ '</span></span><br></pre></td></tr></table></figure><h3 id="手机号码">手机号码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r'^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$'</span></span><br></pre></td></tr></table></figure><h2 id="更多阅读">更多阅读</h2><ul><li><a href="https://blog.csdn.net/dengjianqiang2011/article/details/78726570" target="_blank" rel="noopener">常用的正则表达式知识点与常见的正则匹配模式</a></li><li><a href="https://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html" target="_blank" rel="noopener">Python正则表达式指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;元字符和语法&quot;&gt;元字符和语法&lt;/h2&gt;
&lt;figure&gt;
&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/dccd456ebd9bc0d9f05205583de18634.png&quot; alt=&quot;Python支持正则表
      
    
    </summary>
    
      <category term="编程研究" scheme="http://www.codewoody.com/categories/%E7%BC%96%E7%A8%8B%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="折腾" scheme="http://www.codewoody.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-11</title>
    <link href="http://www.codewoody.com/posts/57836/"/>
    <id>http://www.codewoody.com/posts/57836/</id>
    <published>2019-09-02T04:49:31.000Z</published>
    <updated>2019-09-16T03:16:39.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="林郑月娥宣布正式撤回逃犯条例草案"><a href="https://www.dw.com/zh/林郑月娥：正式撤回《逃犯条例》草案/a-50280633?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">林郑月娥宣布正式撤回《逃犯条例》草案</a></h3><p>9月4日当地时间下午，香港特首林郑月娥发表电视讲话：“宣布正式撤回逃犯修订条列草案，“以完全释除市民的疑虑”。</p><p>她在讲话中承诺保安局局长会在立法会复会后，按《议事规则》动议撤回条例草案。</p><p>这位香港特首还表示：这两个多月发生的事，令每一个香港人都感到震惊和伤心，亦令大家对香港感到焦虑和痛心，大家都希望可以尽快走出目前的困局。她作为行政长官，有责任尽一切努力，在种种局限下寻找社会向前行的机会。</p><p>...</p><p>她表示，经过两个多月因修例工作引起的冲突，大家都意识到，眼前的矛盾是反映了长期积压的政治、经济和社会问题，例如房屋和土地供应、贫富悬殊、社会公义、青年人的机遇，以至公众参与决策等。她指，持续出现的暴力正动摇香港法治的根基，极少数人挑战“一国两制”，冲击中央政府驻港机构，污损国旗、国徽，将香港推向危险的境地。无论市民对政府或对社会现况有多大不满，暴力绝对不是解决问题的方法。目前，最迫切的就是要遏止暴力、捍卫法治、重建社会秩序。<strong>政府会对所有违法及暴力行为，严正执法</strong>。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/tNvzooU-wr0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>讲话伊始，这位香港特首表示，逃犯条例修订引起的示威冲突持续两个多月，对很多香港人来说，这城市变得很陌生：&quot;道路和隧道突然被堵塞，旅客担心香港还是否安全，不愿来港旅游和经商……大家都很焦急，希望可以尽快走出目前的困局。&quot;</p><p>接着她逐一回应了&quot;五大诉求&quot;：&quot;有关撤回条例草案，我在5月15日已经宣布暂缓条例草案，之后亦表明，修例工作已经完全停止，修例草案明年7月便会自动失效。&quot;</p><p>她接着提到第二点，成立独立调查委员，表示香港政府认为有关警方执法行动，应该按既定机制，交由专责的独立监警会处理，而不应该另设独立调查委员会。监警会除了处理有关警方的投诉，亦正按照其法定职权，详细审视6月9日开始发生的一连串大型公众活动，评估警方的处理。元朗袭击事件就是重点之一。调查报告的内容和建议都会公开。</p><p>关于第三点示威活动定性，这位香港特首强调已多次重申：法律程序上不存在&quot;暴动定性&quot;：&quot;律政司指出，每宗案件的刑事检控决定，都是按照证据、法律、按照《检控守则》作出。&quot;至于第四点，要求释放所有被捕人士，不检控、不追究违法的人：&quot;这些要求是法治社会所不能接受。&quot;林郑接着补充说：&quot;根据《基本法》，律政司的刑事检控决定，必须不受任何干涉，否则有违香港的法治精神。&quot;</p><p>最后有关双普选，她指出，这是《基本法》订下的最终目标：&quot;要实现这个目标，社会需要在法理的基础上，在平和及互信的氛围下，以务实的态度进行讨论，否则只会令社会更加撕裂。&quot;</p><blockquote><p>当日晚大陆这边的媒体风平浪静，新浪的网站倒是有报道，但是很快就404了。</p><p>5日各个大陆各个主流媒体开始报道</p></blockquote><p>本周香港的一些其他新闻：</p><ul><li><a href="https://www.dw.com/zh/立陶宛外交部召见中国大使-指责干扰示威/a-50261568?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">本周一，立陶宛外交部召见了中国驻立陶宛大使。</a>立陶宛方面指责中国使馆工作人员干涉了8月23日在首都维尔纽斯举行的支持香港民主的示威集会。</li><li><a href="https://www.dw.com/zh/學子罢课各界罢工-限港府兩週回應/a-50255049?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">香港示威者在9月2日發起第二回「三罷」行動，並且會持續更久</a>。</li><li><a href="https://www.rfa.org/cantonese/news/htm/hk-lam-09022019131527.html" target="_blank" rel="noopener">路透社流出一段林郑月娥在非公开场合的录音，包含“如果有选择，我第一件事就是辞职，并深刻道歉”这样的内容</a>。林郑后续回应：<a href="https://news.ifeng.com/c/7pfAOrKymxs" target="_blank" rel="noopener">我从未向中央提过辞职</a>。</li><li><a href="https://news.ifeng.com/c/7pf4ElgFwDg" target="_blank" rel="noopener">黄之锋活保释，今明赴台</a>。</li><li><a href="https://cn.reuters.com/article/xinhua-fedex-hk-knife-0903-idCNKCS1VO15Z?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">联邦快递涉嫌非法收寄寄往香港的管制刀具</a>，涉案物品已被中国有关部门暂扣，相关调查正在进行之中。之前联邦快递分别在<a href="https://cn.reuters.com/article/us-fedex-china-fujian-gun-package-0818-idCNKCS1V80CP?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">中国大陆</a>和<a href="http://news.dwnews.com/hongkong/news/2019-08-20/60145944.html" target="_blank" rel="noopener">香港</a>都被发现寄送强制。</li><li><a href="https://www.dw.com/zh/林郑月娥传将撤回《逃犯条例》草案/a-50280633?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">传言林郑将撤回《逃犯条例》</a></li><li><a href="https://www.dw.com/zh/国泰-地震-再有高层离职/a-50284567?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">国泰航空董事局主席史乐山辞任。</a></li><li><a href="https://news.ifeng.com/c/7piIiQQ1oG0" target="_blank" rel="noopener">9月5日，黎智英寓所被投掷汽油弹</a></li><li><a href="https://www.youtube.com/watch?v=RAKuP3SgXIs" target="_blank" rel="noopener">香港部分警员受邀参加国庆庆典</a></li><li><a href="https://www.dw.com/zh/惠誉降低香港评级-金融重镇前景堪忧/a-50326868?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">惠誉(Fitch Ratings)降低香港评级</a>，理由是机构认为，尽管“一国两制”框架预计保持完好，但香港进一步融入中国治理体系将带来更大挑战。</li><li><a href="https://news.ifeng.com/c/7pleNWqpHEn" target="_blank" rel="noopener">在林郑宣布撤回《逃犯条例》以后，香港的示威运动仍未停止。9月6日晚有示威者强闯港铁太子站，破坏站内设施；另有一批示威者围堵警署、阻碍交通，期间有示威者破坏交通设施，甚至在街头多处纵火。</a></li></ul><h3 id="国泰航空发现飞机氧气瓶被排气"><a href="http://m.ce.cn/sh/sgg/201908/31/t20190831_33058881.shtml" target="_blank" rel="noopener">国泰航空发现飞机氧气瓶被排气</a></h3><p><img src="https://imgs.codewoody.com/uploads/big/b16e5756f50f1d2b2f013498f1f594eb.png"></p><p>据香港《南华早报》消息，30日，又有一架香港国泰航空客机的氧气瓶遭排气放空，这是继27日后第三架陷入“氧气被排空”风波客机。处在舆风口浪尖的国泰航空再曝丑闻，引发外界广泛质疑。</p><p>香港《南华早报》31日报道称，30日，国泰航空A330 B-LBI客机在起飞前例行检查时发现氧气瓶遭排空。该客机前一天晚上由巴厘岛飞抵香港，航空检查显示所有氧气瓶均正常，但第二天起飞前往吉隆坡前检查时发现，其中一个氧气瓶遭排空。A330客机上共有16个氧气瓶，被排气放空的是左手边第一个门上的氧气瓶。</p><p>事发后，国泰航空发言人表示非常重视该事件，已成立内部调查委员会，并向香港民航处和警方通报了事件，强调事关安全不容妥协。“在任何情况下，机组人员和乘客的安全都不会受到影响。</p><blockquote><p>国泰在本轮香港运动浪潮中由于支持示威者一边，早到大陆方面的打压。继之前两名高管辞职之后，本周<a href="https://www.dw.com/zh/%E5%9B%BD%E6%B3%B0-%E5%9C%B0%E9%9C%87-%E5%86%8D%E6%9C%89%E9%AB%98%E5%B1%82%E7%A6%BB%E8%81%8C/a-50284567?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">国泰航空董事局主席史乐山辞任</a>。</p></blockquote><h3 id="猪肉价格大涨"><a href="https://news.ifeng.com/c/7peWq3UGCFq" target="_blank" rel="noopener">猪肉价格大涨</a></h3><p>8月的第二周，猪肉价格同比上涨了46.8%，部分地区出厂价格就达到32.61元/每公斤高位；生猪存栏量却同比下降32%，创下20年来的最低水平。</p><p><img src="https://imgs.codewoody.com/uploads/big/d785574de154a3db84cc6e7d441806e1.jpeg"></p><p>8月30日，国务院副总理胡春华召开了全国稳定生猪生产和猪肉保供稳价电视电话会议，要求采取切实措施解决群众吃肉问题。 可以说，这次猪价波动，直接原因和非洲猪瘟影响有关，但深层次的原因可能更为复杂，它涉及到农业生产经营方式、环保、土地等综合因素。</p><h3 id="北洋舰队旗舰定远舰找到了"><a href="https://news.ifeng.com/c/7pe610pt2Yq" target="_blank" rel="noopener">北洋舰队旗舰定远舰找到了</a></h3><p>9月2日报道，“威海湾一号甲午沉舰遗址保护区域划定论证会”当天在山东威海刘公岛上举行。经专家论证，历经两个月的水下考古调查，现已基本确认清代北洋海军旗舰“定远舰”的沉灭位置，并出水一批沉舰遗物，这是2014年以来北洋甲午沉舰系列调查与研究工作的又一重大成果。</p><p><img src="https://imgs.codewoody.com/uploads/big/644a6711cbad08a02c08be1424cc96e9.jpeg"></p><h3 id="弄丢共享单车被告企业索赔2.55万"><a href="https://www.williamlong.info/archives/5816.html" target="_blank" rel="noopener">弄丢共享单车被告，企业索赔2.55万</a></h3><p>2018年5月18日，福建泉州的刘先生借了一辆共享单车，因未正确归还导致车辆丢失。2019年7月31日，共享单车运营公司起诉刘先生，要求支付2.55万元租车费。8月24日，刘先生主动赔偿车辆遗失费用1800元后，双方和解，公司已向法院申请撤诉。</p><h3 id="北斗卫星的数量超过gps"><a href="http://www.sohu.com/a/335544302_759851" target="_blank" rel="noopener">北斗卫星的数量超过GPS</a></h3><p><img src="https://imgs.codewoody.com/uploads/big/21c9fec9eb982e0619a5279f5d3667fd.jpg"></p><p>2018年，中国发射了18颗北斗导航卫星。目前，一共有35颗北斗卫星在运行，而美国的 GPS 卫星只有31颗，欧盟的伽利略系统22颗，俄罗斯的 GLONASS 系统24颗。另外，日本（4颗）和印度（6颗）的系统只限于本国可用。</p><p>全世界195个国家和地区中的130个（多是一带一路沿线国家），接收到的北斗卫星要多于 GPS 卫星。这使得在这些国家，使用北斗定位会信号更强，定位更快速。上图中，深蓝的区域是北斗占优，红色的区域是 GPS 占优。下图是主要国家的北斗和 GPS 的对比。</p><p><img src="https://imgs.codewoody.com/uploads/big/38014c790c19edf9f546c2ae1109a41b.jpg"></p><h3 id="执政37年的津巴布韦前总统穆加贝去世"><a href="https://www.dw.com/zh/执政37年-津巴布韦前总统穆加贝去世/a-50323460?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">执政37年的津巴布韦前总统穆加贝去世</a></h3><p>前津巴布韦长年总统罗伯特·穆加贝（Robert Mugabe）逝世，终年95岁。这是该国现总统埃默森·姆南加古瓦（Emmerson Mnangagwa）通过推特宣布的。今年4月起，穆加贝一直在新加坡一家医院接受治疗。</p><figure><img src="https://imgs.codewoody.com/uploads/big/a684b2467f7c50d76469a21dde6bbaf6.jpg" alt="穆加贝"><figcaption>穆加贝</figcaption></figure><h3 id="中美关系">中美关系</h3><ul><li><a href="https://www.dw.com/zh/美国波兰签5g合作协议/a-50261559?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">美国和波兰周一签署了5G技术合作的协议</a>。</li><li><a href="https://news.ifeng.com/c/7pe67ONumO0" target="_blank" rel="noopener">美对3000亿美元中国产品加税 中国向WTO起诉</a>: 9月1日，美国对华3000亿美元输美产品中第一批加征15%关税措施正式实施，我就此在世贸组织争端解决机制下提起诉讼。美方的征税措施严重违背中美两国元首大阪会晤共识，中方强烈不满和坚决反对。中方将根据世贸组织相关规则，坚定维护自身合法权益，坚决捍卫多边贸易体系和国际贸易秩序。</li><li><a href="https://www.dw.com/zh/中国、墨西哥倾销预制结构钢-美将加征新关税/a-50293411?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">美国初步认定中国有补贴与倾销嫌疑，宣布将对其出口的「预制结构钢」课征关税。</a></li><li><a href="https://news.ifeng.com/c/7piQewRc3Zw" target="_blank" rel="noopener">中美经贸高级别磋商双方牵头人通话：10月初举行第十三轮磋商</a>: 9月5日上午，中共中央政治局委员、国务院副总理、中美全面经济对话中方牵头人刘鹤应约与美国贸易代表莱特希泽、财政部长姆努钦通话。商务部部长钟山、中国人民银行行长易纲、国家发改委副主任宁吉喆等参加通话。</li></ul><h3 id="科技新闻">科技新闻</h3><h4 id="罗技推出-mx-master-3-鼠标和-mx-keys-无线键盘"><a href="https://blog.logitech.com/2019/09/03/logitech-re-invents-its-wheel-to-deliver-the-ultimate-experience-for-productivity/" target="_blank" rel="noopener">罗技推出 MX Master 3 鼠标和 MX Keys 无线键盘</a></h4><p><img src="https://imgs.codewoody.com/uploads/big/4b6164584080f6f297a3bf08eff3d928.png"></p><p>9 月 4 日，罗技推出了 MX Master 系列的最新一代产品 MX Master 3。新款采用 USB-C 接口，并使用新的电磁系统取代了机械滚轮，滑动更加顺滑静音。罗技微调了拇指按键和第二滚轮的设计，前进 / 后退按钮从轮后移到了下方。MX Master 3 沿用了 4000 DPI 的传感器，支持蓝牙或罗技 Unifying USB 接收器，电池续航约为 70 天。</p><p>另外罗技还同步推出了新款 MX Keys 无线键盘，功能类似 Craft Keyboard，支持背光，但取消了滚轮设计。MX Keys 支持通过 USB-C、蓝牙和罗技 Unifying 接收器连接，兼容 Windows、macOS、iOS、Android 平台。MX Master 3 和 MX Keys 售价均为 899 元，暂未公布国行具体上市时间。</p><h4 id="新浪推出的绿洲app图标涉嫌抄袭">新浪推出的「绿洲」APP图标涉嫌抄袭</h4><p><img src="https://imgs.codewoody.com/uploads/big/e634bcc99aacb65fced7030d4a5102a0.png"></p><h4 id="usb-4-发布">USB 4 发布</h4><p><img src="https://imgs.codewoody.com/uploads/big/1716f23699f23a17b811af1398156fb3.jpg"></p><p>AppleInsider 消息，在 3 月份 USB Promoter Group 首次发布了 USB 4 规范后，昨天最终的 USB 4 规范标准正式发布。</p><p>USB4 将支持 40Gb/s 数据传输，是 USB 3 最新版本速度的两倍，同时向后兼容 USB 3.2、USB 2.0、雷雳 3 接口。USB4 将使用与 USB 3 相同的 USB-C 连接器，这意味着厂商不需要推出新的 USB4 接口类型。它还可以提供最高达 100W 的电源功率，还可以外接显卡、两台 4K 显示器或 1 台 5K 显示器等。</p><p>USB4 标准已经完成，预计搭载 USB4 规范的零售产品最早将会在 2020 年底上市。</p><h4 id="其他">其他</h4><ul><li><a href="https://www.engadget.com/2019/08/23/disney-plus-first-look-user-profiles-d23-expo/" target="_blank" rel="noopener">迪斯尼公司定于11月12日，推出自己的视频订阅服务</a></li><li><a href="http://www.huxiu.com/article/316858.html?f=wangzhan" target="_blank" rel="noopener">阿里投资网易云音乐</a></li><li><a href="https://www.zhihu.com/question/280402448/answer/814992592" target="_blank" rel="noopener">保时捷推出旗下第一款全电动汽车Taycan</a>这个名字的寓意为“年轻活泼的骏马”，也代表了保时捷的企业文化。之前这款Taycan的开发代号名叫MissionE，拥有482公里行驶里程，动力超过600马力，百公里加速时间仅为3.5秒。Taycan被视作是特斯拉ModelS最直接的竞争对手，两款电动汽车都具有非常顶级的性能。特斯拉ModelS的续航距离为540公里，百公里加速时间为2.5秒。<a href="https://www.zhihu.com/question/280402448/answer/783052501" target="_blank" rel="noopener">这篇文章有不错的介绍</a>。</li></ul><h3 id="其他新闻">其他新闻</h3><ul><li><a href="https://www.zhihu.com/question/344072428" target="_blank" rel="noopener">男篮世界杯，中国男篮加时76:79不敌波兰</a>，周琦各种失误，被网友骂惨了</li><li><a href="https://www.zhihu.com/pin/1152699749277736960" target="_blank" rel="noopener">男篮世界杯中国不敌委内瑞拉遭淘汰</a></li><li><a href="https://mp.weixin.qq.com/s/r8hAC_92IviEdu43Wv4V0g" target="_blank" rel="noopener">天安门广场9月7日18时至8日10时暂停对外开放</a>: 记者从天安门地区管理委员会获悉，根据北京市庆祝中华人民共和国成立70周年活动筹备工作统一部署安排，天安门广场于2019年9月7日18时至9月8日10时暂停对外开放（届时，将根据广场实际情况适时恢复对外开放）。</li><li><a href="https://www.zhihu.com/question/343594485/answer/808486907" target="_blank" rel="noopener">8月30日 特斯拉进入免购置税车辆名单</a>。</li><li><a href="https://www.ifanr.com/1255546?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=" target="_blank" rel="noopener">三大运营商开始陆续停售4G无限流量套餐</a></li><li><a href="https://www.dw.com/zh/约翰逊威胁提前大选/a-50273487?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">英国首相威胁提前进行大选</a></li><li><a href="https://cn.reuters.com/article/britain-eu-bill-result-0904-wedn-idCNKCS1VQ026?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">英国议员周三批准了一项旨在防止英国首相约翰逊政府在没有达成协议的情况下带领英国退出欧盟的法案。</a></li><li><a href="http://world.huanqiu.com/article/2019-09/15401002.html?agt=15422" target="_blank" rel="noopener">韩国决定尽快收回26处驻韩美军极地</a></li><li><a href="https://www.zhihu.com/question/344416928" target="_blank" rel="noopener">《黑猫警长》导演戴铁郎先生去世</a></li><li><a href="https://www.dw.com/zh/加拿大任命新驻华大使-商界很高兴/a-50306699?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">加拿大任命新的驻华大使</a>: 在中加关系紧张的背景下，渥太华任命曾多年在麦肯锡咨询公司工作的商界人士巴顿为新的驻华大使，填补了这个自今年1月以来一直空缺的职位。</li><li><a href="https://www.williamlong.info/archives/5818.html" target="_blank" rel="noopener">Facebook数亿用户电话号码曝光</a></li><li><a href="https://www.dw.com/zh/特朗普中断与塔利班和谈/a-50343895?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">特朗普中断和塔利班的和谈</a>，作为对喀布尔最新爆炸袭击事件的反应。</li><li><a href="https://www.zhihu.com/question/344952992" target="_blank" rel="noopener">DC漫改电影《小丑》获得金狮奖</a>，这是影史首个三大最高奖给漫改电影。</li></ul><h2 id="言论与文章">言论与文章</h2><ul><li>虽然很政治不正确，但是很高级黑：</li></ul><p><img src="https://imgs.codewoody.com/uploads/big/953d6e7f0b44fe0a830a540029dd117d.png"></p><ul><li><a href="https://itsfoss.com/apt-vs-apt-get-difference/" target="_blank" rel="noopener">apt和apt-get的区别</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/tNvzooU-wr0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;
&lt;/iframe&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>旧文迁移|Django部署:Nginx+Gunicorn+virtualenv+supervisor+PostgreSQL</title>
    <link href="http://www.codewoody.com/posts/34441/"/>
    <id>http://www.codewoody.com/posts/34441/</id>
    <published>2019-08-30T03:06:37.000Z</published>
    <updated>2019-09-01T14:33:01.587Z</updated>
    
    <content type="html"><![CDATA[<p>Django是最受欢迎的基于Python的web框架之一，也非常适合新手入门。虽然Django为我们提供了一个用于测试的轻量级server，但这个server不能用于实际生产环境的部署。最早的Django的部署方法推荐的是Apache+mod_wsgi。演化到现在，django的部署方法也变得越来越弹性、有效，也更加的复杂了。在下面的教程中我们需要使用下面的这些工具：</p><ul><li>Nginx</li><li>Gunicorn</li><li>virtualenv</li><li>supervisor</li><li>PostgreSQL</li></ul><a id="more"></a><h4 id="前期准备">前期准备</h4><p>你需要一个你拥有root权限的server。下面的教程是基于Debian 7，所有相同的步骤对于Ubuntu和其他的基于Debian的发行版都是适用的。</p><h4 id="更新系统">更新系统</h4><p>首先确保系统处于最新的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo aptitude update</span><br><span class="line">$ sudo aptitude upgrade</span><br></pre></td></tr></table></figure><h4 id="postgresql">PostgreSQL</h4><p>为基于Debian的系统安装PostgreSQL，你只需要运行下面这个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo aptitude install postgresql postgresql-contrib</span><br></pre></td></tr></table></figure><p>完成安装以后为我们的django应用创建一个用户和一个数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su - postgres </span><br><span class="line">postgres@django:~$ createuser --interactive -P </span><br><span class="line">Enter name of role to add: hello_django </span><br><span class="line">Enter password <span class="keyword">for</span> new role: </span><br><span class="line">Enter it again: Shall the new role be a superuser? (y/n) n </span><br><span class="line">Shall the new role be allowed to create databases? (y/n) n </span><br><span class="line">Shall the new role be allowed to create more new roles? (y/n) n postgres@django:~$ </span><br><span class="line"></span><br><span class="line">postgres@django:~$ createdb --owner hello_django hello </span><br><span class="line">postgres@django:~$ <span class="built_in">logout</span> $</span><br></pre></td></tr></table></figure><h4 id="创建一个运行账户">创建一个运行账户</h4><p>为了避免万一web应用被攻击以后带来不受控制的后果，我们一般会单独为web应用创建一个权限受限的用户来运行这个web应用。例如我们这里为我们的django应用创建一个名为<code>hello</code>的用户，并将其归入<code>webapps</code>这个组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd --system webapps</span><br><span class="line">$ sudo useradd --system --gid webapps --shell /bin/bash --home /webapps/hello_django hello</span><br></pre></td></tr></table></figure><h4 id="virtualenv">virtualenv</h4><p>Virtualenv是一个Python虚拟环境管理的工具，所谓虚拟环境就是讲你Web应用所需要的python环境从系统的python环境中独立出来，这使得你可以在不同的应用中使用不同版本的第三方库。</p><p>用下面的命令来在Debian上安装Virtualenv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo aptitude install python-virtualenv</span><br></pre></td></tr></table></figure><h5 id="为你的django应用创建一个python环境">为你的Django应用创建一个python环境</h5><p>这里我将django应用放在了<code>/webapps</code>这个路径下面，如果你偏好<code>/var/www</code>, <code>srv</code>或者其他的路径也可以。首先在这个目录下面创建<code>/webapps/hello_django/</code>文件夹来存储应用，并将这个文件夹的owner设置为上面我们创建的运行账户<code>hello</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir -p /webapps/hello_django/</span><br><span class="line">$ sudo chown hello /webapps/hello_django/</span><br></pre></td></tr></table></figure><p>切换到<code>hello</code>用户并创建虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su - hello</span><br><span class="line">hello@django:~$ <span class="built_in">cd</span> /webapps/hello_django/</span><br><span class="line">hello@django:~$ virtualenv .</span><br><span class="line"></span><br><span class="line">New python executable <span class="keyword">in</span> hello_django/bin/python</span><br><span class="line">Installing distribute..............done.</span><br><span class="line">Installing pip.....................done. </span><br><span class="line">hello@django:~$ <span class="built_in">source</span> bin/activate </span><br><span class="line">(hello_django)hello@django:~$</span><br></pre></td></tr></table></figure><p>现在虚拟环境就被激活了，我们可以将django安装到这个虚拟环境里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Downloading/unpacking django </span><br><span class="line">(...) </span><br><span class="line">Installing collected packages: django </span><br><span class="line">(...)</span><br><span class="line">Successfully installed django </span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure><p>完成django的安装以后我们来创建一个空的django项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(hello_django)hello@django:~$ django-admin.py startproject hello</span><br></pre></td></tr></table></figure><p>你可以通过启动测试服务器来测试是否一切正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(hello_django)hello@django:~$ <span class="built_in">cd</span> hello </span><br><span class="line">(hello_django)hello@django:~$ python manage.py runserver example.com:8000 </span><br><span class="line">Validating models... </span><br><span class="line"></span><br><span class="line">0 errors found </span><br><span class="line">June 09, 2013 - 06:12:00 Django version 1.5.1, using settings <span class="string">'hello.settings'</span> </span><br><span class="line">Development server is running at http://example.com:8000/ </span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><p>现在你可以通过<a href="http://example.com:8000" target="_blank" rel="noopener">http://example.com:8000</a>来访问了。</p><h4 id="为django配置postgresql">为Django配置PostgreSQL</h4><p>Django默认的新工程使用的是SQLite3作为数据库的，这个数据库的性能不足以支持生产环境下的数据库应用。我们这里采用PostgreSQL来做为我们的Django项目的数据库。为了让Django能够使用PostgreSQL，我们需要将<code>psycopg2</code>安装到虚拟环境。首先安装这个包的依赖项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libpq-dev</span><br></pre></td></tr></table></figure><p>然后通过pip来安装的<code>psycopg2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(hello_django)hello@django:~$ pip install psycopg2</span><br></pre></td></tr></table></figure><p>现在可以将Django的数据库设置修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123; </span><br><span class="line">    <span class="string">'default'</span>: &#123; </span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>, </span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'hello'</span>, </span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'hello_django'</span>, </span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'Your password'</span>, </span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>, </span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">''</span>, <span class="comment"># Set to empty string for default. </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后向向Postgres应用你的Django设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(hello_django)hello@django:~$ python manage.py migrate</span><br></pre></td></tr></table></figure><h4 id="gunicorn">Gunicorn</h4><p>在实际生产环境中我们不会使用Django的单线程开发服务器。这里我们使用<a href="http://gunicorn.org/" target="_blank" rel="noopener">Gunicorn</a>.</p><p>通过pip来安装Gunicorn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(hello_django)hello@django:~$ pip install gunicorn</span><br></pre></td></tr></table></figure><p>安装好以后你可以尝试用Gunicorn来运行Django了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(hello_django)hello@django:~$ gunicorn hello.wsgi:application --<span class="built_in">bind</span> example.com:8001</span><br></pre></td></tr></table></figure><p>上面的命令是一个简单的测试，为了真正在生产环境下使用Gunicorn，我们还需要增加一些配置。我们把这些配置文件写成一个bash脚本，保存为bin/gunicorn_start</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">NAME=<span class="string">"hello_app"</span> <span class="comment"># Name of the application</span></span><br><span class="line">DJANGODIR=/webapps/hello_django/hello <span class="comment"># Django project directory</span></span><br><span class="line">SOCKFILE=/webapps/hello_django/run/gunicorn.sock <span class="comment"># we will communicte using this unix socket</span></span><br><span class="line">USER=hello <span class="comment"># the user to run as</span></span><br><span class="line">GROUP=webapps <span class="comment"># the group to run as</span></span><br><span class="line">NUM_WORKERS=3 <span class="comment"># how many worker processes should Gunicorn spawn</span></span><br><span class="line">DJANGO_SETTINGS_MODULE=hello.settings <span class="comment"># which settings file should Django use</span></span><br><span class="line">DJANGO_WSGI_MODULE=hello.wsgi <span class="comment"># WSGI module name</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Starting <span class="variable">$NAME</span> as `whoami`"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Activate the virtual environment</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DJANGODIR</span></span><br><span class="line"><span class="built_in">source</span> ../bin/activate</span><br><span class="line"><span class="built_in">export</span> DJANGO_SETTINGS_MODULE=<span class="variable">$DJANGO_SETTINGS_MODULE</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$DJANGODIR</span>:<span class="variable">$PYTHONPATH</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Create the run directory if it doesn't exist</span></span><br><span class="line">RUNDIR=$(dirname <span class="variable">$SOCKFILE</span>)</span><br><span class="line"><span class="built_in">test</span> -d <span class="variable">$RUNDIR</span> || mkdir -p <span class="variable">$RUNDIR</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Start your Django Unicorn</span></span><br><span class="line"><span class="comment"># Programs meant to be run under supervisor should not daemonize themselves (do not use --daemon)</span></span><br><span class="line"><span class="built_in">exec</span> ../bin/gunicorn <span class="variable">$&#123;DJANGO_WSGI_MODULE&#125;</span>:application \</span><br><span class="line">--name <span class="variable">$NAME</span> \</span><br><span class="line">--workers <span class="variable">$NUM_WORKERS</span> \</span><br><span class="line">--user=<span class="variable">$USER</span> --group=<span class="variable">$GROUP</span> \</span><br><span class="line">--<span class="built_in">bind</span>=unix:<span class="variable">$SOCKFILE</span> \</span><br><span class="line">--<span class="built_in">log</span>-level=debug \</span><br><span class="line">--<span class="built_in">log</span>-file=-</span><br></pre></td></tr></table></figure><p>将这个文件改成可执行模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod u+x bin/gunicorn_start</span><br></pre></td></tr></table></figure><p>下面你可以尝试运行这个脚本了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su - hello hello@django:~$ bin/gunicorn_start Starting hello_app as hello 2013-06-09 14:21:45 [10724] [INFO] Starting gunicorn 18.0 2013-06-09 14:21:45 [10724] [DEBUG] Arbiter booted 2013-06-09 14:21:45 [10724] [INFO] Listening at: unix:/webapps/hello_django/run/gunicorn.sock (10724) 2013-06-09 14:21:45 [10724] [INFO] Using worker: sync 2013-06-09 14:21:45 [10735] [INFO] Booting worker with pid: 10735 2013-06-09 14:21:45 [10736] [INFO] Booting worker with pid: 10736 2013-06-09 14:21:45 [10737] [INFO] Booting worker with pid: 10737 ^C (CONTROL-C to <span class="built_in">kill</span> Gunicorn) 2013-06-09 14:21:48 [10736] [INFO] Worker exiting (pid: 10736) 2013-06-09 14:21:48 [10735] [INFO] Worker exiting (pid: 10735) 2013-06-09 14:21:48 [10724] [INFO] Handling signal: int 2013-06-09 14:21:48 [10737] [INFO] Worker exiting (pid: 10737) 2013-06-09 14:21:48 [10724] [INFO] Shutting down: Master $ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>注意，如果你在上面的过程中设置了自定义的参数的话，需要将<code>gunicorn_start</code>脚本中对应的参数改过来。其中，worker的数量推荐设置为2 * CPUs + 1，这样的话，在任何时候都有一半的worker在做IO。</p><h4 id="supervisor">Supervisor</h4><p>Superviosr是一个进程监管的工具。简而言之，Superviosr可以保证你的程序在服务器开机时自动启动以及程序意外终止时重新启动。通过下面的命令即可安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install supervisor</span><br></pre></td></tr></table></figure><p>Superviosr通过配置文件来设置被监管的程序。一般配置文件都放置在<code>/etc/supervisor/conf.d</code>路径下面。此处我们创建一个名为<code>hello.conf</code>的配置文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[program:hello]</span><br><span class="line"><span class="built_in">command</span> = /webapps/hello_django/bin/gunicorn_start ; Command to start app</span><br><span class="line">user = hello ; User to run as</span><br><span class="line">stdout_logfile = /webapps/hello_django/logs/gunicorn_supervisor.log ; Where to write <span class="built_in">log</span> messages</span><br><span class="line">redirect_stderr = <span class="literal">true</span> ; Save stderr <span class="keyword">in</span> the same <span class="built_in">log</span></span><br><span class="line">environment=LANG=en_US.UTF-8,LC_ALL=en_US.UTF-8 ; Set UTF-8 as default encoding</span><br></pre></td></tr></table></figure><p>你可以参考<a href="http://supervisord.org/configuration.html#program-x-section-settings" target="_blank" rel="noopener">其他设置</a>，不过上面的设置一般情况下应该足够了。</p><p>日志文件需要我们手动创建一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello@django:~$ mkdir -p /webapps/hello_django/logs/ hello@django:~$ touch /webapps/hello_django/logs/gunicorn_supervisor.log</span><br></pre></td></tr></table></figure><p>设置好上面的文件以后，我们可以通过<code>supervisorctl</code>工具来启用这些设置了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo supervisorctl reread </span><br><span class="line">hello: available </span><br><span class="line">$ sudo supervisorctl update </span><br><span class="line">hello: added process group</span><br></pre></td></tr></table></figure><p>现在你可以start，stop或者restart你的进程了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo supervisorctl status hello hello RUNNING pid 18020, uptime 0:00:50 </span><br><span class="line">$ sudo supervisorctl stop hello </span><br><span class="line">hello: stopped </span><br><span class="line">$ sudo supervisorctl start hello </span><br><span class="line">hello: started </span><br><span class="line">$ sudo supervisorctl restart hello </span><br><span class="line">hello: stopped </span><br><span class="line">hello: started</span><br></pre></td></tr></table></figure><h4 id="nginx">Nginx</h4><p>安装Nginx同样非常简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo aptitude install nginx </span><br><span class="line">$ sudo service nginx start</span><br></pre></td></tr></table></figure><p>此时你访问server(<a href="http://example.com" target="_blank" rel="noopener">http://example.com</a>)就应该可以看见Nginx的欢迎页面了(&quot;Welcome to nginx&quot;)</p><h5 id="为django创建一个虚拟server配置">为Django创建一个虚拟server配置</h5><p>每个Nginx的虚拟server都由<code>/etc/nginx/sites-available</code>路径下的一个配置文件来表示。而将其链接到的<code>/etc/nginx/sites-enabled</code>路径下则可以启用对应的站点。</p><p>为我们的Django应用创建一个配置文件<code>/etc/nginx/sites-available/hello</code>. 文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">upstream hello_app_server &#123;</span><br><span class="line"><span class="comment"># fail_timeout=0 means we always retry an upstream even if it failed</span></span><br><span class="line"><span class="comment"># to return a good HTTP response (in case the Unicorn master nukes a</span></span><br><span class="line"><span class="comment"># single worker for timing out).</span></span><br><span class="line"> </span><br><span class="line">server unix:/webapps/hello_django/run/gunicorn.sock fail_timeout=0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line"> </span><br><span class="line">listen 80;</span><br><span class="line">server_name example.com;</span><br><span class="line"> </span><br><span class="line">client_max_body_size 4G;</span><br><span class="line"> </span><br><span class="line">access_log /webapps/hello_django/logs/nginx-access.log;</span><br><span class="line">error_log /webapps/hello_django/logs/nginx-error.log;</span><br><span class="line"></span><br><span class="line">location /static/ &#123;</span><br><span class="line"><span class="built_in">alias</span> /webapps/hello_django/static/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /media/ &#123;</span><br><span class="line"><span class="built_in">alias</span> /webapps/hello_django/media/;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location / &#123;</span><br><span class="line"><span class="comment"># an HTTP header important enough to have its own Wikipedia entry:</span></span><br><span class="line"><span class="comment"># http://en.wikipedia.org/wiki/X-Forwarded-For</span></span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># enable this if and only if you use HTTPS, this helps Rack</span></span><br><span class="line"><span class="comment"># set the proper protocol for doing redirects:</span></span><br><span class="line"><span class="comment"># proxy_set_header X-Forwarded-Proto https;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># pass the Host: header from the client right along so redirects</span></span><br><span class="line"><span class="comment"># can be set properly within the Rack application</span></span><br><span class="line">proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># we don't want nginx trying to do something clever with</span></span><br><span class="line"><span class="comment"># redirects, we set the Host: header above already.</span></span><br><span class="line">proxy_redirect off;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># set "proxy_buffering off" *only* for Rainbows! when doing</span></span><br><span class="line"><span class="comment"># Comet/long-poll stuff. It's also safe to set if you're</span></span><br><span class="line"><span class="comment"># using only serving fast clients with Unicorn + nginx.</span></span><br><span class="line"><span class="comment"># Otherwise you _want_ nginx to buffer responses to slow</span></span><br><span class="line"><span class="comment"># clients, really.</span></span><br><span class="line"><span class="comment"># proxy_buffering off;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Try to serve static files from nginx, no point in making an</span></span><br><span class="line"><span class="comment"># *application* server like Unicorn/Rainbows! serve static files.</span></span><br><span class="line"><span class="keyword">if</span> (!-f <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">proxy_pass http://hello_app_server;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Error pages</span></span><br><span class="line">error_page 500 502 503 504 /500.html;</span><br><span class="line">location = /500.html &#123;</span><br><span class="line">root /webapps/hello_django/static/;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这个文件链接到<code>site-enabled</code>文件夹下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ln -s /etc/nginx/sites-available/hello /etc/nginx/sites-enabled/hello</span><br></pre></td></tr></table></figure><p>然后重启nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service nginx restart</span><br></pre></td></tr></table></figure><p>现在你再访问<a href="http://example.com" target="_blank" rel="noopener">http://example.com</a>看到的就应该不是nginx的欢迎页面，而是Django的欢迎页面了。</p><p>至此配置就全部完成了，最终项目的整个结构应该如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/webapps/hello_django/ </span><br><span class="line">├── bin &lt;= Directory created by virtualenv </span><br><span class="line">│ ├── activate &lt;= Environment activation script</span><br><span class="line">│ ├── django-admin.py </span><br><span class="line">│ ├── gunicorn </span><br><span class="line">│ ├── gunicorn_django </span><br><span class="line">│ ├── gunicorn_start &lt;= Script to start application with Gunicorn </span><br><span class="line">│ └── python </span><br><span class="line">├── hello &lt;= Django project directory, add this to PYTHONPATH </span><br><span class="line">│ ├── manage.py </span><br><span class="line">│ ├── project_application_1 </span><br><span class="line">│ ├── project_application_2 </span><br><span class="line">│ └── hello &lt;= Project settings directory </span><br><span class="line">│ ├── __init__.py </span><br><span class="line">│ ├── settings.py &lt;= hello.settings - settings module Gunicorn will use </span><br><span class="line">│ ├── urls.py </span><br><span class="line">│ └── wsgi.py &lt;= hello.wsgi - WSGI module Gunicorn will use </span><br><span class="line">├── include </span><br><span class="line">│ └── python2.7 -&gt; /usr/include/python2.7 </span><br><span class="line">├── lib </span><br><span class="line">│ └── python2.7 </span><br><span class="line">├── lib64 -&gt; /webapps/hello_django/lib </span><br><span class="line">├── logs &lt;= Application logs directory </span><br><span class="line">│ ├── gunicorn_supervisor.log </span><br><span class="line">│ ├── nginx-access.log </span><br><span class="line">│ └── nginx-error.log </span><br><span class="line">├── media &lt;= User uploaded files folder </span><br><span class="line">├── run </span><br><span class="line">│ └── gunicorn.sock </span><br><span class="line">└── static &lt;= Collect and serve static files from here</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django是最受欢迎的基于Python的web框架之一，也非常适合新手入门。虽然Django为我们提供了一个用于测试的轻量级server，但这个server不能用于实际生产环境的部署。最早的Django的部署方法推荐的是Apache+mod_wsgi。演化到现在，django的部署方法也变得越来越弹性、有效，也更加的复杂了。在下面的教程中我们需要使用下面的这些工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;Gunicorn&lt;/li&gt;
&lt;li&gt;virtualenv&lt;/li&gt;
&lt;li&gt;supervisor&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="python" scheme="http://www.codewoody.com/tags/python/"/>
    
      <category term="Django" scheme="http://www.codewoody.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-10</title>
    <link href="http://www.codewoody.com/posts/8493/"/>
    <id>http://www.codewoody.com/posts/8493/</id>
    <published>2019-08-26T02:43:35.000Z</published>
    <updated>2019-09-03T03:52:21.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="英国女王批准首相约翰逊提出的议会休会请求"><a href="http://www.xinhuanet.com/world/2019-08/29/c_1124934148.htm" target="_blank" rel="noopener">英国女王批准首相约翰逊提出的议会休会请求</a></h3><p>英国女王伊丽莎白二世28日在枢密院会议上批准了首相约翰逊提出的议会休会请求。目前处于夏季休会期的英国议会将于9月3日重新召开。根据约翰逊的请求，伊丽莎白二世批准议会在9月9日至9月12日期间再次开始休会，休会期一直到10月14日。</p><p>约翰逊对议会休会期的新安排引发争议，反对者认为此举是为了阻止议员反对“无协议脱欧”的努力。反对党工党副党魁汤姆·沃森说，此举“完全是公然冒犯我们的民主制度，令人震惊”。</p><p>更多阅读：</p><ul><li><a href="https://www.youtube.com/watch?v=IhNhyeZAjsI&amp;t=5s" target="_blank" rel="noopener">睡前消息：英国首相为脱欧竟暂停议会，三年了，这次能成功吗？</a></li><li><a href="https://www.zhihu.com/question/343282857/answer/808688217" target="_blank" rel="noopener">如何看待英国女王正式批准首相鲍里斯的暂停议会请求？</a>]</li></ul><h3 id="张伟丽成为中国首位ufc冠军">张伟丽成为中国首位UFC冠军</h3><p>北京时间8月31日， UFC格斗之夜深圳站在深圳大运中心体育馆开战，中国女选手张伟丽挑战UFC现役女拳王、巴西选手安德拉德，争夺草量级（115磅）世界冠军金腰带。比赛开始不到一分钟，张伟丽KO巴西女拳王，成为UFC中国首位冠军。</p><p><img src="https://imgs.codewoody.com/uploads/big/b5f5b29cd0bf63c58de230e145da34cf.jpg"></p><h3 id="全国首套房房贷利率上调"><a href="https://www.zhihu.com/question/340508509" target="_blank" rel="noopener">全国首套房房贷利率上调</a></h3><p><img src="https://imgs.codewoody.com/uploads/big/8570d6a1ff390104cf8506cec0de2e75.jpg"></p><h3 id="香港问题后续">香港问题后续</h3><ul><li><a href="https://www.dw.com/zh/香港示威警方首度开枪-共36人被捕/a-50156162?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">周日又有游行示威进行，警方首次出动水炮车驱散抗议者，并有警员开枪。警方总共逮捕了36人，其中年龄最小的12岁</a>。开枪过程BBC做了一个梳理:<a href="https://www.youtube.com/watch?v=NEA92KPpgcM" target="_blank" rel="noopener">Hong Kong: What led to a single gunshot being fired? - BBC News</a>.</li><li><a href="https://www.dw.com/zh/「反送中」示威延烧-示威者叹生死交关/a-50190423?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">港龙空勤人员协会主席施安娜遭国泰港龙航空解雇</a></li><li><a href="https://www.dw.com/zh/港警接连出手-港知名运动人士相继被捕/a-50223095?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">多名知名运动人士被捕，包括香港民族党前召集人陈浩天与香港众志秘书长黄之锋</a></li><li>经济学人做的调查：<a href="https://www.economist.com/graphic-detail/2019/08/26/almost-nobody-in-hong-kong-under-30-identifies-as-chinese" target="_blank" rel="noopener">Almost nobody in Hong Kong under 30 identifies as “Chinese”</a></li><li>前一段时间推特和facebook封禁了一批「有政府背景」的账户，关于此，推荐一篇论文<a href="https://www.tandfonline.com/doi/full/10.1080/1369118X.2018.1476576" target="_blank" rel="noopener">Chinese computational propaganda: automation, algorithms and the manipulation of information about Chinese politics on Twitter and Weibo</a>.</li><li><a href="https://news.ifeng.com/c/7pZrFHDV1X6" target="_blank" rel="noopener">何韵诗逃往澳大利亚</a></li><li><a href="https://www.youtube.com/watch?v=-qCoFKpmMHk" target="_blank" rel="noopener">太子站乘客冲突过程</a></li></ul><h3 id="中美关系">中美关系</h3><ul><li><a href="https://cn.reuters.com/article/china-usa-south-sea-warship-0829-thur-idCNKCS1VJ03U?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">美国海军“迈耶”号驱逐舰未经中国政府允许，8月28日擅自闯入中国南沙岛礁邻近海域</a></li><li><a href="https://cn.reuters.com/article/china-us-navy-warship-tsingtao-0828-idCNKCS1VI0C5?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">一艘美国海军军舰近日要求访问青岛港，但遭到中国回绝</a></li><li><a href="https://www.dw.com/zh/中美谈判继续前行-美国股市大涨/a-50223110?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">中国商务部29日在例行记者会上，表示出愿意和美方继续磋商，不愿意让贸易战升级的态度之后，美国股市应声上扬。</a></li></ul><h3 id="其他新闻">其他新闻</h3><ul><li><a href="http://www.lieyunwang.com/archives/458192" target="_blank" rel="noopener">旷视向港交所申请上市</a>。据悉，当前阿里巴巴、蚂蚁金服、联想、创新工场等均为旷视科技股东。</li><li>OG 3:1 击败Liquid夺得Ti9冠军，成为世界首位双冠王</li><li><a href="https://www.dw.com/zh/没有联合宣言的g7闭幕-特朗普称赞「团结」/a-50177152?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">没有联合宣言的G7闭幕，特朗普称赞「团结」</a></li><li><a href="https://www.dw.com/zh/消失七个月-杨恒均正式被控间谍罪/a-50177064?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">澳籍作家杨恒均在广州机场被国保带走</a>，被控间谍罪。</li><li><a href="https://www.zhihu.com/pin/1149745906852073472" target="_blank" rel="noopener">林书豪加盟北京首钢，薪水约为税后300万美元</a></li><li><a href="http://www.qdaily.com/articles/64113.html?source=feed" target="_blank" rel="noopener">好奇心日报恢复更新拉</a></li><li><a href="https://www.zhihu.com/question/343156335/answer/805615589" target="_blank" rel="noopener">警方通报黄毅清存在向他人贩卖毒品和吸食毒品的行为，已被提请批捕</a></li><li><a href="https://tech.sina.com.cn/i/2019-08-30/doc-iicezueu2090205.shtml" target="_blank" rel="noopener">拼多多市值超过百度</a>，目前总市值390.67亿美元，今年迄今累涨逾50%，超过了百度的369.18亿美元市值。</li><li><a href="https://www.zhihu.com/question/343431810" target="_blank" rel="noopener">八月底华为方舟编译器开源</a> -<a href="https://www.zhihu.com/question/343671678" target="_blank" rel="noopener">《哪吒之魔童降世》票房超过《流浪地球》，成为中国影史票房总榜第二名</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/598bd6a41c77bd17efa96a553b49a00b.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>乌克兰独立广场旧事</title>
    <link href="http://www.codewoody.com/posts/31351/"/>
    <id>http://www.codewoody.com/posts/31351/</id>
    <published>2019-08-22T04:14:04.000Z</published>
    <updated>2019-08-22T04:53:51.028Z</updated>
    
    <content type="html"><![CDATA[<p>喜欢历史的人，在看到当下的事情的时候，就会情不自禁地想到历史上一些类似的旧事。比如这次又见到了一个很有意思的新闻。说是联邦快递被曝出来在中国投递的包裹里面有真枪，而且包裹是从美国寄出来。这件事有意思的地方有这么几个点：</p><p>其一是这件事情其实早在六月份就出来了，但是当时并没有在舆论上大范围传播，也没有中国的高调反应。反而是在这个节点爆出来，时机的选择耐人寻味。</p><p>其二是这件事情的一些细节非常有意思。从联邦快递的<a href="https://www.zaobao.com.sg/realtime/china/story20190819-982134" target="_blank" rel="noopener">回应</a>来看，是联邦快递主动报警的，那么这件事情可能并不是联邦快递有意为之。不过，一个含枪支的包裹通过了层层检查，甚至包括中美两国的海关系统，都没有被查验出来。按理说枪支的形状特征非常明显，从X光下面走一遍很容易分辨出来。如果说美国方面要有小动作，故意放了一马，那中国这方面的检查为什么也放过了这个包裹了？看着有点『钓鱼执法』的意味。</p><p>更有意思的事情来了。这两天，在香港也有一个类似的案子。19日在香港有一个<a href="http://news.dwnews.com/hongkong/news/2019-08-20/60145944.html" target="_blank" rel="noopener">军火案</a>在西九龙法院再审。被告林靖峰藏有的3支长枪和1支短枪已证实为真枪。此外，控方在庭上透露涉案包裹由美国寄往香港。这个案子案发，即被告被抓，是在今年1月14日。</p><p>最近香港不太平，不过这个案子的案发时间，是在逃犯条例发布之前。不过，这上面的两个例子显示出境外的一些势力，确实有将枪支运送到香港，甚至是大陆的能力。那么，这些枪支能够用来做什么呢？这个时候就可以点题了，让我们来回忆一下历史。</p><p>2013年底开始，由于时任乌克兰总统亚努科维奇中止了和欧盟签署政治和自由贸易协议，而强化和俄罗斯的关系，导致大规模的抗议活动。此轮抗议活动最终导致亚努科维奇下台。而且，这轮抗议的影响甚至导致乌克兰陷入分裂。随后陆续发生了克里米亚脱离乌克兰加入俄罗斯。乌克兰东部及南部产生分裂主义运动，乌克兰陷入内战。</p><p>当时，乌克兰基辅的独立广场是反对派与政府的主要拉锯场地。在抗议期间，独立广场甚至出现了狙击手，反对派与政府方面均有人被狙击受伤甚至死亡。后来乌克兰新政府将狙击行为归咎于前总统亚努科维奇势力。不过去年似乎又有了一些有意思的信息。俄罗斯《卫星报》方面找到了当年参与狙击的格鲁吉亚狙击手亚历山大·列瓦济什维利。狙击手表示现任的乌克兰最高拉达国家安全与国防委员会主席谢尔盖·帕申斯基和人民议员弗拉基米尔·帕拉修克亲自参与了当年独立广场骚乱期间的杀人事件。《卫星报》还掌握有机票复印件，证明狙击手确实当时曾经前往基辅。</p><figure><img src="https://imgs.codewoody.com/uploads/big/fbdc3949f8fc4ac87a8cda180c608f4b.jpeg" alt="2014年的基辅独立广场"><figcaption>2014年的基辅独立广场</figcaption></figure><p>另外，欧盟外长凯瑟琳·艾希顿（Catherine Margaret Ashton）和爱沙尼亚内务部长乌尔马斯·帕耶特（Urmas Paet）的电话对话录音，证明基辅独立广场现场的狙击手和乌克兰反对派有关。在谈话中乌尔马斯·帕耶特也提到，在基辅独立广场上出现的狙击手，是乌克兰反对派雇佣的，他所看到的所有的罪证都证明，无论示威民众还是执法人员都是被同一批狙击手射杀的。<a href="https://www.dw.com/zh/%E8%B0%81%E6%98%AF%E4%B9%8C%E5%85%8B%E5%85%B0%E5%B9%BF%E5%9C%BA%E7%8B%99%E5%87%BB%E6%89%8B%E7%9A%84%E5%B9%95%E5%90%8E%E6%8C%87%E4%BD%BF%E8%80%85/a-17480436" target="_blank" rel="noopener">爱沙尼亚驻基辅大使已证实此录音的真实性</a>。帕耶特称向其透露消息的是活动人士、医生柏格摩列兹（Olga Bogomolets）。许多人将这名医生视为独立广场的英雄，原本在新政府中有一席之位的她却拒绝出任。</p><p>之前我看八方论坛上就香港问题采访王孟源的时候，王孟源就提到尽量不要派遣大陆方面的武装力量进入香港，否则如果有人想在香港复制当年独立广场上的套路，武警或者解放军就是不清楚这事了。看来，所言非虚。</p><p>更多阅读</p><ul><li>华尔街日报：<a href="https://cn.wsj.com/articles/%E4%B8%AD%E5%9B%BD%E8%AD%A6%E6%96%B9%E8%B0%83%E6%9F%A5%E8%81%94%E9%82%A6%E5%BF%AB%E9%80%92%E5%8C%85%E8%A3%B9%E6%B6%89%E6%9E%AA%E6%A1%88-11566173341" target="_blank" rel="noopener">中国警方调查联邦快递包裹涉枪案</a></li><li>环球网：<a href="http://china.huanqiu.com/gangao/2019-08/15326401.html?agt=15422" target="_blank" rel="noopener">香港警方检获军火案今再审，已证实至少4支真枪均由美国寄出</a></li><li>德国之声：<a href="https://www.dw.com/zh/%E8%B0%81%E6%98%AF%E4%B9%8C%E5%85%8B%E5%85%B0%E5%B9%BF%E5%9C%BA%E7%8B%99%E5%87%BB%E6%89%8B%E7%9A%84%E5%B9%95%E5%90%8E%E6%8C%87%E4%BD%BF%E8%80%85/a-17480436" target="_blank" rel="noopener">谁是乌克兰广场狙击手的幕后指使者?</a></li><li>环球网：<a href="http://world.huanqiu.com/regions/2014-02/4848059.html?agt=15422" target="_blank" rel="noopener">乌克兰称独立广场狙击手开火 致20多名警察受伤</a></li><li><a href="https://www.youtube.com/watch?feature=player_embedded&amp;v=ZEgJ0oo3OA8" target="_blank" rel="noopener">盟外长凯瑟琳·艾希顿（Catherine Margaret Ashton）和爱沙尼亚内务部长乌尔马斯·帕耶特（Urmas Paet）的电话对话录音</a></li><li>维基百科：<a href="https://zh.wikipedia.org/wiki/%E4%B9%8C%E5%85%8B%E5%85%B0%E4%BA%B2%E6%AC%A7%E7%9B%9F%E7%A4%BA%E5%A8%81%E8%BF%90%E5%8A%A8#cite_note-163" target="_blank" rel="noopener">乌克兰亲欧盟示威运动</a></li><li>俄罗斯卫星通讯社：<a href="http://sputniknews.cn/politics/201802131024704098/" target="_blank" rel="noopener">格鲁吉亚狙击手：乌克兰议员曾参与基辅独立广场杀人事件</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;喜欢历史的人，在看到当下的事情的时候，就会情不自禁地想到历史上一些类似的旧事。比如这次又见到了一个很有意思的新闻。说是联邦快递被曝出来在中国投递的包裹里面有真枪，而且包裹是从美国寄出来。这件事有意思的地方有这么几个点：&lt;/p&gt;
&lt;p&gt;其一是这件事情其实早在六月份就出来了，但
      
    
    </summary>
    
      <category term="杂谈" scheme="http://www.codewoody.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="政治" scheme="http://www.codewoody.com/tags/%E6%94%BF%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-9</title>
    <link href="http://www.codewoody.com/posts/11084/"/>
    <id>http://www.codewoody.com/posts/11084/</id>
    <published>2019-08-19T07:53:13.000Z</published>
    <updated>2019-08-30T03:12:39.951Z</updated>
    
    <content type="html"><![CDATA[</p><h2 id="新闻">新闻</h2><h3 id="关税关税">关税！关税！</h3><p>贸易战又双叒叕峰回路转了。</p><ol type="1"><li>周五中国宣布对于原产于美国的约750亿美元进口商品加征关税，作为“应对美方单边主义、贸易保护主义”之举。这批关税将分两批在9月和12月分别开始施行。</li><li>数小时后特朗普就连发了多条推特，表示要进一步提高对中国商品加征关税的税率。他还要求在华经营的美国企业撤出中国、最好将业务搬回美国。特朗普周五总共发了37条推特。特朗普的推特表示美国将在10月1日将2500亿美元中国商品的现有关税从25%提高至30%，他还说，定于9月1日生效的另外3000亿美元中国商品的关税将从10%升至15%。</li></ol><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">美国总统特朗普在推特上宣布，从10月1日开始，对来自中国的2500亿美元产品关税税率从目前的25%提高到30%。他还宣布，对余下的3000亿美元来自的中国产品，原计划从9月1日起加征的10% <a href="https://twitter.com/hashtag/%E5%85%B3%E7%A8%8E?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#关税</a> 现将提高至15%。 <a href="https://t.co/UYtR94ox7Y" target="_blank" rel="noopener">https://t.co/UYtR94ox7Y</a></p>— 美国之音中文网 (@VOAChinese) <a href="https://twitter.com/VOAChinese/status/1165010460791451651?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">August 23, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>同时，特朗普还下令美国公司离开中国，寻找替代。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Our Country has lost, stupidly, Trillions of Dollars with China over many years. They have stolen our Intellectual Property at a rate of Hundreds of Billions of Dollars a year, &amp; they want to continue. I won’t let that happen! We don’t need China and, frankly, would be far....</p>— Donald J. Trump (@realDonaldTrump) <a href="https://twitter.com/realDonaldTrump/status/1164914959131848705?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">August 23, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>特朗普周五上午的推特风暴，还包括向美联储施压。他在推文中写道：“现在应该是美联储拿出他们本事来的时候了！”他又提问谁是美国最大的敌人，是（美联储主席）鲍威尔（Jerome Powell）还是习近平主席？</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">....My only question is, who is our bigger enemy, Jay Powell or Chairman Xi?</p>— Donald J. Trump (@realDonaldTrump) <a href="https://twitter.com/realDonaldTrump/status/1164914610836783104?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">August 23, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>除此之外，特朗普指责中国还未履行阻止芬太尼流入美国的承诺，他要求联邦快递、UPS、亚马逊、美国邮政等公司拒绝递送来自中国的芬太尼药品。</p><p>8月1日，特朗普曾说将从9月1日起向3000亿美元的中国商品加征10%关税。9月1日也是中美贸易谈判下一轮会面的日期。其后，美国政府又宣布，部分关税将延迟至12月15日实施，还有部分商品被剔除出加税名单。</p><p>中方此番加税反制，在关税实施的时间上完全匹配了美国的上述关税威胁。但鉴于中美向对方出口的商品总额相差悬殊，中国无法在征税的商品价值总量上匹配美国，可能还会以非关税措施反制美国。中国观察家利明璋（Bill Bishop）曾指出，这些潜在手段包括出台“不可靠实体清单”、对美商投资展开安全审查、增加海关检查、取消与美国企业的订单、骚扰美企驻华雇员等。中国商务部发言人高峰在22日表示，不可靠实体清单将于近期发布。</p><ul><li><a href="https://www.dw.com/zh/%E4%B8%AD%E5%9B%BD%E5%AE%A3%E5%B8%83%E5%AF%B9750%E4%BA%BF%E7%BE%8E%E5%9B%BD%E5%95%86%E5%93%81%E5%8A%A0%E5%BE%81%E5%85%B3%E7%A8%8E/a-50132940" target="_blank" rel="noopener">中国宣布对750亿美国商品加征关税</a></li><li><a href="https://www.voachinese.com/a/china-trump-trade-tariff-deal-20190824/5054848.html" target="_blank" rel="noopener">VOA: 再度升级 特朗普宣布对中国商品关税再加码</a></li><li><a href="https://www.bbc.com/zhongwen/simp/world-49451975" target="_blank" rel="noopener">中美贸易战再升级：两国互征关税，特朗普要求美企撤出中国</a></li><li><a href="https://www.bbc.com/zhongwen/simp/world-45637126" target="_blank" rel="noopener">芬太尼危机：中国是否是非法药品的主要来源？</a></li></ul><h3 id="深圳先行示范区"><a href="http://www.xinhuanet.com/fortune/2019-08/19/c_1210247173.htm" target="_blank" rel="noopener">深圳先行示范区</a></h3><p>8月18日，中共中央、国务院关于支持深圳建设中国特色社会主义先行示范区的意见发布。</p><p>【中共中央、国务院发布关于支持深圳建设社会主义特色经济示范区的意见】党和国家作出兴办经济特区重大战略部署以来，深圳经济特区作为我国改革开放的重要窗口，各项事业取得显著成绩，已成为一座充满魅力、动力、活力、创新力的国际化创新型城市。当前，中国特色社会主义进入新时代，支持深圳高举新时代改革开放旗帜、建设中国特色社会主义先行示范区，有利于在更高起点、更高层次、更高目标上推进改革开放，形成全面深化改革、全面扩大开放新格局；有利于更好实施粤港澳大湾区战略，丰富“一国两制”事业发展新实践；有利于率先探索全面建设社会主义现代化强国新路径，为实现中华民族伟大复兴的中国梦提供有力支撑。</p><p><img src="https://imgs.codewoody.com/uploads/big/ca1d0f6e3eb43c58b5fb69f0a15b3410.jpg"></p><blockquote><p>这个新闻虽说是目前香港乱局的档口出来的，其中意味令人遐想。不过，这个先行示范区其实早就开始规划了。早在2018年1月，深圳市委六届九次全会讨论了《深圳经济特区率先建设社会主义现代化先行区规划纲要（2018-2035年）（讨论稿）》，并明确了深圳率先建设社会主义现代化先行区的目标任务。</p></blockquote><blockquote><p>不过吧，对于国家这种「口号」，不能光看他怎么说，还要看他拿多少钱出来。深圳是不是要腾飞，还需要排队，前面至少还有一个雄安呢。</p></blockquote><h3 id="联邦快递在华包裹包含枪支"><a href="https://cn.reuters.com/article/us-fedex-china-fujian-gun-package-0818-idCNKCS1V80CP?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">联邦快递在华包裹包含枪支</a></h3><p>中国福建省福州市公安局晋安分局官方微博周日称，该局近期接到报警，福建某运动用品公司收到由美国联邦快递公司(FDX.N)承运的一美国客户寄出的快递包裹，内有枪支。</p><p>晋安分局并称，当前福州警方已将枪支暂扣，并开展立案调查。</p><p>新华社此前报导，中国国家有关部门依法对联邦快递（中国）有限公司未按名址投递快件一案实施调查发现，联邦快递关于将涉华为公司快件转至美国系“误操作”的说法与事实不符，另发现联邦快递(FedEx)(FDX.N)涉嫌滞留逾百件涉华为公司进境快件。</p><h3 id="香港问题后续">香港问题后续</h3><ul><li><a href="https://www.dw.com/zh/818集会：港人退场仍无空间/a-50070758?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">818集会</a>：香港人在民阵的号召下再次上街，他们以行动表达目前没有退场的空间。与此同时，香港基本法委员会前副主席梁爱诗说，即便出动驻港军队，也不意味着&quot;一国两制&quot;的完结。</li><li><a href="https://www.dw.com/zh/在德港人周六集会-内地青年亮国旗对立/a-50068698?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">德国也发生香港和内地支持者对立</a>：为响应香港的示威活动，居住柏林的香港人星期六下午（8月17日）于勃兰登堡门前举行了&quot;反送中&quot;集会，有数百人参与。同一天，柏林、汉堡和科隆都有内地青年举行&quot;爱国爱港&quot;示威活动。</li><li><a href="https://www.dw.com/zh/控北京讯息战抗香港示威-推特脸书删帳號/a-50090156?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">推特和脸书封禁了一批有中国官方背景的账户</a>，随后<a href="https://www.williamlong.info/archives/5805.html" target="_blank" rel="noopener">Youtube也跟进删除了一批账户（210个）</a>。谷歌称这些频道是有针对性的“协调影响行动” 。</li><li><a href="https://cn.nytimes.com/business/20190819/cathay-pacific-ceo-resigns-rupert-hogg/" target="_blank" rel="noopener">国泰航空英籍CEO何杲（Rupert Hogg）辞职</a>: 这个在<a href="https://www.youtube.com/watch?v=TihkL4zmwOA" target="_blank" rel="noopener">王孟源在八方论坛</a>上就预测了。同日辞职还有担任顾客及商务总裁的卢家培。</li><li><a href="https://news.ifeng.com/c/7pJzFTXtrXs" target="_blank" rel="noopener">8月20日英驻港总领馆香港雇员在深圳被拘</a>, 随后<a href="https://cn.reuters.com/article/canadaconsulate-hk-0823-fri-idCNKCS1VD0B5?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">加拿大驻港总领事馆暂停其雇员前往中国内地</a>。周六此名雇员<a href="https://www.dw.com/zh/英驻港领事馆雇员获释回香港/a-50147761?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">被释放</a>回到香港。</li><li><a href="https://www.dw.com/zh/大银行登广告反对暴力-高中生上街延续抗议/a-50127696?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">香港几家银行星期四分别在当地报纸刊登广告，称反对社会暴力行为，呼吁社会各界努力维护香港的国际金融中心地位</a>。</li></ul><p>八方论坛采访<a href="http://blog.udn.com/MengyuanWang/article" target="_blank" rel="noopener">王孟源</a>的报道，值得一看：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/TihkL4zmwOA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><a href="http://blog.udn.com/MengyuanWang/128692003" target="_blank" rel="noopener">王孟源：【香港】對八月12日八方論壇訪問視頻的補充</a></p><h3 id="负利率贷款"><a href="http://www.ruanyifeng.com/blog/2019/08/weekly-issue-70.html" target="_blank" rel="noopener">负利率贷款</a></h3><p>本周有两条新闻，大家可能没注意。</p><p>第一条是丹麦发放全世界第一笔负利率贷款，利率是-0.5%。银行借你一万元，一年后你还9950元。</p><p>据说原因是，银行没有足够的贷款业务，为了减少存款，已经向企业存款收费了。既然存款可以收费，那么贷款负利率也能赚钱。</p><p>第二条是德国政府正在出售负利率的债券。你买一万元国债，若干年后，政府还你9000多元。还真的有人买，据说动机是，以后的负利率会更大，所以这种债券还有升值可能。</p><p>这两条新闻说明了什么？就是一点，欧洲的钱非常多，但是投资机会很少，钱没有去处。所以，移民到欧洲好不好？生活环境是很好，但可能也很苦闷，因为看不到发展机会。</p><p>目前，全世界都是资本过剩。国内的利率已经在下跌，肯定还会不断下跌，投资机会也会越来越稀缺。</p><p>这告诉我们两点启示。一是钱存在银行，长期肯定不会增值；二是融资将会越来越容易，创业项目根本不担心融不到钱。</p><h3 id="亚马逊森林大火">亚马逊森林大火</h3><p>巴西国家空间研究所（INPE）<a href="https://www.dw.com/zh/%E4%BA%9A%E9%A9%AC%E9%80%8A%E9%87%8E%E7%81%AB%E7%83%A7%E4%B8%8D%E5%B0%BD-%E5%B7%B4%E8%A5%BF%E6%80%BB%E7%BB%9F%E9%81%AD%E7%8B%A0%E6%89%B9/a-50134709?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">表示</a>，该国1月至8月期间发生了近7万3千多起森林火灾。相较起来，2018年前8个月只有3万9759起。该研究所数据也显示，火灾主要集中在亚马逊附近的几个州。本月早些时候，巴西面积最大的亚马逊州宣布进入紧急状态。自8月15日以来，巴西各地又发生了9500多起森林火灾，主要集中在亚马逊盆地。</p><p><img src="https://imgs.codewoody.com/uploads/big/c6de002425a3656bd45fee033aaf2200.jpg"></p><figure><img src="https://imgs.codewoody.com/uploads/big/4a89e6a5078db5e811a36eed6c491611.jpg" alt="欧盟的数据，20日生物质燃烧气溶胶的图像。"><figcaption>欧盟的数据，20日生物质燃烧气溶胶的图像。</figcaption></figure><p>针对快速蔓延的亚马逊野火，巴西总统博索纳罗(Jair Bolsonaro)周四(8月23日)强烈回应国际上对他的批评。他说，有迹象显示，这次亚马逊大火灾的始作俑者可能是一些非政府组织，原因是政府撤回了这些组织的资金。他也指责国际上许多批评他的领导人试图“干涉主权”。</p><p>不过，在另外的脸书广播节目中，博索纳罗也称，当地农民可能参与纵火。</p><ul><li><a href="https://www.zhihu.com/question/341908130" target="_blank" rel="noopener">亚马逊雨林大火十天的事情是真的吗？会对地球产生什么影响？</a></li><li><a href="https://www.bbc.com/zhongwen/simp/world-49444685" target="_blank" rel="noopener">BBC中文：亚马逊雨林：创纪录大火源于天灾还是人祸</a></li></ul><h3 id="其他新闻">其他新闻</h3><ul><li><a href="https://www.zhihu.com/question/341413814" target="_blank" rel="noopener">腾讯NextStudio在科隆游戏展公布游戏《重生边缘:SYNCED: Off-Planet》</a></li><li><a href="https://www.zhihu.com/question/340265899/answer/787306437" target="_blank" rel="noopener">阿根廷大选初选，股市、汇率、债券崩盘</a>: 据阿根廷新大陆周刊报道，当地时间8月11日近3300万选民参加了初选投票，占选民总数的75%。投票统计结果显示，“全民阵线”费尔南德斯组合得票率47.37%，而“变革联盟”的马克里组合得票率为32.23%。当晚22点30分，马克里宣布在初选中落败。马克里的意外落败给阿根廷的金融市场带来了巨大震动，阿根廷比索对美元汇率狂泻25%，主要股指暴跌38%，阿根廷在美股上市企业集体暴跌，其中EDN跌59.3%、LomaNegra跌57.3%、BBVA银行跌55.85%。</li><li><a href="https://www.zhihu.com/question/341845915" target="_blank" rel="noopener">迪士尼和索尼谈崩，漫威不再参与蜘蛛侠电影</a></li><li><a href="https://www.zhihu.com/question/341445947" target="_blank" rel="noopener">8月19日 土耳其和俄罗斯在叙利亚激烈交火</a>：土军在努曼以北确认遭遇俄军空袭，有伤亡，土耳其宣称绝不放弃莫莱克阵地，正在一直向包围圈里运送增援部队，土耳其从杜虎儿方向的Tuqan抽调守军增援汉谢洪，北京时间1600第三批土耳其援军进入叙利亚境内，开始南下。</li><li>上周的新闻，但是今天才看到：<a href="https://www.zhihu.com/question/340833030" target="_blank" rel="noopener">8月15日 俄A321撞鸟双发失效迫降玉米地</a>: 俄罗斯乌拉尔航空由莫斯科茹科夫斯基国际机场飞往克里米亚地区辛菲罗波尔的U6178次航班，起飞后不久紧急迫降在机场外的玉米地内，机上234人全部生还，有10人需送往医院治疗。</li><li><a href="https://www.dw.com/zh/丹麦人不打算卖格陵兰？-特朗普：我不来了/a-50110312?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">特朗普想买格陵兰岛</a></li><li><a href="https://www.dw.com/zh/克什米尔冲突激化-巴基斯坦告上海牙/a-50109726?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">克什米尔冲突激化，巴基斯坦告上海牙国际法庭</a></li><li><a href="https://cn.reuters.com/article/usa-sanctions-chinese-0821-wedn-idCNKCS1VC00B?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">美国财政部制裁三名中国人，指控其非法交易芬太尼</a>: 芬太尼是一种成瘾性的类鸦片合成药物，从中国大量流入美国。控制芬太尼的流动也是中美贸易谈判的一部分。三周前美国总统特朗普指责中国方面食言，没有阻止这种使人成瘾的类鸦片合成药物大量流入美国。</li><li><a href="https://www.williamlong.info/archives/5803.html" target="_blank" rel="noopener">Steam中国正式定名为&quot;蒸汽平台&quot;</a></li><li><a href="https://www.zhihu.com/question/341926440" target="_blank" rel="noopener">《哪吒之魔童降世》票房超越《复联4》跻身中国内地票房榜前三</a></li><li>这周是不是开了G7？这个G7已经几乎没有存在感了。</li></ul><h2 id="文章与资源">文章与资源</h2><ul><li><a href="https://www.network360.tv/#!/home" target="_blank" rel="noopener">八方论坛</a>: 美籍华人史东做的访谈节目。我听过好几期了，质量非常高，每期节目就少数一两个话题做深入讨论。史东本人是<a href="https://www.zhihu.com/question/54646932/answer/793902633" target="_blank" rel="noopener">抗战英雄独臂飞将军石邦藩的幼子</a>。</li><li><a href="https://humdi.net/vnstat/" target="_blank" rel="noopener">vnstat</a>: 网络流量统计工具，非常好用</li></ul><h2 id="言论">言论</h2><ul><li>習近平之所以要修憲取消任期限制，原因在於他不放心在中國實力超越美國霸主的這個渡河過程中途換馬，尤其是内部改革反對者眾，如果只有十年的固定任期，必然會有普遍的以拖待變心態。取消任期限制能消弭陽奉陰違的消極態度，倒不是他真想要做終身總統。我個人的猜測是有超過一半的可能，他會在2027年卸任。如果真是如此，那麽習近平很可能也不放心把統一這樣重要的工作留給下任，假使外部的時機也成熟了，他只需要有合適的導火綫就能出手。 --- <a href="http://blog.udn.com/MengyuanWang/128020354" target="_blank" rel="noopener">王孟源的博客</a></li><li>在一次制订美国宪法的会议上，有位议员说：“在宪法里要规定一条：常规部队任何时候都不得超过5000人。华盛顿平静地说：“这位先生的建议的确很好。但我认为还要加上一条：侵略美国的外国军队，任何时候都不得超过3000人。”</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/bdf4d2ef8d46da7e556dc8ad5fd515e3.jpg&quot;&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>C++ 中的字符串分割</title>
    <link href="http://www.codewoody.com/posts/38198/"/>
    <id>http://www.codewoody.com/posts/38198/</id>
    <published>2019-08-14T07:22:11.000Z</published>
    <updated>2019-08-14T07:39:46.327Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/dfcao/p/cpp-FAQ-split.html" target="_blank" rel="noopener">原文地址</a></p><h2 id="自己用stl实现">自己用STL实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; split(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">const</span> <span class="built_in">string</span> &amp;seperator)&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; result;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="built_in">string</span>::size_type string_size;</span><br><span class="line">  string_size i = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(i != s.size())&#123;</span><br><span class="line">    <span class="comment">//找到字符串中首个不等于分隔符的字母；</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i != s.size() &amp;&amp; flag == <span class="number">0</span>)&#123;</span><br><span class="line">      flag = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(string_size x = <span class="number">0</span>; x &lt; seperator.size(); ++x)</span><br><span class="line">    　　<span class="keyword">if</span>(s[i] == seperator[x])&#123;</span><br><span class="line">      　　++i;</span><br><span class="line">      　　flag = <span class="number">0</span>;</span><br><span class="line">     　　 <span class="keyword">break</span>;</span><br><span class="line">    　　&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找到又一个分隔符，将两个分隔符之间的字符串取出；</span></span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    string_size j = i;</span><br><span class="line">    <span class="keyword">while</span>(j != s.size() &amp;&amp; flag == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>(string_size x = <span class="number">0</span>; x &lt; seperator.size(); ++x)</span><br><span class="line">    　　<span class="keyword">if</span>(s[j] == seperator[x])&#123;</span><br><span class="line">      　　flag = <span class="number">1</span>;</span><br><span class="line">     　　 <span class="keyword">break</span>;</span><br><span class="line">    　　&#125;</span><br><span class="line">      <span class="keyword">if</span>(flag == <span class="number">0</span>) </span><br><span class="line">    　　++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i != j)&#123;</span><br><span class="line">      result.push_back(s.substr(i, j-i));</span><br><span class="line">      i = j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> s = <span class="string">"a,b*c*d,e"</span>;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v = split(s, <span class="string">",*"</span>); <span class="comment">//可按多个字符来分隔;</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::size_type i = <span class="number">0</span>; i != v.size(); ++i)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="comment">//输出: a b c d</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更加简洁的版本如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SplitString</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; v, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::size_type pos1, pos2;</span><br><span class="line">  pos2 = s.find(c);</span><br><span class="line">  pos1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">std</span>::<span class="built_in">string</span>::npos != pos2)</span><br><span class="line">  &#123;</span><br><span class="line">    v.push_back(s.substr(pos1, pos2-pos1));</span><br><span class="line">    pos1 = pos2 + c.size();</span><br><span class="line">    pos2 = s.find(c, pos1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(pos1 != s.length())</span><br><span class="line">    v.push_back(s.substr(pos1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用c语言中的strtok-函数来进行分割">用C语言中的strtok 函数来进行分割</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[] = <span class="string">"a,b*c,d"</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *sep = <span class="string">",*"</span>; <span class="comment">//可按多个字符来分割</span></span><br><span class="line">  <span class="keyword">char</span> *p;</span><br><span class="line">  p = strtok(s, sep);</span><br><span class="line">  <span class="keyword">while</span>(p)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s "</span>, p);</span><br><span class="line">    p = strtok(<span class="literal">NULL</span>, sep);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出: a b c d</span></span><br></pre></td></tr></table></figure><h2 id="使用boost库中的split函数">使用boost库中的split函数</h2><p>boost库有很多方法来实现split，也包含了一个split函数，可以直接使用，非常实用而且强大，但是得自己下载boost库。使用代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/algorithm/string.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> boost;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">( <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; &amp; v )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> n = <span class="number">0</span>; n &lt; v.size(); n++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; v[ n ] &lt;&lt; <span class="string">"\"\n"</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> s = <span class="string">"a,b, c ,,e,f,"</span>;</span><br><span class="line">  <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; fields;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Original = \""</span> &lt;&lt; s &lt;&lt; <span class="string">"\"\n\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Split on \',\' only\n"</span>;</span><br><span class="line">  split( fields, s, is_any_of( <span class="string">","</span> ) );</span><br><span class="line">  print( fields );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Split on \" ,\"\n"</span>;</span><br><span class="line">  split( fields, s, is_any_of( <span class="string">" ,"</span> ) );</span><br><span class="line">  print( fields );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Split on \" ,\" and elide delimiters\n"</span>; </span><br><span class="line">  split( fields, s, is_any_of( <span class="string">" ,"</span> ), token_compress_on );</span><br><span class="line">  print( fields );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多阅读">更多阅读</h2><ul><li><a href="https://www.fluentcpp.com/2017/04/21/how-to-split-a-string-in-c/" target="_blank" rel="noopener">How to split a string in C</a></li><li><a href="http://www.cplusplus.com/faq/sequences/strings/split/" target="_blank" rel="noopener">Split a string</a></li><li><a href="https://www.zhihu.com/question/36642771" target="_blank" rel="noopener">C++ 的 string 为什么不提供 split 函数？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/dfcao/p/cpp-FAQ-split.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;自己用stl实现&quot;&gt;自己用STL实现&lt;/h2&gt;

      
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://www.codewoody.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-8</title>
    <link href="http://www.codewoody.com/posts/60301/"/>
    <id>http://www.codewoody.com/posts/60301/</id>
    <published>2019-08-12T03:59:48.000Z</published>
    <updated>2019-08-24T06:48:35.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="热点环球网记者付国豪在香港机场被拘禁">热点·环球网记者付国豪在香港机场被拘禁</h3><p><img src="https://imgs.codewoody.com/uploads/big/d08f64882bfda4b582bc16d93fbe49d8.jpg"></p><iframe width="560" height="315" src="https://www.youtube.com/embed/ICspR9cEok0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>一时之间，舆论哗然，这个问题既然登上了<a href="https://www.zhihu.com/question/340424050" target="_blank" rel="noopener">知乎热榜第一</a>，也足见官方态度。之前也有另外一名大陆男子徐锦炀被打，其身份确实是大陆的公安。不过被打的也太惨了。</p><p><img src="https://imgs.codewoody.com/uploads/big/facd92688396bf05545b3da0a838c6f2.jpg"></p><blockquote><p>还有一个问题必须说明：切不要以为香港的事情全由香港人来管，中央一点都不管，就万事大吉了。这是不行的，这种想法不实际，中央确实是不干预特别行政区的具体事务的，也不需要干预。但是，特别行政区是不是也会发生危害国家根本利益的事情呢？难道就不会出现吗？那个时候，北京过问不过问？难道香港就不会出现损害香港根本利益的事情？能够设想香港就没有干扰，没有破坏力量吗？我看没有这种自我安慰的根据。如果中央把什么权力都放弃了，就可能会出现一些混乱，损害香港的利益。所以,保持中央的某些权力，对香港有利无害。</p><p>大家可以冷静地想想，香港有时候会不会出现非北京出头就不能解决的问题呢？过去香港遇到问题总还有个英国出头嘛！总有一些事情没有中央出头你们是难以解决的。中央的政策是不损害香港的利益，也希望香港不会出现损害国家利益和香港利益的事情。要是有呢？所以请诸位考虑，基本法要照顾到这些方面。有些事情，比如一九九七年后香港有人骂中国共产党，骂中国，我们还是允许他骂，但是如果变成行动，要把香港变成一个在“民主”的幌子下反对大陆的基地，怎么办？那就非干预不行。干预首先是香港行政机构要干预，并不一定要大陆的驻军出动。只有发生动乱、大动乱驻军才会出动。但是总得干预嘛!</p><p>--《邓小平文选》第三卷，一九八七年四月十六日，会见香港特别行政区基本法起草委员会委员时的讲话</p></blockquote><p>更多香港的消息如下：</p><ul><li><a href="https://cn.reuters.com/article/hk-airport-court-order-protest-0814-idCNKCS1V402R?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">香港机管局获法庭禁制令禁止干扰机场正常 客运大楼实施进出管制。</a></li><li><a href="https://cn.reuters.com/article/hongkong-protests-usa-navy-visit-0814-idCNKCS1V4035?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">中国拒绝了两艘美国海军军舰未来几周访问香港的请求。</a></li><li><a href="https://www.hkja.org.hk/聲明/香港記者協會對於近日兩宗內地傳媒記者拍攝示威/" target="_blank" rel="noopener">香港記者協會對於近日兩宗內地傳媒記者拍攝示威者時受阻表示遺憾，並譴責暴力對待記者的行為</a></li><li><a href="https://www.sohu.com/na/333118814_115479?scm=1002.5d0059.0.2883-0&amp;spm=smpc.content%2Fnew.nav.2.1565568000026oXoZw5N" target="_blank" rel="noopener">中通社记者遭香港激进示威者围攻，被逼删除照片</a></li><li><a href="https://cn.reuters.com/article/us-trump-hk-china-trade-deal-0815-idCNKCS1V503I?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">特朗普称中国应“人道地”对待香港 然后才能达成贸易协议</a>: 美国总统特朗普周三表示，中国希望达成贸易协议，但其应该首先“人道地”对待香港。这显然把贸易协议与和平解决香港示威问题关联起来了。</li><li><a href="https://cn.reuters.com/article/hk-airport-authority-flights-recovery-08-idCNKCS1V5042?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">周四，香港机场恢复正常运作</a>: 香港机场管理局表示，香港国际机场周四航班恢复正常运作；而昨日航班升降按照重新编配后的计划进行，全日共处理超过1,000班航班，运作畅顺。</li><li><a href="https://www.dw.com/zh/中国大批武警、装甲车集结深圳/a-50035963?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">武警在深圳集结</a></li><li><a href="https://www.zhihu.com/question/340823422/answer/790544346" target="_blank" rel="noopener">2019 年 8 月 16 日香港多家报纸头版，登出李嘉诚「反对暴力」的宣言</a></li><li><a href="https://www.youtube.com/watch?v=ks2e8hpTAso" target="_blank" rel="noopener">有视频资料显示武警已经进入香港</a></li></ul><p><img src="https://imgs.codewoody.com/uploads/big/5104a40e1fcc39a0aab5cbf9cf92a58b.jpg"></p><h3 id="热点特朗普决定推迟对部分中国商品加征关税">热点·<a href="https://cn.reuters.com/article/column-russell-us-trump-trade-tariffs-08-idCNKCS1V40I3?feedType=RSS&amp;feedName=vbc_CN_columnist_all&amp;virtualBrandChannel=14356" target="_blank" rel="noopener">特朗普决定推迟对部分中国商品加征关税</a></h3><p>美国总统特朗普决定推迟对部分中国商品加征关税，无意中承认在与中国正在进行的这场贸易争端中，美国不再掌握主动权。</p><p>美国贸易代表办公室周三宣布，将于9月1日对来自中国的每年价值3,000亿美元的进口产品征收10%的关税，但对于部分商品的关税推迟到12月15日生效。</p><p>推迟加征关税的产品包括手机、笔记本电脑和服装，估计约占3,000亿美元待加征关税商品的一半左右，主要是消费类商品。</p><p>特朗普告诉记者，决定推迟对部分中国商品征收关税，是为了防止美国消费者在圣诞假期购物季之前面临价格上涨。</p><blockquote><p>说好的关税由中国买单呢？</p></blockquote><h3 id="翎客航天自主研发的可回收试验火箭成功回收">翎客航天自主研发的可回收试验火箭成功回收</h3><p>2019 年 8 月 11 日，早上10点半，翎客航天自主研发的新一代可回收试验火箭(RLV-T5)，在青海省冷湖火箭试验基地进行第三次发射以及成功回收。</p><p><img src="https://imgs.codewoody.com/uploads/big/f93cff9f8808357b47ccfe58640e0323.jpg"></p><p><img src="https://imgs.codewoody.com/uploads/big/b5992b6bb9423f5cba1244fb9552de8f.jpg"></p><ul><li><a href="https://www.zhihu.com/question/339689775/answer/783805754" target="_blank" rel="noopener">如何看待 8 月 10 日翎客航天自主研发的可回收试验火箭成功回收？这波操作什么水平?</a></li></ul><h3 id="超强台风利奇马"><a href="https://cn.reuters.com/article/china-typhoon-zheliang-loss-0812-idCNKCS1V2015?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">超强台风「利奇马」</a></h3><p>中国新闻网周日报导，据浙江省报灾系统最新统计，截至11日13时30分，超强台风“利奇马”已致浙江535.8万余人受灾，因灾32人遇难，16人失联。</p><p>报导称，目前浙江已紧急转移安置120.2万人。农作物受灾面积18.5万公顷，绝收约2.3万公顷，因灾倒损房屋3.6万间，直接经济损失157.5亿余元人民币。</p><p>中国气象局网站新闻称，今年第9号台风“利奇马”已于10日20时在浙江省湖州市南浔境内由强热带风暴级减弱为热带风暴级。“利奇马”将继续北上影响黄淮、华北，给这些地区带来强降水。</p><p><img src="https://imgs.codewoody.com/uploads/big/ab9eef2180a25bd520e26b5c31e57350.jpg"></p><h3 id="上海迪士尼的负面新闻">上海迪士尼的负面新闻</h3><p>最近上海迪士尼遭遇负面新闻二连击啊，包括</p><ul><li><a href="https://www.zhihu.com/question/339594280/answer/782474101" target="_blank" rel="noopener">上海迪士尼禁止自带饮食被大学生告了</a>: “禁止携带食物入园”、“入园需翻包检查”等规定一直饱受争议。今年年初，华东政法大三学生小王因携带零食被园方工作人员翻包阻拦。小王查询发现，美国和法国的3处迪士尼并没有禁止消费者携带食物进园，而中国和日本的迪士尼乐园却禁止。上海迪士尼相关规定目的是提高园内餐饮业的创收，侵害了消费者的合法权益。</li><li><a href="https://www.zhihu.com/question/339695317/answer/784344583" target="_blank" rel="noopener">上海迪士尼台风天气首次闭园且不予退票</a></li></ul><h3 id="美国亿万富翁爱泼斯坦狱中死亡"><a href="http://www.xinhuanet.com/world/2019-08/12/c_1210238072.htm" target="_blank" rel="noopener">美国亿万富翁爱泼斯坦狱中死亡</a></h3><figure><img src="https://imgs.codewoody.com/uploads/big/4289349033d7e76d93e4467ffe63283f.jpg" alt="杰弗里·爱德华·爱泼斯坦（英语：Jeffrey Edward Epstein，1953年1月20日－2019年8月10日），美国投资家、科研慈善事业赞助者，在册性罪犯。"><figcaption>杰弗里·爱德华·爱泼斯坦（英语：Jeffrey Edward Epstein，1953年1月20日－2019年8月10日），美国投资家、科研慈善事业赞助者，在册性罪犯。</figcaption></figure><p>据NBC报道，涉嫌与未成年人性交易被起诉的美国富翁爱泼斯坦在狱中自杀身亡。 7月初，爱泼斯坦被逮捕，纽约检察官对其提出两项指控：性交易与共谋性交易。他被指性侵多名未成年女性，并为权贵提供性交易，曾与克林顿、安德鲁王子、特朗普等人交好。在爱泼斯坦被捕后，包括维密老板、美国前劳工部长多位名人被卷入此事，特朗普也因二人当年关系受到质疑，但他称已经十余年未与爱泼斯坦讲话。</p><ul><li><a href="https://www.zhihu.com/question/339812776" target="_blank" rel="noopener">美国富翁爱泼斯坦在狱中死亡有什么黑幕？</a></li><li><a href="http://www.xinhuanet.com/world/2019-08/12/c_1210238072.htm" target="_blank" rel="noopener">美国亿万富翁爱泼斯坦狱中死亡 初步推断死因是自杀</a></li></ul><p><img src="https://imgs.codewoody.com/uploads/big/4e7d8b0373871c85516515d5b940480a.jpg"></p><h3 id="港澳单列事件"><a href="https://www.zhihu.com/question/340107673" target="_blank" rel="noopener">「港澳单列」事件</a></h3><p>最近众多奢侈品牌都发生了在T恤上单独将香港或者台湾列成国家而早到大陆网民声讨的事件。这些品牌包括范思哲、蔻驰、雅诗兰黛、亚瑟士等。</p><p><img src="https://imgs.codewoody.com/uploads/big/e164f66bdbbf6bc33b6536b04f148ae5.jpg"></p><p>这些品牌的国内代言艺人纷纷表示与其品牌借阅。率先表态的是杨幂旗下的嘉行工作室。</p><p><img src="https://imgs.codewoody.com/uploads/big/118be5e886c0d1598b49947267a27853.jpg"></p><p>后续亦有刘雯，易烊千玺，关晓彤、许魏洲和任嘉伦等也纷纷表态。这些品牌后来陆续发布道歉声明：</p><p><img src="https://imgs.codewoody.com/uploads/big/7e860bb9a247b89561ced7f3b58fe71e.jpg"></p><p>有<a href="https://mp.weixin.qq.com/s/inRvfGyBp4TshzRRUNMvTQ" target="_blank" rel="noopener">公众号文章</a>称此问题是因为这些品牌使用了ISO-3166-2标准导致的。</p><h3 id="印度撤回克什米尔的自治区地位"><a href="https://www.dw.com/zh/%E5%85%8B%E4%BB%80%E7%B1%B3%E5%B0%94%E5%8D%B1%E6%9C%BA%E4%B8%8B%E5%8D%B0%E5%BA%A6%E5%A4%96%E9%95%BF%E5%8C%86%E5%BF%99%E8%AE%BF%E5%8D%8E/a-49985880" target="_blank" rel="noopener">印度撤回克什米尔的自治区地位</a></h3><p>印度政府突然宣布废除克什米尔自治地位。这一消息不仅引发地方紧张局势升温，同时也令印巴关系急剧恶化。继巴基斯坦外长紧急访华之后，印度外长苏杰生也于本周日到访北京。</p><p><img src="https://imgs.codewoody.com/uploads/big/1434bfa15afad6dd10977be8857c9c7c.png"></p><p>本周，中国外交部举行的新闻例会上，有记者问到&quot;印度政府宣布成立'拉达克中央直辖区'，其中涉及中印边界西段领土。中方对此有何评论？&quot;外交部新闻发言人华春莹回答说：&quot;中方一直反对印方将中印边界西段的中方领土划入印行政管辖范围。这一立场是坚定、一贯的，从无任何改变。&quot;她说：&quot;近日印方以单方面修改国内法律的形式，继续损害中方的领土主权，这一做法不可接受，也不会产生任何效力。我们敦促印方在边界问题上谨言慎行，严格遵守双方达成的相关协定，避免采取导致边界问题进一步复杂化的举动。&quot;</p><blockquote><p>在香港不断闹的现在，这条新闻真的有意思</p></blockquote><p>更多相关新闻</p><ul><li><a href="https://www.dw.com/zh/%E5%A4%96%E4%BA%A4%E5%9C%88%E4%BA%BA%E5%A3%AB%E4%B8%AD%E5%9B%BD%E6%8F%90%E8%AE%AE%E5%AE%89%E7%90%86%E4%BC%9A%E5%AE%A1%E8%AE%AE%E5%85%8B%E4%BB%80%E7%B1%B3%E5%B0%94%E9%97%AE%E9%A2%98/a-50034534?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">外交圈人士：中国提议安理会审议克什米尔问题</a></li></ul><h3 id="北京劳斯莱斯堵占医院应急通道"><a href="/knowledge-base/backups/劳斯莱斯占用医院应急通道.html">北京劳斯莱斯堵占医院应急通道</a></h3><iframe width="560" height="315" src="https://www.youtube.com/embed/49Pe_cU0EL0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>据网友爆料，8 月 14 日上午，一女子驾驶京 A 牌劳斯莱斯在北京妇产医院东院区疑似因排队问题与保安发生争执，并堵住救护通道。民警到达后，女子依然不愿挪车。</p><p>目前微博上的视频删除的差不多了，估计有点背景，但是下面这个回答说的比较有道理：</p><blockquote><p>我看是自我审查闹得，毕竟各网站负责删帖的人也是老百姓，他们并不知道犯这种事本身就说明富贵不到哪儿去。要知道真正有背景、有钱的人根本不可能犯这事。首先，来之前肯定打过招呼，有人接待。其次，医院本来就有机动车位留着。最后，有司机。而且，包子有肉不在褶上，公车没豪车的。像这种自己开车，停车都没地方停，科室主任一级都没人下来迎接的人，能富贵到哪儿去呦。。。医院停车难不是一天两天了，我看还是同病相怜吧。 -- <a href="https://www.zhihu.com/question/340521728/answer/789057660" target="_blank" rel="noopener">回答地址</a></p></blockquote><p>以及，玩弄典故：</p><blockquote><p>其一：是大热天的正午，一个农妇做事做得正苦，忽而叹道：‘皇后娘娘真不知道多么快活。这时还不是在床上睡午觉，醒过来的时候，就叫道：拿个柿饼来！’</p><p>其二：曹孟德在马上一声大叫，关二弟听我说你且慢逃。 在许都我待你哪点儿不好，顿顿饭包饺子又炸油条。你曹大嫂亲自下厨烧锅燎灶，大冷天只忙得热汗不消。白面馍夹腊肉你吃腻了，又给你蒸一锅马齿菜包。搬蒜臼还把蒜汁捣，萝卜丝拌香油调了一瓢。</p><p>其三：东宫娘娘烙大饼，西宫娘娘剥大葱。</p></blockquote><h3 id="器官黑市">器官黑市</h3><h3 id="其他新闻">其他新闻</h3><ul><li><a href="https://www.ifanr.com/1247474?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=" target="_blank" rel="noopener">Tumblr换东家了，但是买主不是Pornhub</a>: 没了小黄图的汤不热身价暴跌。8月13日，博客平台 Tumblr 以 300万美元卖给了 WordPress 的母公司。2013年，雅虎收购 Tumblr 花了11亿美元，这意味着仅仅六年时间，Tumblr 变得一钱不值。</li><li><a href="https://www.dw.com/zh/%E5%AA%92%E4%BD%93%E5%A4%96%E6%95%99%E5%9C%A8%E5%8D%8E%E8%A2%AB%E6%8B%98%E6%8D%95%E6%95%B0%E9%87%8F%E6%BF%80%E5%A2%9E/a-50004765?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">外教在华被拘捕数量激增</a>: 前几周的舆论风向转变带来的影响是普遍的。</li><li><a href="https://www.dw.com/zh/美国债息「倒挂」-经济衰退警钟敲响/a-50031257?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">美债利率倒挂</a>： 美国国债收益率曲线在12年来首次暂时逆转。美国股市因此大幅下挫。这一消息也表现出投资者对经济衰退的担忧。</li><li><a href="https://www.williamlong.info/archives/5797.html" target="_blank" rel="noopener">北京将允许外资提供VPN服务</a></li><li><a href="http://www.huxiu.com/article/313541.html?f=wangzhan" target="_blank" rel="noopener">8月15日，滴滴回应或被下架登上热搜</a></li><li><a href="https://www.cnbeta.com/articles/tech/879007.htm" target="_blank" rel="noopener">传言阿里巴巴收购网易考拉业务</a>: 8月15日晚间，据财新报道，从接近交易的人士处得知，阿里巴巴收购网易考拉的交易已确定，交易对价20亿美元，阿里巴巴将以全现金方式支付，未来双方还将开展其他形式的合作和交易。截止发稿，网易和阿里巴巴集团对此交易的回复均为不予置评。</li><li><a href="https://www.cnbeta.com/articles/tech/878691.htm" target="_blank" rel="noopener">网易市值超过百度</a>: 周三美国大跌道指跌幅为3.05%报25479.42点；纳指跌3.02%报7773.94点，标普500指数跌2.93%报2840.60点。网易股价逆势上涨0.49%，市值超过百度。</li></ul><h2 id="文章与资源">文章与资源</h2><ul><li><a href="http://www.huxiu.com/article/312817.html?f=wangzhan" target="_blank" rel="noopener">创始人应该给自己发多少工资？</a></li><li><a href="https://www.youtube.com/watch?v=uwoD5YsGACg" target="_blank" rel="noopener">TCP 与 UDP 的区别</a></li><li>微信Mac版的最新更新支持设置代理了</li><li><a href="https://medium.com/@filipvitas/how-to-bypass-slider-captcha-with-js-and-puppeteer-cd5e28105e3c" target="_blank" rel="noopener">破解滑块认证: Puppeteer</a></li><li><a href="https://elixir.bootlin.com/linux/latest/source" target="_blank" rel="noopener">Linux内核代码检索网站: bootlin</a></li><li><a href="https://www.zerotier.com/" target="_blank" rel="noopener">Zerotier</a>: 开源的VPN方案</li><li><a href="https://www.plex.tv/zh/?langr=1" target="_blank" rel="noopener">Plex</a>: 流媒体服务框架</li><li><a href="https://www.zhihu.com/question/21359049/answer/622344230" target="_blank" rel="noopener">知乎上一篇折腾家用NAS的回答</a></li><li><a href="http://www.webmin.com/" target="_blank" rel="noopener">Webmin</a>：Unix/Linux网页管理工具</li><li><a href="https://emby.media/index.html" target="_blank" rel="noopener">Emby</a>: 类似Plex的流媒体框架</li></ul><h2 id="言论">言论</h2><ul><li>做得快不仅可以让你在单位时间内完成更多的工作，而且 因为你工作得很快，所以你会觉得成本低，从而倾向于做更多。 -- <a href="http://jsomers.net/blog/speed-matters" target="_blank" rel="noopener">出处</a>。</li><li>为了让我们的生活更轻松，最好只有一小部分代码库处理状态，其他代码都是无状态和纯的。实际上，这就是前端的 Redux 库取得巨大成功的主要原因。</li><li>20世纪50年代，建造月球基地是一项工程和技术挑战。 今天，它基本上是一个政治和经济挑战，难点是说服足够多的人，花时间和精力去做这件事是值得的。</li><li>「羁旅侨士，重帑在外，上间谋计，下与民事者，可亡也。」- 韩非子 · 亡徵》公元前250年（<a href="https://www.zhihu.com/question/340823422/answer/790657074" target="_blank" rel="noopener">解析</a>）</li></ul><h2 id="典故">典故</h2><h3 id="郑伯克段于鄢">郑伯克段于鄢</h3><p>初，郑武公娶于申，曰武姜，生庄公及共叔段。庄公寤生，惊姜氏，故名曰寤生，遂恶之。爱共叔段，欲立之。亟请于武公，公弗许。</p><p>及庄公即位，为之请制。公曰：“制，岩邑也，虢叔死焉。佗邑唯命。”请京，使居之，谓之京城大叔。祭仲曰：“都城过百雉，国之害也。先王之制：大都不过参国之一，中五之一，小九之一。今京不度，非制也，君将不堪。”公曰：“姜氏欲之，焉辟害？”对曰：“姜氏何厌之有！不如早为之所，无使滋蔓，蔓难图也。蔓草犹不可除，况君之宠弟乎！”公曰：“<strong>多行不义，必自毙</strong>，子姑待之。”</p><p>既而大叔命西鄙北鄙贰于己。公子吕曰：“国不堪贰，君将若之何？欲与大叔，臣请事之；若弗与，则请除之。无生民心。”公曰：“无庸，将自及。”大叔又收贰以为己邑，至于廪延。子封曰：“可矣，厚将得众。”公曰：“不义，不暱，厚将崩。”</p><p>大叔完聚，缮甲兵，具卒乘，将袭郑。夫人将启之。公闻其期，曰：“可矣！”命子封帅车二百乘以伐京。京叛大叔段，段入于鄢，公伐诸鄢。五月辛丑，大叔出奔共。</p><p>书曰：“郑伯克段于鄢。”段不弟，故不言弟；如二君，故曰克；称郑伯，讥失教也；谓之郑志。不言出奔，难之也。</p><p>遂寘姜氏于城颍，而誓之曰：“不及黄泉，无相见也。”既而悔之。颍考叔为颍谷封人，闻之，有献于公，公赐之食，食舍肉。公问之，对曰：“小人有母，皆尝小人之食矣，未尝君之羹，请以遗之。”公曰：“尔有母遗，繄我独无！”颍考叔曰：“敢问何谓也？”公语之故，且告之悔。对曰：“君何患焉？若阙地及泉，隧而相见，其谁曰不然？”公从之。公入而赋：“大隧之中，其乐也融融！”姜出而赋：“大隧之外，其乐也洩洩。”遂为母子如初。</p><p>君子曰：“颍考叔，纯孝也，爱其母，施及庄公。《诗》曰：‘孝子不匮，永锡尔类。’其是之谓乎。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/d08f64882bfda4b582bc16d93fbe49d8.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>温和穆斯林和极端穆斯林旧事</title>
    <link href="http://www.codewoody.com/posts/51087/"/>
    <id>http://www.codewoody.com/posts/51087/</id>
    <published>2019-08-09T07:29:16.000Z</published>
    <updated>2019-08-09T07:49:37.042Z</updated>
    
    <content type="html"><![CDATA[<p>前几年的时候的，国内回汉矛盾加上国际上以ISIS为代表的穆斯林恐怖主义的泛滥，导致针对穆斯林的批评大涨。于是很多穆斯林出来辩称说那些极端恐怖分子只是少数，并不能代表所有的穆斯林。但是喊打喊杀的极端穆斯林所抢占出来的生活空间，确实在相当大的程度上被所有其他的温和穆斯林所享有了。这种模式我们称之为极端穆斯林和温和穆斯林模式。即一部分人暴力充当打手，另一部分则态度模棱两可，向外界宣称自己的群体本质并不坏，但是回过头来享受打手产生的红利。</p><p>说这些是不是因为要重温就是，而是最近的香港人也开始反映出这个样子。国内很多公众号的文章在讨论香港的问题的时候，总是要强调说虽然游行队伍里面混有港独分子，但是他们并不能代表大多数的香港人，大多数香港人是不支持港独的。这看着很有迷惑性，也符合大家对于香港同胞的期待。不过，这其实就是典型的极端穆斯林和温和穆斯林套路。几十万人的队伍，如果大家都是反对港独的，那么这些占少数的港独分子怎么可能在队伍中来去自如，还打着港英旗帜，喊港独口号呢？事实上，如果有一个藏独在天通苑地铁站打出雪山狮子旗，喊西藏独立，他能站着出地铁站吗？游行队伍里能混杂港独分子，而未传出示威者与港独分子剧烈冲突的消息，这本是就是不正常。在一个有关香港讨论的电报群里，我也曾经质问过群里参与讨论的香港人是有参与发送中的各个小团体，工会之类的负责人出来谴责港独的，他们一直没有正面回答这个问题。</p><p>另一方面，这些激进港独在前面冲锋陷阵，确实是为整个游行队伍带来了巨大的利益的。这些激进派通常敢于出手，能制造激烈的警民冲突，甚至挺身冲击立法会，中联办，在舆论上有巨大的影响力。可能几千个港独分子的行动就能比几十万，甚至上百万的普通示威者产生更大的影响力。自然，参与反送中的重要人物们就不会愿意公开谴责港独，与港独分子划清界限，要是他们和港独做切割了，那谁来给他们充当打手冲锋陷阵呢？不仅如此，在反对派对港府提出的五大诉求中，就有包含一条要求赦免所有被捕的示威者，更是让各个港独分子更加越战越勇，毫无后顾之忧了。</p><p>因此，我们可以看出，这些参与游行香港人，绝大多数都是所谓的“温和穆斯林”。他们未必直接支持港独，但也不会是旗帜鲜明地反港独的。这些中间派是不是港独呢？我们叫他们温和的港独吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几年的时候的，国内回汉矛盾加上国际上以ISIS为代表的穆斯林恐怖主义的泛滥，导致针对穆斯林的批评大涨。于是很多穆斯林出来辩称说那些极端恐怖分子只是少数，并不能代表所有的穆斯林。但是喊打喊杀的极端穆斯林所抢占出来的生活空间，确实在相当大的程度上被所有其他的温和穆斯林所享有了
      
    
    </summary>
    
      <category term="杂谈" scheme="http://www.codewoody.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-7</title>
    <link href="http://www.codewoody.com/posts/61389/"/>
    <id>http://www.codewoody.com/posts/61389/</id>
    <published>2019-08-05T02:48:41.000Z</published>
    <updated>2019-08-19T05:16:28.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="香港周一全港大罢工"><a href="https://cn.nytimes.com/china/20190805/hong-kong-protests/" target="_blank" rel="noopener">香港周一全港大罢工</a></h3><blockquote><p>一上午，香港大罢工及示威活动令这座城市陷入瘫痪。上百航班停飞，数百万人早间通勤受阻。午后1时左右，港铁全线服务陆续恢复，全港七区下午将举行罢工集会。香港特首林郑月娥警告称，抗议者将香港“推向不归路”。她指部分极端分子令事件变质，“挑战国家主权，危害一国两制”，并表示当局将“决心维护法治”。</p></blockquote><p>这轮香港抗议潮流是因为反对《逃犯条例》，不过《逃犯条例》之前已经被港府宣布寿终正寝，现在的抗议，又是为了什么呢？我看了这么多关于今天（5日）罢工的新闻，就是没看明白抗议者的诉求具体是什么？无非就是港独嘛，能不能「理直气壮」一点。</p><p>此前，美国总统特朗普在被采访时就香港的表态也是：「有人说，事情发展到一定程度时，他们会阻止。但这是香港和中国（内地）之间的事，因为香港是中国的一部分。必须由他们自己处理这个问题，不需要建议。」</p><p>话说为什么港府一直拒绝采用撤回修订草案？我的看法是，港府采用的「寿终正寝」的书法，意指推行这一条例受到阻力中中途停止，是一个比较中性的说法。反对派一直要求港府说「撤回」这个词，其实是让港府承认当初提出修改《逃犯条例》本身是错误的，是让港府认错。既然认错了，就要有人负责，进而可以剑指特首林郑月娥，要求其下台。</p><p>本来，让港府认错也未尝不可，对中央政府来说，让特首下台，也不是不行。2003年9月5日，时任特首就在推动《国家安全（立法条文）条例草案》引发大规模抗议之后，宣布撤回《国家安全（立法条文）条例草案》，并于2005年3月10日宣布以身体不适为由向中央呈辞。3月12日，国务院接纳其辞职。</p><p>有意思的是，十几年前的《国家安全（立法条文）条例草案》始末，和本次的《逃犯条例》颇有类似之处。当时，反对派举行的游行中，参与者也是大多穿黑色衣服。不过这次的抗议活动，港独色彩太浓厚，甚至有直接挑战国家主权的行为（如冲击中联办，扔国旗下海等），此时港府认错，如同向港独势力认错，届时，恐怕港独势力得寸进尺。另一方面，今日中国内部氛围和十几年前不可同日而语，中央政府，也有去正面刚废青的底气。</p><ul><li><a href="https://cn.reuters.com/article/hk-official-statement-updates-0807-wedn-idCNKCS1UX0NI?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">香港正面临回归以来最严峻的局面 中央高度关注--港澳办主任</a></li><li><a href="https://cn.reuters.com/article/hk-unrest-official-statement-0806-tues-idCNKCS1UW0NF?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">香港要“止暴制乱、恢复秩序” 中央坚定不移支持林郑月娥--港澳办（更新版）</a>: “反对派逼迫香港特首林郑月娥辞职的企图注定不能得逞，中央对特首的支持是坚定不移、毫不动摇的。”港澳办发言人在发布会上表示。</li><li><a href="/knowledge-base/backups/香港问题中的一些谣言和误解.html">香港问题中的一些谣言和误解</a></li><li><a href="https://matters.news/@leungkaichihk/%E9%A6%99%E6%B8%AF%E4%B9%8B%E5%A4%8F-%E8%AA%A4%E8%AE%80%E8%88%87%E7%9C%9F%E7%9B%B8-zdpuB37rgNnWAtUraUQCdmwohCCNGqLbs5cEmescBxTdbSfas" target="_blank" rel="noopener">香港之夏：誤讀與真相</a></li><li>一个讨论相关问题的Telegram群<a href="https://t.me/hkchats" target="_blank" rel="noopener">https://t.me/hkchats</a></li><li><a href="/_posts/2019-08-09-温和穆斯林和极端穆斯林旧事.html">温和穆斯林和极端穆斯林旧事</a></li><li><a href="https://cn.reuters.com/article/china-cathay-pacific-warning-0810-idCNKCS1V000K?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">8月9日中国民航局向香港国泰航空发出重大航空安全风险警示</a>: 指其近期在多起事件中暴露出的安全风险及隐患，要求对参与和支持非法游行示威等的人员立即停止其执飞内地航班。</li></ul><h3 id="人民币汇率破7"><a href="https://cn.reuters.com/article/column-yuan-fx-bottom-0805-idCNKCS1UV0CS?feedType=RSS&amp;feedName=vbc_CN_columnist_all&amp;virtualBrandChannel=14356" target="_blank" rel="noopener">人民币汇率破7</a></h3><p>8月5日，美元兑人民币汇率骤然波动，离岸、在岸价格均小幅升破 “7”这一整数关口。不过，这次汇率调整是中国央行放任的结果。<a href="https://www.bbc.com/zhongwen/simp/business-49250694" target="_blank" rel="noopener">中国央行不再像以前死死守着美元兑人民币“七元”的心理关口，而是放手让人民币自由贬值</a>。</p><p><img src="https://imgs.codewoody.com/uploads/big/f89c218db2401cbc26bae3a8a5718705.png"></p><p>有意思的是，这次因为中国央行没有干预汇率，而导致同一天<a href="https://cn.nytimes.com/business/20190806/us-china-yuan-renminbi-trump/" target="_blank" rel="noopener">美国将中国列为汇率操纵国</a>了。</p><h3 id="暂停大陆影片和人员参加2019年金马影展"><a href="https://www.zhihu.com/question/339100249" target="_blank" rel="noopener">暂停大陆影片和人员参加2019年金马影展</a></h3><p><img src="https://imgs.codewoody.com/uploads/big/e82ba6c39ec03aab0c9da728dc13a0cc.jpg"></p><h3 id="华为发布鸿蒙系统">华为发布鸿蒙系统</h3><blockquote><p>8月9日，万众瞩目的华为开发者大会如期举行，华为消费者业务CEO余承东重磅发布鸿蒙操作系统(HarmonyOS)！据悉，鸿蒙是全世界第一个基于微内核的全场景分布式操作系统！非常巧的是，今天恰巧是华为消费者业务 CEO 余承东 50岁生日。</p></blockquote><p><img src="https://imgs.codewoody.com/uploads/big/7f08c1fc9c606188959792b1af666e80.gif"></p><p>鸿蒙的四大技术特性：</p><ol type="1"><li>分布式架构首次用于终端OS，实现跨终端无缝协同体验</li><li>确定时延引擎和高性能IPC技术实现系统天生流畅</li><li>基于微内核架构重塑终端设备可信安全</li><li>通过统一IDE支撑一次开发，多端部署，实现跨终端生态共享</li></ol><p>更多信息参考:</p><ul><li><a href="https://www.zhihu.com/question/339567108" target="_blank" rel="noopener">如何看待华为 2019 年 8 月 9 日正式发布的 HarmonyOS 鸿蒙系统？</a></li><li><a href="https://mp.weixin.qq.com/s/ly4GOOQXnwIJWn-50Ky4pw" target="_blank" rel="noopener">华为鸿蒙问世！余承东喊话安卓：全球首款微内核全场景分布式OS开源！</a></li></ul><h3 id="中国民航局向香港国泰航空发出重大航空安全风险警示"><a href="https://cn.reuters.com/article/china-cathay-pacific-warning-0810-idCNKCS1V000K?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">中国民航局向香港国泰航空发出重大航空安全风险警示</a></h3><blockquote><p>中国民航局周五向香港国泰航空发出重大航空安全风险警示，指其近期在多起事件中暴露出的安全风险及隐患，要求对参与和支持非法游行示威等的人员立即停止其执飞内地航班。</p><p>民航局网站发文称，近期，香港国泰航空先后发生飞行人员参与暴力冲击被控暴动罪却未被停止飞行活动，以及恶意泄露航班旅客信息等事件，存在严重威胁航空安全的隐患，造成了恶劣的社会影响，增加了香港至内地的输入性航空安全风险。</p><p>为维护航空运输秩序，切实保护旅客安全，防范航空活动对空中、地面和水面第三人发生损害，民航局在安全风险警示中，对香港国泰航空明确提出三点要求。</p><p>一是自2019年8月10日零时起，对所有参与和支持非法游行示威、暴力冲击活动，以及有过过激行为的人员，立即停止其执飞内地航班或执行与内地航空运输活动相关的一切职务活动。</p><p>二是自2019年8月11日零时起，向其在内地的运行合格审定机构报送所有飞往内地和飞越内地领空的机组人员身份信息，未经审核通过，不予接收该航班。</p><p>三是于2019年8月15日零时前，向其在内地的运行合格审定机构报送公司加强内部管控、提升飞行安全和安保水平的措施方案。</p><p>民航局将视香港国泰航空对上述警示要求的执行情况，依法依规监管处置。同日，民航局责成民航中南地区管理局行政约见了国泰航空。</p></blockquote><p>国泰航空最近似乎比较跳，涉及的事件包括：</p><ol type="1"><li>7月26日国泰航空空服协会煽动在香港机场航站楼内进行示威活动 <img src="https://wx3.sinaimg.cn/mw690/79594e60ly1g5a3d6rxyvj20n01ds11i.jpg"></li><li>国泰航空副机长廖颂贤参与了7·28上环的暴动并被<a href="http://news.dwnews.com/china/news/2019-08-08/60144629.html" target="_blank" rel="noopener">逮捕</a>，但获得<a href="http://www.takungpao.com/news/232109/2019/0802/330032.html" target="_blank" rel="noopener">保释后国泰航空依然让他执飞航班</a></li><li><a href="http://news.dwnews.com/china/news/2019-08-08/60144629.html" target="_blank" rel="noopener">国泰航空的员工泄露了前往成都参加世界警察和消防员运动会的香港警队代表队成员的航班信息</a>。</li></ol><h3 id="其他新闻">其他新闻</h3><ul><li><a href="https://cn.nytimes.com/morning-brief/20190805/xi-cousin-australia-hong-kong-monday-strike/?utm_source=tw-nytimeschinese&amp;utm_medium=social&amp;utm_campaign=cur" target="_blank" rel="noopener">美国二十四小时内发生两起大规模枪击案</a></li><li><a href="https://cn.nytimes.com/morning-brief/20190805/xi-cousin-australia-hong-kong-monday-strike/?utm_source=tw-nytimeschinese&amp;utm_medium=social&amp;utm_campaign=cur" target="_blank" rel="noopener">习近平表弟被澳大利亚当局调查</a>: 习近平表弟齐明为澳大利亚公民，今日卷入一起针对有组织犯罪，洗钱，以及滥用移民政策的调查中。</li><li><a href="https://www.williamlong.info/archives/5788.html" target="_blank" rel="noopener">苹果信用卡8月6日起正式向用户开放注册</a></li><li><a href="https://cn.reuters.com/article/earthquake-taiwan-0808-thur-idCNKCS1UY012?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">8月8日上午5:28，台湾东部海域发生里氏6级地震</a>。</li><li><a href="https://earther.gizmodo.com/satellite-images-show-vast-swaths-of-the-arctic-on-fire-1836500468" target="_blank" rel="noopener">北极圈发生大火</a></li><li><a href="http://www.huxiu.com/article/312640.html?f=wangzhan" target="_blank" rel="noopener">鹿晗的《上海堡垒》扑街</a>：流量明星的时代是真的要过去了。</li><li><a href="https://www.williamlong.info/archives/5789.html" target="_blank" rel="noopener">华为向伟创力索赔4亿</a>，伟创力则表示仍希望能合作。伟创力是华为的代工厂商，其在美国政府将华为纳入「实体清单」之后，伟创力扣留了其在珠海工场的华为价值约4亿的物资，包括生产设备，原材料和半成品。</li><li><a href="http://www.xinhuanet.com/politics/2019-08/09/c_1124855449.htm" target="_blank" rel="noopener">超强台风「利奇马」登陆江浙沪</a></li></ul><h2 id="资源">资源</h2><ul><li><a href="https://github.com/shubhampathak/autosetup" target="_blank" rel="noopener">autosetup</a>: 一个 Bash 脚本，可以在 Debian 系的发行版上，让用户通过图形界面，一次性选择所要安装的应用程序，主要用于新系统的装机 <img src="https://user-images.githubusercontent.com/20816337/58801810-399ecb80-8629-11e9-8dd7-eb6169195a9b.png"></li><li><a href="https://github.com/dongyuwei/hallelujahIM" target="_blank" rel="noopener">哈利路亚英文输入法</a> <img src="https://github.com/dongyuwei/hallelujahIM/raw/master/snapshots/suggestions2.png"></li><li><a href="hhttps://github.com/python-visualization/folium" target="_blank" rel="noopener">folium</a>: 一个Python的地图可视化库</li><li><a href="https://www.bilibili.com/video/av62515899?from=search&amp;seid=16487302491615977358" target="_blank" rel="noopener">马前卒的睡前消息出视频版了，每周二更新</a>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/a798cdd43a734a89cc98e9f0fb9955d6.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
</feed>
