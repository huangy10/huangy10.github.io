<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>治部少辅</title>
  
  <subtitle>大一大万大吉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.codewoody.com/"/>
  <updated>2019-11-29T11:16:59.074Z</updated>
  <id>http://www.codewoody.com/</id>
  
  <author>
    <name>治部少辅</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【翻译】分析恶意SSH访问</title>
    <link href="http://www.codewoody.com/posts/46352/"/>
    <id>http://www.codewoody.com/posts/46352/</id>
    <published>2019-11-29T10:32:27.000Z</published>
    <updated>2019-11-29T11:16:59.074Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章翻译自<a href="https://bastian.rieck.me/blog/posts/2019/ssh_incidents/" target="_blank" rel="noopener">Analysing nefarious ssh access attempts</a>，非核心内容有删改。</p><p>维护我自己的服务器让我在过去的若干年里面学会了很多事情。也让我对那些勇敢的同时维护多个服务器的系统管理员抱有更高的敬意。这篇文章将会讲述我在维护自己的服务器的过程中经常发生的一些奇怪的事情。</p><a id="more"></a><h2 id="analysing-ip-addresses">Analysing IP addresses</h2><p>更准确地而言，我们在这里是要寻找对我们的服务器发出的恶意ssh访问请求。这里，恶意的访问请求是指使用无效的ssh密码来尝试访问服务器。由于我管理服务器上所有的用户都使用公钥来访问服务器，因此无效密码这个评价指标是非常站得住脚的。首先让我们收集一点证据。所有的认证请求都会被记录在<code>/var/log/auth.log</code>文件中（或者历史版本）。这个文件的结构非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Feb 25 00:07:21 myrddin sshd[22071]: Failed password for root from X.X.X.X port 493 ssh2</span><br><span class="line">Feb 25 00:07:28 myrddin sshd[22075]: Invalid user ftpadmin from X.X.X.X port 567</span><br></pre></td></tr></table></figure><blockquote><p>这个文件中不只存储了sshd的认证请求，其他的，例如sudo的认证信息也在这个文件夹</p></blockquote><p>注意到日志条目对于访问者是使用已有用户名还是不存在的用户名上，采用了不同的记录方式。作者用一个python脚本过滤枚举了所有的连接请求，并按照IP排序。一共有983892条记录（大概在一个月的时间里），其中大约17%可能与恶意访问有关。事实上在统计这个数字的时候已经忽略了无效密码【~这里的无效密码应该指不符合格式要求的密码，而非指错误的密码】和无效用户名的情况，所以17%这个数字其实是偏低的。</p><p>在进一步检查了IP来源之后我觉得更有意思了。大约3个独特的IP地址，占了所有无效密码请求的25%。为了隐私问题，这里不列举具体的IP了，不过可以说的是这三个IP地址的ISP都来自中国。其中两个是中国电信，另一个是中国联通，尽管这两个ISP都列出了投诉的邮件，不过作者怀疑举报了也不会有什么卵用。</p><p>接下来我尝试用<code>nmap</code>搜集更多的消息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -O -Pn X.X.X.X</span><br></pre></td></tr></table></figure><p>对于两个中国电信的IP地址，对方只开放了一个端口可以访问，为端口25。尽管这个端口我没法访问，不过<code>nmap</code>命令反映出对方可能是<code>FreeBSD 6.2-Release</code>系统【~这很可能指向的只是一个路由网关，而非实际的服务器】。不过对于第三个中国联通的IP地址，<code>nmap</code>挖掘出来的结果要更有意思一些。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for X.X.X.X</span><br><span class="line">Host is up (0.18s latency).</span><br><span class="line">Not shown: 977 closed ports</span><br><span class="line">PORT     STATE    SERVICE</span><br><span class="line">22/tcp   open     ssh</span><br><span class="line">25/tcp   open     smtp</span><br><span class="line">80/tcp   filtered http</span><br><span class="line">111/tcp  filtered rpcbind</span><br><span class="line">135/tcp  filtered msrpc</span><br><span class="line">139/tcp  filtered netbios-ssn</span><br><span class="line">199/tcp  filtered smux</span><br><span class="line">445/tcp  filtered microsoft-ds</span><br><span class="line">593/tcp  filtered http-rpc-epmap</span><br><span class="line">901/tcp  filtered samba-swat</span><br><span class="line">1025/tcp filtered NFS-or-IIS</span><br><span class="line">1034/tcp filtered zincite-a</span><br><span class="line">1068/tcp filtered instl_bootc</span><br><span class="line">1434/tcp filtered ms-sql-m</span><br><span class="line">3128/tcp filtered squid-http</span><br><span class="line">4444/tcp filtered krb524</span><br><span class="line">5800/tcp filtered vnc-http</span><br><span class="line">5900/tcp filtered vnc</span><br><span class="line">6006/tcp open     X11:6</span><br><span class="line">6129/tcp filtered unknown</span><br><span class="line">6667/tcp filtered irc</span><br><span class="line">6669/tcp filtered irc</span><br><span class="line">8080/tcp filtered http-proxy</span><br><span class="line">Device type: general purpose|WAP|storage-misc|broadband router</span><br><span class="line">Running (JUST GUESSING): Linux 3.X|4.X|2.6.X|2.4.X (95%), Asus embedded (92%), HP embedded (91%)</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel cpe:/h:asus:rt-ac66u cpe:/h:hp:p2000_g3 cpe:/o:linux:linux_kernel:3.4 cpe:/o:linux:linux_kernel:2.6.22 cpe:/o:linux:linux_kernel:2.4</span><br><span class="line">Aggressive OS guesses: Linux 3.10 - 4.11 (95%), Linux 3.13 (95%), Linux 3.13 or 4.2 (95%), Linux 4.2 (95%), Linux 4.4 (95%), Linux 3.16 (94%), Linux 3.16 - 4.6 (94%), Linux 3.12 (93%), Linux 3.2 - 4.9 (93%), Linux 3.8 - 3.11 (93%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 16 hops</span><br><span class="line"></span><br><span class="line">OS detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 58.88 seconds</span><br></pre></td></tr></table></figure><p>这里显示服务器是使用的<code>OpenSSH_6.9p1 Ubuntu-2 pat</code>，可以使用密码或者秘钥登录。所以理论上我可以以其人之道还治其人之身。</p><h2 id="analysing-user-names">Analysing User Names</h2><p>让我们分析一下所有的恶意请求中使用的有效用户名的比例：</p><ol type="1"><li>root (98.42%)</li><li>backup (0.29%)</li><li>www-data (0.14%)</li><li>ghost (0.11%)</li><li>nobody (0.08%)</li></ol><p>很明显绝大多数恶意请求的目标都是root。不过这些用户其实都不允许通过ssh登录的，攻击者不知道这点。对于使用无效用户名的登录请求，其分布就比较分散了。比例最高的10个我们列出如下：</p><ol type="1"><li>admin (4.57%)</li><li>test (3.81%)</li><li>user (3.07%)</li><li>ubuntu (2.64%)</li><li>ftpuser (2.40%)</li><li>postgres (1.19%)</li><li>oracle (1.10%)</li><li>nagios (1.08%)</li><li>git (0.92%)</li><li>teamspeak (0.89%)</li></ol><h2 id="analysis-countries">Analysis Countries</h2><p>最后我想可视化地呈现以下恶意访问的来源情况。最后选定的可视化工具是<a href="https://plot.ly/" target="_blank" rel="noopener">plotly</a>。</p><p><img src="https://imgs.codewoody.com/uploads/big/77056379db69bf5b325e301c611b2871.png"></p><blockquote><p>这里我们可以看到最容易被攻击的还是root账户。禁止root账户使用ssh登录可以让你免疫绝大多数ssh攻击。禁止的方法参考：<a href="https://www.howtogeek.com/howto/linux/security-tip-disable-root-ssh-login-on-linux/" target="_blank" rel="noopener">Security Tip: Disable Root SSH Login on Linux</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章翻译自&lt;a href=&quot;https://bastian.rieck.me/blog/posts/2019/ssh_incidents/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Analysing nefarious ssh access attempts&lt;/a&gt;，非核心内容有删改。&lt;/p&gt;
&lt;p&gt;维护我自己的服务器让我在过去的若干年里面学会了很多事情。也让我对那些勇敢的同时维护多个服务器的系统管理员抱有更高的敬意。这篇文章将会讲述我在维护自己的服务器的过程中经常发生的一些奇怪的事情。&lt;/p&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="http://www.codewoody.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>OLSR 路由算法原理</title>
    <link href="http://www.codewoody.com/posts/17082/"/>
    <id>http://www.codewoody.com/posts/17082/</id>
    <published>2019-11-26T07:12:10.000Z</published>
    <updated>2019-11-28T14:21:44.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lsr">LSR</h2><p>LSR为基于链路状态的路由算法。如何判断链路状态呢？在无线通信的环境下，只需要节点能够收到另一节点的包，就说明链路有效。另一方面，为了建立端到端的路径，路由算法需要发现并检查一跳由多个单跳链接组成的多条链路的可用性，这就需要不断的洪泛广播(flooding)来进行。这种洪泛的方式是非常浪费的。参加下面的例子：</p><figure><img alt="" src="https://imgs.codewoody.com/uploads/big/37a383e0cf5a9d404d4ddffa149f0f7a.jpg" style="width: 60%"><figcaption>LSR 示意图</figcaption></figure><p>为了在网络中同步节点状态，需要各个节点进行洪泛广播，产生大量其实是存在冗余的通信。在能源受限的移动网络中是非常不经济的。OLSR通过有选择的洪泛转发(MPR: Multi-Point Relay)来解决这个问题。</p><h2 id="olsr">OLSR</h2><p>OLSR 将 LSR 中简单的路由建立与同步过程切分成两部分：将邻居信息发现与维护同路由发现独立开来。</p><h3 id="邻居发现">邻居发现</h3><p>OLSR通过周期性地广播Hello消息来发现邻居，建立邻居表。邻居表表中记录一跳及二跳邻居节点的信息，节点间的连接也会被记录为单向还是双向。</p><p>Hello消息中包含<strong>发送节点的所有邻居即相关的连接状态(单向还是双向)</strong>。当节点收到的Hello消息中，对方已经将自己加入到邻居列表中时，说明二者之间的连接为双向。</p><p>通过Hello广播过程可以让网络中所有的节点都能知晓距离自己两跳及以内的邻居的信息。</p><p>基于邻居信息，节点可以选择出邻居MPR节点集合。一个节点选定的MPR是负责转发此节点的广播消息的节点。通过控制MPR集合的大小可以减少洪泛的开销。MPR选择分为两步：</p><ol type="1"><li>首先选择能够覆盖「孤立二跳邻居节点」的一跳邻居节点。这里孤立二跳邻居节点是指仅通过一个邻居节点同目标节点相连的二跳邻居节点；</li><li>在余下的一跳邻居节点中，按照覆盖二跳邻居节点的数量从高到低依次选择，直到覆盖所有的二跳邻居节点。</li></ol><figure><img src="https://imgs.codewoody.com/uploads/big/718503c86c626add0ab0f177d6dbb25f.png" alt="MPR 选择算法"><figcaption>MPR 选择算法</figcaption></figure><p>如上例所示。首先我们找出覆盖「孤立二跳邻居节点」1和5的A和E，将其加入MPR列表。此时1，2，3，5都被覆盖。在剩下的一跳邻居中，覆盖二跳邻居最多的B（3个）被加入MPR，然后是E，然后是G。当G被加入MPR后，所有的二跳邻居节点都被MPR覆盖。此时的MPR即为我们要选择的MPR全集。</p><p>MPR表会通过Hello信息同步给一跳邻居节点。这样每个节点能够建立本地的MPR Selector表，此表表明节点自己应该转发来自哪些节点的广播消息。</p><h3 id="路由发现">路由发现</h3><p>邻居发现过程使用了Hello消息，路由发现则使用另一种格式的消息：Topology Control消息。TC消息的作用是为节点建立起全局的路由信息。只有MPR节点才会转发TC消息<span class="foot-note-span">【需要注明的一点是：到底是MPR节点在收到TC消息以后是原样转发还是与本地的拓扑表合并以后发送本地拓扑表还存疑】</span>。</p><p>TC消息中包含了发送者的MPR Selector<span class="foot-note-span">【注意MPR Selector不是指一个节点的MPR节点集合，而是一个节点作为MPR应该转发来自哪些节点的消息】</span>信息以及一个Sequence Number。</p><p>基于TC消息的交换，各个节点可以维护一个Topology Table（拓扑表），基于拓扑表节点可以计算出路由表（通过Dijkstra算法）。拓扑表的结构如下：</p><table><colgroup><col style="width: 25%"><col style="width: 25%"><col style="width: 25%"><col style="width: 25%"></colgroup><thead><tr class="header"><th>Destination address</th><th>Destination's MPR</th><th>MPR Selector<br>Sequence Number</th><th>Holding Time</th></tr></thead><tbody></tbody></table><blockquote><p><a href="https://www.runoob.com/markdown/md-table.html" target="_blank" rel="noopener">Markdown中表格的语法</a></p></blockquote><p>上述四项分别为：</p><ol type="1"><li>目标地址</li><li>目标地址的MPR节点</li><li>Sequence Number</li><li>该条目的保持时间</li></ol><p>上面提到TC消息中包含的是发送节点的MPR Selector列表。那么当另一节点收到TC消息时，将TC条目中的MPR Selector作为目标地址，则发送节点即为其MPR节点，然后填入TC消息中的Sequence Number，已经预定义的Holding Time。</p><p>我们考虑下面这个例子：</p><p>这个例子中，A，B，C三个节点均将M选择为自己的MPR节点，那么M会建立如下的MPR Selector列表：</p><table><thead><tr class="header"><th>TC Originator</th><th>MPR Selector</th><th>MPR Selector Sequence</th></tr></thead><tbody><tr class="odd"><td>M</td><td>A</td><td>1</td></tr><tr class="even"><td>M</td><td>B</td><td>1</td></tr><tr class="odd"><td>M</td><td>C</td><td>1</td></tr></tbody></table><p>作为MPR，M会将其MPR Selector列表通过TC消息广播出去。当Y收到M发出的TC消息时，将TC消息中包含的MPR Selector信息转化成拓扑表 (Holding Time省略)：</p><table><thead><tr class="header"><th>Destination address</th><th>Destination's MPR</th><th>MPR Selector<br>Sequence Number</th></tr></thead><tbody><tr class="odd"><td>A</td><td>M</td><td>1</td></tr><tr class="even"><td>B</td><td>M</td><td>1</td></tr><tr class="odd"><td>C</td><td>M</td><td>1</td></tr><tr class="even"><td>...</td><td>...</td><td>...</td></tr></tbody></table><blockquote><p>注意对于一个收到TC消息的节点X而言，消息流的顺序是MPR Selector -&gt; MPR -&gt; X，那么反过来如果X需要向这个MPR Selector发送消息，则链条中的MPR节点就是到达目标前的上一跳节点。所以拓扑表中的第二列也会被称为Last-hop Address。故拓扑表中的每一行其实表明了网路中的一条链路。</p></blockquote><p>网络中周期性的通过TC消息保持拓扑表更新，通过拓扑表使用Dijkstra算法即可获得路由表。</p><h2 id="further-reading">Further Reading</h2><ul><li><a href="https://blog.csdn.net/chixi123/article/details/85068740" target="_blank" rel="noopener">OLSR路由协议工作原理</a></li><li><a href="https://www.youtube.com/watch?v=3V19nPxpMp8&amp;t=881s" target="_blank" rel="noopener">Optimized Link State Routing (OLSR) Mobile Adhoc Network Proactive Routing Protocol</a>: 这是一个Youtube的介绍视频，有点印度口音，通过英文字幕倒是可以听懂。讲的还不错。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OLSR的全称为Optimized Link State Routing。既然是Optimized，那么说明其实还存在一个名为Link State Routing的路由算法。我们先来介绍一下Link State Routing的设计思路，然后着眼于Link State Routing存在的问题，介绍一下OLSR的优化方向。&lt;/p&gt;
    
    </summary>
    
      <category term="科研" scheme="http://www.codewoody.com/categories/%E7%A7%91%E7%A0%94/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="科研" scheme="http://www.codewoody.com/tags/%E7%A7%91%E7%A0%94/"/>
    
      <category term="路由" scheme="http://www.codewoody.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-23</title>
    <link href="http://www.codewoody.com/posts/53357/"/>
    <id>http://www.codewoody.com/posts/53357/</id>
    <published>2019-11-26T04:31:30.000Z</published>
    <updated>2019-11-29T11:21:13.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="香港区议会选举泛民大胜"><a href="http://www.bbc.com/zhongwen/simp/chinese-news-50541443" target="_blank" rel="noopener">香港区议会选举泛民大胜</a></h3><p>截至今天(25日)中午12时45分，452个选区点票完毕，全部结果出炉。被视为泛民主派的候选人取得超过385席，是香港主权移交以来最多。建制派取得59席，相比上次区选的292席大幅缩水。</p><p>这次区议会创下多个香港选举纪录，包括有约294万名选民参加，投票率达71.2%，是主权移交以来最高。泛民主派也首次在区议会取得超过一半议席。</p><blockquote><p>这个选举结果说明香港人并不那么反感暴力，也不那么反感港独，「一国两制」作为一种制度仍然在有效运行，但是大陆已经对一国两制失去了兴趣。</p></blockquote><h3 id="王立强间谍案"><a href="http://www.bbc.com/zhongwen/simp/chinese-news-50528735" target="_blank" rel="noopener">「王立强」间谍案</a></h3><p>据多家澳媒报导，一名自称是中国间谍的26岁男子王立强（William, Wang Liqiang，音译）冒着生命危险逃往澳洲，揭露了北京军事情报机构如何通过操纵媒体、渗透大学，干预香港抗议运动和台湾选举，并在澳洲展开业务。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/zdR-I35Ladk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>中国公安部门说，在澳大利亚自称是“叛逃”间谍的王立强，其实是个“在逃”诈骗犯。</p><p><img src="https://imgs.codewoody.com/uploads/big/13ffaae2ff5af350b03098d1c672bf1c.jpg"></p><p>24日，两名大陆商人向心、龚青在台北机场被台湾调查局国家安全处阻止离境；周一（25日）被移送台北地检署进行复讯；周二（26日）被限制出境出海。台湾媒体报道称，向心夫妇在侦讯时有问必答，态度配合，但否认是中国间谍。他们虽被禁止离境，但仍然可以在台湾自由行动。<a href="https://www.bbc.com/zhongwen/simp/chinese-news-50559956" target="_blank" rel="noopener">source</a></p><h3 id="网易暴力裁员事件"><a href="https://www.williamlong.info/archives/5898.html" target="_blank" rel="noopener">网易暴力裁员事件</a></h3><p>近日，一篇名为《网易裁员，让保安把身患绝症的我赶出公司，我在网易亲身经历的噩梦》的文章被广泛转发。作者在文章中称，自己是网易游戏的员工，身患扩张型心肌病。在职期间遇到了一系列不公正待遇，包括认为绩效与个人实际工作情况不符，在其生病后，网易采用各种方式希望其离职，避免进行N+1的离职赔偿，其间遇到了“逼迫、算计、监视、陷害、威胁，甚至被保安赶出公司”。</p><p>随后网易针对该事件发表回应称，确实存在简单粗暴、不近人情等诸多行为，向相关前同事及家人道歉。</p><p>网易在声明中表示，这位前同事的主管因绩效原因向其提出解除劳动合同，文章展示的“业绩排名”，实际为工作量排名，不完全反映工作质量。经复核，其绩效确不合格。此时，该主管并没有充分尽责地了解其患病情况。</p><p>关于解决方案，网易称，这位前同事谢绝了公司在9月主动提出“N+1&quot;外的特殊关怀方案：在“N+1”补偿的基础上，我们将在其离职后的12个月内，继续额外每月无条件提供等同于其月基本工资的关怀金。</p><p><img src="https://imgs.codewoody.com/uploads/big/81f6d5f478d8464bee4c65e212cd0db9.jpg"></p><p>11月29日，网易裁员事件落幕：当事员工谅解，网易公布五项举措。</p><ul><li><a href="https://zhuanlan.zhihu.com/p/93349725" target="_blank" rel="noopener">网易裁员，让保安把身患绝症的我赶出公司。我在网易亲身经历的噩梦！</a></li><li><a href="https://www.zhihu.com/question/357459810" target="_blank" rel="noopener">如何看待网传网易裁员，让保安把身患绝症的 5 年老员工赶出公司一事？</a></li><li><a href="https://www.zhihu.com/question/357634573" target="_blank" rel="noopener">11 月 25 日网易就暴力裁员事件发布道歉信，都有哪些信息量？事件要反转了吗？</a></li><li><a href="https://www.ifanr.com/1286631?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=" target="_blank" rel="noopener">11月29日，网易裁员事件落幕：当事员工谅解，网易公布五项举措</a></li></ul><h3 id="猪肉价格下降"><a href="http://www.bjnews.com.cn/finance/2019/11/28/655579.html" target="_blank" rel="noopener">猪肉价格下降</a></h3><p>近期，一路上涨的猪肉价格已得到明显遏制。11月28日，商务部新闻发言人高峰在商务部例行新闻发布会上表示，11月初以来，由于生猪存栏环比回升、冻猪肉上市量增加、猪肉进口增长等因素的影响，国内猪肉价格回落明显。根据商务部监测，上周（11月18-24日），全国36个大中城市猪肉平均批发价格为每公斤43.66元，比前一周下降了8.6%，降幅比前一周扩大1.7个百分点，比11月初下降了16.5%。</p><h3 id="其他新闻">其他新闻</h3><h4 id="国内">国内</h4><ul><li>京东网银在线因违规将境内外汇转移境外被罚款2943万元。<a href="https://www.zhihu.com/question/357914185" target="_blank" rel="noopener">source</a></li><li>11月27日艺人高以翔在录制制浙江卫视综艺节目《追我吧》节目过程中晕倒，抢救无效去世。高以翔原名曹志翔，1984 年 9 月 22 日出生于台北，从小在加拿大温哥华长大，曾出演《遇见王沥川》《101次求婚》《胜女的代价》《彩虹的重力》等。<a href="https://www.zhihu.com/pin/1182999661471768576" target="_blank" rel="noopener">source</a></li><li>11月27日，携号转网正式实施。用户号码保持不变，符合条件可自由选择移动、联通、电信等运营商。电信业务经营者不得干涉用户自主选择。<a href="https://www.zhihu.com/question/357997206" target="_blank" rel="noopener">source</a></li><li>28日，香港警方正式进入香港理工大学清查。警方针对香港理工大学内示威者的包围已经持续了12天。<a href="https://www.dw.com/zh/香港警察进入理工大学清查/a-51448127?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li></ul><h4 id="国际">国际</h4><ul><li>德国东部一家博物馆遭窃，10亿欧元珠宝不翼而飞。<a href="https://cn.reuters.com/article/german-museum-jewels-stolen-1125-mon-idCNKBS1Y006V?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>一名擅闯特朗普海湖庄园的中国女子被判处八个月监禁。<a href="https://cn.reuters.com/article/usa-trump-maralago-chinese-1125-mon-idCNKBS1Y002Y?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>土耳其向中国移交两件中国流失文物。分别是唐代石窟寺壁画和北朝晚期至隋唐的随葬陶俑，距今已有1000多年历史。</li><li>特朗普签署《香港人权与民主法案》。<a href="http://www.bbc.com/zhongwen/simp/world-50582258" target="_blank" rel="noopener">source</a>。28日，中国外交部召见美国驻华大使，就美“香港人权与民主法案”签署成法提出严正交涉和强烈抗议。<a href="https://cn.reuters.com/article/china-summons-usa-ambassador-128-thur-idCNKBS1Y20D6?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li></ul><h4 id="科技">科技</h4><ul><li>华为发布全新平板电脑MatePad Pro。<a href="https://www.ifanr.com/1285146?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=" target="_blank" rel="noopener">source</a></li></ul><p><img src="https://imgs.codewoody.com/uploads/big/00e97702559ae48de3d8f469a742c995.jpeg"></p><ul><li>11月26日，阿里巴巴在港交所正式挂牌，股票代码[9988.HK]，挂牌首日开盘价187港元/股，较发行价每股176港元高开6.25%，总市值4.04万亿。<a href="http://www.lieyunwang.com/archives/461082" target="_blank" rel="noopener">source</a></li><li>米其林发布2020北京米其林指南，这也是首版北京米其林指南。此次榜单包含23家餐厅，其中有1家三星餐厅（新荣记），2家二星餐厅（京兆尹、屋里厢），和20家一星餐厅。<a href="http://www.huxiu.com/article/328557.html?f=wangzhan" target="_blank" rel="noopener">source</a></li><li>央行副行长范一飞周四表示，将挑选数字货币试点地区。<a href="http://finance.eastmoney.com/a/201911281306636762.html" target="_blank" rel="noopener">source</a></li><li>俄罗斯西伯利亚冻土层发现一只1.8万年前的狼狗幼崽，保存完好，可能成为世界上发现的最古老的狗的样本。<a href="http://www.bbc.com/zhongwen/simp/world-50592711" target="_blank" rel="noopener">source</a></li></ul><h2 id="文章言论与资源">文章、言论与资源</h2><ul><li>如何自制一辆电动摩托车</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/UD3KymY86z8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><ul><li>特斯拉汽车的自动驾驶可以挽救数百万人的生命，但它可能首先会造成一些人的死亡，然后才能达到这个目标。 -- <a href="https://www.bloomberg.com/news/features/2019-10-09/tesla-s-autopilot-could-save-the-lives-of-millions-but-it-will-kill-some-people-first?srnd=businessweek-v2" target="_blank" rel="noopener">彭博社</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新闻&quot;&gt;新闻&lt;/h2&gt;
&lt;h3 id=&quot;香港区议会选举泛民大胜&quot;&gt;&lt;a href=&quot;http://www.bbc.com/zhongwen/simp/chinese-news-50541443&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;香港区
      
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-22</title>
    <link href="http://www.codewoody.com/posts/4268/"/>
    <id>http://www.codewoody.com/posts/4268/</id>
    <published>2019-11-21T12:25:09.000Z</published>
    <updated>2019-11-27T08:47:16.252Z</updated>
    
    <content type="html"><![CDATA[<p>受了点伤，这周更新的内容估计要少一点了。</p><h2 id="新闻">新闻</h2><h3 id="至21日伊朗连续第三天关闭互联网"><a href="https://www.voachinese.com/a/iran-blocks-internet-for-3rd-day-20191118/5171338.html" target="_blank" rel="noopener">至21日伊朗连续第三天关闭互联网</a></h3><p>伊朗当局为镇压全国反政府抗议活动，已连续第三天关闭互联网服务。自上星期五（11月15日）抗议爆发以来，已有至少八人丧生。</p><figure><img src="https://imgs.codewoody.com/uploads/big/803c4704ec6cbdffb0e9e8a32573c2ed.jpg" alt="伊朗反政府抗议者封锁了首都德黑兰的一条道路。(2019年11月17日)"><figcaption>伊朗反政府抗议者封锁了首都德黑兰的一条道路。(2019年11月17日)</figcaption></figure><p>互联网中断使得伊朗人很难与其他国家和外界分享抗议图片和信息。星期五早些时候，政府突然将汽油价格上调了50%，引发了抗议活动。伊朗新的汽油价格约合每升合13美分，仍属世界最低油价之列。但许多伊朗人认为，在经济状况不断恶化之际，这将给他们增加更多经济负担。</p><h3 id="美国两院通过香港人权法案"><a href="https://www.voachinese.com/a/HOUSE-PASSED-HONG-KONG-ACT-20191120/5174540.html" target="_blank" rel="noopener">美国两院通过香港人权法案</a></h3><p>美国国会众议院星期三(11月20日)以压倒多数通过了《香港人权与民主法案》。这项法案将定期审议香港的自治地位，从而决定是否维持美国法律所赋予香港的特殊待遇。这部法案接下来送交特朗普总统等候签署。</p><p>参议院在星期二无异议通过了这部法案。众议院在今年9月曾无异议通过同一法案的众议院版本。按照国会程序，两院版本如果不同，在送交总统签署前，必须加以协调。然而，在国会年底休假将近之际，众议院直接对参议院版本进行了表决，因此无须再整合版本和二度表决。</p><blockquote><p>有意思的是，NYT的报道说这一事件的反复显示了华为在白宫的脆弱地位。其实恰恰想法。要是华为的地位真的脆弱，早就完全禁了，何至于这么反复延期，落人笑柄呢？</p></blockquote><h3 id="美国延期华为的临时许可"><a href="https://cn.nytimes.com/technology/20191119/huawei-us-china/" target="_blank" rel="noopener">美国延期华为的临时许可</a></h3><p>本周伊始，特朗普政府给了中国电信巨头华为一个喘息的机会。它很可能会以不同的监管机构投票表决，使这家企业在美国更难开展业务而告终。商务部周一表示，将把允许企业向华为出口商品的许可证延长90天，尽管华为被列入美国政府的黑名单，禁止与美国合作伙伴开展业务。联邦通信委员会（Federal Communications Commission，简称FCC）将于周五投票，决定是否禁止无线供应商利用联邦补贴购买华为设备——设立该补贴的目的是将宽带接入扩大到服务不足的地区。</p><h3 id="其他">其他</h3><h4 id="国际">国际</h4><ul><li>安倍晋三成为日本在职时间最长的首相。<a href="https://cn.reuters.com/article/japan-abe-longest-serving-1120-wedn-idCNKBS1XU0CV?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>三艘在俄罗斯被扣押的乌克兰舰艇回到乌克兰。<a href="http://sputniknews.cn/opinion/201911211030093179/" target="_blank" rel="noopener">source</a><span class="foot-note-span">【进来欧盟(主要是法国牵头)正在从中协调俄乌和解，这一举措应该是和解进程推进的表现】</span></li><li>中国区块链技术相关专利申请数量位居世界第一，达到美国的三倍。<a href="http://sputniknews.cn/china/201911211030093101/" target="_blank" rel="noopener">source</a></li><li>图瓦卢外交部长科菲访问台湾。</li></ul><h4 id="国内">国内</h4><ul><li>王思聪21日再次被限制消费。<a href="https://www.zhihu.com/question/356958027" target="_blank" rel="noopener">source</a></li><li>江一燕获奖的别墅被确认是违建。<a href="https://www.zhihu.com/question/356958027" target="_blank" rel="noopener">source</a></li></ul><h4 id="科技">科技</h4><ul><li>Nature 重磅发现癌基因存在于环形 ecDNA。<a href="https://www.zhihu.com/question/356918720" target="_blank" rel="noopener">source</a></li><li>阿里王坚当选中国工程院院士。<a href="https://www.williamlong.info/archives/5896.html" target="_blank" rel="noopener">source</a></li><li>IPv4地址耗尽。<a href="https://www.ithome.com/0/459/157.htm" target="_blank" rel="noopener">source</a></li></ul><h2 id="文章与资源">文章与资源</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2019/11/css-position.html" target="_blank" rel="noopener">CSS定位详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;受了点伤，这周更新的内容估计要少一点了。&lt;/p&gt;
&lt;h2 id=&quot;新闻&quot;&gt;新闻&lt;/h2&gt;
&lt;h3 id=&quot;至21日伊朗连续第三天关闭互联网&quot;&gt;&lt;a href=&quot;https://www.voachinese.com/a/iran-blocks-internet-for-3rd
      
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-21</title>
    <link href="http://www.codewoody.com/posts/4588/"/>
    <id>http://www.codewoody.com/posts/4588/</id>
    <published>2019-11-12T05:33:41.000Z</published>
    <updated>2019-11-26T04:45:51.248Z</updated>
    
    <content type="html"><![CDATA[</p><h2 id="新闻">新闻</h2><h3 id="天猫双十一总成交额达2684亿">天猫双十一总成交额达2684亿</h3><p><img src="https://imgs.codewoody.com/uploads/big/36dce87fe23e5e8a2a69a3634adc2332.jpg"></p><p>11月12日零点，2019天猫双十一落下帷幕，双11总成交额超2600亿大关，最终定格2684亿元。 2018年天猫双11最终成交额2135亿元，今年双11开幕16小时31分12秒，天猫成交额就超过了去年全天。</p><p>天猫及淘宝总裁蒋凡今天凌晨在阿里巴巴西溪总部园区向媒体表示，新消费深刻重构了人、货、场，驱动了前所未有的商业数字化变革，发掘了商业新人口，创造了商业新供给，带来了商业新行为。</p><h3 id="白头盔创办人在土耳其死亡"><a href="http://www.bbc.com/zhongwen/simp/world-50388694" target="_blank" rel="noopener">白头盔创办人在土耳其死亡</a></h3><p>在叙利亚内战时期成立的叙利亚公民防御组织创办人之一是一名英国退伍陆军军官，他的尸体在他伊斯坦布尔办公室附近被发现。</p><h3 id="日全港学校停课大陆学生撤离香港">14日全港学校停课，大陆学生撤离香港</h3><p>香港教育局今天(13日)发布消息称，因当前及可预计的状况，及全港学校的整体汇报，全港学校（包括幼稚园、小学、中学及特殊学校）将于明天停课。发言人表示，香港社会连日受到暴力示威者广泛破坏，情况令人齿冷；教育局强烈呼吁示威者立即停止所有暴力行为，尽快让学生安全上学。</p><p>由于示威对抗活动气氛蔓延到校园，众多大陆学生受到针对，因此目前有大量大陆学生选择临时返回深圳。深圳的高校为这些学生提供了临时住宿。</p><h3 id="月新能源汽车销量同比降低45"><a href="http://www.qdaily.com/articles/64740.html?source=feed" target="_blank" rel="noopener">10月新能源汽车销量同比降低45%</a></h3><p>自今年 7 月中央和地方政府减少新能源车补贴以来，国内新能源车（仅指纯电动和插电混动）销量连续四个月同比减少，10 月同比降幅进一步扩大至 45.65%，几近腰斩。</p><h3 id="其他新闻">其他新闻</h3><h4 id="国内新闻">国内新闻</h4><ul><li>北京朝阳区确认接诊两例肺鼠疫病例。患者来自内蒙古自治区。</li><li>国足1-2不敌叙利亚，主教练里皮随后宣布辞职。</li></ul><h4 id="国际新闻">国际新闻</h4><ul><li>中国敬业集团试图收购英国钢铁公司。<a href="http://www.bbc.com/zhongwen/simp/business-50416457" target="_blank" rel="noopener">source</a></li><li>意大利威尼斯遭遇半世纪以来最大水灾。<a href="https://www.dw.com/zh/威尼斯遭半世纪来最大水灾/a-51222750?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>韩国《Produce 101》综艺节目被警方查出投票全系列造假，警方已经确认制作团队介入其中。据悉，因涉嫌操纵得票被拘留的安俊英等两人14日被移交检察机关。 ​<a href="https://www.zhihu.com/question/341361660" target="_blank" rel="noopener">source</a></li><li>特斯拉宣布在德国建立新厂。<a href="http://www.qdaily.com/articles/64750.html?source=feed" target="_blank" rel="noopener">source</a></li><li>波音737 MAX将在下个月重新获得飞行许可。该型号飞机已经停飞了7个月了。</li></ul><h4 id="科技新闻">科技新闻</h4><ul><li>苹果发布16寸屏幕的Macbook Pro</li><li>微软全球执行副总裁沈向洋 Harry Shum 将离职微软。沈向洋为在微软级别最高的中国人。他在1996年加入微软，2007年出任搜索部门研发工程副总裁；2013年成为微软执行副总裁，进入微软核心管理层，负责微软研究院的技术和研究公司。<a href="https://www.zhihu.com/question/355746956" target="_blank" rel="noopener">source</a></li><li>11月13日，阿里巴巴向港交所提交上市申请。<a href="https://www1.hkexnews.hk/app/sehk/2019/100781/documents/sehk19111301429_c.pdf" target="_blank" rel="noopener">source</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/36dce87fe23e5e8a2a69a3634adc2332.jpg&quot;&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-20</title>
    <link href="http://www.codewoody.com/posts/53549/"/>
    <id>http://www.codewoody.com/posts/53549/</id>
    <published>2019-11-06T07:40:13.000Z</published>
    <updated>2019-11-21T08:09:03.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="印度宣布退出rcep"><a href="https://www.dw.com/zh/印度退群亚太自贸协定-转身与欧盟谈/a-51107693?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">印度宣布退出RCEP</a></h3><p>中国牵头、原定16国参加的亚太自贸协定（RCEP）比原计划推迟签署。印度对该协定提出质疑，表示目前不愿加入。而仅隔了一天就传出消息，印度将与欧盟就签署自贸协定展开会谈。</p><h3 id="英国大选"><a href="http://www.bbc.com/zhongwen/simp/world-50320490" target="_blank" rel="noopener">英国大选</a></h3><figure><img src="https://imgs.codewoody.com/uploads/big/1fd7fc646d55c11f2a5394df02b88ce8.jpg" alt="图为执政党保守党领袖约翰逊和在野最大党工党领袖科尔宾"><figcaption>图为执政党保守党领袖约翰逊和在野最大党工党领袖科尔宾</figcaption></figure><p>英国议会2019年11月6日周三凌晨解散，大选竞选活动正式拉开帷幕。各党领袖先后演讲，亮出自己的承诺。英国政府首相约翰逊前往白金汉宫与女王会面，这标志着12月12日投票前选举期的开始。</p><p>在约翰逊可以完成英国脱欧任务的承诺下，英国目前执政的保守党也将发起该党的竞选活动。</p><p>与此同时，在野的工党领袖科尔宾将在演讲中承诺，在工党领导下实现一场“真正的变革”。</p><h3 id="香港亲中议员何君尧被刺伤">香港亲中议员何君尧被刺伤</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/1CPZdkn7rc4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="滴滴宣布恢复顺风车业务">滴滴宣布恢复顺风车业务</h3><p>不过这一过程中引起了不少争议。因为新政策发布文字中提到：“试运营期间，首先提供 5:00-23:00（女性 5:00-20:00）、市内中短途（50 公里以内）的顺风车平台服务”。引起舆论对于滴滴性别歧视的指控。</p><p>在舆论发酵之后，滴滴修改了顺风车政策，无论男女，顺风车业务都只开放到20点。</p><h3 id="中国称美国愿意分阶段取消关税"><a href="https://www.dw.com/zh/贸易战：中国称美国愿意-分阶段取消关税/a-51144826?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">中国称美国愿意分阶段取消关税</a></h3><p>中国官方周四宣布，中美双方同意“分阶段取消加征关税”。而此前曾有美方官员表示，特朗普和习近平可能会将签署贸易协议推迟到12月份，因为协议内容和双方会面地点依然没有敲定。</p><h3 id="王思聪被限制高消费">王思聪被限制高消费</h3><p>王思聪已被上海市嘉定区人民法院发布限制消费令。上述限制消费令显示，法院于2019年08月12日立案执行申请人曹悦申请执行上海熊猫互娱文化有限公司其他合同纠纷一案，因熊猫互娱未按执行通知书指定的期间履行生效法律文书确定的给付义务，被采取限制消费措施，限制其法定代表人、主要负责人、影响债务履行的直接责任人员、实际控制人王思聪不得实施高消费及非生活和工作必需的消费行为。</p><h3 id="其他新闻">其他新闻</h3><h4 id="国内">国内</h4><ul><li>习近平会见香港特首林郑月娥，肯定其工作。<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50298922" target="_blank" rel="noopener">source</a></li><li>滴滴宣布了顺风车的试运营产品方案将于11月20日起，陆续在哈尔滨、太原、石家庄、常州、沈阳、北京、南通7个城市上线试运营。根据方案，试运营期间，滴滴将在这7个城市首先提供5:00-23:00（女性5:00-20:00）、市内中短途（50公里以内）的顺风车平台服务。试运营期间，不收取信息服务费。<a href="http://www.lieyunwang.com/archives/460451" target="_blank" rel="noopener">source</a></li><li>根据VISA中国官方的消息， Visa将与腾讯合作为国际Visa持卡人提供微信支付服务。同时支付宝（Alipay）首次向中国的国际旅行者开放该平台。</li><li>香港反送中出现第一条命案：一名港科技大学本科生在香港防暴警察于将军澳驱散示威者期间从高处堕下，其堕楼原因仍在调查当中。在抢救五日以后，这名学生死亡。<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50302812" target="_blank" rel="noopener">source</a></li><li>前10个月中国进出口总值3.74万亿美元，同比下降2.5%。<a href="http://sputniknews.cn/economics/201911081030010067/" target="_blank" rel="noopener">source</a></li><li>日本议员在华走私毒品案宣判，涉案的樱木琢磨被广州市中级人民法院判处无期徒刑。他于2013年10月31日在广州白云国际机场准备搭乘航班经由上海转机回日本时，安检人员在其行李箱拉杆夹层及箱内女式松糕凉鞋内共查获甲基苯丙胺（俗称冰毒）3289克。</li><li>长春长生生物科技有限责任公司破产。该公司之前陷入疫苗不合格的丑闻。</li><li>大陆开放香港人在粤港大湾区的购房资格限制。<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50343654" target="_blank" rel="noopener">source</a></li></ul><h4 id="国际">国际</h4><ul><li>印度新德里严重雾霾导致航班延误。世界上污染最严重的前30个城市中，印度占了22个。这是设在瑞士的全球空气质量数据研究机构IQ AirVisual和环保组织绿色和平的最新研究结果。其余的8个城市则在巴基斯坦、孟加拉和中国。不过榜上有名的中国城市并不是其首都北京。北京的空气质量近年来大幅改善，现在已经列在第122名。<a href="https://www.bbc.com/zhongwen/simp/world-50344544" target="_blank" rel="noopener">source</a></li><li>台湾向其「邦交国」洪都拉斯提供3亿美元贷款。<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50299692" target="_blank" rel="noopener">source</a></li><li>中美贸易战签约可能延迟到12月。<a href="https://www.dw.com/zh/中美签约恐再延迟-或选择在欧洲见/a-51144826?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>法国总统马克龙访华。</li><li>匈牙利计划让华为参与本国的5G网络建设。<a href="https://www.dw.com/zh/匈牙利计划让华为参与本国5g网络建设/a-51121503?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>伊朗回复福尔多核设施的浓缩铀活动。<a href="https://cn.reuters.com/article/iran-nuclear-centrifuges-fuel-1107-thur-idCNKBS1XH03C?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>越南和英国警方确认上月发生在英国的集装箱惨案遇难者国籍，39名遇难者均为越南人。<a href="https://cn.reuters.com/article/britain-bodies-truck-1107-thur-idCNKBS1XI026?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>中美联合破获首起芬太尼走私案，缴获芬太尼11.9公斤。<a href="https://cn.reuters.com/article/china-liu-fentanyl-drug-court-1107-idCNKBS1XH0GX?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>柏林墙倒塌30周年</li><li>纽约市长布隆伯格有意参选总统。<a href="http://www.bbc.com/zhongwen/simp/world-50355718" target="_blank" rel="noopener">source</a></li></ul><h4 id="科技新闻">科技新闻</h4><ul><li>百度上线匿名社交APP：听筒</li><li>马云蝉联国内首富（福布斯杂志)</li></ul><h2 id="文章与言论">文章与言论</h2><ul><li>Yes, Americans should only be exposed to American Corporate-sanctioned propaganda. -- HN 读者评论美国政府宣布对抖音收购 Musical.ly 进行国家安全审查。<a href="http://www.ruanyifeng.com/blog/2019/11/weekly-issue-81.html" target="_blank" rel="noopener">source</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/1fd7fc646d55c11f2a5394df02b88ce8.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-19</title>
    <link href="http://www.codewoody.com/posts/10221/"/>
    <id>http://www.codewoody.com/posts/10221/</id>
    <published>2019-11-03T08:30:29.000Z</published>
    <updated>2019-11-10T23:12:02.188Z</updated>
    
    <content type="html"><![CDATA[</p><h2 id="新闻">新闻</h2><h3 id="冲绳首里城大部分建筑被烧毁"><a href="https://t.me/solidot/9273" target="_blank" rel="noopener">冲绳首里城大部分建筑被烧毁</a></h3><p>周四，位于日本冲绳的世界文化遗产首里城的大部分建筑遭大火烧毁。首里城建造于 13 世纪末至 14 世纪之间，从 15 世纪至 19 世纪是琉球国都城和王宫的所在地，至今有 500 多年的历史，公元 2000 年由联合国列为世界遗产。朝日新闻报道，31 日凌晨 2 点 50 分左右，110 报警电话接到消防方面的通报称，那霸市首里城 “正殿发生火灾，冒出黑烟”。那霸署表示，首里城的正殿、北殿及南殿全部烧毁。火势也蔓延至位于正殿前的御庭入口 “奉神门” 及与南殿相邻的“书院”。以上均为木造建筑物。</p><p><img src="https://imgs.codewoody.com/uploads/big/51392c77f48d0f0f5ebf48f1fa95ecc6.jpg"></p><h3 id="isis头目巴格达迪在美国袭击中死亡"><a href="https://cn.reuters.com/article/mideast-crisis-ishead-killed-1027-idCNKBS1X7013?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">ISIS头目巴格达迪在美国袭击中死亡</a></h3><p>美国总统特朗普周日宣布，极端组织<a href="https://zh.wikipedia.org/wiki/%E4%BC%8A%E6%96%AF%E5%85%B0%E5%9B%BD" target="_blank" rel="noopener">“伊斯兰国”(ISIS)</a>头目巴格达迪(Abu Bakr al-Baghdadi)在美国特种部队对叙利亚西北部的袭击行动中身亡，实现了他所谓的最高国家安全目标。</p><p><img src="https://imgs.codewoody.com/uploads/big/5f44c8f9ab4135c21d04774404e7347d.jpg"></p><p>特朗普在白宫发表电视讲话中称，巴格达迪被逼入一个坑道尽头，随即引爆自杀式炸弹背心身亡。</p><p>特朗普称，15分钟后经过DNA检验，确认了他的身份。</p><p>数小时后，叙利亚库尔德民兵武装保护人民部队(YPG)宣布，被称作巴格达迪左右手的伊斯兰国发言人Abu al-Hassan al-Muhajir，也在库尔德人和美国军方在叙利亚北部的另一次联合行动中身亡。</p><h3 id="欧盟同意英国脱欧延期"><a href="https://www.dw.com/zh/欧盟同意：英国脱欧期限再次推迟/a-51018684?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">欧盟同意英国脱欧延期</a></h3><p>欧洲理事会主席图斯克(Donald Tusk)周一表示，欧盟其他27个成员国周一同意接受英国的要求，将英国退欧期限延长至2020年1月31日。</p><p>首相约翰逊谋求提前举行大选。英国将在12月12日提前举行大选。<a href="http://www.bbc.com/zhongwen/simp/uk-50228289" target="_blank" rel="noopener">source</a></p><h3 id="英国集装箱案-39-名死者均为越南人"><a href="https://www.bbc.com/zhongwen/simp/world-50272480" target="_blank" rel="noopener">英国集装箱案 39 名死者均为越南人</a></h3><p>英国埃塞克斯警方说，他们相信在集装箱惨案中发现的39名遇难者全部为越南人，推翻了此前其认定是中国人的结论。</p><p><img src="https://imgs.codewoody.com/uploads/big/6ab6ac405b1590adc4544fe452c82b06.jpg"></p><h3 id="三季度中国国内手机出货量情况">三季度中国国内手机出货量情况</h3><p>同比去年下降3%。其中：</p><p>华为增长66%，占比42.4%，</p><p>vivo下降23%，占比17.9%，</p><p>OPPO下降20%，占比17.4%，</p><p>小米下降33%，占比9.0%，</p><p>苹果下降28%，占比5.2%，</p><p>Others下降31%，占比8.0%。</p><h3 id="智利宣布取消主板apec峰会"><a href="https://cn.reuters.com/article/chile-apec-summitcancellation-1030-wedn-idCNKBS1XA00T?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">智利宣布取消主板APEC峰会</a></h3><p>智利周三宣布，受街头抗议活动影响，取消主办即将于下个月举行的亚太经合组织(APEC)峰会。美国和中国原本料在这次峰会上签署一项贸易协议，缓和双方已经损害到全球经济的贸易战。</p><p>同时取消的还有联合国气候变化大会(COP25)。西班牙提议接替智利在马德里主办COP25.</p><h3 id="其他新闻">其他新闻</h3><h4 id="国内">国内</h4><ul><li>敦煌干涸了三百年的湖泊哈拉奇湖重现，湖面约5平方公里</li><li>鄂尔多斯男子在微信群称化肥含量不够被拘留: 8月25日至26日，鄂尔多斯市杭锦旗吉日嘎朗镇村民梁某某在没有购买使用某化肥公司的化肥，并且没有任何证据证明该化肥公司的化肥有质量问题的前提下，在一个50人的微信群内发表该化肥公司含量不够等言论，造成了严重的社会影响。<a href="http://www.nmgzf.gov.cn/msrx/2019-10-22/28315.html" target="_blank" rel="noopener">source</a></li><li>黄之锋被剥夺香港区议员参选资格。<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50217675" target="_blank" rel="noopener">source</a></li><li>台湾立法院批准耗资最多2500亿新台币（约81.9亿美元）向美国购买66架F-16V战斗机的《新式战机采购特别条例草案》。<a href="http://sputniknews.cn/military/201910301029945884/" target="_blank" rel="noopener">source</a></li><li>世界贸易组织小型部长会议将于11月5日在上海举行。<a href="http://sputniknews.cn/politics/201910301029945870/" target="_blank" rel="noopener">source</a></li><li>广州市宣布区块链奖励政策，公链项目最高补贴1000万元、本地项目最高补贴300万元。补贴基金总计10亿元。</li><li>罗永浩被列入限制高消费名单，不得选择飞机二等以上舱位。</li></ul><h4 id="国际">国际</h4><ul><li>澳大利亚的乌鲁鲁岩宣布对攀登者永久性关闭</li><li>加州因为野火宣布进入紧急状态。截至北京时间 10 月 29 日下午 2 点，整个加州目前有 12 处火点正在燃烧，其中仅有 1 处火势已经被完全控制，但距离扑灭仍然有较长距离。</li><li>法国加莱发现偷渡冷藏车，货柜车的目的地是英国。检查人员拉响了警报。车厢里藏有8人，其中4名孩子，因发现及时，躲过一劫。<a href="https://www.dw.com/zh/法国加莱：死亡冷藏车事件险些重演/a-51019718?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>比利时警方30日在该国北部城市Antwerp的一辆货车的冰柜内发现12名男性移民。</li><li>英国将在12月12日提前举行大选。<a href="http://www.bbc.com/zhongwen/simp/uk-50228289" target="_blank" rel="noopener">source</a></li><li>叙利亚和土耳其政府军在叙利亚北部边境地区发生直接交火。<a href="https://www.dw.com/zh/战斗持续-土叙政府军直接交火/a-51035515?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>美国通过「台北法案」</li><li>美国众议院以压倒性的绝对多数表决结果，正式承认第一次世界大战期间对亚美尼亚人的屠杀是种族灭绝。<a href="https://www.dw.com/zh/美众议院：亚美尼亚大屠杀是-种族灭绝/a-51046036?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>Twitter将在全球禁止政治广告。</li><li>美国众议院投票通过弹劾总统调查程序。<a href="https://cn.reuters.com/article/house-vote-impeachment-resolution-1031-t-idCNKBS1XB31P?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a></li><li>本周联合国大会，谴责中国新疆政策的国家有22个，而赞赏北京做法的国家则有54个。显然北京的同盟军正在不断发展壮大。<a href="https://www.dw.com/zh/德语媒体：北京的同盟军/a-51070144?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li><li>印度已将克什米尔地区正式划分为由新德里中央政府直接管辖的两个地区。该决定可能再次引起地区骚乱。<a href="https://www.dw.com/zh/克什米尔分为两个印度直接管辖区/a-51070052?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a></li></ul><h4 id="科技新闻">科技新闻</h4><ul><li>28日小米宣布将在11月5日发布小米手表</li><li>苹果发布AirPods pro，包含主动降噪功能。<a href="https://sspai.com/post/57198" target="_blank" rel="noopener">source</a></li><li>28日蔚来汽车CFO 谢东萤辞职，自2019年10月30日起生效。<a href="http://www.lieyunwang.com/archives/460164" target="_blank" rel="noopener">source</a></li><li>中国成立了一只 2000 多亿美元的半导体投资基金</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/5f44c8f9ab4135c21d04774404e7347d.jpg&quot;&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>读论文:一种面向无线网络的Group Centric Networking路由算法</title>
    <link href="http://www.codewoody.com/posts/53819/"/>
    <id>http://www.codewoody.com/posts/53819/</id>
    <published>2019-10-28T02:59:29.000Z</published>
    <updated>2019-11-28T18:04:15.564Z</updated>
    
    <content type="html"><![CDATA[<p>这次我们要读的文章是<i>Group centric networking: A new approach for wireless multi-hop networking</i><span class="citation" data-cites="greg2018group">[1]</span>，文章的作者来自MIT的<a href="https://zh.wikipedia.org/zh-hans/%E6%9E%97%E8%82%AF%E5%AF%A6%E9%A9%97%E5%AE%A4" target="_blank" rel="noopener">林肯实验室</a>。这篇文章主要提出了一种针对大规模的物联网系统无线网络的网络架构方案，方案的名称为Group Centric Networking (GCN)。协议仿真由NS3仿真来实现，同时还在一个由90部Android手机组成的测试平台上进行了测试，并且作者将相关的源代码进行了开源。在通信网络相关的文章中，能够进行如此详尽的实现和测试的文章不多的。因此这篇文章有比较多的研究价值。</p><a id="more"></a><blockquote><p>评论：看完这篇文之后再回到这里写评论。这篇文章提出的思想还是有意思的。现有的无线组网算法基本是对有线场景的路由算法的照搬，尤其是那些基于链路的路由算法。但是无线通信天然就是广播的，充分挖掘这一特点可以提高无线路由的可靠性。不过，作者选取的场景比较「诡异」，虽然提出了分组的概念，但是组内成员在空间上没有聚集性，而且和众多非组内成员杂处。这一场景可能在某些IOT场景有其合理性，但是对于移动组网场景而言，这个组的分布特点，是不太符合实际情况的。一般移动场景，需要进行通信的分组都是有一定的空间聚集性，且不同的组之间往往会有一定的距离，且不会杂处。例如无人机集群，同一组的无人机一般是执行某个任务，集中于某个区域，而不同组队无人机执行不同的任务，一般不在一块。所以这篇文章对于解决我们的问题，作用非常有限。</p></blockquote><p>多跳无线自组网问题由来已久，但是我们还并未真正实现最初的设想 -- 即提供一种能够几乎不依赖于基础设施泛在的连接网络。目前广泛使用的无线网络方案，如Wifi和移动蜂窝网络，仍然依靠有限网络作为backbone，其无线部分只是解决了最后一跳的问题。不过随着物联网的大规模应用趋势逐渐到来，这种星型拓扑的结构可能无法支撑爆炸性增长的节点数量。因此发展自组网能力就非常重要。物联网的节点，是不大可能全部采用有线连接的方式的。用有线方式部署成本比较高，维护困难。事实上5G网络已经引入了<a href="https://en.wikipedia.org/wiki/Device-to-device" target="_blank" rel="noopener">D2D</a>部分。</p><p>多跳无线自组网问题的核心挑战包括：</p><ol type="1"><li>网络的可扩展性</li><li>通信的可靠性</li><li>高动态特性（不稳定拓扑）</li></ol><p>其中，对于物联网应用来说一般节点位置比较固定，故第三点问题不太显著。</p><p>下面我们来详细讨论一下<span class="citation" data-cites="greg2018group">[1]</span>中的内容。</p><h2 id="未来网络特点分析">未来网络特点分析</h2><p>传统的网络架构往往强调一个「地址」的概念。通常一个用户是client，另一个用户是server，这两个用户在网络中的任意位置，通过路由算法进行连接。在未来的网络中，这种点对点(P2P)的架构可能就不合时宜了。在物联网场景中，更多的是海量的设备位于一个局域网络中，服务于一个人类终端用户，或是在工厂中协作改进生产效率。传统的长距离的P2P通信将不是网络通信的主要内容。作者将这种「局域化」通信的网络特性称之为Group-Centric，即局部通信成为网络流量的主要模式。</p><p>总结来看，Group-Centric网络有如下特点：</p><ul><li><i>Devices will be grouped by an inherent set of &quot;interests&quot; that are dependent on the tasks they are performing, and these group members will wish to communicate reliably between one another. Devices are not limited to a single group, and can belong to multiple groups.</i></li><li><i>The majority of message exchanges will be within some local area, and long-distance traffic will only be a small fraction of overall communications.</i></li><li><i>Any device can be a source or a sink, and traffic patterns between them may be one-to-one, one-to-many, many-to-one, or many-to-many.</i></li><li><i>Future wireless environments will have a mix of mobile and stationary devices, where mobility will be typically be limited to some local area.</i></li></ul><blockquote><p>文章中提到一个数据很有意思：<i>a recent study shows that 95% of traffic in military networks travels at most three hops, with only 5% of traffic being long-range</i><span class="citation" data-cites="ramanathan2010scalability">[2]</span></p></blockquote><p><strong>当前多跳无线网络的路由机制，本质上是照搬有线网络中的解决思路</strong>。这些路由机制都是基于链接(Link)的，即将远程端到端通信分解为多个首尾相接的链路。但是相比于有线网络，无线网络有天然的广播特性(干扰，多径，噪声等问题)，因此执着于Link的方式是不合适的。<i>The idea of a link is itself borrowed from wired networks: in a wireless network, there is no one-to-one connection between two radios; transmissions are sent over-the-air and are typically overheard by multiple devices</i>。</p><p>本文<span class="citation" data-cites="greg2018group">[1]</span>提出的GCN方法，就摒弃了基于Link的路由概念，而使用了「智能洪泛」(smart-flood)的方法。GCN的核心特点如下：</p><ul><li><i>No link state or neighbor information is utilized or maintained, and minimal control information is exchanged.</i></li><li><i>Data is efficiently disseminated only across the region where group members exist. To support this, we develop a novel Group Discovery algorithm that dynamically discovers the region of interest and efficiently selects the minimal amount of relay nodes required to “cover” this region</i></li><li><i>More reliable communications is achieved in an error-prone and mobile environment by using <strong>tunable resiliency</strong>, where the number of redundant data relays is configurable and is able to self-adjust in response to real-time channel conditions.</i></li><li><i>Devices communicate in a many-to-many traffic pattern. Efficient one-to-one, one-to-many, and many-to-one are subsets.</i></li></ul><p>文章证明了，CGN相比于传统无线网络路由算法，使用的网络资源少一个数量级，且提供了可靠的通信连接。</p><h2 id="gcn机制内容">GCN机制内容</h2><p>GCN 设计的目的是服务于设备分组聚集的网络，其中大部分的通信内容都在组内部进行。 网络中的节点资源受限，环境中存在干扰导致通信并不总是可靠。因通信需要：i) 能够抗干扰；ii) 高效实用带宽和能量。</p><h3 id="业务模式">业务模式</h3><p>组件用户的通信是多对多模式(many-to-many)。一个用户可能希望想另一个组中的全部或者部分用户发送数据，或者是从另一个组内收集数据。注意One-to-one, one-to-many, 和many-to-one通信模式其实都是many-to-many的子集。</p><p>GCN 的一个网络布局的例子如下图：</p><figure><img src="https://imgs.codewoody.com/uploads/big/ca59b0e35fba4e7241838a21b2625246.png" alt="An example of a group centric network"><figcaption>An example of a group centric network</figcaption></figure><p>在上图中，通过定义一系列的中继节点，我们让组内的成员可以互相连接起来。使用one-to-many的通信方式，即便存在一条链路传输失败，其他节点可以继续中继数据。上图中只显示了一个Group，但是节点事实上可以同时从属于多个group。</p><p>GCN的核心机制如下：</p><ul><li><i>Group Discovery</i>: Efficient discovery of the local region where group members reside via a group discovery algorithm that is able to connect group members without the use of global control information</li><li><i>Tunable resiliency</i>: Relay nodes are activated such that the local region is sufficiently &quot;covered&quot; in data by having a tunable number of <strong>redundant data relays</strong>. This allows for resiliency towards both packet loss and mobility without the need for the constant exchange of control information. The number of activated relay nodes self-adjusts in response to real-time channel conditions</li><li><i>Targeted flooding</i>: Data can be efficiently and resiliently sent between sets of group members through an approach we call &quot;targeted flooding&quot;</li></ul><h3 id="group-discovery">Group Discovery</h3><p>Group Discovery 的作用是在<strong>没有先验信息的情况下</strong>于局部发现彼此相连的组成员（不局限于一跳，但是最大跳跃数不会太高）。且这一过程不需要进行低效率的全局广播过程。Naive的做法是使用TTL机制来做洪泛广播，不过这种方式非常低效，浪费通信资源。</p><p>本文提出了一种更叫高效的方法，我们称之为<i>discovery regeneration</i>。其基本思想是，预期发送一个TTL比较大的包，不如多次重新生成一个TTL比较小的包。具体的过程如下：</p><ol type="1"><li>某个组成员通过发送一个discovery message来发起group discovery操作。相应的discovery message的TTL值，会根据group想要扩展的范围来进行设置。将最初发起者设置的TTL成为<i>source TTL</i>。</li><li>如果某个组成员监听到了一个discovery message，该节点会使用source TTL来重新生成一个消息。</li><li>如果一个非组成员监听到一个discovery message，如果其TTL大于0，那么将TTL减一后再次广播，反之如果TTL为0，则什么都不做。</li></ol><p>中继节点(Data relays)通过Group Nodes发送的ACK消息来确定。当一个Group Member收到一个discovery消息时，会向中继此discovery消息的Group Node发送ACK消息。加载在Group Nodes之间的非组成员节点在收到对应的ACK时，会成为 Data Relays. 当Group Nodes收到多个discovery消息时，只会对第一个discovery消息发送ACK。去重机制会确保discovery消息只被广播发送一次。还有一点要注意的是，ACK消息只会发送给重新生成discovery消息的Group Node，而非一路转发回到最初的原始节点。</p><p>在GCN中，当一个节点成为Data Relay的时候，这个节点就作为整个Group的网络的中继节点而存在，而非只服务于当初发送ACK的那个Group Node。同时，中继节点也不需要保留发送ACK的这个组节点的信息。反过来，任何Group Node也会监听来自Relay Node的信息。</p><p>上面这一套发现流程完成之后，GCN中的<strong>任何节点都不需要保留链路信息或者是邻居信息</strong>。借助于Relay Node的作用，现在所有组成员都被连接了起来，通过现有网络架构，可以实现One-to-all模式的通信，进而也可以实现many-to-many的通信模式。这个组发现流程可以周期性地执行，从而允许网络结构调整，包括新节点加入等。</p><p>下图是上述发现流程的一个例子：</p><figure><img src="https://imgs.codewoody.com/uploads/big/b6466094228a828aeaa0f7fde8c5edca.png" alt="图中生成discovery时初始TTL为2，发出去的时候减去1。非组成员并不重新生成新的discovery包，而是将TTL减去1转发，因此限制了扩散范围。"><figcaption>图中生成discovery时初始TTL为2，发出去的时候减去1。非组成员并不重新生成新的discovery包，而是将TTL减去1转发，因此限制了扩散范围。</figcaption></figure><blockquote><p>从上面的描述来看，这里的组发现过程，并不只是发现组的成员，还要发现转发需要的Relay Node。</p></blockquote><p>那么，剩下的问题是如何选择合适的初始TTL值呢？如果TTL选的太小，那么不足以发现所有的组成员。如果TTL太大，则会产生太多的冗余通信内容。文章的作者从理论和仿真的角度论证了即便是比较低的TTL值也足以发现比较稀疏的网络中的所有组成员。</p><p>设<span class="math inline">\(N\)</span>个用户分布在面积为<span class="math inline">\(A\)</span>的二维区域中，那么用户密度为<span class="math inline">\(\lambda = N / A\)</span>。任意一个用户是组成员的概率是<span class="math inline">\(P_g\)</span>，每个成员的通信传输距离都是<span class="math inline">\(X\)</span>。在如上假设下，我们可以得到被发现的组成员的比例，同TTL初始值<span class="math inline">\(T\)</span>的关系为<span class="math inline">\(1 - e^{P_g \lambda \pi ((X - \frac{1}{2\lambda})\cdot T)^2}\)</span>。下图是仿真和理论结果的拟合情况。</p><figure><img src="https://imgs.codewoody.com/uploads/big/d7cf157e7c8d68d80f097d64ac7e3daa.png" alt="仿真场景为100个节点均匀分布在半径为100米的圆形区域内，每个用户的传输距离是40m。上图中不同的曲线使用了不同的P_g值。所有节点都是静止的"><figcaption>仿真场景为100个节点均匀分布在半径为100米的圆形区域内，每个用户的传输距离是40m。上图中不同的曲线使用了不同的<span class="math inline">\(P_g\)</span>值。所有节点都是静止的</figcaption></figure><p>为了比较GCN机制的优越性，作者提供了整体传输效率的比较。这里的传输效率是指为了将一个消息发送给的网络中所有的组成员，需要实际发送的数据量的大小。这里我们不详细介绍这个环节了，对比图如下。</p><figure><img src="https://imgs.codewoody.com/uploads/big/02f619ef796b116c7cf1575cd03db232.png" alt="传输效率对比图"><figcaption>传输效率对比图</figcaption></figure><h3 id="tunable-resiliency">Tunable Resiliency</h3><p>前面的组发现流程为网络中分散分布的组成员创建了一系列中继节点组成的集合，该集合的中继可以实现组成员之间的one-to-many的通信。不过这一组合是「最小组合」，其可靠性还缺乏保障。如果某一中继环节传输失败可能导致后续的传输中断。节点的运动会使得这种情况愈发严重。</p><p>为了提升GCN机制的可靠性，作者在上述组发现机制之余在增加了一个新的机制 -- Tunable Resiliency。这一新机制可以激活额外的中继节点以改善GCN广播转发过程的可靠性。额外激活的中继节点的数量可以根据信道条件自适应地调整。Tunable Resiliency机制对于组发现的过程的修改如下：</p><ol type="1"><li>在ACK<span class="foot-note-span">【ACK为组成员回复给潜在的中继节点的】</span>机发送前增加一小段延时。</li><li>每个用户都记录其周围的可见邻居节点的数量，以方便确定其周围存在的可能的中继节点的数量。</li><li>以随机性的方法选择一组用户<span class="foot-note-span">【用户依照一定的概率自行决策】</span>成为中继节点。</li></ol><p>在ACK前增加一小段的延时是为了让组发现消息(discovery message)充分传输到特定用户的周围，以方便用户统计周围邻居节点的数量<span class="foot-note-span">【下面马上会讨论这个】</span>。这一延时的大小的确定取决于用户的链路层。</p><p>在邻居节点数量统计过程中，一个用户会计算周围发送discovery messages的节点的户数量。除非一个节点是非组成员节点，而且TTL为0，不然收到discovery messages的节点会立刻转发此消息。因此延后ACK一小段时间，节点<span class="foot-note-span">【目标区域内的节点，包括组成员和非组成员都可以通过这个过程获知邻居数量信息】</span>在发送前可以通过收到的discovery messages的数量来统计周围邻居的数量。</p><p>对于可以潜在的中继节点候选者，其可以根据周围邻居的数量来调整自己转变成中继节点的概率。这样可以保证最终生成的中继节点的数量符合预期的密度。</p><figure><img src="https://imgs.codewoody.com/uploads/big/20f62faf19e544624d7ed29aee029f3b.png" alt="Tunable Resiliency 效果示例"><figcaption>Tunable Resiliency 效果示例</figcaption></figure><h3 id="targeted-flooding">Targeted flooding</h3><p>上面的两个部分我们讨论的组发现和Tunable Resiliency过程构造的中继节点集合，主要面向的还是一对多的通信模式。为了能够有效地实现多对一或者一对一的通信，作者提出了Targeted Flooding机制。</p><p>为了实现这种通信模式，GCN需要通过控制消息传输来获取距离信息（跳跃数，而非空间距离），从而构建一个组成员的梯度场。在每次包（数据包以及控制包）传输时，包会包含如下额外信息：发送者的ID和已经经过的跳跃数(hop count)。每当一个用户监听到一个包时，都会记录自己距离包的最初发送者的距离（跳跃数）。</p><h4 id="one-to-one-traffic">one-to-one traffic</h4><p>对于某用户<span class="math inline">\(i\)</span>，将其到另一用户<span class="math inline">\(j\)</span>的距离记为<span class="math inline">\(\Delta_j^i\)</span>。从一个用户向另一个用户发出的消息将会在其Header中包含目标地址以及最大传输距离（Maximum Retransmt Distance, MRD）<span class="foot-note-span">【MRD在每次转发后都会更新减一】</span>。中继节点在收到要转发的包时，检查其自身到目标的距离是否不超过MRD的限制。若是，则转发，否则放弃转发。</p><figure><img src="https://imgs.codewoody.com/uploads/big/8145678d535d8bf3f933c70771ce62be.png" alt="Traget Flooding for One-To-One的例子，图中圈内的数字为该节点到j的距离"><figcaption>Traget Flooding for One-To-One的例子，图中圈内的数字为该节点到<span class="math inline">\(j\)</span>的距离</figcaption></figure><p>上面的例子给出了Target Flooding的过程。在(a)中，经过one-to-group过程，组内节点都可以知道自己到<span class="math inline">\(j\)</span>的跳跃数。图中圈内的数字为该节点到<span class="math inline">\(j\)</span>的距离。(b)展示了直观的通过链路状态的路由方式，但是这种方式需要维持路由表，开销巨大而且在动态场景下不太稳定。(c)演示了将MRD设置为2时从<span class="math inline">\(i\)</span>到<span class="math inline">\(j\)</span>消息的传播路径。可见Flooding的范围是受控的。(d)则 演示了将MDR设置为3的情形，这时冗余传输增加了，但是可以提供更多的鲁棒性。</p><h4 id="one-to-many-traffic">one-to-many traffic</h4><p>这里说的one-to-many指发送给组的一个子集，而非发送给整个组。这种通信模式是对one-to-one的直接扩展。节点在发送时直接指定多个目标地址/MRD对就可以了，其他处理过程和one-to-one通信过程是一样的。</p><figure><img src="https://imgs.codewoody.com/uploads/big/5fe8f7a2133675fb2166526d7ae62417.png" alt="One-to-many的例子"><figcaption>One-to-many的例子</figcaption></figure><h4 id="many-to-many-traffic">many-to-many traffic</h4><p>many-to-many过程中，各个发送节点独立发送one-to-many模式的消息即可。</p><blockquote><p>以上是协议涉及的所有内容，至于仿真部分这里就不分析了</p></blockquote><h2 id="reference" class="unnumbered">Reference</h2><div id="refs" class="references"><div id="ref-greg2018group"><p>[1] G. Kuperman, J. Sun, B.-N. Cheng, P. Deutsch, and A. Narula-Tam, “Group centric networking: A new approach for wireless multi-hop networking,” <em>Ad Hoc Networks</em>, vol. 79, pp. 160–172, 2018.</p></div><div id="ref-ramanathan2010scalability"><p>[2] R. Ramanathan, R. Allan, P. Basu, J. Feinberg, G. Jakllari, V. Kawadia, S. Loos, J. Redi, C. Santivanez, and J. Freebersyser, “Scalability of mobile ad hoc networks: Theory vs practice,” in <em>2010-milcom 2010 military communications conference</em>, 2010, pp. 493–498.</p></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次我们要读的文章是&lt;i&gt;Group centric networking: A new approach for wireless multi-hop networking&lt;/i&gt;&lt;span class=&quot;citation&quot; data-cites=&quot;greg2018group&quot;&gt;[1]&lt;/span&gt;，文章的作者来自MIT的&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E6%9E%97%E8%82%AF%E5%AF%A6%E9%A9%97%E5%AE%A4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;林肯实验室&lt;/a&gt;。这篇文章主要提出了一种针对大规模的物联网系统无线网络的网络架构方案，方案的名称为Group Centric Networking (GCN)。协议仿真由NS3仿真来实现，同时还在一个由90部Android手机组成的测试平台上进行了测试，并且作者将相关的源代码进行了开源。在通信网络相关的文章中，能够进行如此详尽的实现和测试的文章不多的。因此这篇文章有比较多的研究价值。&lt;/p&gt;
    
    </summary>
    
      <category term="读论文" scheme="http://www.codewoody.com/categories/%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    
    
      <category term="无人机" scheme="http://www.codewoody.com/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
      <category term="科研" scheme="http://www.codewoody.com/tags/%E7%A7%91%E7%A0%94/"/>
    
      <category term="读论文" scheme="http://www.codewoody.com/tags/%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    
      <category term="路由" scheme="http://www.codewoody.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-18</title>
    <link href="http://www.codewoody.com/posts/59180/"/>
    <id>http://www.codewoody.com/posts/59180/</id>
    <published>2019-10-27T13:28:29.000Z</published>
    <updated>2019-11-03T08:34:44.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="陈同佳出狱"><a href="https://www.dw.com/zh/陈同佳出狱-如何赴台受审仍无共识/a-50942108?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">陈同佳出狱</a></h3><p>陈同佳愿意前往台湾投案，但是被台当局拒绝。随后两天民进党当局态度反复，至本周结束仍然没有确定信息。</p><h3 id="厄瓜多尔临时迁都">厄瓜多尔临时迁都</h3><p>新华社基多10月7日电（记者郝云甫）厄瓜多尔总统莫雷诺7日宣布，鉴于当前首都基多的安全局势愈发紧张，厄政府机关将从基多临时迁至厄瓜多尔第一大城市瓜亚基尔。</p><p><img src="https://imgs.codewoody.com/uploads/big/4e401143a51fd32ff356c18a8be78039.jpg"></p><p>莫雷诺在7日晚发表的全国电视讲话中表示，从10月3日开始，厄社会受到抗议活动的严重冲击。他说，抗议活动的暴力色彩越来越严重，暴徒恣意进行打砸抢等暴力活动。“这是有组织、有计划的行动，意在破坏厄瓜多尔的民主秩序，破坏政府的稳定。”</p><p><img src="https://imgs.codewoody.com/uploads/big/61487e47b4082106911b49a56f0d70d8.jpg" alt="" style="width: 70%;"></p><p>莫雷诺指责厄瓜多尔前总统科雷亚是暴力活动的幕后黑手。他指控科雷亚及其支持者企图利用抗议活动发动一场旨在推翻现政府的“政变”。</p><p>莫雷诺强调，政府不会退缩，不会在压力下停止经济改革。同时他呼吁抗议者立即同政府开展对话以化解分歧。</p><p>日前，厄宣布取消对汽油等燃油的价格补贴，这一措施导致油价大涨并引发民众强烈不满。为抗议政府放开汽油价格，厄交通运输业者3日举行全国大罢工。莫雷诺3日宣布全国进入为期60天的紧急状态，以应对厄公共交通行业宣布罢工给社会造成的混乱状况。</p><p>在厄首都基多，居民由于担心物价大幅上涨而开始抢购食物。超市货架的各类食品被抢购一空。厄政府开始采取措施打击哄抬物价的行为。此外，由于担心安全问题，从3日开始，厄瓜多尔全国中小学处于持续停课状态。</p><h3 id="德仁天皇即位典礼22日举行"><a href="https://cn.reuters.com/article/japan-emperor-enthronement1022-tues-idCNKBS1X105Q?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">德仁天皇即位典礼22日举行</a></h3><p>日本德仁天皇正式即位典礼将于周二(22日)举行，将有来自超过180个国家的政要贵宾出席这场有百年历史的庆祝仪式。</p><p>晚间将举行“飨宴之仪”，本次宴请将于22日，25日，29日，31日分4天宴请约2000名国内外宾客，其中22日宴请外国领导人，祝贺使节，参众两院议长，首相，最高裁判所长官等共约410人。</p><p>当日东京银座，数百名对天皇制的民众在东京银座举行示威，高喊“反对即位”等口号，部分示威者与警方发生冲突，3人被捕。</p><p><img src="https://imgs.codewoody.com/uploads/big/dafe160b119289285436e2ee1d453b1e.jpg"></p><h3 id="智利宣布进入紧急状态"><a href="https://www.bbc.com/zhongwen/simp/world-50109650" target="_blank" rel="noopener">智利宣布进入紧急状态</a></h3><p><img src="https://imgs.codewoody.com/uploads/big/0069ab52e3f3a59d02a4e2ec053ad8c5.jpg"></p><p>智利首都圣地亚哥因地铁加价<span class="foot-note-span">【10月6日凌晨，圣地亚哥新公交系统开始使用，地铁早晚高峰各两个小时时段的票价较原来上涨30比索，达到830比索（约合1.17美元）】</span>引发民众示威抗议。智利总统皮涅拉宣布首都进入紧急状态。</p><p>当地时间周五，以学生为主的示威者在当地多个地铁站出入口纵火，破坏站内设施。有示威者向警察投掷石块，袭击警车并燃烧至少一辆巴士。警方出动防暴警察，向示威者使用警棍及催泪弹。</p><p>受示威影响，当地地铁服务暂停。</p><h4 id="旧闻一则">旧闻一则</h4><p><img src="https://imgs.codewoody.com/uploads/big/d2ca8d3ef329d28b18883f9dc5ba9c94.jpg"></p><h3 id="玻利维亚大选结束存在舞弊疑虑"><a href="http://www.rfi.fr/cn/contenu/20191022-%E8%AE%A1%E7%A5%A8%E7%BB%93%E6%9E%9C%E7%AA%81%E9%80%86%E8%BD%AC-%E7%8E%BB%E5%88%A9%E7%BB%B4%E4%BA%9A%E6%80%BB%E7%BB%9F%E5%A4%A7%E9%80%89%E7%88%86%E8%88%9E%E5%BC%8A%E7%96%91%E8%99%91" target="_blank" rel="noopener">玻利维亚大选结束，存在舞弊疑虑</a></h3><p>玻维亚昨天举行战况激烈的总统大选，最新计票结果显示，长期执政的现任总统莫拉莱斯似乎准备迎接胜利，引发舞弊疑虑，主要反对派候选人梅沙今天拒绝承认这项结果。</p><p><img src="https://imgs.codewoody.com/uploads/big/075998034c0d5bf4a312cf34540db078.jpg"></p><p>昨晚初步计票结果显示，得票率第2高的前总统梅沙（Carlos Mesa）将与莫拉莱斯（Evo Morales）一同进入第2轮决选，如今计票结果却突然翻转，梅沙今天谴责选举当局发布的修正结果是场「骗局」。</p><p>梅沙说：「我们不会承认那些计票结果，那是这场可耻、虚假骗局的一环，使玻利维亚社会处于不必要的紧张局势。」</p><p>梅沙在圣克鲁斯（Santa Cruz）告诉记者：「我们相信公民们不会接受这个结果。政府创造了一个不可能发生的局面，伪造人民的投票。」</p><p>来自美洲国家组织（Organization of American States）的选举监督小组稍早已对玻利维亚大选结果突然逆转「深表关切」。</p><p>选举监督小组声明说：「对于投票结束后显示的初步结果走向发生剧烈且难以解释的变化，美洲国家组织代表团深表关切和讶异。」</p><p>代表团指出，昨晚公布的初步计票结果显示，59岁的莫拉莱斯囊括45%选票，66岁的梅沙则拿下38%，两人得票皆未达到首轮所需的当选门槛，这意味莫拉莱斯原本将首度面临第2轮决选。</p><p>媒体报导，双方支持者在行政首都拉巴斯（La Paz）街头爆发冲突，美洲国家组织呼吁选举当局「坚决捍卫玻利维亚人民的意志」，并呼吁各方冷静。</p><p>「在这种棘手的情况下，保持冷静和避免各种形式的暴力极为重要。」</p><p>反对派支持者已在全国各地主要计票中心外头发起抗议，以向选举当局持续施压。</p><h3 id="中国富裕人口总数超过美国">中国富裕人口总数超过美国</h3><p>瑞士信贷的研究显示，中国富裕人口首度超越美国。瑞士信贷周一公布的年度财富调查结果显示，截至今年年中为止，名列全球前 10% 的富裕人口中，中国占了 1 亿人，美国则占了 9,900 万人。研究显示，全球百万美元富翁人数估计增加 110 万人至 4,680 万人，整体净资产规模达 158.3 万亿美元，占全球总数的 44%。美国占上述增幅的一半以上，新增 67.5 万个百万富翁。55,920 名成年人的身家至少 1 亿美元，4,830 人的净资产超过 5 亿美元。</p><h3 id="英国卡车集装箱内发现39具尸体"><a href="http://www.bbc.com/zhongwen/simp/uk-50154243" target="_blank" rel="noopener">英国卡车集装箱内发现39具尸体</a></h3><p>据英国天空新闻23日最新消息，英国埃塞克斯一工业园区的一辆卡车集装箱内发现39具尸体。报道称，卡车司机是一名来自北爱尔兰的25岁男子，现因涉嫌谋杀已被逮捕。</p><p><img src="https://imgs.codewoody.com/uploads/big/6415960c2c878cf88a16235b55373f03.jpeg"></p><p>后续传出消息39名遇难者均为中国国籍，随后驻英大使馆以及英国警方均表示目前还未确认遇难者国籍。有消息显示遇难者中可能有越南人(<a href="https://cn.reuters.com/article/vietnam-uk-embassy-truck-dead-1025-idCNKBS1X5005?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a>)。有多名越南人表示他们担心其亲属可能在这辆集卡车上(<a href="http://www.bbc.com/zhongwen/simp/uk-50182847" target="_blank" rel="noopener">source</a>)。</p><p>27日消息，英国警方称将把调查重点转向越南社区。(<a href="http://www.bbc.com/zhongwen/simp/world-50198514" target="_blank" rel="noopener">source</a>)</p><h3 id="其他新闻">其他新闻</h3><ul><li>总市值超过30亿港元的「51信用卡」疑似被查。(<a href="https://www.zhihu.com/question/351747235" target="_blank" rel="noopener">source</a>)</li><li>塔利班组织证实了将于下周在华举行阿富汗各派间会议的计划。(<a href="http://sputniknews.cn/politics/201910231029895765/" target="_blank" rel="noopener">source</a>)</li><li>加拿大大选结束，特鲁多连任，但议会席次大减。(<a href="https://cn.reuters.com/article/canada-election-trudeau-win-1023-idCNKBS1X204L?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">source</a>)</li><li>外籍乘客拉高铁紧急制动阀未被处理？广州铁路回应。</li><li>因为美国未及时发放签证，中国代表团集体缺席今年的国际宇航联大会。(<a href="https://www.dw.com/zh/%E5%9B%BD%E9%99%85%E5%AE%87%E8%88%AA%E8%81%94%E5%A4%A7%E4%BC%9A%E6%B2%A1%E6%9C%89%E4%B8%AD%E5%9B%BD%E4%B8%AD%E6%89%B9%E7%BE%8E%E7%AD%BE%E8%AF%81%E6%AD%A6%E5%99%A8%E5%8C%96/a-50959480?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a>)</li><li>韩国决定放弃世贸组织中的发展中国家地位。(<a href="http://sputniknews.cn/economics/201910251029914306/" target="_blank" rel="noopener">source</a>)</li><li><a href="https://www.zaobao.com.sg/realtime/world/story20191027-1000491" target="_blank" rel="noopener">当地时间10月27日，美国德州发生大规模枪击案，已致2死10多伤</a>: 综合美联社、《达拉斯早报》27日消息称，当地时间周日(27日)凌晨，位于得克萨斯州格林维尔市的一个校园派对上发生大规模枪击事件。据当地官员和目击者称，至少造成2人死亡、十多人受伤。</li><li>巴西宣布对中国免签。</li><li>27日，叙利亚民主力量（SDF）周日（10月27日）宣布从叙利亚和土耳其边境最终撤离，叙利亚边防军将取代他们。(<a href="http://sputniknews.cn/military/201910271029926849/" target="_blank" rel="noopener">source</a>)</li><li>26日，《中华人民共和国密码法》发布。密码法旨在规范密码应用和管理，促进密码事业发展，保障网络与信息安全，提升密码管理科学化、规范化、法治化水平，是中国密码领域的综合性、基础性法律。(<a href="https://www.williamlong.info/archives/5869.html" target="_blank" rel="noopener">source</a>)</li></ul><h3 id="数码新闻">数码新闻</h3><ul><li>10月23日华为正式发布5G折叠手机Mate X，售价为16999元起。</li><li>微软赢得五角大楼100亿美元的云计算合同。</li><li>路透社刚刚援引英国《星期日泰晤士报》27日的报道称，英国首相鲍里斯·约翰逊正准备授予中国华为公司访问英国未来的5G电信网络“不具争议性”部分的权限。(<a href="https://www.cnbeta.com/articles/tech/903835.htm" target="_blank" rel="noopener">source</a>)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/6415960c2c878cf88a16235b55373f03.jpeg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-17</title>
    <link href="http://www.codewoody.com/posts/58220/"/>
    <id>http://www.codewoody.com/posts/58220/</id>
    <published>2019-10-20T06:43:49.000Z</published>
    <updated>2019-10-27T13:28:58.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="赵紫阳下葬民间公墓">赵紫阳下葬民间公墓</h3><p><img src="https://imgs.codewoody.com/uploads/big/11b96d95c8d170401a9c3dd80ce75d5b.jpg"></p><p>10月18日下午一時，前中共中央总书记赵紫阳在逝世14年后，与夫人的骨灰合葬于北京昌平区民间公墓天寿园。赵家子女在经历多年波折后，终于在父亲百岁冥诞之时，遵循了中国“入土为安”的传统。在此之前，赵的骨灰一直放置在他北京的故居。</p><p>BBC中文得到消息，赵家子女在与官方协商后，为顺利举行安葬仪式，做出承诺：仅安排直系后裔参加，以家礼送葬。北京数名原本听到消息，准备低调参与安葬仪式的赵紫阳仰慕者被限制行动，未能成行。</p><h3 id="腾讯恢复nba季前赛直播">腾讯恢复NBA季前赛直播</h3><blockquote><p>要么一开始就别整，要整就要整到底。雷声大雨点小，授人以柄，丢人现眼</p></blockquote><p><img src="https://imgs.codewoody.com/uploads/big/729f859e4f97b7a201bafb411f327147.jpg"></p><h3 id="加泰罗尼亚独立运动领导人被判重刑"><a href="https://www.dw.com/zh/加泰罗尼亚独立运动领导人被判重刑/a-50824240?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">加泰罗尼亚独立运动领导人被判重刑</a></h3><p>西班牙最高法院作出裁定：分别判处加泰罗尼亚独立运动的12名被告中的9人9至13年有期徒刑。不过，法官未认定被告犯有叛乱罪。检方曾要求以该罪判处被告最高25年监禁。被告分别被判处多年监禁。前加泰罗尼亚大区政府副主席容克拉斯获最高13年徒刑。数名被告还被裁定犯有侵吞公共资产罪。另3名前政界人士被裁定犯有不服从罪。此案涉及分离主义运动领袖们在2017年10月1日的遭禁独立全民公投中所扮演的角色，及由此导致的巴塞罗那地区政府作出加泰罗尼亚脱离西班牙的决定。</p><p>16日，加泰罗尼亚首府巴塞罗那又发生严重冲突。独立运动支持者焚烧汽车和街垒。大区政府现任主席谴责了暴力。警方通报说，有暴力倾向的独立运动人士不仅向安全力量投掷石块和爆竹，而且还使用了&quot;沾有酸性液体的物品&quot;。这已是在巴塞罗那市内及周边大规模示威的第三天。(<a href="https://www.dw.com/zh/%E5%B7%B4%E5%A1%9E%E7%BD%97%E9%82%A3%E6%8E%A5%E8%BF%9E3%E5%A4%9C%E5%8F%91%E7%94%9F%E9%AA%9A%E4%B9%B1/a-50865092?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">来源</a>)</p><p><img src="https://imgs.codewoody.com/uploads/big/ffcbcacf0a9a8f41f79c15fe66e1d57f.jpg"></p><h3 id="美国众议院通过香港人权民主法案"><a href="http://www.bbc.com/zhongwen/simp/chinese-news-50065093" target="_blank" rel="noopener">美国众议院通过香港人权民主法案</a></h3><p>美国众议院投票一致通过《香港人权与民主法案》，要求美国政府每年审视香港的自治情况，按需要调整美国对香港的贸易特别待遇。 法案的通过被视为美国政府回应香港近期示威浪潮的重要一步。</p><p>法案的主要发起人、共和党议员史密斯（Chris Smith）说，众议院促请中国和香港政府履行承诺，保护香港的权利和自治权。</p><p>中国外交部发言人耿爽周三（10月16日）对法案获得众议院通过感到“强烈愤慨和坚决反对”，他批评香港面临的不是人权和民主问题，而是尽快恢复秩序、维护法治的问题。“美国国会众议院罔顾事实、颠倒黑白，把肆意纵火、打砸商铺、暴力袭警等严重犯罪称之为人权和民主问题，是赤裸裸的双重标准。”</p><p>同一天，香港政府也发表声明，对美国众议院通过法案表示遗憾，重申外国议会不应干预香港内部事务。</p><p>除了《香港人权与民主法案》，众议院还通过了《保护香港法案》，禁止美国公司向香港出口催泪弹等人群管制用品。</p><p>这两部法案正式成为法律前，仍然需要参议院通过，最后由总统特朗普签署正式确定。参议院目前仍未决定什么时候开始审议。《经济学人》智库早前分析称，相信这份法案会在今年年底之前成为真正的法律。</p><h3 id="华为公布第三季度业绩报告"><a href="https://mp.weixin.qq.com/s/KYqp1_NFmbQ46YaG9w45Ig" target="_blank" rel="noopener">华为公布第三季度业绩报告</a></h3><p>华为于昨日公布了 2019 年第三季度的业绩报告。报告显示，华为截至第三季度销售收入 6108 亿人民币，同比增长 24.4%，净利润率为 8.7%。在消费者业务方面，智能手机保持稳健增长，前三季度发货量超过 1.85 亿台，同比增长 26%。而 PC、平板、智能穿戴、智能音频等新业务均获得高速增长。</p><p>另外，在报告中华为还提到，截至目前，华为已和全球领先运营商签定了 60 多个 5G 商用合同，40 多万个 5G Massive MIMO AAU 将发往世界各地。</p><blockquote><p>在制裁中逆势增长，中国还是太缺像华为这样的企业了。</p></blockquote><h3 id="英国退欧协议在欧盟获得通过"><a href="https://cn.reuters.com/article/eu-uk-reach-bexit-deal-1017-idCNKBS1WW1BN?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">英国退欧协议在欧盟获得通过</a></h3><p>路透布鲁塞尔10月17日 - 欧盟执委会主席容克说，英国和欧盟达成了一项新的英国脱欧协议。</p><p>英国议会10月19日星期六就脱离欧盟问题举行辩论，决定再次延迟英国议会的脱欧表决。约翰逊政府遭遇重大挫折。(<a href="https://www.bbc.com/zhongwen/simp/world-50110944" target="_blank" rel="noopener">source</a>)</p><p>英国议会议员们以322票赞成，306否决，通过了前保守党议员、现独立无党派议员莱特温提出的英国脱欧修正案，规定所有必要的英国立法获得通过前，英国政府必须推迟英国脱欧。</p><p>这意味着约翰逊首相必须在当地周六晚11点前致函欧盟，提出英国脱欧延期的要求。</p><h3 id="其他新闻">其他新闻</h3><ul><li>重名梗：台湾政治学学者蔡英文先生于10月10日在台北去世，享年67岁。(<a href="https://news.ifeng.com/c/7qjvbpXilwg" target="_blank" rel="noopener">来源</a>)</li><li>印度放宽对华旅游签证限制(<a href="https://finance.jrj.com.cn/2019/10/14010628239620.shtml" target="_blank" rel="noopener">来源</a>)</li><li>韩国艺人崔雪莉死亡(<a href="https://daily.zhihu.com/story/9716169" target="_blank" rel="noopener">来源</a>)</li><li>沙特首次开放旅游签证([来源]](http://www.bbc.com/zhongwen/simp/world-50047289))</li><li>德国宣布不会在5G网络建设中排除华为(<a href="https://www.dw.com/zh/德国5g网络建设不排除华为/a-50819825?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">来源</a>)</li><li>贾跃亭正式申请个人破产(<a href="https://www.williamlong.info/archives/5857.html" target="_blank" rel="noopener">来源</a>): 贾跃亭债务处理小组在发布的《有关贾跃亭先生个人破产重组及成立债权人信托的声明》（以下简称声明）中表示，贾跃亭已于美国当地时间10月13日根据美国相关法律第11章（chapter 11）主动申请个人破产重组，这将成为解决贾跃亭个人余下债务并保障债权人利益的最佳方案。</li><li>风灾已经导致日本58人死亡(<a href="https://cn.reuters.com/article/japan-typhoon-death-toll-1014-idCNKBS1WU039?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">来源</a>)，其中遇难中国籍船员达到6人(<a href="http://sputniknews.cn/china/201910151029834269/" target="_blank" rel="noopener">来源</a>)。</li><li>中缅边境地区电信诈骗猖獗，严重区域内的微信支付宝支付服务被封停。</li><li>深圳开出首张电子烟发单，罚款50元。这意味着在禁烟场所，电子烟同样不被允许。</li><li>国务院：允许外国银行在中国设立独资银行或者开分行。(<a href="http://m.yahui.cc/forex/tzck/1551226-1.htm" target="_blank" rel="noopener">来源</a>)</li><li>香港特首发表《施政报告》，首次以短片形式发表。(<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50065095" target="_blank" rel="noopener">来源</a>)</li><li>中美合拍的《雪人奇缘》出现中国「九段线」，遭到越南封禁。(<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50051675" target="_blank" rel="noopener">来源</a>)</li><li>中国9月 CPI涨幅达到六年以来的最高水平，生猪数量减少四成。(<a href="http://www.qdaily.com/articles/64658.html?source=feed" target="_blank" rel="noopener">来源</a>)</li><li>香港民阵召集人岑子杰遭到不明身份人士袭击，目前已送院接受治疗。(<a href="https://www.dw.com/zh/突发：香港民阵召集人遇袭送医/a-50856924?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">来源</a>)</li><li>一名挪威议员提议港人竞选2020年诺贝尔和平奖(<a href="https://www.dw.com/zh/挪威议员提名港人竞逐2020诺贝尔和平奖/a-50855455?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">来源</a>)</li><li>美国政府要求中国驻美人员应在对政府、高校和研究机构的代表进行正式访问之前，事先通知美国外交部门。(<a href="http://sputniknews.cn/politics/201910171029851948/" target="_blank" rel="noopener">来源</a>)</li><li>亚美尼亚开通受理中国银联卡。(<a href="http://sputniknews.cn/economics/201910171029851555/" target="_blank" rel="noopener">来源</a>)</li><li>通用汽车与工会和解</li><li>17日，土耳其同意在叙利亚停火五天，供库尔德武装撤离。(<a href="https://cn.reuters.com/article/turkeypause-assault-syria-1017-thur-idCNKBS1WX057?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">来源</a>)</li><li>中国内地停止向香港出口黑色T恤。(<a href="https://www.dw.com/zh/中国内地停止向香港出口黑色t恤/a-50872996?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">来源</a>)</li><li>广西玉林一家化工厂发生爆炸。(<a href="https://daily.zhihu.com/story/9716267" target="_blank" rel="noopener">来源</a>)</li><li>引发持续四个月“反送中”示威的香港杀人嫌犯陈同佳同意赴台自首，但台湾官方表示，希望香港政府续押陈同佳。(<a href="http://www.bbc.com/zhongwen/simp/chinese-news-50107703" target="_blank" rel="noopener">source</a>)</li><li>智利首都圣地亚哥因地铁加价引发民众示威抗议。智利总统皮涅拉宣布首都进入紧急状态。(<a href="http://www.bbc.com/zhongwen/simp/world-50109650" target="_blank" rel="noopener">source</a>)</li><li>波兰：新法案将性教育与“恋童癖”划等号。(<a href="https://www.dw.com/zh/波兰：新法案将性教育与-恋童癖-划等号/a-50899314?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">source</a>)</li></ul><h3 id="科技新闻">科技新闻</h3><ul><li>亚马逊消费者业务关闭最后的甲骨文数据库。</li><li>苹果明年可能发布四款5G iPhone。</li><li>亚马逊提出了一种新的无线协议，叫做Amazon Sidewalk协议，使用900兆赫频率，特点是低带宽、长距离（通信距离可以到一英里），设计用途是连接房屋内部和周围的所有物联网设备。第一款使用该协议的产品，将是明年发售的狗牌 Ring Fetch。狗戴着这个设备，一旦失去信号，就表示狗已经远离了你，你就会收到警报。只要收到信号，就表示狗在距离你一英里的范围内。(<a href="https://blog.aboutamazon.com/devices/introducing-amazon-sidewalk" target="_blank" rel="noopener">来源</a>)</li><li>10月8日 丰台发布第二代Mirai燃料汽车。(<a href="https://www.autoblog.com/2019/10/10/2021-toyota-mirai-revealed/" target="_blank" rel="noopener">来源</a>)</li><li>肯尼亚的埃留德·基普乔格（Eliud Kipchoge）10月12日在维也纳以1:59:40的成绩，成为第一个马拉松进入两小时以内的人。不过，由于这是一次专门为他破记录举办的挑战赛，为了创造记录，有41个人配合他跑，为他挡风和配速，所以国际田联不会承认这个纪录。(<a href="https://www.businessinsider.com/eliud-kipchoge-becomes-first-man-to-run-marathon-in-under-2-hours-2019-10" target="_blank" rel="noopener">来源</a>)</li><li>第一个进行太空行走的宇航员阿列克谢·列昂诺夫（Alexei Leonov）去世，享年85岁。</li><li>10月16日，在美国华盛顿，美、英、韩执法官员宣布，捣毁一个以韩国为基地的儿童非法视频暗网，并逮捕338人。该网站出售儿童非法视频，使用比特币支付，允许用户在交易中隐藏他们的身份，该网收集了至少价值37万美元的比特币。</li></ul><h2 id="文章与言论">文章与言论</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/86274697" target="_blank" rel="noopener">吴恩达新书《Machine Learning Yearning》完整中文版开源</a></li><li><a href="https://modernc.gforge.inria.fr/" target="_blank" rel="noopener">Modern C</a>电子书下载。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/11b96d95c8d170401a9c3dd80ce75d5b.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>梁振英的一段发言</title>
    <link href="http://www.codewoody.com/posts/50577/"/>
    <id>http://www.codewoody.com/posts/50577/</id>
    <published>2019-10-19T08:30:51.000Z</published>
    <updated>2019-10-19T08:33:06.605Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.codewoody.com/uploads/big/e3e6f9840d729374af9624e8364eba62.jpg"></p><blockquote><p>梁振英，大紫荆勋贤，GBS，JP（英语：Leung Chun-ying，1954年8月12日－），生于香港，籍贯山东省威海市，现任全国政协副主席、全国政协常务委员，香港特别行政区第4任行政长官，也是前香港特别行政区行政会议非官守成员召集人，香港测量师学会前会长及戴德梁行亚太区前主席。梁振英于香港回归前，曾经担任由中方委任的基本法咨询委员会秘书长，参与《香港基本法》的起草事务。</p></blockquote><a id="more"></a><p>泛民用「普選」將「高度自治」篡改成「完全自治」，製造憲制危機</p><p>新加坡總理李顯龍日前講出一個顯淺而關鍵的道理：香港有些人要普選，但是香港不是一個國家。</p><p>香港不是一個國家，和普選不普選有什麼關係？這個問題在30多年前起草基本法時已經釐清，反修例運動發生後我再講過幾次，上星期六在摩洛哥舉行的國際會議上我又講了一次，全場的西方人聽到之後都明白，沒有人反駁。</p><p>道理是這樣的：香港不是一個國家，因此在香港本地實施的民主只能是地方性民主，只可以和倫敦、紐約、東京等城市的民主程度比較。民主國家的城市通過一人一票選出的市政府首長以及他領導的政府的權力相當有限，比香港的行政長官和特區政府的權力小得多。</p><p>為什麼香港的行政長官和特區政府的權力比外國民主國家的市長和市政府權力大？這是因為除了由香港選民通過選舉給予行政長官和特區政府民意授權外，還有中央政府通過實質任命給予額外授權，兩個授權疊加就形成了香港的高度自治權。正正由於需要有中央政府的額外授權才有高度自治，因此行政長官的產生，從辦法的制定、修改以至產生的過程，都不能把中央撇開。如果要把中央撇開，就不會有中央的額外授權，香港的行政長官和特區政府的權力就會大幅縮小至類似倫敦、紐約或東京的市長和市政府的權力。這是香港人願意接受的嗎？</p><p>我過去公開問過泛民這個問題：選舉委員會選舉也好，一人一票選舉也好，如果產生的當選人是中央不能任命的，這樣嚴重的憲制危機，該怎樣處理？泛民說，中央應該尊重香港的民意，按選舉結果任命。這就是廢除中央的任命權力，把中央變成橡皮圖章，用我的話說，是「去中央化」，用泛民的話說，是「自決」，無論怎樣表述，是30多年前「民主抗共」的延續，是香港走向獨立的一大步。</p><p>中央對行政長官的任命有最終決定權，是「高度自治」和「完全自治」的重要分野。中國政府在聯合聲明和基本法都保留了「協商」作為產生行政長官的一種辦法，是留了一手，也是為了避免出現上述的憲制危機。</p><p>我要把這個道理在今天再說一次，原因也很簡單：過去四個月，反修例是引子，「五大訴求」中四個訴求是虛晃一招，要害的是排在最後的一個訴求：「雙普選」。五年前「佔中」，明知是違反基本法的「公民提名 必不可少」竟然成為價碼，今次捲土重來，「五大訴求」的「雙普選」開價不會比「佔中」時低。過去四個月，「和勇一家」、泛民不肯割席、蘋果無恥加無良，利用每一個過世的人，為的都是選票。未來兩年半有四場選舉（區議會、立法會、行政長官選舉委員會、行政長官），下個月的區議會選舉是前哨戰，最後一役的行政長官選舉是戲肉，如果這四場選舉在今天舉行，香港會全面變天，上面說的中央拒絕任命行政長官當選人的嚴重憲制危機就會出現。</p><p>泛民選出的行政長官當選人會把尾巴藏起來，怎麼藏？參照十多年前台灣。這種人萬一成為行政長官，名義上香港仍然是中國的特別行政區，實質上是西方國家的附庸，成為反華反共基地，顛覆華南一帶，更會利用所有執法部門對建制人士和中資機構「專政」。天方夜譚嗎？請參考其他地方的顏色革命。對這些圖謀，中央一清二楚。</p><p>少數人將全體香港人被綁上戰車，攬炒中央，這不是香港大多數人的意願，只有西方國家喜聞樂見，香港本來很有潛力成為中國的金融商貿中心，幾個月下來，香港很可能成為中國的痛點，用英文的說法，就是中國大腿上的一條刺。</p><p>下去怎麼樣？不要猜，「覆巢之下無完卵」，關心香港和亞洲地區的人都要團結起來，行動起來，尤其是工商界。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/e3e6f9840d729374af9624e8364eba62.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;梁振英，大紫荆勋贤，GBS，JP（英语：Leung Chun-ying，1954年8月12日－），生于香港，籍贯山东省威海市，现任全国政协副主席、全国政协常务委员，香港特别行政区第4任行政长官，也是前香港特别行政区行政会议非官守成员召集人，香港测量师学会前会长及戴德梁行亚太区前主席。梁振英于香港回归前，曾经担任由中方委任的基本法咨询委员会秘书长，参与《香港基本法》的起草事务。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.codewoody.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="政治" scheme="http://www.codewoody.com/tags/%E6%94%BF%E6%B2%BB/"/>
    
      <category term="香港" scheme="http://www.codewoody.com/tags/%E9%A6%99%E6%B8%AF/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-16</title>
    <link href="http://www.codewoody.com/posts/9133/"/>
    <id>http://www.codewoody.com/posts/9133/</id>
    <published>2019-10-08T05:47:27.000Z</published>
    <updated>2019-10-20T06:44:12.688Z</updated>
    
    <content type="html"><![CDATA[</p><h2 id="新闻">新闻</h2><h3 id="中美贸易战谈判达成第一阶段贸易协议"><a href="http://www.rfi.fr/cn/中国/20191011-特朗普让步-美中达成第一阶段贸易协议" target="_blank" rel="noopener">中美贸易战谈判达成第一阶段贸易协议</a></h3><p><img src="https://imgs.codewoody.com/uploads/big/f2de9a0bebb8a6cda7e60c434fb817cf.jpg"></p><p>当地时间周五下午，特朗普在白宫表示，美中经贸磋商取得了实质性的第一阶段成果，美国将暂缓下周15号的对华加征关税。刘鹤表示，双方在此轮磋商中就共同关心的经贸问题进行了坦诚、高效、建设性的讨论，在农业、知识产权保护、汇率、金融服务、扩大贸易合作、技术转让、争端解决等领域取得实质性进展(这些部分目前尚未有明确的说明)，讨论了后续磋商安排。</p><p>特朗普表示，美中两国“非常接近”终结贸易战。特朗普还表示，美中贸易协议有可能在下个月智利举行的亚太峰会上，由他本人与中国国家主席习近平正式签署。</p><h3 id="美国从叙利亚北部撤军"><a href="https://www.guancha.cn/internation/2019_10_07_520454.shtml" target="_blank" rel="noopener">美国从叙利亚北部撤军</a></h3><p>美国媒体NBC新闻7日报道，美国总统特朗普与土耳其总统埃尔多安6日就叙利亚问题通了电话，随后白宫发布“撤军”声明。NBC将此声明的发布时间形容为“非同寻常”。依据白宫声明，美国将“不支持也不参与”土耳其即将在叙利亚北部展开的军事行动，同时“也不会干涉”，因为美国军队将不再在“附近区域”行动。</p><p>同时，白宫在声明中提及，美国在叙利亚地区抓获了许多来自于法国、德国等欧洲国家的ISIS恐怖分子，但以上国家事后都拒绝接收。美国决定将不再收押被抓获的恐怖分子，“交由土耳其负责”，“以免浪费美国纳税人的金钱”。</p><p>另外，观察者网6日报道，土耳其总统埃尔多安在5日发出迄今为止最强烈的警告，威胁将在叙利亚东北部发动军事行动。埃尔多安表示，土耳其的目标是“用和平之泉浇灌幼发拉底河东岸”，并将200万难民安置回去。</p><p>10月9日周三，<a href="https://www.bbc.com/zhongwen/simp/world-49986040" target="_blank" rel="noopener">土耳其对叙利亚东北部的库尔德武装组织发动军事攻势</a>。土耳其总统埃尔多安表示，这场攻势旨在库尔德人控制的区域建立一个“安全区”，重新安置目前居住在土耳其的叙利亚难民。许多观察人士将此次中东局势的升级怪罪于特朗普，说他“出卖盟友”。特朗普撤军决定来得突然，国际上，美国国会两党、法国等盟友都表达了反对，认为此举背信弃义，会进一步搅乱中东局势。还有中国的军事战略观察人士认为，特朗普此举是为了重返亚太的政策，将美军的重点放在亚太地区集中对付中俄两国。</p><p>不过特朗普还表示，已经警告土耳其不得出手太重，否则将摧毁土耳其经济。</p><h3 id="刘鹤将于10日至11日赴美国进行新一轮谈判"><a href="https://cn.reuters.com/article/liuhe-visits-usa-schedule-1008-tues-idCNKBS1WN022?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">刘鹤将于10日至11日赴美国进行新一轮谈判</a></h3><p>中国商务部周二表示，应美方邀请，中共中央政治局委员、国务院副总理、中美全面经济对话中方牵头人刘鹤将率团访问华盛顿，于10月10日至11日同美国贸易代表莱特希泽、财政部长姆努钦举行新一轮中美经贸高级别磋商。</p><h3 id="年诺贝尔奖揭晓">2019年诺贝尔奖揭晓</h3><p>三名科学家因氧气感知机制而获得诺贝尔医学奖；三名物理学家因宇宙学发现获诺贝尔物理学奖; 化学奖授予锂电池;</p><p><img src="https://imgs.codewoody.com/uploads/big/e87ed012ae8ca1d6aa528ef36df0a2ba.jpg"></p><h3 id="美国商务部将28家中国机构和企业列入贸易黑名单"><a href="https://cn.reuters.com/article/china-us-sanction-dip-1008-idCNKBS1WN0WG?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">美国商务部将28家中国机构和企业列入贸易黑名单</a></h3><p>美国商务部周一把中国一地方公安局和包括视频监控公司海康威视及其他七家企业在内的28家机构和企业加入贸易黑名单，理由是少数民族人权问题。</p><h3 id="火箭队总经理莫雷的推特言论事件持续发酵"><a href="https://mp.weixin.qq.com/s/CCCYKg2v0yYLIAS_x8kWMw" target="_blank" rel="noopener">火箭队总经理莫雷的推特言论事件持续发酵</a></h3><ul><li><a href="https://mp.weixin.qq.com/s/CCCYKg2v0yYLIAS_x8kWMw" target="_blank" rel="noopener">30年努力3天内被毁！总裁连夜飞上海要见姚明，但依旧不道歉；NBA在中国面临全面封杀</a></li><li><a href="https://www.zhihu.com/pin/1164919880305500160" target="_blank" rel="noopener">央视暂停NBA转播</a></li><li><a href="http://www.caixin.com/2019-10-08/101468878.html" target="_blank" rel="noopener">腾讯体育也跟进停止转播NBA的比赛</a></li><li>10日的上海NBA中国赛场气氛热烈，NBA球迷正常观看比赛，被骂的比较惨。</li></ul><h3 id="无锡312国道发生跨桥侧翻事故">无锡312国道发生跨桥侧翻事故</h3><p>10月10日18时10分许，312国道K135处、锡港路上跨桥发生桥面侧翻事故。经现场搜救确认，桥下共有3辆小车被压，其中1辆系停放车辆（无人，驾驶员已找到），1辆车上共2人、已死亡，1辆车上只有1人、已死亡。侧翻桥面上共有5辆车，其中3辆小车、2辆卡车。事故共造成3人死亡，2人受伤。</p><p>故原因是限载65吨的车拉着187吨上了单柱高架，倾覆了。</p><p><img src="https://imgs.codewoody.com/uploads/big/edbaa284d83b0145ebb38b1a8962919e.jpg"></p><p><img src="https://imgs.codewoody.com/uploads/big/cf390e06e8a4e380cf10dd67abf986b7.jpg" style="width: 60%"></p><h3 id="其他新闻">其他新闻</h3><ul><li><a href="http://sputniknews.cn/economics/201910081029771025/" target="_blank" rel="noopener">港交所宣布放弃与伦交所的合并计划</a></li><li><a href="https://www.dw.com/zh/布拉格市政府同意解除与北京友好城市关系/a-50726630?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">布拉格市政府同意解除与北京的友好城市关系</a>: 布拉格现市长贺瑞普（Zdeněk Hřib）上任后，要求删除姊妹城市协定中承诺遵守“一个中国原则”的条款。作为“回应”，中方则在过去半年多次取消捷克乐团前往中国演出的行程。</li><li>全球多地发生极端环保主义者的示威活动：在纽约，几名气候变化环保主义者向纽约著名地标华尔街铜牛泼“假血”抗议，被警察逮捕。在伦敦，大量极端环保主义者封锁伦敦重要道路和桥梁，造成严重交通堵塞，至少280人被警方逮捕。</li><li><a href="http://sputniknews.cn/politics/201910091029782442/" target="_blank" rel="noopener">白宫拒绝配合参与弹劾调查</a>: 美国总统新闻秘书斯蒂芬妮∙格里沙姆称，白宫认为对美国总统特朗普的弹劾程序非法，并拒绝参与调查。</li><li><a href="https://www.dw.com/zh/德国林堡发生卡车冲撞事件-疑为恐袭/a-50734540?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">德国林堡发生卡车冲撞事件</a>: 德国黑森州林堡市一十字路口，一男子驾驶一辆劫来的载重车撞击多辆轿车。起初，这起事件被看作是一场交通事故。然而随着时间的推移，越来越人猜测，这可能是一起恐怖袭击。</li><li><a href="https://www.williamlong.info/archives/5851.html" target="_blank" rel="noopener">华人工程师因为实名抗议遭到Facebook解雇</a>: 因Facebook华人工程师跳楼事件，9月26日在Facebook门前悼念自杀华人工程师的活动中举工牌谴责Facebook的工程师尹伊，因此事被Facebook开除，开除的理由是“lack of judgement” （缺乏判断力）。</li><li><a href="https://www.williamlong.info/archives/5849.html" target="_blank" rel="noopener">Paypal退出虚拟货币组织Libra协会</a></li><li><a href="https://www.zhihu.com/question/349513003" target="_blank" rel="noopener">吴京成为中国首位150亿先生</a></li><li><a href="https://daily.zhihu.com/story/9715872" target="_blank" rel="noopener">宁夏推出夫妻共同育儿假</a>， 0至3岁子女父母每年可以休10天假期。</li><li><a href="https://www.zhihu.com/question/349045610" target="_blank" rel="noopener">10月1日 烟台氦气球事故导致一对母子遇难</a></li><li><a href="http://sputniknews.cn/politics/201910111029805670/" target="_blank" rel="noopener">习近平访问印度，为期两天</a></li><li><a href="http://sputniknews.cn/society/201910111029804561/" target="_blank" rel="noopener">10月10日 伊朗女性几十年来被首次允许现场观看球赛</a></li><li><a href="https://cn.reuters.com/article/iran-missile-tanker-1011fri-idCNKBS1WQ0QJ?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">10月11日 伊朗油轮在沙特附近海域遭到两枚导弹袭击</a>。伊朗国家石油公司是这艘油轮的船主。</li><li>教育部发布关于深化本科教育教学改革全面提高人才培养质量的意见，文件要求，严把考试和毕业出口关。完善过程性考核与结果性考核有机结合的学业考评制度，综合应用笔试、口试、非标准答案考试等多种形式，科学确定课堂问答、学术论文、调研报告、作业测评、阶段性测试等过程考核比重。加强考试管理，严肃考试纪律，<strong>坚决取消毕业前补考等“清考”行为</strong>。</li><li><a href="http://sputniknews.cn/sport/201910121029820408/" target="_blank" rel="noopener">肯尼亚运动员埃鲁德·基普乔格成为史上首个在两小时之内跑42195米马拉松的田径运动员。</a></li><li>强台风海贝思12日晚登陆日本</li><li>美国新奥尔良兴建中酒店大楼倒塌，1死18伤。(<a href="https://www.zaobao.com.sg/realtime/world/story20191013-996696?themeId=2&amp;utm_expid=.GDliSVqsR_G-lVPCVeIVMg.1&amp;utm_referrer=https%3A%2F%2Fwww.google.com%2F" target="_blank" rel="noopener">来源</a>)</li></ul><h3 id="数码信息">数码信息</h3><ul><li><a href="https://sspai.com/post/56873" target="_blank" rel="noopener">10月8日 苹果推送了macOS Catalina正式版</a>: 新版 macOS 将 iTunes 拆分为三个独立应用、推出了支持 iPad 作为第二屏幕的 「随航」，macOS 版「屏幕使用时间」等多项新功能。</li><li>法国高级法院今日裁定 Steam 玩家有权转卖自己购买的数字版游戏，Valve 不但无权阻止还必须提供线上交易二手游戏的功能并删除禁止玩家交易游戏的条款。限期一个月执行。此裁定不仅限于法国而是在全欧盟生效。<a href="https://www.zhihu.com/question/346942214" target="_blank" rel="noopener">来源</a></li></ul><h2 id="文章与资源">文章与资源</h2><ul><li><a href="http://www.sheui.com/" target="_blank" rel="noopener">SheUi</a>: 一个设计素材网站。</li><li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">CSS Grid 网格布局教程</a>: 阮一峰写的教程</li><li><a href="https://zhuanlan.zhihu.com/p/27449990" target="_blank" rel="noopener">npm和yarn的区别</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/f2de9a0bebb8a6cda7e60c434fb817cf.jpg&quot;&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-15</title>
    <link href="http://www.codewoody.com/posts/8941/"/>
    <id>http://www.codewoody.com/posts/8941/</id>
    <published>2019-10-03T06:46:36.000Z</published>
    <updated>2019-10-12T04:51:30.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻">新闻</h2><h3 id="国庆大阅兵">国庆大阅兵</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/TypEKtdYN6w" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="facebook总部一名中国籍员工跳楼"><a href="https://www.williamlong.info/archives/5838.html" target="_blank" rel="noopener">Facebook总部一名中国籍员工跳楼</a></h3><p>Facebook一名中国籍员工从公司位于加州门洛帕克（Menlo Park）的总部大楼四楼跳楼身亡。据悉，该员工已经在美国工作8年，但他仍没有拿到绿卡，只有工作签证，又要养家糊口，不能和上司翻脸，只好忍气吞声，最终不堪重负结束了自己的生命。</p><p>据华商报报道，自杀者为38岁的华人男子陈勤（音译）。根据领英页面显示，陈勤今年38岁，浙江大学毕业，到美国后在南加州大学攻读硕士，去年3月入职Facebook公司。</p><h3 id="十一香港继续骚乱"><a href="https://www.dw.com/zh/香港十一多区衝突﹕警開六槍-一人中彈重伤/a-50656186?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">十一香港继续骚乱</a></h3><p>中国庆祝国庆70周年当天，香港多个地区发生民众游行示威活动，演變為激烈警民衝突。警方除了使用催泪弹和水炮車驱散示威者，更多次開真槍，導致一名示威青年中槍。當局公佈最少74人受伤送院，數人情況危殆及嚴重。</p><p>10月4日 香港特区政府行政长官林郑月娥周五称，政府决定引用《紧急情况规例条例》订立禁止蒙面规例，10月5日生效，但此举不等于香港进入紧急状态。</p><h3 id="thomas-cook宣布破产">Thomas Cook宣布破产</h3><p>9月23日，英国最大的旅游集团Thomas Cook突然发布声明，宣告公司即刻破产。Thomas Cook拥有178年历史，是世界上第一家旅行社，在英国拥有最大的旅游市场份额。破产之后Thomas Cook在全球范围内雇佣的2.2万员工（其中9000英国员工）将立刻面临失业。</p><p>百年老字号Thomas Cook轰然倒闭时，有超过60万游客仍在度假，其中15万是英国人。Thomas Cook宣告破产将直接导致这些游客的旅行计划告吹，甚至滞留海外。</p><p>对于Thomas cook的突然倒闭，英国交通大臣Grant Shapps表示，英国政府和民航管理局已租用数十架专机，准备免费把Thomas cook的旅客安全送回英国。这次代号为“马特洪峰”（Operation Matterhorn）的大规模撤侨已经启动，昨天（9月22日），空无一人的专机已经从英国出发，今天就会开始“救援”。英国交通部表示，所有此前通过Thomas cook预订在未来两周回国的英国旅客，将会在尽量接近原定返回日期的日子搭乘政府安排的航班。</p><p><img src="https://imgs.codewoody.com/uploads/big/cafb19f6ac0d0b2d4860d5b61686da8b.jpg"></p><p><img src="https://imgs.codewoody.com/uploads/big/7f13b09098bd86acff10e007f45ba8e2.jpg"></p><h3 id="台湾宜兰南方澳跨港大桥坍塌-10人受伤5人失踪"><a href="http://www.rfi.fr/cn/%E6%94%BF%E6%B2%BB/20191001-%E5%8F%B0%E6%B9%BE%E5%AE%9C%E5%85%B0%E5%8D%97%E6%96%B9%E6%BE%B3%E8%B7%A8%E6%B8%AF%E5%A4%A7%E6%A1%A5%E5%9D%8D%E5%A1%8C-10%E4%BA%BA%E5%8F%97%E4%BC%A45%E4%BA%BA%E5%A4%B1%E8%B8%AA" target="_blank" rel="noopener">台湾宜兰南方澳跨港大桥坍塌 10人受伤5人失踪</a></h3><p>台湾宜兰县的知名地标南方澳跨港大桥，10月1日当地时间上午9时发生坍塌意外，倒塌详细原因不明。事故发生时，一辆油罐车正要过桥，当车辆驶抵对岸时，大桥两端突然断裂崩塌，油罐车瞬间下坠，起火燃烧，目前该驾驶员已送医急救。</p><p>台湾媒体报导，根据当地警察和消防部门初步清查，至少有三艘渔船被压在桥下，已传出10多人受伤，其中多名是外籍渔工。</p><h3 id="甘地骨灰被盗"><a href="http://sputniknews.cn/society/201910041029740835/" target="_blank" rel="noopener">甘地骨灰被盗</a></h3><p>《今日印度》（India Today）援引当地政府的消息报道称，印度民族解放运动领导人莫罕达斯∙甘地的骨灰被从印度纪念馆中盗走。</p><p>在1948年1月被暗杀后甘地的遗体被火化，骨灰被分成几部分，其中一部分被保存在中央邦的纪念馆中。 骨灰被盗一事发生在庆祝甘地诞辰150周年之日。报纸报道称，前来向“印度国父“甘地表示敬意的当地国大党领袖古尔米特∙辛格发现了骨灰被盗。此外，在纪念馆的入口处还被写上了“国家的叛徒”的涂鸦。</p><p>辛格说：“好像，这件事是那些喜欢南度蓝姆∙高德西的人所为，而高德西是刺杀甘地的凶手。这种仇恨必须立刻停止，警方必须迅速采取行动，确定并抓住窃贼。”</p><h3 id="普京承认正在帮助中国打造导弹攻击预警系统"><a href="http://sputniknews.cn/opinion/201910041029742216/" target="_blank" rel="noopener">普京承认正在帮助中国打造导弹攻击预警系统</a></h3><p>10月3日，俄联邦总统普京在“瓦尔代”国际辩论俱乐部所做的最为主要的声明是，正式承认帮助中国打造导弹攻击预警系统。这是中俄在战略国防领域进行合作的首次正式确认。这种合作的事实本身，要比中俄关系中的任何政治声明都重要。出席“瓦尔代”俱乐部总结大会的俄罗斯军事专家瓦西里·卡申在接受卫星通讯社采访时这样指出。</p><h3 id="伊拉克局势紧张">伊拉克局势紧张</h3><p><img src="https://imgs.codewoody.com/uploads/big/117f1266f837ef35feec15e5ae36387e.jpg"></p><h3 id="科技新闻">科技新闻</h3><ul><li><a href="https://www.williamlong.info/archives/5843.html" target="_blank" rel="noopener">百度浏览器正式停止服务</a></li><li><a href="https://www.williamlong.info/archives/5842.html" target="_blank" rel="noopener">华为已生产出可绕过所有美国零部件的5G基站</a>，并早在今年的8月和9月对新基站进行了测试。</li><li><a href="https://www.zhihu.com/question/348872920" target="_blank" rel="noopener">10月2日 微软发布Surface Neo双屏电脑</a></li><li><a href="https://www.eastbaytimes.com/2019/09/24/fremont-police-tesla-runs-low-on-juice-during-high-speed-chase/" target="_blank" rel="noopener">美国加州弗里蒙特警察局一辆特斯拉在追击逃犯的过程中电量耗尽</a></li><li><a href="https://arstechnica.com/features/2019/09/after-starship-unveiling-mars-seems-a-little-closer/" target="_blank" rel="noopener">SpaceX 公司发布自己的宇宙飞船StartShip</a></li></ul><h3 id="其他新闻">其他新闻</h3><ul><li><a href="https://www.dw.com/zh/美国将对欧盟数十亿商品征收关税/a-50688175?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">美国将对欧盟数十亿美元的商品加征关税</a>: 10月2日，世贸组织裁决欧盟“未能采取合适措施撤销对空客的补贴”，允许美国向欧盟约75亿美元的商品及服务征税。现在，华盛顿将对这一裁决付诸实施。布鲁塞尔则威胁要采取报复行动。</li><li><a href="http://sputniknews.cn/society/201910041029740217/" target="_blank" rel="noopener">希腊最大的护卫舰在演习中搁浅</a></li><li><a href="https://www.guancha.cn/internation/2019_10_06_520380.shtml" target="_blank" rel="noopener">英国和美国政府于周四签订了「史上首份」双边数据分享协议</a>，允许执法部门直接向对方国家的科技公司要求数据。这意味着，英国当局不再需要向美国政府提出申请，即可直接要求美国脸书、谷歌、推特等公司提供用户数据，协助涉及恐怖主义、儿童侵害与其他严重犯罪的调查。</li></ul><figure><img src="https://imgs.codewoody.com/uploads/big/5fcb07e374cc99a160874d00b37135b4.jpg" alt="截图：英国政府官网"><figcaption>截图：英国政府官网</figcaption></figure><ul><li><a href="https://www.guancha.cn/internation/2019_10_05_520286.shtml" target="_blank" rel="noopener">新加坡「防网络假信息」法生效</a>: 恶意散播假信息，损害新加坡公共利益的个人最高可判10年有期徒刑和10万新加坡元（约合50万元人民币）的罚款，不愿配合的企业则会面临100万新加坡元（约合500万元人民币）的罚款。根据法令，新加坡内阁部长将有评断信息真假，并要求更正或撤下信息的绝对权力，当事方若有异议，可以上诉。</li></ul><figure><img src="https://imgs.codewoody.com/uploads/big/288b1ab7b3160106fbb70dd81abea8e5.jpg" alt="关于《防止网络假信息和网络操纵法案》生效的政府公报"><figcaption>关于《防止网络假信息和网络操纵法案》生效的政府公报</figcaption></figure><h2 id="文章与资源">文章与资源</h2><ul><li><a href="https://www.bbc.com/zhongwen/simp/world-49878585" target="_blank" rel="noopener">沙特王室蓝钻事件：卅年余波不息疑团至今未解</a>: 沙特皇宫30年前出了一起珠宝失窃案，引发了一连串凶杀命案和外交危机，余波持续至今。那个偷了沙特王子蓝钻石的人现在同意与媒体见面，讲出他的故事。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;
&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/2a13a1f6e2fc5597d43f109d84c99528.jpg&quot; alt=&quot;大家国庆快乐。&quot;&gt;&lt;figcaption&gt;大家国庆快乐。&lt;/figcaption&gt;
&lt;/figure&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly-14</title>
    <link href="http://www.codewoody.com/posts/57900/"/>
    <id>http://www.codewoody.com/posts/57900/</id>
    <published>2019-09-23T03:39:56.000Z</published>
    <updated>2019-10-08T05:57:22.681Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.codewoody.com/uploads/big/d05d886a3394d1e6e42509d6920141ef.jpeg"></p><a id="more"></a><p>临近国庆，GFW也是越来越高了，大量现有的梯子都挂了，我的梯子也不能直连了。不过好在我在国内有一台支持Ipv6的服务器。大概是因为Ipv6的普及率还不够高，因此Ipv6还没有被严格封禁，可以利用这台服务器作为跳板机跳出去。具体的方法可以参考我的这几篇博文：</p><ul><li><a href="/_posts/2019-02-21-Shadowsocks中继-从Ipv4到Ipv6.md">Shadowsocks中继-从Ipv4到Ipv6</a></li><li><a href="/_posts/2019-04-13-Haproxy支持Ipv6.md">Haproxy支持Ipv6</a></li></ul><h2 id="新闻">新闻</h2><h3 id="英国高院裁定首相让议会休会违法"><a href="https://cn.reuters.com/article/uk-court-johnson-suspending-parliament-0-idCNKBS1W916R?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">英国高院裁定首相让议会休会违法</a></h3><p>英国最高法院周二裁定，首相约翰逊建议伊丽莎白女王让议会休会的行为违法，因此议会不算休会。</p><h3 id="中国第一艘两栖攻击舰下水"><a href="https://www.yicai.com/news/100343739.html" target="_blank" rel="noopener">中国第一艘两栖攻击舰下水</a></h3><figure><img src="https://imgs.codewoody.com/uploads/big/7cbac6b9a9761385633ce44e3bbd9f8f.jpg" alt="9月25日上午，中国海军首艘两栖攻击舰下水仪式在上海举行。"><figcaption>9月25日上午，中国海军首艘两栖攻击舰下水仪式在上海举行。</figcaption></figure><p><a href="https://zh.wikipedia.org/wiki/075%E5%9E%8B%E4%B8%A4%E6%A0%96%E6%94%BB%E5%87%BB%E8%88%B0" target="_blank" rel="noopener">075型两栖攻击舰</a>是中国人民解放军海军正在设计建造的一种大型两栖攻击舰，此舰为解放军海军最大的两栖战舰，设有机库，能搭载近30架各型直升机，拥有直通甲板，可同时起降多架直升机，同时设有坞舱，可作为两栖车辆和气垫登陆艇的母船，可以运送士兵、步兵战车、主战坦克等展开登陆作战，这将使中国海军能更顺利进行两栖作战，提升解放军的登陆力量。</p><p>预计明年3月该型号的两栖攻击舰还有一艘下水。</p><p><img src="https://imgs.codewoody.com/uploads/big/d5a7cea8e6abbe5b3a4cd8c82b185a3c.jpg"></p><h3 id="北京大兴机场投入运营"><a href="https://www.zhihu.com/question/48264362" target="_blank" rel="noopener">北京大兴机场投入运营</a></h3><p><img src="https://imgs.codewoody.com/uploads/big/cec234d0300527f7bf2de58a620b26ca.jpg"></p><p>北京大兴国际机场 9 月 25 日将迎来首航，届时，也标志着该机场正式投入运营。大兴机场被英国《卫报》评为「新世界七大奇迹」之首。2015 年，机场航站楼工程开工建设；2017 年 6 月，航站楼钢结构封顶；2018 年 12 月，机场跑道道面全面贯通；2019 年，主体工程全部竣工。</p><h3 id="美国众议院通过有关弹劾特朗普的一项决议"><a href="https://www.zhihu.com/question/345899888/answer/836097003" target="_blank" rel="noopener">美国众议院通过有关弹劾特朗普的一项决议</a></h3><p>美国国会众议院司法委员会当地时间12日表决通过一项决议，为弹劾总统相关调查确立准则。这也是该委员会就弹劾现任美国总统特朗普通过的第一项决议。</p><p>事件起因是有人匿名举报川普通乌克兰。。。举报者说7月25日川普打电话给新当选的乌克兰总统泽连斯基，以4亿美元军事援助款项为要挟，8次要求乌克兰调查拜登儿子在乌克兰的腐败案件。</p><p>作为反击，川普周三上午立刻公布了自己的<a href="https://www.nytimes.com/interactive/2019/09/25/us/politics/trump-ukraine-transcript.html" target="_blank" rel="noopener">电话录音文本</a>力证清白。30分钟的通话记录显示，川普只提了两次拜登的名字，只是请求泽连斯基继续调查拜登家族贪腐案，完全没有用军事援助来要挟。</p><p>另外，周一标普收盘2992点，周二佩洛西（众议院议长）宣布「通过弹劾相关决议」，标普下点0.8%，周三特朗普公开电话记录，标普上涨0.6%。</p><h3 id="其他新闻">其他新闻</h3><ul><li><a href="https://www.dw.com/zh/《香港人权与民主法案》过第一关-中批外国干预「险恶用心」/a-50587949?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">美国参众两院的外交委员会在周三这天，通过了多项涉及香港的法案</a>，包括《香港人权与民主法案》、《保护香港法案》以及支持港人自由权利的决议案。相关人士指出，预计在10月中这些法案就能获得全院通过，立法成功。</li><li><a href="https://www.nme.com/news/music/vinyl-set-outsell-cds-first-time-since-1986-2545781" target="_blank" rel="noopener">黑胶唱片的销售额自1986年以后第一次超过CD</a></li><li><a href="https://finance.sina.com.cn/stock/usstock/c/2019-09-01/doc-iicezueu2542877.shtml" target="_blank" rel="noopener">韩国2018年生育率降低至 0.98</a>，成为全球唯一一个生育率跌破1的国家。</li><li><a href="https://cn.reuters.com/article/pentagon-deployment-mideast-0926-thur-idCNKBS1WC00B?feedType=RSS&amp;feedName=CNTopGenNews" target="_blank" rel="noopener">美国五角大楼向沙特调派雷达和爱国者导弹电池，以加强沙特的防御</a>，本月沙特石油设施遭遇了有史以来规模最大的袭击，造成沙特石油产量缩减50%，占全球产量的5%。</li><li><a href="https://www.dw.com/zh/法国前总统希拉克逝世/a-50596161?maca=chi-rss-chi-all-1127-rdf" target="_blank" rel="noopener">法国前总统希拉克逝世</a></li><li><a href="https://www.zhihu.com/question/346910419/answer/835262623" target="_blank" rel="noopener">印度「维克兰特」号在建航母电脑内的硬盘、内存、CPU丢失</a>: 印度警方答复是，在船厂外是有监控的，但航母内部没有监控，所以追查十分困难。</li><li><a href="http://www.rfi.fr/cn/20191002-27000%E5%90%8D%E6%B3%95%E5%9B%BD%E8%AD%A6%E5%AF%9F%E8%B5%B0%E5%88%B0%E4%B8%8A%E5%B7%B4%E9%BB%8E%E8%A1%97%E5%A4%B4%E7%A4%BA%E5%A8%81%E6%B8%B8%E8%A1%8C" target="_blank" rel="noopener">法国警察上街游行</a></li><li><a href="http://www.bbc.com/zhongwen/simp/world-49906847" target="_blank" rel="noopener">突尼斯合法妓院将绝迹</a></li></ul><h2 id="资源">资源</h2><ul><li><a href="https://www.visual-paradigm.com/cn/guide/uml-unified-modeling-language/what-is-uml/" target="_blank" rel="noopener">中文 UML 教程</a></li><li><a href="https://javabrains.io/" target="_blank" rel="noopener">Java学习资源</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/d05d886a3394d1e6e42509d6920141ef.jpeg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly" scheme="http://www.codewoody.com/categories/Weekly/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="科技新闻" scheme="http://www.codewoody.com/tags/%E7%A7%91%E6%8A%80%E6%96%B0%E9%97%BB/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="Weekly" scheme="http://www.codewoody.com/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Qt on Mac摸索记录 - 其四</title>
    <link href="http://www.codewoody.com/posts/41659/"/>
    <id>http://www.codewoody.com/posts/41659/</id>
    <published>2019-09-20T04:17:50.000Z</published>
    <updated>2019-09-23T03:34:52.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件与信号events-and-signals">事件与信号(Events and signals)</h2><p>事件系统在任何GUI框架中都是非常重要的，所有的GUI应用都是事件驱动的(Event-driven)。这些信号可以是用户产生，也可能是程序内部产生。在一个事件模型中，有如下三个重要的部分</p><ul><li>event source</li><li>event object</li><li>event target</li></ul><p>其中，event source是指产生事件的对象，一般在产生事件的同时，其内部状态也发生了变化。event object则是指描述事件本身的对象。event target则是需要响应这些事件的对象。</p><p>当我们调用<code>QApplication::exec</code>函数时，应用进入主循环中(main loop)。主循环负责获取事件并将事件发送给合适的响应对象。Qt实现了独特的signal and slot机制。这一机制是对C++变成语言的扩展。这里，信号(signal)和槽(slot)用于对象之间的通信，其中信号在事件发生时产生。槽一般是一个正常的C++函数，当指定信号触发时这个函数会被调用。信号和槽需要事先进行连接。</p><h3 id="鼠标点击">鼠标点击</h3><p>我们之前已经见过了在<code>QPushButton</code>上应用信号与槽的机制来处理点击事件。这里不再赘述，参考<a href="/posts/24435/#%E6%8C%89%E9%92%AE%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92">按钮与交互</a>这个部分。</p><h3 id="按键响应">按键响应</h3><p>下面的这个例子显示了按键响应的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// keypress.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyPress</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    KeyPress(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keyPressEvent</span><span class="params">(QKeyEvent * e)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// keypress.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QKeyEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"keypress.h"</span></span></span><br><span class="line"></span><br><span class="line">KeyPress::KeyPress(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> KeyPress::keyPressEvent(QKeyEvent *event) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (event-&gt;key() == Qt::Key_Escape) &#123;  </span><br><span class="line">       qApp-&gt;quit();</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"keypress.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  KeyPress window;</span><br><span class="line">  </span><br><span class="line">  window.resize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Key press"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意<code>keyPressEvent</code>是父类<code>QWidget</code>的一个<a href="https://doc.qt.io/qt-5/qwidget.html#keyPressEvent" target="_blank" rel="noopener">虚函数</a>。故这里我们不直接使用到槽函数。</p><h3 id="qmoveevent"><code>QMoveEvent</code></h3><p>这个事件代表Widget移动的过程，同样是通过override父类的虚函数实现的。见下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// move.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Move</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Move(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveEvent</span><span class="params">(QMoveEvent *e)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// move.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMoveEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"move.h"</span></span></span><br><span class="line"></span><br><span class="line">Move::Move(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Move::moveEvent(QMoveEvent *e) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> x = e-&gt;pos().x();</span><br><span class="line">  <span class="keyword">int</span> y = e-&gt;pos().y();</span><br><span class="line">  </span><br><span class="line">  QString text = QString::number(x) + <span class="string">","</span> + QString::number(y);</span><br><span class="line"></span><br><span class="line">  setWindowTitle(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"move.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  Move window;</span><br><span class="line">  </span><br><span class="line">  window.resize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Move"</span>);</span><br><span class="line">  window.show();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="断开信号和槽的联系">断开信号和槽的联系</h3><p>信号和槽可以通过槽连接气力啊，也可以断开。断开通过<code>disconnect</code>函数来实现，其参数形式应当和connect时的参数一致。例如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect(clickBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Disconnect::onClick);</span><br><span class="line"><span class="comment">// ... </span></span><br><span class="line">disconnect(clickBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>,</span><br><span class="line">    &amp;Disconnect::onClick);</span><br></pre></td></tr></table></figure><h3 id="timer">Timer</h3><p>Timer是周期性发出的事件（当然也可以用来做single shot）。Timer的典型例子就是用来实现一个时钟：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Timer(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timerEvent</span><span class="params">(QTimerEvent *e)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    QLabel *label;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"timer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QHBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTime&gt;</span></span></span><br><span class="line"></span><br><span class="line">Timer::Timer(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line">        </span><br><span class="line">  QHBoxLayout *hbox = <span class="keyword">new</span> QHBoxLayout(<span class="keyword">this</span>);</span><br><span class="line">  hbox-&gt;setSpacing(<span class="number">5</span>);               </span><br><span class="line">           </span><br><span class="line">  label = <span class="keyword">new</span> QLabel(<span class="string">""</span>, <span class="keyword">this</span>);</span><br><span class="line">  hbox-&gt;addWidget(label, <span class="number">0</span>, Qt::AlignLeft | Qt::AlignTop);</span><br><span class="line"></span><br><span class="line">  QTime qtime = QTime::currentTime();</span><br><span class="line">  QString stime = qtime.toString();</span><br><span class="line">  label-&gt;setText(stime);</span><br><span class="line">   </span><br><span class="line">  startTimer(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Timer::timerEvent(QTimerEvent *e) &#123;</span><br><span class="line">    </span><br><span class="line">  Q_UNUSED(e);</span><br><span class="line">  </span><br><span class="line">  QTime qtime = QTime::currentTime();</span><br><span class="line">  QString stime = qtime.toString();</span><br><span class="line">  label-&gt;setText(stime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"timer.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  Timer window;</span><br><span class="line">  </span><br><span class="line">  window.resize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Timer"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>startTimer</code>和<code>timerEvent</code>都是父类提供的函数。</p><h2 id="qwidget">QWidget</h2><p>这里梳理一下常用的基础控件类型。这些类都是<code>QWidget</code>的子类。</p><h3 id="qlabel"><code>QLabel</code></h3><p><code>QLabel</code>用来展示文字和<strong>图片</strong>，不涉及用户操作。</p><h3 id="qslider"><code>QSlider</code></h3><p><code>QSlider</code>提供了便捷的连续数字选择器。长这个样子：</p><p><img src="https://imgs.codewoody.com/uploads/big/eaea3516103f00b8a146e529ab5aa805.png" style="width: 202px; border: none"></p><h3 id="qcombobox"><code>QComboBox</code></h3><p><code>QComboBox</code>可以让我们从有限的下拉选项中选择。</p><p><img src="https://imgs.codewoody.com/uploads/big/aa45fd3c952bdd3f98fb8be349d789a9.png" style="width: 302px; border: none"></p><h3 id="qspinbox"><code>QSpinBox</code></h3><p>用来处理可以递增递减的离散数字</p><p><img src="https://imgs.codewoody.com/uploads/big/eb2b88936b46c8877b5c1b84746c0c85.png" style="width: 252px; border: none"></p><h3 id="qlineedit"><code>QLineEdit</code></h3><p>单行文字输入，这个我们之前已经接触过了。</p><h3 id="statusbar"><code>Statusbar</code></h3><p>状态栏，通过<code>statusBar()</code>函数来获取。</p><h3 id="其他">其他</h3><p>还有好多控件就不一一说明了，很多看名字就能知道是做什么用的：</p><ul><li><code>QCheckBox</code></li><li><code>QListWidget</code></li><li><code>QProgressBar</code></li><li><code>QPixmap</code></li><li><code>QSpliter</code></li><li><code>QTableWidget</code></li></ul><h2 id="绘图">绘图</h2><blockquote><p>这个部分也是我需要关注的重点，如何自由地绘图</p></blockquote><p><code>QPainter</code>是我们进行绘图操作的画板。绘图过程在<code>paintEvent</code>函数(<code>QWidget</code>的函数)中完成。</p><p>我们首先来看一个绘制直线的例子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lines.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lines</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Lines(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawLines</span><span class="params">(QPainter *qp)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lines.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lines.h"</span></span></span><br><span class="line"></span><br><span class="line">Lines::Lines(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Lines::paintEvent(QPaintEvent *e) &#123;</span><br><span class="line">    </span><br><span class="line">  Q_UNUSED(e);</span><br><span class="line">  </span><br><span class="line">  <span class="function">QPainter <span class="title">qp</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">  drawLines(&amp;qp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Lines::drawLines(QPainter *qp) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function">QPen <span class="title">pen</span><span class="params">(Qt::black, <span class="number">2</span>, Qt::SolidLine)</span></span>;  </span><br><span class="line">  qp-&gt;setPen(pen);</span><br><span class="line">  qp-&gt;drawLine(<span class="number">20</span>, <span class="number">40</span>, <span class="number">250</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">  pen.setStyle(Qt::DashLine);</span><br><span class="line">  qp-&gt;setPen(pen);</span><br><span class="line">  qp-&gt;drawLine(<span class="number">20</span>, <span class="number">80</span>, <span class="number">250</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">  pen.setStyle(Qt::DashDotLine);</span><br><span class="line">  qp-&gt;setPen(pen);</span><br><span class="line">  qp-&gt;drawLine(<span class="number">20</span>, <span class="number">120</span>, <span class="number">250</span>, <span class="number">120</span>);</span><br><span class="line"></span><br><span class="line">  pen.setStyle(Qt::DotLine);</span><br><span class="line">  qp-&gt;setPen(pen);</span><br><span class="line">  qp-&gt;drawLine(<span class="number">20</span>, <span class="number">160</span>, <span class="number">250</span>, <span class="number">160</span>);</span><br><span class="line"></span><br><span class="line">  pen.setStyle(Qt::DashDotDotLine);</span><br><span class="line">  qp-&gt;setPen(pen);</span><br><span class="line">  qp-&gt;drawLine(<span class="number">20</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">  QVector&lt;qreal&gt; dashes;</span><br><span class="line">  qreal space = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  dashes &lt;&lt; <span class="number">1</span> &lt;&lt; space &lt;&lt; <span class="number">5</span> &lt;&lt; space;</span><br><span class="line"></span><br><span class="line">  pen.setStyle(Qt::CustomDashLine);</span><br><span class="line">  pen.setDashPattern(dashes);</span><br><span class="line">  </span><br><span class="line">  qp-&gt;setPen(pen);</span><br><span class="line">  qp-&gt;drawLine(<span class="number">20</span>, <span class="number">240</span>, <span class="number">250</span>, <span class="number">240</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>main.cpp</code>的文件内容很简单，我们之后就不放了。</p></blockquote><p>在这个例子中我们用六种不同的笔触画了六根线，如下图：</p><p><img src="https://imgs.codewoody.com/uploads/big/d6a80beb64a9a390c3ebd109f3900178.png" style="width: 50%; border: none"></p><blockquote><p>更高阶的绘图还是看原教程吧，内容太多了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要介绍事件与信号，以及更多的常见控件。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程 - Qt - C++" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B-Qt-C/"/>
    
  </entry>
  
  <entry>
    <title>Qt on Mac摸索记录 - 其三</title>
    <link href="http://www.codewoody.com/posts/24435/"/>
    <id>http://www.codewoody.com/posts/24435/</id>
    <published>2019-09-19T05:01:46.000Z</published>
    <updated>2019-09-20T06:30:48.638Z</updated>
    
    <content type="html"><![CDATA[<p>这个系列的摸索是在研究<a href="http://zetcode.com/gui/qt5/" target="_blank" rel="noopener">Qt Tutorial</a>英文教程的基础上，克服在macOS上遇到的若干问题写下的记录。前面两篇我们还是在研究比较基础的模块，还没有涉及具体的GUI部分。从这篇开始我们来研究GUI开发。</p><a id="more"></a><h2 id="first-program-more">First program, more</h2><p>在第一篇文章里面我们写了一个简单的窗口程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    QWidget window;</span><br><span class="line"></span><br><span class="line">    window.resize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">    window.setWindowTitle(<span class="string">"Simple example"</span>);</span><br><span class="line">    window.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们将其扩展一下。</p><h3 id="鼠标图标的例子">鼠标图标的例子</h3><p>这个例子将展示控件的组合方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cursors</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFrame&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGridLayout&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cursors</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Cursors(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Cursors::Cursors (QWidget *parent)</span><br><span class="line">  : QWidget (parent)</span><br><span class="line">&#123;</span><br><span class="line">  QFrame* frame1 = <span class="keyword">new</span> QFrame(<span class="keyword">this</span>);</span><br><span class="line">  frame1-&gt;setFrameStyle(QFrame::Box);</span><br><span class="line">  frame1-&gt;setCursor(Qt::SizeAllCursor);</span><br><span class="line"></span><br><span class="line">  QFrame *frame2 = <span class="keyword">new</span> QFrame(<span class="keyword">this</span>);</span><br><span class="line">  frame2-&gt;setFrameStyle(QFrame::Box);</span><br><span class="line">  frame2-&gt;setCursor(Qt::WaitCursor) ;</span><br><span class="line"></span><br><span class="line">  QFrame *frame3 = <span class="keyword">new</span> QFrame(<span class="keyword">this</span>);</span><br><span class="line">  frame3-&gt;setFrameStyle(QFrame::Box);</span><br><span class="line">  frame3-&gt;setCursor(Qt::PointingHandCursor);</span><br><span class="line"></span><br><span class="line">  QGridLayout *grid = <span class="keyword">new</span> QGridLayout(<span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(frame1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  grid-&gt;addWidget(frame2, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  grid-&gt;addWidget(frame3, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  setLayout(grid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>*argv[])</span> </span>&#123;</span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">  Cursors window;</span><br><span class="line">  window.resize(<span class="number">350</span>, <span class="number">150</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Cursors"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行界面如下：</p><p><img src="https://imgs.codewoody.com/uploads/big/1a14bb5978e2f4d7844b005ed289dbf6.png" style="width: 70%; border: none"></p><p>将鼠标放到不同的框里面，鼠标的图标形态会发生变化。</p><h3 id="按钮与数据交互">按钮与数据交互</h3><p>我们来写一个累加累减小工具。这次我们需要写三个文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plusminus.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlusMinus</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  Q_OBJECT</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    PlusMinus(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnPlus</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnMinus</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    QLabel *lbl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plusminus.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plusminus.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGridLayout&gt;</span></span></span><br><span class="line"></span><br><span class="line">PlusMinus::PlusMinus(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line">  QPushButton *plsBtn = <span class="keyword">new</span> QPushButton(<span class="string">"+"</span>, <span class="keyword">this</span>);</span><br><span class="line">  QPushButton *minBtn = <span class="keyword">new</span> QPushButton(<span class="string">"-"</span>, <span class="keyword">this</span>);</span><br><span class="line">  lbl = <span class="keyword">new</span> QLabel(<span class="string">"0"</span>, <span class="keyword">this</span>);</span><br><span class="line">  </span><br><span class="line">  QGridLayout *grid = <span class="keyword">new</span> QGridLayout(<span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(plsBtn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  grid-&gt;addWidget(minBtn, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  grid-&gt;addWidget(lbl, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  setLayout(grid);  </span><br><span class="line"></span><br><span class="line">  connect(plsBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;PlusMinus::OnPlus);</span><br><span class="line">  connect(minBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;PlusMinus::OnMinus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PlusMinus::OnPlus() &#123;</span><br><span class="line">  <span class="keyword">int</span> val = lbl-&gt;text().toInt();</span><br><span class="line">  val++;</span><br><span class="line">  lbl-&gt;setText(QString::number(val));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PlusMinus::OnMinus() &#123;</span><br><span class="line">  <span class="keyword">int</span> val = lbl-&gt;text().toInt();</span><br><span class="line">  val--;</span><br><span class="line">  lbl-&gt;setText(QString::number(val));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"plusminus.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  PlusMinus window;</span><br><span class="line"></span><br><span class="line">  window.resize(<span class="number">300</span>, <span class="number">190</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Plus minus"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在原版英文教程中没有给出编译方法<span class="foot-note-span">【即没有给出pro文件的内容】</span>，这里可能会有一些坑要踩。我们首先来看一下源文件中有什么不太一样的地方，然后给出编译的方法。</p><p>我们来看<code>plusminus.h</code>文件。首先我们要注意到<code>Q_OBJECT</code>这个宏。这个宏放在这里是我们使用Qt提供的信号与回调（槽）<span class="foot-note-span">【我也是刚开始学习，这里描述措辞后续可能需要更改】</span>的必要条件。宏的内容，实际上是定义了一些函数和属性，并且<code>qmake</code>编译系统在扫描到这个文件时，会自动生成实现这些函数的文件。另一需要注意的点是，在<code>OnPlus</code>和<code>OnMinus</code>声明的前面有<code>private slots</code>字段。这里的<code>slots</code>也是一个特殊的宏，起作用是将其后的函数标注为可供Qt事件响应系统的回调函数。</p><p>要编译这几个文件，在处理pro文件时需要注意这么几点：</p><ol type="1"><li>添加<code>Headers += plusminus.h</code>。如果没有这句话，编译系统就无法为<code>Q_OBJECT</code>标注的类创建需要的源文件，导致链接时出现<code>Undefined symbols for architecture XXX</code>类型的错误。</li><li>这里编译过程的中间临时文件比较多，建议在pro文件里面添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OBJECTS_DIR=tmp</span><br><span class="line">MOC_DIR=tmp</span><br></pre></td></tr></table></figure><p>完整的pro文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">######################################################################</span><br><span class="line"># Automatically generated by qmake (3.1) Wed Sep 18 17:05:09 2019</span><br><span class="line">######################################################################</span><br><span class="line"></span><br><span class="line">TEMPLATE = app</span><br><span class="line">TARGET = learnQt</span><br><span class="line">INCLUDEPATH += .</span><br><span class="line"></span><br><span class="line"># You can make your code fail to compile if you use deprecated APIs.</span><br><span class="line"># In order to do so, uncomment the following line.</span><br><span class="line"># Please consult the documentation of the deprecated API in order to know</span><br><span class="line"># how to port your code away from it.</span><br><span class="line"># You can also select to disable deprecated APIs only up to a certain version of Qt.</span><br><span class="line">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0</span><br><span class="line"></span><br><span class="line">OBJECTS_DIR=tmp</span><br><span class="line">MOC_DIR=tmp</span><br><span class="line"></span><br><span class="line"># Input</span><br><span class="line">SOURCES += main.cpp plusminus.cpp</span><br><span class="line">HEADERS += plusminus.h</span><br><span class="line"></span><br><span class="line">QT += widgets</span><br></pre></td></tr></table></figure><p>程序运行的界面如下：</p><p><img src="https://imgs.codewoody.com/uploads/big/d8119dbb52ad1289549bb8e29916dcba.png" style="width: 70%; border: none"></p><h2 id="menus-and-toobars"><a href="http://zetcode.com/gui/qt5/menusandtoolbars/" target="_blank" rel="noopener">Menus and toobars</a></h2><p>这里来介绍菜单和工具栏的使用。尽管在不同的操作系统下他们长的不一样，但是Qt提供了一致的接口。</p><h3 id="简单的例子">简单的例子</h3><p>下面的例子给出了最简单的Menu功能演示。我们分成三个文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simplemenu.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleMenu</span> :</span> <span class="keyword">public</span> QMainWindow &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    SimpleMenu(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simplemenu.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"simplemenu.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMenu&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMenuBar&gt;</span></span></span><br><span class="line"></span><br><span class="line">SimpleMenu::SimpleMenu(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent) &#123;</span><br><span class="line">    </span><br><span class="line">  QAction *quit = <span class="keyword">new</span> QAction(<span class="string">"&amp;Quit"</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  QMenu *file;</span><br><span class="line">  file = menuBar()-&gt;addMenu(<span class="string">"&amp;File"</span>);</span><br><span class="line">  file-&gt;addAction(quit);</span><br><span class="line"></span><br><span class="line">  connect(quit, &amp;QAction::triggered, qApp, QApplication::quit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"simplemenu.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line"></span><br><span class="line">  SimpleMenu window;</span><br><span class="line"></span><br><span class="line">  window.resize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Simple menu"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子在Mac上运行没法看到&quot;File&quot;这个菜单栏选项。为什么呢？这是因为在MAC中，名称为<code>Quit</code>的Action会被自动整合到名称为应用名的首个菜单项目里面去。要看到独立的<code>File</code>菜单选项，需要把<code>Quit</code>改成其他名字就好了。</p><img src="https://imgs.codewoody.com/uploads/big/4eafd4e6e49effd13e8b92370496204c.png" style="width: 70%"><figcaption>图片出处：https://forum.qt.io/topic/98908/menubar-in-macos-not-working/9</figcaption><p><br> Qt 的官方网文档在<a href="https://doc.qt.io/qt-5/qmenubar.html#details" target="_blank" rel="noopener">这里</a>说明了原因:</p><blockquote><p>Qt for macOS also provides a menu bar merging feature to make QMenuBar conform more closely to accepted macOS menu bar layout. The merging functionality is based on string matching the title of a QMenu entry. These strings are translated (using <code>QObject::tr()</code>) in the &quot;QMenuBar&quot; context. If an entry is moved its slots will still fire as if it was in the original place. The table below outlines the strings looked for and where the entry is placed if matched:</p></blockquote><p><img src="https://imgs.codewoody.com/uploads/big/9079590b1679702a8da8ca51be4c6573.png" style="border: none"></p><h3 id="toolbar">Toolbar</h3><blockquote><p>这部分最近应该用不到，先不实验，把教程内容搬过来</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#include &lt;QMainWindow&gt;</span><br><span class="line">#include &lt;QApplication&gt;</span><br><span class="line"></span><br><span class="line">class Toolbar : public QMainWindow &#123;</span><br><span class="line">    </span><br><span class="line">  Q_OBJECT  </span><br><span class="line"></span><br><span class="line">  public:</span><br><span class="line">    Toolbar(QWidget *parent = 0);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;toolbar.h&quot;</span><br><span class="line">#include &lt;QToolBar&gt;</span><br><span class="line">#include &lt;QIcon&gt;</span><br><span class="line">#include &lt;QAction&gt;</span><br><span class="line"></span><br><span class="line">Toolbar::Toolbar(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent) &#123;</span><br><span class="line">    </span><br><span class="line">  QPixmap newpix(&quot;new.png&quot;);</span><br><span class="line">  QPixmap openpix(&quot;open.png&quot;);</span><br><span class="line">  QPixmap quitpix(&quot;quit.png&quot;);</span><br><span class="line">  </span><br><span class="line">  QToolBar *toolbar = addToolBar(&quot;main toolbar&quot;);</span><br><span class="line">  toolbar-&gt;addAction(QIcon(newpix), &quot;New File&quot;);</span><br><span class="line">  toolbar-&gt;addAction(QIcon(openpix), &quot;Open File&quot;);</span><br><span class="line">  toolbar-&gt;addSeparator();</span><br><span class="line">  QAction *quit = toolbar-&gt;addAction(QIcon(quitpix), </span><br><span class="line">      &quot;Quit Application&quot;);</span><br><span class="line">  </span><br><span class="line">  connect(quit, &amp;QAction::triggered, qApp, &amp;QApplication::quit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"toolbar.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  Toolbar window;</span><br><span class="line"></span><br><span class="line">  window.resize(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"QToolBar"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布局">布局</h2><p>这个部分开始我们来将布局方面的知识，这也是我最为关注的部分。布局有两种方式：</p><ul><li>absolute positioning</li><li>layout managers</li></ul><h3 id="绝对定位">绝对定位</h3><p>绝对定位要求显式指定各个Widget的位置和大小。关于绝对定位我们需要注意如下几点：</p><ul><li>Widget的位置和大小不会因为窗口resize而变化</li><li>使用绝对定位在不同平台上看起来可能不会不一样（通常会很糟糕）</li><li>改变字体会导致布局出错</li><li>如果我们试图修改布局，那那么需要进行大量的重构，这是非常费时的</li></ul><p>综合上面的原因，除了一些必须的场景以外，我们一般都是使用布局管理器。</p><p>下面是一个使用绝对布局的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// absolute.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDesktopWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextEdit&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Absolute</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">     Absolute(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Absolute::Absolute(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line">        </span><br><span class="line">  QTextEdit *ledit = <span class="keyword">new</span> QTextEdit(<span class="keyword">this</span>);</span><br><span class="line">  ledit-&gt;setGeometry(<span class="number">5</span>, <span class="number">5</span>, <span class="number">200</span>, <span class="number">150</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  Absolute window;</span><br><span class="line"></span><br><span class="line">  window.setWindowTitle(<span class="string">"Absolute"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>setGeometry()</code>函数用来设置绝对位置坐标和大小。</p><p>下面我们开始介绍典型的布局管理器。</p><h3 id="box布局">Box布局</h3><p><code>QVBoxLayout</code>这个类将Widget垂直放置。Widget通过<code>addWidget</code>函数添加。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// verticalbox.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerticalBox</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    VerticalBox(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// verticalbox.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"verticalbox.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line">VerticalBox::VerticalBox(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line"></span><br><span class="line">  QVBoxLayout *vbox = <span class="keyword">new</span> QVBoxLayout(<span class="keyword">this</span>);</span><br><span class="line">  vbox-&gt;setSpacing(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  QPushButton *settings = <span class="keyword">new</span> QPushButton(<span class="string">"Settings"</span>, <span class="keyword">this</span>);</span><br><span class="line">  settings-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);</span><br><span class="line">  QPushButton *accounts = <span class="keyword">new</span> QPushButton(<span class="string">"Accounts"</span>, <span class="keyword">this</span>);</span><br><span class="line">  accounts-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);</span><br><span class="line">  QPushButton *loans = <span class="keyword">new</span> QPushButton(<span class="string">"Loans"</span>, <span class="keyword">this</span>);</span><br><span class="line">  loans-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);</span><br><span class="line">  QPushButton *cash = <span class="keyword">new</span> QPushButton(<span class="string">"Cash"</span>, <span class="keyword">this</span>);</span><br><span class="line">  cash-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);</span><br><span class="line">  QPushButton *debts = <span class="keyword">new</span> QPushButton(<span class="string">"Debts"</span>, <span class="keyword">this</span>);</span><br><span class="line">  debts-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);</span><br><span class="line"></span><br><span class="line">  vbox-&gt;addWidget(settings);</span><br><span class="line">  vbox-&gt;addWidget(accounts);</span><br><span class="line">  vbox-&gt;addWidget(loans);</span><br><span class="line">  vbox-&gt;addWidget(cash);</span><br><span class="line">  vbox-&gt;addWidget(debts);</span><br><span class="line"></span><br><span class="line">  setLayout(vbox);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们创建了五个垂直堆叠的按钮，并且让五个按钮再长、宽两个方向尽可能扩展(Expanding)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"verticalbox.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  VerticalBox window;</span><br><span class="line"></span><br><span class="line">  window.resize(<span class="number">240</span>, <span class="number">230</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"VerticalBox"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后长这个样子:</p><p><img src="https://imgs.codewoody.com/uploads/big/55d090d11407c6ee692f29a525f97e0c.png" style="width: 50%; border: none"></p><p>类似于<code>QVboxLayout</code>, <code>QHBoxLayout</code>提供了水平排列的布局。垂直布局和水平布局可以联合起来使用。在下面这个例子中我们在窗口右下角添加两个水平分布的按钮。这就是通过混合使用垂直于水平分布实现的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// buttons.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buttons</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Buttons(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    QPushButton *okBtn;</span><br><span class="line">    QPushButton *applyBtn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"buttons.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QHBoxLayout&gt;</span></span></span><br><span class="line"></span><br><span class="line">Buttons::Buttons(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line"></span><br><span class="line">  QVBoxLayout *vbox = <span class="keyword">new</span> QVBoxLayout(<span class="keyword">this</span>);</span><br><span class="line">  QHBoxLayout *hbox = <span class="keyword">new</span> QHBoxLayout();</span><br><span class="line"></span><br><span class="line">  okBtn = <span class="keyword">new</span> QPushButton(<span class="string">"OK"</span>, <span class="keyword">this</span>);</span><br><span class="line">  applyBtn = <span class="keyword">new</span> QPushButton(<span class="string">"Apply"</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  hbox-&gt;addWidget(okBtn, <span class="number">1</span>, Qt::AlignRight);</span><br><span class="line">  hbox-&gt;addWidget(applyBtn, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  vbox-&gt;addStretch(<span class="number">1</span>);</span><br><span class="line">  vbox-&gt;addLayout(hbox);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"buttons.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line"></span><br><span class="line">  Buttons window;</span><br><span class="line"></span><br><span class="line">  window.resize(<span class="number">290</span>, <span class="number">170</span>);</span><br><span class="line">  window.setWindowTitle(<span class="string">"Buttons"</span>);</span><br><span class="line">  window.show();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个更加复杂的布局嵌套的例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nesting.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layouts</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Layouts(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nesting.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QListWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"nesting.h"</span></span></span><br><span class="line"></span><br><span class="line">Layouts::Layouts(QWidget *parent)</span><br><span class="line">  : QWidget (parent)</span><br><span class="line">&#123;</span><br><span class="line">  QVBoxLayout *vbox = <span class="keyword">new</span> QVBoxLayout();</span><br><span class="line">  QHBoxLayout *hbox = <span class="keyword">new</span> QHBoxLayout(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  QListWidget *lw = <span class="keyword">new</span> QListWidget(<span class="keyword">this</span>);</span><br><span class="line">  lw-&gt;addItem(<span class="string">"The Omen"</span>); </span><br><span class="line">  lw-&gt;addItem(<span class="string">"The Exorcist"</span>);</span><br><span class="line">  lw-&gt;addItem(<span class="string">"Notes on a scandal"</span>);</span><br><span class="line">  lw-&gt;addItem(<span class="string">"Fargo"</span>);</span><br><span class="line">  lw-&gt;addItem(<span class="string">"Capote"</span>);</span><br><span class="line"></span><br><span class="line">  QPushButton *add = <span class="keyword">new</span> QPushButton(<span class="string">"Add"</span>, <span class="keyword">this</span>);</span><br><span class="line">  QPushButton *rename = <span class="keyword">new</span> QPushButton(<span class="string">"Rename"</span>, <span class="keyword">this</span>);</span><br><span class="line">  QPushButton *remove = <span class="keyword">new</span> QPushButton(<span class="string">"Remove"</span>, <span class="keyword">this</span>);</span><br><span class="line">  QPushButton *removeall = <span class="keyword">new</span> QPushButton(<span class="string">"Remove All"</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  vbox-&gt;setSpacing(<span class="number">3</span>);</span><br><span class="line">  vbox-&gt;addStretch(<span class="number">1</span>);</span><br><span class="line">  vbox-&gt;addWidget(add);</span><br><span class="line">  vbox-&gt;addWidget(rename);</span><br><span class="line">  vbox-&gt;addWidget(remove);</span><br><span class="line">  vbox-&gt;addWidget(removeall);</span><br><span class="line">  vbox-&gt;addStretch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  hbox-&gt;addWidget(lw);</span><br><span class="line">  hbox-&gt;addSpacing(<span class="number">15</span>);</span><br><span class="line">  hbox-&gt;addLayout(vbox);</span><br><span class="line"></span><br><span class="line">  setLayout(hbox);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"nesting.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line">    </span><br><span class="line">  Layouts window;</span><br><span class="line">  </span><br><span class="line">  window.setWindowTitle(<span class="string">"Layouts"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序运行得到的界面如下图：</p><p><img src="https://imgs.codewoody.com/uploads/big/101a9aba9e4ecc35c723622cc32e2bc3.png" style="width: 70%; border: none"></p><h3 id="form布局">Form布局</h3><p><code>QFormLayout</code>可以处理典型的表格输入的布局。其子Widgets被分为两列，分别是Label和输入控件（例如<code>QLineEdit</code>或者<code>QSpinBox</code>)。 Form布局的使用见下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// form.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormEx</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    FormEx(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// form.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFormLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"form.h"</span></span></span><br><span class="line"></span><br><span class="line">FormEx::FormEx(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line">        </span><br><span class="line">  QLineEdit *nameEdit = <span class="keyword">new</span> QLineEdit(<span class="keyword">this</span>);</span><br><span class="line">  QLineEdit *addrEdit = <span class="keyword">new</span> QLineEdit(<span class="keyword">this</span>);</span><br><span class="line">  QLineEdit *occpEdit = <span class="keyword">new</span> QLineEdit(<span class="keyword">this</span>);</span><br><span class="line">  </span><br><span class="line">  QFormLayout *formLayout = <span class="keyword">new</span> QFormLayout;</span><br><span class="line">  <span class="comment">// 调整Label的对齐规则为水平右对齐，垂直居中</span></span><br><span class="line">  formLayout-&gt;setLabelAlignment(Qt::AlignRight | Qt::AlignVCenter);</span><br><span class="line">  formLayout-&gt;addRow(<span class="string">"Name:"</span>, nameEdit);</span><br><span class="line">  formLayout-&gt;addRow(<span class="string">"Email:"</span>, addrEdit);</span><br><span class="line">  formLayout-&gt;addRow(<span class="string">"Age:"</span>, occpEdit);</span><br><span class="line">  </span><br><span class="line">  setLayout(formLayout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"form.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line"></span><br><span class="line">  FormEx window;</span><br><span class="line"></span><br><span class="line">  window.setWindowTitle(<span class="string">"Form example"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行得到的界面如下：</p><p><img src="https://imgs.codewoody.com/uploads/big/1f92dfbe6c1b7bd1cdc16b7e56902b5a.png" style="width: 50%; border: none"></p><h3 id="网格布局">网格布局</h3><p>网格布局使用<code>QGridLayout</code>这个类，我们已经在前面的例子中见过了。这是一个强大的布局工具。英文教程中给了两个例子，其中Review那个例子要更加复杂一些，我们使用那个来说明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// review.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Review</span> :</span> <span class="keyword">public</span> QWidget &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Review(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// review.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGridLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"review.h"</span></span></span><br><span class="line"></span><br><span class="line">Review::Review(QWidget *parent)</span><br><span class="line">    : QWidget(parent) &#123;</span><br><span class="line"></span><br><span class="line">  QGridLayout *grid = <span class="keyword">new</span> QGridLayout(<span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;setVerticalSpacing(<span class="number">15</span>);</span><br><span class="line">  grid-&gt;setHorizontalSpacing(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  QLabel *title = <span class="keyword">new</span> QLabel(<span class="string">"Title:"</span>, <span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(title, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  title-&gt;setAlignment(Qt::AlignRight | Qt::AlignVCenter);</span><br><span class="line"></span><br><span class="line">  QLineEdit *edt1 = <span class="keyword">new</span> QLineEdit(<span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(edt1, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  QLabel *author = <span class="keyword">new</span> QLabel(<span class="string">"Author:"</span>, <span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(author, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  author-&gt;setAlignment(Qt::AlignRight | Qt::AlignVCenter);</span><br><span class="line"></span><br><span class="line">  QLineEdit *edt2 = <span class="keyword">new</span> QLineEdit(<span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(edt2, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  QLabel *review = <span class="keyword">new</span> QLabel(<span class="string">"Review:"</span>, <span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(review, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  review-&gt;setAlignment(Qt::AlignRight | Qt::AlignTop);</span><br><span class="line"></span><br><span class="line">  QTextEdit *te = <span class="keyword">new</span> QTextEdit(<span class="keyword">this</span>);</span><br><span class="line">  grid-&gt;addWidget(te, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  setLayout(grid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"review.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;  </span><br><span class="line"></span><br><span class="line">  Review window;</span><br><span class="line"></span><br><span class="line">  window.setWindowTitle(<span class="string">"Review"</span>);</span><br><span class="line">  window.show();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用<code>QGridLayout::addWidget</code>参数的时候，除了行列号以外，剩下两个数字分别表示行列的Span。函数定义：</p><p><img src="https://imgs.codewoody.com/uploads/big/5c99b1d0a4824c8cd573cdff321a926b.png"></p><p>程序运行得到的界面是</p><p><img src="https://imgs.codewoody.com/uploads/big/8bfeb8877347930a9b2cab06e963a7af.png" style="width: 70%; border: none"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个系列的摸索是在研究&lt;a href=&quot;http://zetcode.com/gui/qt5/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Qt Tutorial&lt;/a&gt;英文教程的基础上，克服在macOS上遇到的若干问题写下的记录。前面两篇我们还是在研究比较基础的模块，还没有涉及具体的GUI部分。从这篇开始我们来研究GUI开发。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://www.codewoody.com/tags/C/"/>
    
      <category term="Qt" scheme="http://www.codewoody.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>【转载】5G大战,美国败像已露</title>
    <link href="http://www.codewoody.com/posts/58026/"/>
    <id>http://www.codewoody.com/posts/58026/</id>
    <published>2019-09-19T02:29:08.000Z</published>
    <updated>2019-09-19T02:30:54.676Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.williamlong.info/archives/5822.html" target="_blank" rel="noopener">来源</a></p><p>为了将中国企业排除在新一代通信标准5G之外，美国发动高科技战已过去1年有余。世界的数据网将不断分裂为相互隔绝的2个，一个美国主导，另一个中国主导——当初这样的担忧出现扩大。</p><p>　　美国谷歌前董事长施密特也是敲响这一警钟的人之一。但是，美国、日本今后面对的情况也许比这个警钟更严厉，不仅是世界5G基础设施的一半，中国企业有掌握更多份额的可能性。在对亚洲各国采访的过程中，我禁不住这样想。</p><p>　　传输庞大信息的5G网可以看作是人类身体上的大动脉。只要将其控制，在政治和军事方面，中国的影响力便可能进一步加强。</p><p>　　但是，如果仅观察华盛顿大张旗鼓采取的对华强硬举措，容易令人感到正在加强攻势的是美方。</p><p>　　美国2018年8月通过《国防授权法》，决定将华为技术和中兴通讯（ZTE）排除出美国。点燃了高科技战争的导火索。</p><p>　　经过1年的宽限期，美国政府自今年8月13日起，禁止美国政府机构采购华为和中兴通讯的产品。1年后起，对于采用两家公司等产品的民营企业，也将被禁止与美国政府交易。</p><p>　　美国担心如果让两家中国企业进入本国5G领域，重要信息可能被窃取。虽然中国否认这种危险，但美国正在敦促同盟国和友好国家也将两家企业排除出5G网。</p><p>　　美国政府计划在事实上禁止向华为出口美国造零部件和软件。这将对于无法使用美国谷歌软件的华为智能手机终端构成打击。</p><p>　　但是，要问能在多大程度上将2家中国企业排除出5G基础设施，局势对美国极为不利。与美国统一步调、决定排除华为的国家目前只有日本和澳大利亚。英国和法国都表示“正在讨论”，而德国则坚持“难以排除”的立场。</p><p>　　在英德的通信基础设施中，华为已在4G领域浸透。德国政府内部有声音表示，“事到如今，让我们在5G中排除（中国企业），也是难为人的要求”。</p><p>　　在这样背景下，左右中美5G战争形势的是亚洲的走向。8月下旬，在曼谷举行的“日本-东盟媒体合作论坛”（主办方为日本的国际交流基金）的讨论非常耐人寻味。在亚洲记者讨论世界局势的情况下，成为主要话题的是中美的5G战争。东南亚的大部分与会者都断言，美国难以战胜中国。</p><p>　　的确，这种迹象很明显。柬埔寨采用华为的技术，将于年内启动5G服务。马来西亚和泰国也在5月底宣布不抵制华为。</p><p>　　在菲律宾、印度尼西亚和缅甸，当地的通信大型企业与华为和中兴通讯签署合同，显示出在5G领域展开合作的趋势。</p><p>　　原因何在？第一，能替代华为和中兴通讯的选项过度缺乏。从移动通信基础设施来看，这2家企业占到世界市场的近4成份额。虽然欧洲的爱立信（29％）和诺基亚（23.4％）也拥有较高份额，但在价格竞争中无法与中国企业相匹敌。</p><p>　　东南亚的经济专家表示，与中国2家企业相比，爱立信和诺基亚的价格高出2——3成。对东南亚和印度来说不合算。</p><p>　　另外一个原因在于美国自身。在批评中国的同时，美国自身也参与情报间谍活动——这种不信任感在亚洲内部不断增强。</p><p>　　知道可能存在被中国获取信息的危险，但是，美国或许也在利用先进的高科技，大肆监视外国的通信，获取信息——东南亚的当局者和安全专家透露出这样的不满。</p><p>　　东南亚冷眼旁观的是美国的间谍活动。美国国家安全局（NSA）前雇员斯诺登爆料称，美国政府侵入各国政府和企业的网络，暗中获取信息。</p><p>　　也就是说，在信息被拿走的风险方面，中国和美国没有什么区别。在伊斯兰人口众多的印度尼西亚、马来西亚、巴基斯坦和文莱等国，甚至有看法认为，与中国相比，信息被美国窃取更为可怕。</p><p>　　受长达20年的阿富汗和中东战争的影响，在亚洲的伊斯兰圈，对美国的感情芥蒂沉淀下来。一位前外交官的话很有代表性。</p><p>　　他说：“正如萨达姆·侯赛因领导的伊拉克那样，美国将向不听话的国家投下炸弹。但是，中国将向看不顺眼的国家投下金钱（投资），还是中国更好。”</p><p>　　要想抗衡华为和中兴通讯，欧洲和日韩的通信企业必须提高价格竞争力，建立能扩大市场份额的体制。美国或许有必要进一步共享所谓依赖中国企业的风险，在此基础上，为了在6G领域掌握主导权加快投资。日本通信商NTT最近成功开发出着眼于6G的新技术。中美数字主导权的竞争不会止步于5G，下一场战争已经打响。</p><p>　　稿源：日经中文网，作者：秋田浩之</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.williamlong.info/archives/5822.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;来源&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了将中国企业排除在新一代通信标准5G之外，美国发动高科技战已过去1
      
    
    </summary>
    
      <category term="杂谈" scheme="http://www.codewoody.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="转载" scheme="http://www.codewoody.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Qt on Mac摸索记录 - 其二</title>
    <link href="http://www.codewoody.com/posts/54018/"/>
    <id>http://www.codewoody.com/posts/54018/</id>
    <published>2019-09-18T17:11:03.000Z</published>
    <updated>2019-09-19T04:58:02.047Z</updated>
    
    <content type="html"><![CDATA[<p>跟着<a href="./posts/46595/">上一篇</a>继续。本篇介绍Qt重新造的轮子：容器系统和文件操作系统。</p><a id="more"></a><h2 id="容器">容器</h2><p>按理说标准库里面就有各种容器的实现了，这里重新造轮子了？</p><p>容器分为了两类：序列容器 和 关联容器。</p><h3 id="qvector">QVector</h3><p>动态数组容器，内部本质就是内存连续的数组，从而使得随机存取的效率非常高。但是对于元素的删除插入操作性能会比较差。对于长度很大的序列，推荐采用链表实现的的<code>QList</code>。</p><p><code>QVector</code>的例子如下。使用非常简单，不再赘述。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QVector&lt;<span class="keyword">int</span>&gt; vals = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"The size of the vector is: "</span> &lt;&lt; vals.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"The first item is: "</span> &lt;&lt; vals.first() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"The last item is: "</span> &lt;&lt; vals.last() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    vals.append(<span class="number">6</span>);</span><br><span class="line">    vals.prepend(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"Elements: "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : vals) &#123;</span><br><span class="line">        out &lt;&lt; val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="qlist"><code>QList</code></h3><p><code>QList</code> 也是序列容器，内部是链表实现。其随机访问、删除、插入操作效率都比较高。因此是 Qt 中最常用的容器。参考下面👇这个例子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QList&lt;QString&gt; authors = &#123;<span class="string">"Balzac"</span>, <span class="string">"Tolstoy"</span>, </span><br><span class="line">        <span class="string">"Gulbranssen"</span>, <span class="string">"London"</span>&#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; authors.size(); ++i) &#123;</span><br><span class="line">  </span><br><span class="line">        out &lt;&lt; authors.at(i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    authors &lt;&lt; <span class="string">"Galsworthy"</span> &lt;&lt; <span class="string">"Sienkiewicz"</span>;</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"***********************"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::sort(authors.begin(), authors.end());</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"Sorted:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (QString author : authors) &#123;</span><br><span class="line">  </span><br><span class="line">        out &lt;&lt; author &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="qstringlist"><code>QStringList</code></h3><p>为字符串做了优化的列表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QList&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QString <span class="built_in">string</span> = <span class="string">"coin, book, cup, pencil, clock, bookmark"</span>;</span><br><span class="line">    QStringList items = <span class="built_in">string</span>.split(<span class="string">","</span>);</span><br><span class="line">    <span class="function">QStringListIterator <span class="title">it</span><span class="params">(items)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        out &lt;&lt; it.next().trimmed() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="qset"><code>QSet</code></h3><p>集合可以确保其中存储的值是唯一的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSet&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QSet&lt;QString&gt; cols1 = &#123;<span class="string">"yellow"</span>, <span class="string">"red"</span>, <span class="string">"blue"</span>&#125;;</span><br><span class="line">    QSet&lt;QString&gt; cols2 = &#123;<span class="string">"blue"</span>, <span class="string">"pink"</span>, <span class="string">"orange"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"There are "</span> &lt;&lt; cols1.size() &lt;&lt; <span class="string">" values in the set"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    cols1.insert(<span class="string">"brown"</span>);</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"There are "</span> &lt;&lt; cols1.size() &lt;&lt; <span class="string">" values in the set"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    cols1.unite(cols2);</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"There are "</span> &lt;&lt; cols1.size() &lt;&lt; <span class="string">" values in the set"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (QString val : cols1) &#123;</span><br><span class="line">        out &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QList&lt;QString&gt; lcols = cols1.values();</span><br><span class="line">    <span class="built_in">std</span>::sort(lcols.begin(), lcols.end());</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"*********************"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"Sorted:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (QString val : lcols) &#123;</span><br><span class="line">        out &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到合并(<code>unite()</code>)后重复元素被移除了，只留下一份。</p><h3 id="qmap"><code>QMap</code></h3><p><code>QMap</code>是关联式容器，存储key-value对。下面是<code>QMap</code>使用的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMap&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QMap&lt;QString, <span class="keyword">int</span>&gt; items = &#123; &#123;<span class="string">"coins"</span>, <span class="number">5</span>&#125;, &#123;<span class="string">"books"</span>, <span class="number">3</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">    items.insert(<span class="string">"bottles"</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    QList&lt;<span class="keyword">int</span>&gt; values = items.values();</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"Values:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : values) &#123;</span><br><span class="line">        out &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QList&lt;QString&gt; keys = items.keys();</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"Keys:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (QString key : keys) &#123;</span><br><span class="line">        out &lt;&lt; key &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QMapIterator&lt;QString, <span class="keyword">int</span>&gt; it(items);</span><br><span class="line"></span><br><span class="line">    out &lt;&lt; <span class="string">"Pairs:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        it.next();</span><br><span class="line">        out &lt;&lt; it.key() &lt;&lt; <span class="string">": "</span> &lt;&lt; it.value() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义排序">自定义排序</h3><p>自定义排序其实就是要自定义比较函数。以下面的类为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// book.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Book(QString, QString);</span><br><span class="line">        <span class="function">QString <span class="title">getAuthor</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">        <span class="function">QString <span class="title">getTitle</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        QString author;</span><br><span class="line">        QString title;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// book.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"book.h"</span></span></span><br><span class="line"></span><br><span class="line">Book::Book(QString auth, QString tit) &#123;</span><br><span class="line">    author = auth;</span><br><span class="line">    title = tit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QString Book::getAuthor() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> author;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QString Book::getTitle() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用自定义的方式排序如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QList&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"book.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compareByTitle</span><span class="params">(<span class="keyword">const</span> Book &amp;b1, <span class="keyword">const</span> Book &amp;b2)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> b1.getTitle() &lt; b2.getTitle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QList&lt;Book&gt; books = &#123;</span><br><span class="line">        Book(<span class="string">"Jack London"</span>, <span class="string">"The Call of the Wild"</span>),</span><br><span class="line">        Book(<span class="string">"Honoré de Balzac"</span>, <span class="string">"Father Goriot"</span>),</span><br><span class="line">        Book(<span class="string">"Leo Tolstoy"</span>, <span class="string">"War and Peace"</span>),</span><br><span class="line">        Book(<span class="string">"Gustave Flaubert"</span>, <span class="string">"Sentimental education"</span>),</span><br><span class="line">        Book(<span class="string">"Guy de Maupassant"</span>, <span class="string">"Une vie"</span>),</span><br><span class="line">        Book(<span class="string">"William Shakespeare"</span>, <span class="string">"Hamlet"</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::sort(books.begin(), books.end(), compareByTitle);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Book book : books) &#123;</span><br><span class="line">        out &lt;&lt; book.getAuthor() &lt;&lt; <span class="string">": "</span> &lt;&lt; book.getTitle() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件系统">文件系统</h2><p>这里涉及<code>QFile</code>, <code>QDir</code>, <code>QFileInfo</code>三个类。其中<code>QFile</code>负责操作文件（读取和写入），<code>QDir</code>提供了访问路径结构及其内容的接口，<code>QFileInfo</code>提供了与独立于操作系统的文件信息，包括文件名、文件存储的路径，访问时间，修改时间，权限，文件所有权信息。</p><h3 id="文件大小">文件大小</h3><p>文件的大小通过<code>QFileInfo::size()</code>函数来获取。见下面的完整例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">    qWarning(<span class="string">"Usage: file_size file"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  QString filename = argv[<span class="number">1</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!QFile(filename).exists()) &#123;</span><br><span class="line">    qWarning(<span class="string">"The file does not exist"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function">QFileInfo <span class="title">fileinfo</span><span class="params">(filename)</span></span>;</span><br><span class="line">  </span><br><span class="line">  qint64 size = fileinfo.size();</span><br><span class="line">  </span><br><span class="line">  QString str = <span class="string">"The size is: %1 bytes"</span>;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; str.arg(size) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取文件内容">读取文件内容</h3><p>读取文件之前需要打开文件，并基于这个文件创建流。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">"colours"</span>)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!file.open(QIODevice::ReadOnly)) &#123;</span><br><span class="line">    qWarning(<span class="string">"Cannot open file for reading"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">in</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!in.atEnd()) &#123;</span><br><span class="line">    QString line = in.readLine();</span><br><span class="line">    out &lt;&lt; line &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入文件内容">写入文件内容</h3><p>要写入文件需要文件以写入模式打开。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">  QString filename = <span class="string">"distros"</span>;</span><br><span class="line">  <span class="function">QFile <span class="title">file</span><span class="params">(filename)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (file.open(QIODevice::WriteOnly)) &#123;</span><br><span class="line">      </span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"Xubuntu"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"Arch"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"Debian"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"Redhat"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    out &lt;&lt; <span class="string">"Slackware"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      </span><br><span class="line">    qWarning(<span class="string">"Could not open file"</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  file.close(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制文件">复制文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">      qWarning(<span class="string">"Usage: copyfile source destination"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  QString source = argv[<span class="number">1</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!QFile(source).exists()) &#123;</span><br><span class="line">      qWarning(<span class="string">"The source file does not exist"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">QString <span class="title">destin</span><span class="params">(argv[<span class="number">2</span>])</span></span>;</span><br><span class="line"></span><br><span class="line">  QFile::copy(source, destin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件信息的获取">文件信息的获取</h3><ul><li>文件所有者：<code>QFileInfo::group()</code>和<code>QFileInfo::owner()</code>，返回的都是<code>QString</code>;</li><li>修改时间: <code>QFileInfo::lastRead()</code>和<code>QFileInfo::lastModified()</code>，返回的是<code>QDateTime</code>;</li><li>文件路径：参见下面的例子</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filepath.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">      out &lt;&lt; <span class="string">"Usage: file_times file"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  QString filename = argv[<span class="number">1</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="function">QFileInfo <span class="title">fileinfo</span><span class="params">(filename)</span></span>;</span><br><span class="line">  </span><br><span class="line">  QString absPath = fileinfo.absoluteFilePath();</span><br><span class="line">  QString baseName = fileinfo.baseName();</span><br><span class="line">  QString compBaseName = fileinfo.completeBaseName();</span><br><span class="line">  QString fileName = fileinfo.fileName();</span><br><span class="line">  QString suffix = fileinfo.suffix();</span><br><span class="line">  QString compSuffix = fileinfo.completeSuffix();</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; <span class="string">"Absolute file path: "</span> &lt;&lt; absPath &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"Base name: "</span> &lt;&lt; baseName &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"Complete base name: "</span> &lt;&lt; compBaseName &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"File name: "</span> &lt;&lt; fileName &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"Suffix: "</span> &lt;&lt; suffix &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"Whole suffix: "</span> &lt;&lt; compSuffix &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./file_path ~/Downloads/qt-everywhere-opensource-src-5.5.1.tar.gz </span><br><span class="line">Absolute file path: /home/janbodnar/Downloads/qt-everywhere-opensource-src-5.5.1.tar.gz</span><br><span class="line">Base name: qt-everywhere-opensource-src-5</span><br><span class="line">Complete base name: qt-everywhere-opensource-src-5.5.1.tar</span><br><span class="line">File name: qt-everywhere-opensource-src-5.5.1.tar.gz</span><br><span class="line">Suffix: gz</span><br><span class="line">Whole suffix: 5.1.tar.gz</span><br></pre></td></tr></table></figure><ul><li>权限信息：通过<code>QFile::permissions</code>方法可以权限信息，具体的例子如下：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">      out &lt;&lt; <span class="string">"Usage: permissions file"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  QString filename = argv[<span class="number">1</span>];</span><br><span class="line">  </span><br><span class="line">  QFile::Permissions ps = QFile::permissions(filename);</span><br><span class="line">  </span><br><span class="line">  QString fper;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::ReadOwner) &#123;</span><br><span class="line">      fper.append(<span class="string">'r'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::WriteOwner) &#123;</span><br><span class="line">      fper.append(<span class="string">'w'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::ExeOwner) &#123;</span><br><span class="line">      fper.append(<span class="string">'x'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::ReadGroup) &#123;</span><br><span class="line">      fper.append(<span class="string">'r'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::WriteGroup) &#123;</span><br><span class="line">      fper.append(<span class="string">'w'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::ExeGroup) &#123;</span><br><span class="line">      fper.append(<span class="string">'x'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::ReadOther) &#123;</span><br><span class="line">      fper.append(<span class="string">'r'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::WriteOther) &#123;</span><br><span class="line">      fper.append(<span class="string">'w'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ps &amp; QFile::ExeOther) &#123;</span><br><span class="line">      fper.append(<span class="string">'x'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fper.append(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; fper &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作路径directories">操作路径(directories)</h3><ul><li>创建文件夹: <code>QDir::mkdir()</code>，返回布尔值表明创建是否成功。<code>QDir::mkpath()</code>也是创建文件夹 ，其区别在于<code>mkpath()</code>函数会同时创建缺少的父文件夹。</li><li>重命名: <code>QDir::exists()</code>, 文件是否存在。</li><li>获取 一些特殊的文件夹的位置：<ul><li><code>QDir::currentPath()</code></li><li><code>QDir::homePath()</code></li><li><code>QDir::tempPath()</code></li><li><code>QDir::rootPath()</code></li></ul></li><li>输出文件夹内的内容</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDir&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">      qWarning(<span class="string">"Usage: list_dir directory"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  QString directory = argv[<span class="number">1</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="function">QDir <span class="title">dir</span><span class="params">(directory)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">      qWarning(<span class="string">"The directory does not exist"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  dir.setFilter(QDir::Files | QDir::AllDirs);</span><br><span class="line">  dir.setSorting(QDir::Size | QDir::Reversed);</span><br><span class="line"></span><br><span class="line">  QFileInfoList <span class="built_in">list</span> = dir.entryInfoList();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> max_size = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  foreach (QFileInfo finfo, <span class="built_in">list</span>) &#123;</span><br><span class="line">      QString name = finfo.fileName();</span><br><span class="line">      <span class="keyword">int</span> size = name.size();</span><br><span class="line">      <span class="keyword">if</span> (size &gt; max_size) &#123;</span><br><span class="line">          max_size = size;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> len = max_size + <span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; QString(<span class="string">"Filename"</span>).leftJustified(len).append(<span class="string">"Bytes"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.size(); ++i) &#123;</span><br><span class="line">    QFileInfo fileInfo = <span class="built_in">list</span>.at(i);</span><br><span class="line">    QString str = fileInfo.fileName().leftJustified(len);</span><br><span class="line">    str.append(QString(<span class="string">"%1"</span>).arg(fileInfo.size()));</span><br><span class="line">    out &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟着&lt;a href=&quot;./posts/46595/&quot;&gt;上一篇&lt;/a&gt;继续。本篇介绍Qt重新造的轮子：容器系统和文件操作系统。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://www.codewoody.com/tags/C/"/>
    
      <category term="Qt" scheme="http://www.codewoody.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt on Mac摸索记录 - 其一</title>
    <link href="http://www.codewoody.com/posts/46595/"/>
    <id>http://www.codewoody.com/posts/46595/</id>
    <published>2019-09-18T09:18:25.000Z</published>
    <updated>2019-09-18T17:10:35.116Z</updated>
    
    <content type="html"><![CDATA[<p>我参考<a href="http://zetcode.com/gui/qt5/introduction/" target="_blank" rel="noopener">http://zetcode.com/gui/qt5/introduction/</a>这个链接入坑，使用macOS。网上看起来是Windows和Linux的教程居多，这个链接里的教程初看起来应该也是基于Linux的。谁让Mac的市场占有率低呢。</p><a id="more"></a><h2 id="first-try">First Try</h2><h3 id="show-version">Show version</h3><p>首先是从官网下载了GUI形式的安装器安装的Qt，Qt的默认安装位置是<code>~/Qt</code>。安装的Qt版本是5.13.1。首先参照教程熟悉一下编译过程。教程链接里给出的例子是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// version.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Qt version: "</span> &lt;&lt; qVersion() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译的命令是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -o version version.cpp -I/usr/local/qt5/include/QtCore -I/usr/local/qt5/include -L/usr/local/qt5/lib -lQt5Core -fPIC</span><br></pre></td></tr></table></figure><p>不过这个编译命令在Mac上无法成功。我使用的是如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">g++ -o version version.cpp \</span><br><span class="line"><span class="meta">#</span><span class="bash"> Include path，需要指向包含QtCore的头文件的位置</span></span><br><span class="line">-Ipath/to/qt/5.13.1/clang_64/lib/QtCore.framework/Headers \</span><br><span class="line"><span class="meta">#</span><span class="bash"> -F指定framework的路径，-framework则用来指明使用的framework的名字</span></span><br><span class="line">-F/Users/lena/qt/5.13.1/clang_64/lib -framework QtCore</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在mac上g++其实也是调用的clang，这里加上这个避免一些warning</span></span><br><span class="line">-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX10.13.sdk \</span><br><span class="line">-mmacosx-version-min=10.12 \</span><br><span class="line"><span class="meta">#</span><span class="bash"> rpath是程序在运行的时候载入动态库（即QtCore.framework）的位置</span></span><br><span class="line">-Wl,-rpath,/path/to/5.13.1/clang_64/lib</span><br><span class="line">-pipe -stdlib=libc++ -O2 -std=gnu++11  -Wall -W -fPIC</span><br></pre></td></tr></table></figure><p>编译成功后调用<code>./version</code>就可以看到运行成功并输出Qt版本了。</p><h3 id="first-gui">First GUI</h3><p>下面我们来测试一个简单的GUI例子。首先新建一个文件如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simple.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    QWidget window;</span><br><span class="line"></span><br><span class="line">    window.resize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">    window.setWindowTitle(<span class="string">"Simple example"</span>);</span><br><span class="line">    window.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用<code>qmake</code>工具，运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake -project</span><br></pre></td></tr></table></figure><p>这个命令会创建一个项目文件<code>simple.pro</code><span class="foot-note-span">【文件的名字与根目录文件夹的名字相同】</span>。文件的内容应该类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">######################################################################</span><br><span class="line"># Automatically generated by qmake (3.0) Fri Oct 30 17:11:00 2015</span><br><span class="line">######################################################################</span><br><span class="line"></span><br><span class="line">TEMPLATE = app</span><br><span class="line">TARGET = simple</span><br><span class="line">INCLUDEPATH += .</span><br><span class="line"></span><br><span class="line"># Input</span><br><span class="line">SOURCES += simple.cpp</span><br><span class="line"></span><br><span class="line">QT += widgets</span><br></pre></td></tr></table></figure><p>注意最后一行，需要我们手动添加QtWidget模块。然后运行<code>qmake</code>命令，生成编译使用的Makefile。然后就可以编译了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>程序运行后会弹出一个空的窗口。</p><p><img src="https://imgs.codewoody.com/uploads/big/a9f573fd0cf4761bfac223bce02a0560.png" style="width: 50%; border: none"></p><h2 id="strings">Strings</h2><p>Qt 引入了<code>QString</code>来加强字符串处理的能力。</p><p><code>QtString</code>表示一个Unicode字符串，其存储字符串为16比特的<code>QChars</code>。每个<code>QChar</code>代表一个Unicode 4.0字符。不同于很多其他的变成语言，<code>QtString</code>可以被修改<span class="foot-note-span">【如Python的字符串就是静态的，“修改”字符串实际是生成新的字符串】</span>。</p><p>这里主要是了解<code>QtString</code>的能力，汇总记录就可以了，没有必要编译运行。</p><h3 id="初始化">初始化</h3><p>有多种初始化方法，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QString str1 = <span class="string">"The night train"</span>;</span><br><span class="line">   out &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">QString <span class="title">str2</span><span class="params">(<span class="string">"A yellow rose"</span>)</span></span>;</span><br><span class="line">   out &lt;&lt; str2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">string</span> s1 = <span class="string">"A blue sky"</span>;</span><br><span class="line">   QString str3 = s1.c_str(); </span><br><span class="line">   out &lt;&lt; str3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">string</span> s2 = <span class="string">"A thick fog"</span>;</span><br><span class="line">   QString str4 = QString::fromLatin1(s2.data(), s2.size());</span><br><span class="line">   out &lt;&lt; str4 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">char</span> s3[] = <span class="string">"A deep forest"</span>;</span><br><span class="line">   <span class="function">QString <span class="title">str5</span><span class="params">(s3)</span></span>;</span><br><span class="line">   out &lt;&lt; str5 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问字符串元素">访问字符串元素</h3><p>如前文所述，<code>QString</code>由<code>QChar</code>组成，我们可以使用<code>[]</code>操作符或者<code>at()</code>函数来访问元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QString a = <span class="string">"Eagle"</span>;</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; a[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; a[<span class="number">4</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; a.at(<span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (a.at(<span class="number">5</span>).isNull()) &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"Outside the range of the string"</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串长度">字符串长度</h3><p>与字符串长度相关的函数有三个： <code>size()</code>, <code>count()</code>和<code>length</code>。三个函数的作用是一样的。</p><h3 id="字符串构建">字符串构建</h3><p>参考如下的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span> <span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  QString s1 = <span class="string">"There are %1 white roses"</span>;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">  out &lt;&lt; s1.args(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  QString s2 = <span class="string">"The tree is %1 m high"</span>;</span><br><span class="line">  <span class="keyword">double</span> h = <span class="number">5.65</span>;</span><br><span class="line"></span><br><span class="line">  out &lt;&lt; s2.args(h) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  QString s3 = <span class="string">"We have %1 lemons and %2 oranges"</span>;</span><br><span class="line">  <span class="keyword">int</span> ln = <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">int</span> on = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  out &lt;&lt; s3.arg(ln).arg(on) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待被替换的占位符用<code>%</code>开头，后面借数字。需要注意的是多个占位符需要替换时，需要多次调用<code>args()</code>函数，而非为<code>args()</code>函数传递多个参数。</p><h3 id="子字符串substring">子字符串(Substring)</h3><p>这里涉及<code>left()</code>，<code>mid()</code>，<code>right()</code>三个函数，分别代表从左侧开始的Substring，中间一段的Substring，右侧开始的Substring。见下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QString str = <span class="string">"The night train"</span>;</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; str.right(<span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; str.left(<span class="number">9</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; str.mid(<span class="number">4</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">QString <span class="title">str2</span><span class="params">(<span class="string">"The big apple"</span>)</span></span>;</span><br><span class="line">   <span class="function">QStringRef <span class="title">sub</span><span class="params">(&amp;str2, <span class="number">0</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; sub.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历字符串">遍历字符串</h3><p><code>QString</code>遵循了C++的通常做法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  QString str = <span class="string">"There are many stars."</span>;</span><br><span class="line">  </span><br><span class="line">  foreach (QChar qc, str) &#123;</span><br><span class="line">    out &lt;&lt; qc &lt;&lt; <span class="string">" "</span>;  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (QChar *it=str.begin(); it!=str.end(); ++it) &#123;</span><br><span class="line">    out &lt;&lt; *it &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); ++i) &#123;</span><br><span class="line">    out &lt;&lt; str.at(i) &lt;&lt; <span class="string">" "</span>;    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串比较">字符串比较</h3><p><code>QString::compare()</code>函数用来比较两个字符串。该函数返回一个整型数。如果返回值小于0，那么第一个字符串小于第二个字符串；如果返回0，两个字符串相等；如果返回值大于0，那么第一个字符串大于第二个字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_EQUAL 0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QString a = <span class="string">"Rain"</span>;</span><br><span class="line">   QString b = <span class="string">"rain"</span>;</span><br><span class="line">   QString c = <span class="string">"rain\n"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (QString::compare(a, b) == STR_EQUAL) &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"a, b are equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"a, b are not equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; <span class="string">"In case insensitive comparison:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (QString::compare(a, b, Qt::CaseInsensitive) == STR_EQUAL) &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"a, b are equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"a, b are not equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (QString::compare(b, c) == STR_EQUAL) &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"b, c are equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"b, c are not equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   c.chop(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; <span class="string">"After removing the new line character"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (QString::compare(b, c) == STR_EQUAL) &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"b, c are equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"b, c are not equal"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>Qt::CaseInsensitive</code>表示无视大小写的比较。</p><h3 id="字符串解析">字符串解析</h3><p>这里指将字符串解析为数字类型。这里涉及<code>toInt()</code>, <code>toFloat()</code>, <code>toLong()</code>等函数。反过来，<code>setNum()</code>函数可以将数字类型转化成字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  QString s1 = <span class="string">"12"</span>;</span><br><span class="line">  QString s2 = <span class="string">"15"</span>;</span><br><span class="line">  QString s3, s4;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; s1.toInt() + s2.toInt() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n1 = <span class="number">30</span>;</span><br><span class="line">  <span class="keyword">int</span> n2 = <span class="number">40</span>;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; s3.setNum(n1) + s4.setNum(n2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符类型">字符类型</h3><p><code>QChar</code>类型可以肥尾数字，祖母，空格以及标点符号，<code>QChar</code>提供了识别这些类型的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line">  <span class="keyword">int</span> digits  = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> letters = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> spaces  = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> puncts  = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  QString str = <span class="string">"7 white, 3 red roses."</span>;</span><br><span class="line">  </span><br><span class="line">  foreach(QChar s, str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.isDigit()) &#123;</span><br><span class="line">      digits++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.isLetter()) &#123;</span><br><span class="line">      letters++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.isSpace()) &#123;</span><br><span class="line">      spaces++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.isPunct()) &#123;</span><br><span class="line">      puncts++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  out &lt;&lt; QString(<span class="string">"There are %1 characters"</span>).arg(str.count()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; QString(<span class="string">"There are %1 letters"</span>).arg(letters) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; QString(<span class="string">"There are %1 digits"</span>).arg(digits) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; QString(<span class="string">"There are %1 spaces"</span>).arg(spaces) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  out &lt;&lt; QString(<span class="string">"There are %1 punctuation characters"</span>).arg(puncts) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改字符串">修改字符串</h3><p>修改字符串的函数可以分为两类，一类返回一个修改后的副本，原字符串保持不变(如<code>toLower()</code>)；另一类是直接原地修改原字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QString str = <span class="string">"Lovely"</span>;</span><br><span class="line">   str.append(<span class="string">" season"</span>);</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   str.remove(<span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line">   out &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   str.replace(<span class="number">7</span>, <span class="number">3</span>, <span class="string">"girl"</span>);</span><br><span class="line">   out &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   str.clear();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (str.isEmpty()) &#123;</span><br><span class="line">     out &lt;&lt; <span class="string">"The string is empty"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串对齐">字符串对齐</h3><p>这里指输出格式调整，将输出的内容左对齐(<code>leftJustified()</code>)或者右对齐(<code>rightJustified()</code>)。如下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QString field1 = <span class="string">"Name: "</span>;</span><br><span class="line">   QString field2 = <span class="string">"Occupation: "</span>;</span><br><span class="line">   QString field3 = <span class="string">"Residence: "</span>;</span><br><span class="line">   QString field4 = <span class="string">"Marital status: "</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> width = field4.size();</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; field1.rightJustified(width, <span class="string">' '</span>) &lt;&lt; <span class="string">"Robert\n"</span>;</span><br><span class="line">   out &lt;&lt; field2.rightJustified(width, <span class="string">' '</span>) &lt;&lt; <span class="string">"programmer\n"</span>;</span><br><span class="line">   out &lt;&lt; field3.rightJustified(width, <span class="string">' '</span>) &lt;&lt; <span class="string">"New York\n"</span>;</span><br><span class="line">   out &lt;&lt; field4.rightJustified(width, <span class="string">' '</span>) &lt;&lt; <span class="string">"single\n"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">          Name: Robert</span><br><span class="line">    Occupation: programmer</span><br><span class="line">     Residence: New York</span><br><span class="line">Marital status: single</span><br></pre></td></tr></table></figure><h3 id="escaping">Escaping</h3><p>Qt5 提供了 <code>toHtmlEscapted()</code> 方法，将字符串中涉及的html下特殊的字符，如<code>&lt;, &gt;, &amp;, &quot;</code>等，替换成HTML下的编码。如</p><p>处理文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line"></span><br><span class="line">    for (int i=1; i&lt;=10; i++) &#123;</span><br><span class="line">        printf(&quot;Bottle %d\n&quot;, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html_escape.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">"cprog.c"</span>)</span></span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (!file.open(QIODevice::ReadOnly)) &#123;</span><br><span class="line">        qWarning(<span class="string">"Cannot open file for reading"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">in</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line"></span><br><span class="line">    QString allText = in.readAll();</span><br><span class="line">    out &lt;&lt; allText.toHtmlEscaped() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    file.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./html_escape</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &amp;lt;stdio.h&amp;gt;</span></span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line"></span><br><span class="line">    for (int i=1; i&amp;lt;=10; i++) &#123;</span><br><span class="line">        printf(&amp;quot;Bottle %d\n&amp;quot;, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="date-and-time">Date and Time</h2><p>这个部分还是继续讲 Qt 扩展的数据类型。本次涉及<code>QDate</code>，<code>QTime</code> 和 <code>QDateTime</code> 三个类。</p><p><code>QDate</code> 用于管理格里高利历的日历。<code>QTime</code>处理时钟，<code>QDateTime</code>则是二者的结合。</p><h3 id="初始化-日期时间对象">初始化 日期&amp;时间对象</h3><p>日期和时间对象的初始化有两种基本方法：要么用构造函数直接复制，要么构造一个空的对象后续赋值。参见下面的粒子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDate&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 年 - 月 - 日</span></span><br><span class="line">  <span class="function">QDate <span class="title">dt1</span><span class="params">(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">12</span>)</span></span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"The date is "</span> &lt;&lt; dt1.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  QDate dt2;</span><br><span class="line">  dt2.setDate(<span class="number">2015</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">  out &lt;&lt; <span class="string">"The date is "</span> &lt;&lt; dt2.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 时 - 分 - 秒 - 毫秒</span></span><br><span class="line">  <span class="function">QTime <span class="title">tm1</span><span class="params">(<span class="number">17</span>, <span class="number">30</span>, <span class="number">12</span>, <span class="number">55</span>)</span></span>;</span><br><span class="line">  out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; tm1.toString(<span class="string">"hh:mm:ss.zzz"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  QTime tm2;</span><br><span class="line">  tm2.setHMS(<span class="number">13</span>, <span class="number">52</span>, <span class="number">45</span>, <span class="number">155</span>);</span><br><span class="line">  out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; tm2.toString(<span class="string">"hh:mm:ss.zzz"</span>) &lt;&lt; <span class="built_in">endl</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="当前时间">当前时间</h3><p>见下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDate&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QDate cd = QDate::currentDate();</span><br><span class="line">   QTime ct = QTime::currentTime();</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; <span class="string">"Current date is: "</span> &lt;&lt; cd.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Current time is: "</span> &lt;&lt; ct.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，源文件不能叫<code>time.cpp</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QDate cd = QDate::currentDate();</span><br></pre></td></tr></table></figure><p>返回的当前的日期。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QTime ct = QTime::currentTime();</span><br></pre></td></tr></table></figure><p>返回当前的时间。<code>toString()</code>函数则将的日期和时间对象转化成字符串。</p><h3 id="比较日期">比较日期</h3><p>关系操作符和用来比较日期（在日历上的位置）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDate&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">QDate <span class="title">dt1</span><span class="params">(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">  <span class="function">QDate <span class="title">dt2</span><span class="params">(<span class="number">2014</span>, <span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (dt1 &lt; dt2) &#123;</span><br><span class="line">    out &lt;&lt; dt1.toString() &lt;&lt; <span class="string">" comes before "</span></span><br><span class="line">      &lt;&lt; dt2.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    out &lt;&lt; dt1.toString() &lt;&lt; <span class="string">" comes after "</span></span><br><span class="line">      &lt;&lt; dt2.toString() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闰年">闰年</h3><p>使用<code>QDate::isLeapYear()</code>函数来判断</p><h3 id="日期时间-格式">日期/时间 格式</h3><h4 id="预定义日期格式">预定义日期格式</h4><p>Qt 有一些内建的日期格式。<code>QDate</code> 的 <code>toString()</code>函数可以接收一个日期格式描述对象作为参数。默认的参数是<code>Qt::TextDate</code>。一些其他的格式见下面的粒子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dateformats.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDate&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QDate cd = QDate::currentDate();</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::TextDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::ISODate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::SystemLocaleShortDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::SystemLocaleLongDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::DefaultLocaleShortDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::DefaultLocaleLongDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::SystemLocaleDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"Today is "</span> &lt;&lt; cd.toString(Qt::LocaleDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Today is Sat Oct 31 2015</span><br><span class="line">Today is 2015-10-31</span><br><span class="line">Today is 10/31/15</span><br><span class="line">Today is Saturday, October 31, 2015</span><br><span class="line">Today is 10/31/15</span><br><span class="line">Today is Saturday, October 31, 2015</span><br><span class="line">Today is 10/31/15</span><br><span class="line">Today is 10/31/15</span><br></pre></td></tr></table></figure><h4 id="自定义日期格式">自定义日期格式</h4><p>如下表：</p><p><img src="https://imgs.codewoody.com/uploads/big/ea0c02b56040b78459362caf3e6b191d.png"></p><h4 id="预定义时间格式">预定义时间格式</h4><p>和日期的类似，时钟对象的<code>toString()</code>也接收格式描述对象参数。默认的是<code>Qt::TextDate</code>。其他格式如下例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function">QTextStream <span class="title">out</span><span class="params">(<span class="built_in">stdout</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">   QTime ct = QTime::currentTime();</span><br><span class="line"></span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::TextDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::ISODate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::SystemLocaleShortDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::SystemLocaleLongDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::DefaultLocaleShortDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::DefaultLocaleLongDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::SystemLocaleDate) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   out &lt;&lt; <span class="string">"The time is "</span> &lt;&lt; ct.toString(Qt::LocaleDate) &lt;&lt; <span class="built_in">endl</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The time is 15:58:26</span><br><span class="line">The time is 15:58:26</span><br><span class="line">The time is 3:58 PM</span><br><span class="line">The time is 3:58:26 PM CET</span><br><span class="line">The time is 3:58 PM</span><br><span class="line">The time is 3:58:26 PM CET</span><br><span class="line">The time is 3:58 PM</span><br><span class="line">The time is 3:58 PM</span><br></pre></td></tr></table></figure><h4 id="自定义时间格式">自定义时间格式</h4><p><img src="https://imgs.codewoody.com/uploads/big/cd840ad4822bc2779c19877df931bcf5.png"></p><h3 id="其他工具函数">其他工具函数</h3><ul><li><code>daysOfWeek()</code>: 周几，1表示周一，7表示周日；</li><li><code>daysInMonth()</code>: 在月中的第几天；</li><li><code>daysInYear():</code>: 在年中的第几天；</li><li><code>isValid()</code>: 验证日期是否有效；</li><li><code>daysTo()</code>，<code>daysFrom</code>：计算日期的间距；</li></ul><h3 id="qdatetime类"><code>QDateTime</code>类</h3><p><code>QDateTime</code>类是日期和时间的组合，其接口也非常类似。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我参考&lt;a href=&quot;http://zetcode.com/gui/qt5/introduction/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://zetcode.com/gui/qt5/introduction/&lt;/a&gt;这个链接入坑，使用macOS。网上看起来是Windows和Linux的教程居多，这个链接里的教程初看起来应该也是基于Linux的。谁让Mac的市场占有率低呢。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://www.codewoody.com/tags/C/"/>
    
      <category term="Qt" scheme="http://www.codewoody.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks 完全手册</title>
    <link href="http://www.codewoody.com/posts/36409/"/>
    <id>http://www.codewoody.com/posts/36409/</id>
    <published>2019-09-16T05:07:02.000Z</published>
    <updated>2019-09-16T05:49:01.289Z</updated>
    
    <content type="html"><![CDATA[<p>目前我的博客里面还是Shadowsocks相关的文章看的人最多，所以我这里干脆汇总整理一下。</p><h2 id="什么是shadowsocks">什么是Shadowsocks</h2><p>Shadowsocks 据传早期是由一名知乎员工(clowwwindy)开发，从一开始就是不属于任何公司的开源软件。不过在Shadowsocks广为流行之后，这名员工被有关部门请去喝茶，其本人Github名下的Shadowsocks代码仓库也被清空，只留下内容为「Removed due to regulations」。不过 Shadowsocks 的代码被很多人Fork，所以Shadowsocks的活力并未受到影响。</p><p>后来Shadowsocks又被开发者（breakwa11）发展成ShadowsocksR，加了很多加密、流量混淆插件，比原版更安全、更稳定、更快速。不过这名作者随后被人肉，代码被迫删除。</p><p>Shadowsocks 为一种<strong>代理</strong>软件。对于软件工程不熟悉的人，通常会混淆<strong>代理</strong>与<strong>VPN</strong>二者的概念，网络上有很多文章来讲解这二者的区别。按照「<a href="https://www.howtogeek.com/247190/whats-the-difference-between-a-vpn-and-a-proxy/" target="_blank" rel="noopener">What’s the Difference Between a VPN and a Proxy?</a>」这篇文章的说法，代理的作用为隐藏你的真实IP，让你以服务器的IP的身份来访问站点。不过代理的链接并不一定保证加密。另外，代理的实现层级比较高，一般的应用程序需要主动连接代理才会进行访问。而VPN的核心特点链接加密。且VPN的实现层级比较低，可以全局起效果。</p><h2 id="shadowsocks部署">Shadowsocks部署</h2><h3 id="海外服务器">海外服务器</h3><p>任何翻墙技术的本质都是将网络流量发送给一台位于中国大陆防火墙之外的服务器，由服务器访问目标网站再把响应数据发送给客户端。因此，一台海外服务器是必须的。目前云计算技术成熟，租赁一台海外的虚拟服务器的唯一困难，基本就是你需要一张VISA信用卡来支付美元。没有VISA，PayPal应该也是可以的，PayPal可以绑定借记卡。</p><p>有非常多的厂商提供虚拟服务器租赁服务，这个可以按照价格和服务器的地理位置，根据自己的需要选择。我自己选择的是DigitalOcean位于洛杉矶的机房。Ping的延时大概在200ms以内。另外还需要补充的是，对于校园网用户，国内的校园网大多支持Ipv6且Ipv6部分的流量是不计费的。因此在租赁服务器时选择支持Ipv6的机器就非常重要了。</p><p>Shadowsocks服务对于服务器的性能要求不高，因此一般选择最便宜的一档就可以了，例如DigitalOcean最便宜的一档是1GB内存，单核CPU，25GB SSD磁盘，1 TB流量，价格5美元/月，并且支持Ipv6。</p><h3 id="shadowsocks服务端安装">Shadowsocks服务端安装</h3><p>Shadowsocks 发展到今日已经是相当成熟的大众产品了，有众多安装方法可供选择。这里我选择了<a href="https://teddysun.com/" target="_blank" rel="noopener">teddysun</a>开发的一键安装脚本系列。</p><blockquote><p>teddysun 的脚本在广为流行之后，也开始面临了当局的压力，放弃了更新，并且删除了教程文章。Shadowsocks发展到今天，真是有很多人付出心血的结果。</p></blockquote><p>teddysun本人的Github项目仓库的代码在master分支上还有保留，故方便使用。</p><p>一般情况下，我们使用<code>shadowsocks-all.sh</code>脚本就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前我的博客里面还是Shadowsocks相关的文章看的人最多，所以我这里干脆汇总整理一下。&lt;/p&gt;
&lt;h2 id=&quot;什么是shadowsocks&quot;&gt;什么是Shadowsocks&lt;/h2&gt;
&lt;p&gt;Shadowsocks 据传早期是由一名知乎员工(clowwwindy)开发，
      
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Shadowsocks" scheme="http://www.codewoody.com/tags/Shadowsocks/"/>
    
  </entry>
  
</feed>
