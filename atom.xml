<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>治部少辅</title>
  
  <subtitle>大一大万大吉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.codewoody.com/"/>
  <updated>2018-11-30T07:27:56.974Z</updated>
  <id>http://www.codewoody.com/</id>
  
  <author>
    <name>Woody Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于无神论者的笑话两则</title>
    <link href="http://www.codewoody.com/posts/39480/"/>
    <id>http://www.codewoody.com/posts/39480/</id>
    <published>2018-11-29T06:37:50.000Z</published>
    <updated>2018-11-30T07:27:56.974Z</updated>
    
    <content type="html"><![CDATA[</p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>一个坚定的无神论者去世了，突然发现自己在一个昏暗的过道里。过道里有一个牌子，上写“通向地狱”。没办法，那就进地狱吧。他开门进去，几乎不敢相信自己的眼睛：阳光明媚，暖风宜人，白沙滩，棕榈树，每一百米一个酒吧，到处都是欢快的人们。他沿着沙滩漫步，突然发现一个长着马脚和尾巴的家伙坐在一个沙滩躺椅里。他走上前去问，你是魔鬼吗？魔鬼回答说是，并热烈欢迎新人到地狱。不久，想了解一下地狱的无神论者，两个沙包之间看到一个很大很深的坑，便好奇地往里看，结果吓坏了：坑底烧着熊熊大火，到处是哭天喊地的人，撒了疯的怪物披头盖脸地往人身上打。 无神论者疑惑地跑回魔鬼身边，痛心地问：后边沙包那里那个坑是怎么回事？魔鬼说：噢，他们哪，都是基督徒。他们非要这样，我也没什么办法……</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>一个忠诚的共产党员死了，上帝不愿意在天堂接受无神论者的灵魂，于是把他送到地狱。一个月后，魔鬼大汗淋漓跑来说“你赶紧把那人带走吧，他差不多把我所有小鬼都发展成了少先队员！” 上帝就接受了。</p><p>又过了一月，魔鬼幸灾乐祸地问上帝“那共产党员怎样了？”上帝说：“首先请叫我同志”</p><hr><p>非常惭愧，只讲了两个微小的笑话，谢谢大家</p><p>来源：<a href="https://www.zhihu.com/question/27030419/answer/121040045" target="_blank" rel="noopener">https://www.zhihu.com/question/27030419/answer/121040045</a></p><p>文章链接 <a href="http://www.codewoody.com/posts/39480/">http://www.codewoody.com/posts/39480/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/1cdc9cba5755c5d3658d280a46b7f01a.png&quot; alt=&quot;cover&quot;&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.codewoody.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="宗教" scheme="http://www.codewoody.com/tags/%E5%AE%97%E6%95%99/"/>
    
  </entry>
  
  <entry>
    <title>酵素</title>
    <link href="http://www.codewoody.com/posts/25658/"/>
    <id>http://www.codewoody.com/posts/25658/</id>
    <published>2018-11-22T04:08:40.000Z</published>
    <updated>2018-11-22T04:11:01.298Z</updated>
    
    <content type="html"><![CDATA[<p>今天在朋友们的群里又看到有朋友在谈论吃酵素的事情。这让我想到了2017年二月，我去东京交流访问，参观了日本最大的酵素生产商之一：<a href="https://ssl.nakahara2001.co.jp" target="_blank" rel="noopener">中原株式会社</a>。有意思的是，这家公司虽然是日本的公司，却是中国人创立的。之所以公司的名字叫做中原，是因为创始人是郑州人。当时接待我们的人中，有一个负责做产品研发的生物博士，筑波大学毕业，也是中国人。他带我们参观了公司总部顶楼的一个小型的检测间。有一个随行的朋友很实诚地问道：“酵素这个东西到底有没有用。”那名生物学博士倒也没直接回答，而是笑着说：”大家都是学工科的，都懂“。<a id="more"></a></p><p>酵素这个东西，其实就是酶的另一种说法。吃酵素的风气，也是从日本舶来的。不过在日本那边，酵素是作为”保健食品的“，因此，在酵素包装上面，是不能声称任何疗效的。日本的酵素从业者，不得不利用各种渠道在宣传刊物上宣传酵素成分的一些益处（还不能直接说产品），然后在包装上注明这些成分，以此来吸引消费者购买。不过在中国，法规不是这么健全，因此中国的酵素商家，宣传起酵素功效来，宛如过去街头卖大力丸一般，怎么牛逼怎么来。</p><p><img src="https://imgs.codewoody.com/uploads/big/f25d396eef1857959956a7772a3c52b7.jpg" alt="某厂商的酵素宣传"></p><p>其实，酵素就是酶，也就是蛋白质，进入到肠胃，也都被分解成氨基酸，和鸡蛋，肉类无异。故，吃酵素还不如吃鸡蛋，同等营养的情况下，鸡蛋更便宜。</p><p>文章链接 <a href="http://www.codewoody.com/posts/25658/">http://www.codewoody.com/posts/25658/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在朋友们的群里又看到有朋友在谈论吃酵素的事情。这让我想到了2017年二月，我去东京交流访问，参观了日本最大的酵素生产商之一：&lt;a href=&quot;https://ssl.nakahara2001.co.jp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中原株式会社&lt;/a&gt;。有意思的是，这家公司虽然是日本的公司，却是中国人创立的。之所以公司的名字叫做中原，是因为创始人是郑州人。当时接待我们的人中，有一个负责做产品研发的生物博士，筑波大学毕业，也是中国人。他带我们参观了公司总部顶楼的一个小型的检测间。有一个随行的朋友很实诚地问道：“酵素这个东西到底有没有用。”那名生物学博士倒也没直接回答，而是笑着说：”大家都是学工科的，都懂“。
    
    </summary>
    
      <category term="杂谈" scheme="http://www.codewoody.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.codewoody.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="智商税" scheme="http://www.codewoody.com/tags/%E6%99%BA%E5%95%86%E7%A8%8E/"/>
    
  </entry>
  
  <entry>
    <title>macOS绕过SIP安全机制限制的一种办法</title>
    <link href="http://www.codewoody.com/posts/36948/"/>
    <id>http://www.codewoody.com/posts/36948/</id>
    <published>2018-11-21T06:08:18.000Z</published>
    <updated>2018-11-22T03:42:27.376Z</updated>
    
    <content type="html"><![CDATA[<br><a href="https://support.apple.com/en-us/HT204899" target="_blank" rel="noopener">SIP(System Security Protection)</a>是苹果在OSX EI Capitan及其后版本的操作系统中引入了一种新的安全机制。望文生义就可以看出，这个安全机制是用来维持系统的完整性，保护系统免收恶意软件的篡改。具体来说，SIP限制了root账户的权限范围，限制了root用户在对一些系统保护目录即其中文件的操作能力。</p><p>SIP的保护范围包括下列路径：</p><ul><li>/System</li><li>/usr</li><li>/bin</li><li>/sbin</li><li>OSX的预装应用</li></ul><p>第三方应用可以继续操作的目录包括：</p><ul><li>/Applications</li><li>/Library</li><li>/usr/local</li></ul><p>但是<strong>任何对于安全性加强都意味着对灵活性的削弱</strong>。例如，在SIP保护下，类似<a href="https://github.com/rofl0r/proxychains-ng" target="_blank" rel="noopener">proxychains-ng</a>的程序无法再给受保护的目录下的程序添加网络钩子(hook)。</p><blockquote><p>proxychains ng (new generation) - a preloader which hooks calls to sockets in dynamically linked programs and redirects it through one or more socks/http proxies.</p></blockquote><p>一般来说，很多解决方案都建议关闭SIP功能（例如proxychains-ng的issue中给出的方法：<a href="https://github.com/rofl0r/proxychains-ng/issues/78" target="_blank" rel="noopener"># issue78</a>）。不过这样也意味着丧失了SIP提供的保护功能。<a href="https://www.tcdw.net/post/proxychains-with-sip/" target="_blank" rel="noopener">这篇文章</a>给出了一个妥协的做法。在保留SIP的保护的同时，为保护目录下的程序应用proxychains-ng（其他类似的应用场景也可以使用这个办法）。这个解决方案的思路其实很简单：既然保护目录下的程序我们不能动，那么我们把保护目录下的程序复制一份到其他目录下运行就可以。</p><p>首先创建一个新的文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.unprotected_apps</span><br></pre></td></tr></table></figure><p>然后将这个路径添加到<code>PATH</code>环境变量的头部：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以添加到shell的配置文件中，如~/.bashrc或者~/.zshrc</span></span><br><span class="line">export PATH="~/.unprotected_apps:$PATH"</span><br></pre></td></tr></table></figure><p>然后将需要添加钩子的应用复制到这个目录下就可以了，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp $(which ssh) ~/usr/bin/ssh</span><br><span class="line">cp $(which curl) ~/usr/bin/curl</span><br></pre></td></tr></table></figure><p>文章链接 <a href="http://www.codewoody.com/posts/36948/">http://www.codewoody.com/posts/36948/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT204899&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SIP(System Security Protection)&lt;/a&gt;是苹果在OSX EI Capitan及其后版本的操作系统中引入了一种新的安全机制。望文生义就可以看出，这个安全机制是用来维持系统的完整性，保护系统免收恶意软件的篡改。具体来说，SIP限制了root账户的权限范围，限制了root用户在对一些系统保护目录即其中文件的操作能力。但是&lt;strong&gt;任何对于安全性加强都意味着对灵活性的削弱&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="macOS" scheme="http://www.codewoody.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks上手配置</title>
    <link href="http://www.codewoody.com/posts/37347/"/>
    <id>http://www.codewoody.com/posts/37347/</id>
    <published>2018-11-20T08:00:57.000Z</published>
    <updated>2018-11-20T08:11:03.595Z</updated>
    
    <content type="html"><![CDATA[<p>Shadowsocks配置的一个非常便利之处在于，Shadowsocks支持将配置信息导出成二维码再在其他机器上导入。这节约了很多沟通成本。所以在开始这篇教程之前，你需要有一个Shadowsocks的配置信息。可以是具体参数，或者是一个配置二维码。<a id="more"></a></p><h2 id="1-客户端准备"><a href="#1-客户端准备" class="headerlink" title="1. 客户端准备"></a>1. 客户端准备</h2><p>Shadowsocks提供了绝大多数平台的客户端支持，甚至包括智能路由器。我们这里介绍最为常见桌面端的平台上的配置。 这里我提供了mac和win这两个主要平台截止到目前为止最新版本的客户端下载：</p><ol><li>macOS客户端<a target="_blank" href="https://static.codewoody.com/default/ShadowsocksX-NG.app.1.8.2.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=woodyhuang%2F20181130%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181130T072805Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Signature=18c6c3ec8d8b850f4173a8cc07a2b2ab1729e5fa5ea354b0ae3e10d8eedd0fd2">下载</a>;2. win客户端<a target="_blank" href="https://static.codewoody.com/default/Shadowsocks-4.1.2.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=woodyhuang%2F20181130%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181130T072806Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Signature=8161a40845f1cee285a394a96feeb20a01c8777e6734e0bd71c26621935a1ba6">下载</a>;</li></ol><p>其中，mac文件下载下来解压缩后，直接拖拽进入<code>Application</code>文件夹（应用文件夹），然后双击打开使用就可以了。win端的文件解压缩后是一个可以直接运行的绿色版（不需要安装）。将解压缩文件移动到一个稳妥的位置，然后双击打开<code>Shadowsocks.exe</code>文件就可以了（此时右下角会出现一个小飞机图标）</p><blockquote><p>更加丰富的客户端下载：<a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">https://shadowsocks.org/en/download/clients.html</a></p></blockquote><h2 id="2-导入配置"><a href="#2-导入配置" class="headerlink" title="2. 导入配置"></a>2. 导入配置</h2><p>写这篇文章的时候我使用的是mac，因此后面的配置方法过程都以mac为例。mac和win上客户端的使用都是相通的。不同的是小飞机图标在mac中位于顶部，而在win中位于底部。</p><p><img src="https://imgs.codewoody.com/uploads/big/4a786c9b2480fd09923f5a591e5ce51a.png" alt="ShadowsocksX-NG右键菜单截图"></p><p>右键点击小飞机图标可以看到如上图所示的菜单。其中</p><ol><li><p>第一个section中，负责控制Shadowsock的开启和关闭，我这里显示的是已经开启了Shadowsocks，如果你的客户端代理还没有启动，点击一下”打开 Shadowsocks”</p></li><li><p>第二个section中，可以设置Shadowsocks的代理模式。其中PAC模式是最为常用模式。在这种模式下，Shadowsocks会根据一张预先订好的表，来判断你当前访问的网址是否被墙了。如果是就会通过代理访问这个网站，否则照常直接连接网站就可以了。与之相对的，全局模式是让所有的网站都通过代理进行访问。</p></li><li><p>第三个section中，可以进行服务器的配置。</p><ol><li><p>如果你是使用二维码进行配置，那么，将二维码用预览打开，确保这个预览窗口位于最上层可见，然后点击菜单中的“扫描屏幕上的二维码”就可以导入服务器配置了。</p></li><li><p>如果你是使用详细配置信息进行配置，那么需要进入服务器 -&gt; 服务器设置，手动填写各个参数进行添加。</p></li></ol></li><li><p>第四个section是用来配置本地代理和PAC的，对于这部分的详细讨论超出了这篇文章的范畴，我们会在后续的文章中进行讨论。</p></li></ol><h2 id="3-手机端配置"><a href="#3-手机端配置" class="headerlink" title="3. 手机端配置"></a>3. 手机端配置</h2><p>由于政策原因，手机端APP，尤其是iOS的手机端APP的审查情况非常严重，基本上很少有APP能够长期屹立不倒。因此手机端APP的选择要实时来看。我自己使用的SuperWingy这个应用已经下架了（不过从已购里面还是可以下载的）。因此，大家发现还有什么可以用的手机端应用，就更新在评论里把。</p><p>文章链接 <a href="http://www.codewoody.com/posts/37347/">http://www.codewoody.com/posts/37347/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Shadowsocks配置的一个非常便利之处在于，Shadowsocks支持将配置信息导出成二维码再在其他机器上导入。这节约了很多沟通成本。所以在开始这篇教程之前，你需要有一个Shadowsocks的配置信息。可以是具体参数，或者是一个配置二维码。
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Shadowsocks" scheme="http://www.codewoody.com/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>开源对象存储服务(OSS) Minio 及其在Hexo中的使用</title>
    <link href="http://www.codewoody.com/posts/5440/"/>
    <id>http://www.codewoody.com/posts/5440/</id>
    <published>2018-11-16T09:33:40.000Z</published>
    <updated>2018-11-16T09:42:37.748Z</updated>
    
    <content type="html"><![CDATA[<p>研究对象存储服务(OSS)是因为考虑到将来可能会有在博客上放出一些可供分享的文件下载的服务需求，直接使用<a href="/posts/65048/">现有图床</a>，容易混杂乱。因此我考虑重新建立一个独立OSS存储服务。直接Google搜到了<a href="https://github.com/minio/minio" target="_blank" rel="noopener">Minio</a>这个框架，10k+的Star，就决定选择这个了。Minio框架有如下几个优势：</p><ul><li>可以Docker部署，非常省事</li><li>文档完善</li><li>全面的平台支持</li><li>多种客户端语言支持（有完善的JS SDK）<a id="more"></a><h2 id="1-Minio部署"><a href="#1-Minio部署" class="headerlink" title="1. Minio部署"></a>1. Minio部署</h2></li></ul><p>使用Docker部署可以说是非常方便省事了。我的部署命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker create -p 9000:9000 \</span><br><span class="line">-e <span class="string">"MINIO_ACCESS_KEY=your-access-key"</span> \</span><br><span class="line">-e <span class="string">"MINIO_SECRET_KEY=your-secret-key"</span> \</span><br><span class="line">--name=minio \</span><br><span class="line">-v /path/to/minio/data:/data \</span><br><span class="line">-v /path/to/minio/config:/root/.minio \</span><br><span class="line">minio/minio server /data</span><br></pre></td></tr></table></figure><p>其中的访问秘钥对需要替换成你自己设置的值。这一对值稍后会用于网页端的登录。然后用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container start minio</span><br></pre></td></tr></table></figure><p>来启动镜像。完成后就可以在<a href="http://domain.com:9000" target="_blank" rel="noopener">http://domain.com:9000</a>中访问到了，输入docker命令中的秘钥对来登录。</p><p><img src="https://imgs.codewoody.com/uploads/big/fa25ef81a937d5b26195632cf8aff37a.png" alt="登录界面"></p><p>而后你可以按照<a href="/posts/65048/">Lychee图床教程</a>中的做法，添加Nginx反向代理和HTTPS支持。</p><h2 id="2-Hexo中使用"><a href="#2-Hexo中使用" class="headerlink" title="2. Hexo中使用"></a>2. Hexo中使用</h2><p>部署完成后我才发现一个问题，那就是Minio生成的外链是强制有过期时间的，而且长度最多只七天。那我就不能像直接复制粘贴外链来使用了，同时，手动来每七天更新一次链接也是不可接受的。因此用Hexo脚本来自动实现了利用Minio的API接口来更新下载链接。脚本内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Minio = <span class="built_in">require</span>(<span class="string">'minio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hexo = hexo || &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> fs = fs || <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> yaml = yaml || <span class="built_in">require</span>(<span class="string">'js-yaml'</span>);</span><br><span class="line"><span class="keyword">var</span> minio_client  = minio_client || </span><br><span class="line">    <span class="keyword">new</span> Minio.Client(yaml.safeLoad(fs.readFileSync(__dirname + <span class="string">"/minio_key.yml"</span>, <span class="string">'utf8'</span>)));</span><br><span class="line"></span><br><span class="line">hexo.extend.tag.register(<span class="string">'minio'</span>, <span class="keyword">async</span> (args, content) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> </span><br><span class="line">        bucket = <span class="string">'default'</span>,</span><br><span class="line">        resource_name = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (args.length == <span class="number">1</span>) &#123;</span><br><span class="line">        resource_name = args[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resource_name = args[<span class="number">1</span>];</span><br><span class="line">        bucket = args[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> file_url = <span class="keyword">await</span> minio_client.presignedGetObject(bucket, resource_name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;a target="_blank" href="<span class="subst">$&#123;file_url&#125;</span>"&gt;<span class="subst">$&#123;content&#125;</span>&lt;/a&gt;`</span>;</span><br><span class="line">&#125;, &#123;<span class="attr">async</span>: <span class="literal">true</span>, <span class="attr">ends</span>:<span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><p>在博客工程的根目录下创建一个文件夹<code>scripts</code>,在其中创建一个js文件，如<code>index.js</code>，然后将上述脚本内容粘贴进去。然后在这个目录下创建设置文件，<code>minio_key.yml</code>，文件中需要包含如下信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">endPoint:</span> <span class="string">'minio.domain.com'</span></span><br><span class="line"><span class="attr">accessKey:</span> <span class="string">'your-access-key'</span></span><br><span class="line"><span class="attr">secretKey:</span> <span class="string">'your-secret-key'</span></span><br><span class="line"><span class="attr">useSSL:</span> <span class="literal">true</span>    <span class="comment"># 是否使用https</span></span><br></pre></td></tr></table></figure><p>然后还需要安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save minio</span><br></pre></td></tr></table></figure><p>至此我们完成了脚本的安装。脚本为我们提供了一个<a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">标签插件</a>，其使用范例如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% minio 'bucket<span class="emphasis">_name' 'resource_</span>name' %&#125;</span><br><span class="line">下载链接</span><br><span class="line">&#123;% endminio %&#125;</span><br></pre></td></tr></table></figure><p>在使用Hexo进行静态页面渲染时，这部分内容会被自动渲染成下载链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a target=&quot;_blank&quot; href=&quot;download_url&quot;&gt;下载链接&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>不过这种方法还是有一个显而易见的缺点：你需要是一个非常勤奋的作者，每周都来发布一次文章，不然旧文章的链接还是会失效。</p><p>文章链接 <a href="http://www.codewoody.com/posts/5440/">http://www.codewoody.com/posts/5440/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;研究对象存储服务(OSS)是因为考虑到将来可能会有在博客上放出一些可供分享的文件下载的服务需求，直接使用&lt;a href=&quot;/posts/65048/&quot;&gt;现有图床&lt;/a&gt;，容易混杂乱。因此我考虑重新建立一个独立OSS存储服务。直接Google搜到了&lt;a href=&quot;https://github.com/minio/minio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Minio&lt;/a&gt;这个框架，10k+的Star，就决定选择这个了。Minio框架有如下几个优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以Docker部署，非常省事&lt;/li&gt;
&lt;li&gt;文档完善&lt;/li&gt;
&lt;li&gt;全面的平台支持&lt;/li&gt;
&lt;li&gt;多种客户端语言支持（有完善的JS SDK）
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Hexo" scheme="http://www.codewoody.com/tags/Hexo/"/>
    
      <category term="Minio" scheme="http://www.codewoody.com/tags/Minio/"/>
    
      <category term="OSS" scheme="http://www.codewoody.com/tags/OSS/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks持续优化</title>
    <link href="http://www.codewoody.com/posts/35429/"/>
    <id>http://www.codewoody.com/posts/35429/</id>
    <published>2018-11-16T06:39:01.000Z</published>
    <updated>2018-11-16T06:39:09.344Z</updated>
    
    <content type="html"><![CDATA[</p><h2 id="Fast-TCP开启"><a href="#Fast-TCP开启" class="headerlink" title="Fast TCP开启"></a>Fast TCP开启</h2><p>如果双端都支持FastTCP，那么可以通过开启FastTCP来降低延时。服务端设置方法有两种，要门在<code>config.json</code>中添加<code>fast_open</code>为<code>true</code>，要么在执行<code>ssserver</code>带上<code>--fast-open</code>。然后在命令行中运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 3 &gt; /proc/sys/net/ipv4/tcp_fastopen</span><br></pre></td></tr></table></figure><h2 id="进一步优化"><a href="#进一步优化" class="headerlink" title="进一步优化"></a>进一步优化</h2><p>这个优化方法适合所有的shadowsocks版本，具体方法如下。创建文件<code>/etc/sysctl.d/local.conf</code>，并在文件中添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># max open files</span></span><br><span class="line">fs.file-max = 51200</span><br><span class="line"><span class="comment"># max read buffer</span></span><br><span class="line">net.core.rmem_max = 67108864</span><br><span class="line"><span class="comment"># max write buffer</span></span><br><span class="line">net.core.wmem_max = 67108864</span><br><span class="line"><span class="comment"># default read buffer</span></span><br><span class="line">net.core.rmem_default = 65536</span><br><span class="line"><span class="comment"># default write buffer</span></span><br><span class="line">net.core.wmem_default = 65536</span><br><span class="line"><span class="comment"># max processor input queue</span></span><br><span class="line">net.core.netdev_max_backlog = 4096</span><br><span class="line"><span class="comment"># max backlog</span></span><br><span class="line">net.core.somaxconn = 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># resist SYN flood attacks</span></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"><span class="comment"># reuse timewait sockets when safe</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line"><span class="comment"># turn off fast timewait sockets recycling</span></span><br><span class="line">net.ipv4.tcp_tw_recycle = 0</span><br><span class="line"><span class="comment"># short FIN timeout</span></span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"><span class="comment"># short keepalive time</span></span><br><span class="line">net.ipv4.tcp_keepalive_time = 1200</span><br><span class="line"><span class="comment"># outbound port range</span></span><br><span class="line">net.ipv4.ip_local_port_range = 10000 65000</span><br><span class="line"><span class="comment"># max SYN backlog</span></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 4096</span><br><span class="line"><span class="comment"># max timewait sockets held by system simultaneously</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line"><span class="comment"># turn on TCP Fast Open on both client and server side</span></span><br><span class="line">net.ipv4.tcp_fastopen = 3</span><br><span class="line"><span class="comment"># TCP receive buffer</span></span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 67108864</span><br><span class="line"><span class="comment"># TCP write buffer</span></span><br><span class="line">net.ipv4.tcp_wmem = 4096 65536 67108864</span><br><span class="line"><span class="comment"># turn on path MTU discovery</span></span><br><span class="line">net.ipv4.tcp_mtu_probing = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># for high-latency network</span></span><br><span class="line">net.ipv4.tcp_congestion_control = hybla</span><br><span class="line"></span><br><span class="line"><span class="comment"># for low-latency network, use cubic instead</span></span><br><span class="line"><span class="comment"># net.ipv4.tcp_congestion_control = cubic</span></span><br></pre></td></tr></table></figure><p>然后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><p>应用上述设置。最后在启动脚本中，于<code>ssserver</code>前添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">ulimit</span> -n 51200</span><br></pre></td></tr></table></figure><p>这个设置方法，会消耗比较多的内存，但是会换来速度的大幅上升。</p><p>文章链接 <a href="http://www.codewoody.com/posts/35429/">http://www.codewoody.com/posts/35429/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇教程提供了优化Shadowsocks性能的一些方法。
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Shadowsocks" scheme="http://www.codewoody.com/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks：多用户账号独立，并限制用户连接数</title>
    <link href="http://www.codewoody.com/posts/7835/"/>
    <id>http://www.codewoody.com/posts/7835/</id>
    <published>2018-11-13T08:50:23.000Z</published>
    <updated>2018-11-13T14:27:05.898Z</updated>
    
    <content type="html"><![CDATA[<p>自己搭建了一个SS服务器以后，自然而然的会同身边的朋友共享。自然，身边的朋友一起用，大部分服务器配置都可以毫无压力的支撑。但倘若一传十十传百，最后成百上千的人一起用一个服务器，那就撑不住了。<br>当然你可以隔一段时间换一次密码，但是后面的麻烦事也不少（要同步更新不同设备上的设置，身边的朋友来问你新设置）。<br>几天我研究了一下，为ss服务器增加了多用户即为每个用户设置独立的连接数限制的方法，这样能够比较完美的解决同朋友共享服务器的问题了。<br><a id="more"></a></p><p>这里默认你已经知道怎么按照通常的方法安装和配置SS了。如果你不了解的话，网络上的文章很多的。</p><h2 id="1-多用户的实现"><a href="#1-多用户的实现" class="headerlink" title="1. 多用户的实现"></a>1. 多用户的实现</h2><p>多用户的实现比较简单，Python和Go实现的服务器自带多用户支持。通常的配置我们一般是这么写<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>: <span class="string">"::"</span>,</span><br><span class="line">  <span class="attr">"server_port"</span>: <span class="string">"8888"</span>,</span><br><span class="line">  <span class="attr">"password"</span>: <span class="string">"yourpassword"</span></span><br><span class="line">  // Other configs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只需要将配置文件按照下面的方式进行修改就可以实现多用户了。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>: <span class="string">"::"</span>,</span><br><span class="line">  <span class="attr">"port_password"</span>: &#123;</span><br><span class="line">    <span class="attr">"8881"</span>: <span class="string">"password1"</span>,</span><br><span class="line">    <span class="attr">"8882"</span>: <span class="string">"password2"</span>,</span><br><span class="line">    <span class="attr">"8883"</span>: <span class="string">"password3"</span></span><br><span class="line">  &#125;</span><br><span class="line">  // other configs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就可以了。之后不同的用户可以通过不同的端口访问，而每个端口都有独立的密码。</p><blockquote><p>Further Reading: <a href="https://github.com/shadowsocks/shadowsocks/wiki/Configure-Multiple-Users" target="_blank" rel="noopener">Reference</a></p></blockquote><h2 id="2-限制用户连接"><a href="#2-限制用户连接" class="headerlink" title="2. 限制用户连接"></a>2. 限制用户连接</h2><p>我在网上调查了一下实现限制用户连接的方法，很多都提到了通过<code>iptables</code>来进行设置。但是这种方法太过复杂，很容易出问题。后来我找到一个ss的补丁，可以比较好的解决这个问题。补丁地址是<a href="https://github.com/falseen/PySocket" target="_blank" rel="noopener">falssen/PySocket</a>。<br>这个工程提供了一些其他的功能，但是我们这里只关注<code>Limit_Clients</code>文件夹下的<code>socket.py</code>这个文件。这个文件的原理是利用Python包导入的机制，用自定义的<code>socket.py</code>来替换默认的<code>socket</code>包，并在<code>socket</code>接口中植入一些新的功能。<br><del>按照<code>READMe.md</code>的提示安装好<code>socket.py</code>文件</del></p><blockquote><p>有很多朋友不知道这里要怎么处理socket.py文件。其实并不复杂。用<code>which</code>命令查看一下ss脚本安装的位置，一般情况下是<code>/usr/local/bin/</code>，那么你只需要把<code>socket.py</code>文件放到<code>/usr/local/bin</code>下面就行。这一操作的原理是，python在导入包时总是先检查当前目录。注意，如果修改了<code>socket.py</code>文件，需要重启进程才能生效。</p></blockquote><p>然后修改文件中<code>white_list</code>和<code>black_list</code>两个变量。例如我自己使用的<code>1017</code>端口，我不希望添加限制，则将<code>white_list</code>设置为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">white_list = [<span class="number">1017</span>]</span><br></pre></td></tr></table></figure></p><p>我给朋友们用的是[1018]端口，我希望这个端口的连接数不要超过40个，则将<code>black_list</code>设置为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">black_list = &#123;<span class="number">1018</span>:<span class="number">40</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-注意"><a href="#3-注意" class="headerlink" title="3. 注意"></a>3. 注意</h2><p>注意方法的实质是限制接入的客户端IP数量，因此，处在同一路由器下面的多台设备也会被识别为一台。</p><p>文章链接 <a href="http://www.codewoody.com/posts/7835/">http://www.codewoody.com/posts/7835/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己搭建了一个SS服务器以后，自然而然的会同身边的朋友共享。自然，身边的朋友一起用，大部分服务器配置都可以毫无压力的支撑。但倘若一传十十传百，最后成百上千的人一起用一个服务器，那就撑不住了。&lt;br&gt;当然你可以隔一段时间换一次密码，但是后面的麻烦事也不少（要同步更新不同设备上的设置，身边的朋友来问你新设置）。&lt;br&gt;几天我研究了一下，为ss服务器增加了多用户即为每个用户设置独立的连接数限制的方法，这样能够比较完美的解决同朋友共享服务器的问题了。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Shadowsocks" scheme="http://www.codewoody.com/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>自建图床: Lychee</title>
    <link href="http://www.codewoody.com/posts/65048/"/>
    <id>http://www.codewoody.com/posts/65048/</id>
    <published>2018-11-13T07:07:47.000Z</published>
    <updated>2018-11-13T10:37:32.730Z</updated>
    
    <content type="html"><![CDATA[<br>之前用的图床sm.ms的图片突然挂了。不知道为何，图片还是能够上传，但是访问图片的链接会出<code>ERR_SPDY_PROTOCOL_ERROR</code>的错误。</p><p><img src="https://imgs.codewoody.com/uploads/big/16c748b80a481535efeb2d271e14e4dd.png" alt="ERR_SPDY_PROTOCOL_ERROR错误示意图"></p><p>正好我自己的翻墙服务器的硬盘长期富余。虽然只有十几个G，搭建一个自己图床还是够用的。更重要的是，Dogital Ocean的服务器的流量非常多（我买的$5的服务器的流量有一个T）。我选择的开源图床框架是<a href="https://github.com/electerious/Lychee" target="_blank" rel="noopener">Lychee</a>。这个框架支持Docker安装，可以省很多事情。</p><h2 id="1-Docker安装Lychee"><a href="#1-Docker安装Lychee" class="headerlink" title="1. Docker安装Lychee"></a>1. Docker安装Lychee</h2><p>常规的安装方法可以参考<a href="https://github.com/electerious/Lychee/blob/master/docs/Installation.md" target="_blank" rel="noopener">官方文档</a>。我这里只介绍Docker方式。如果你没有什么特别的需求，Docker方式应该是非常适合你的。</p><blockquote><p>注：这篇教程只是对于我的操作过程的一个记录，因此对于一些依赖环境的安装没有面面俱到。这些问题，都可以面向google进行解决。</p></blockquote><h3 id="1-1-Docker环境准备"><a href="#1-1-Docker环境准备" class="headerlink" title="1.1 Docker环境准备"></a>1.1 Docker环境准备</h3><p>首先你要安装一个Docker环境。在Ubuntu上，安装非常简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install docker-io</span><br></pre></td></tr></table></figure><p>有时还需要将你当前用户加入到<code>docker</code>组中，这样每次执行<code>docker</code>命令不需要加<code>sudo</code>了。这个操作可能在安装过程中自动完成了，如果你发现<code>docker</code>命令执行时提示有权限相关的问题，可以运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo adduser user docker</span><br></pre></td></tr></table></figure><p>注意确保一下<code>docker-compose</code>也安装完毕了。我们需要通过<code>docker-compose</code>来将Lychee和数据库组装在一起。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose -v</span><br><span class="line">docker-compose version 1.17.1, build 6d101fb</span><br></pre></td></tr></table></figure><h3 id="1-2-安装Lychee"><a href="#1-2-安装Lychee" class="headerlink" title="1.2 安装Lychee"></a>1.2 安装Lychee</h3><p>首先创建好目录树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lychee</span><br><span class="line">|-- config</span><br><span class="line">|-- db</span><br><span class="line">|-- pictures</span><br><span class="line">|-- docker-compose.yml</span><br></pre></td></tr></table></figure><p>其中，<code>config</code>和<code>pictures</code>分别用来存储Lychee的设置和图片文件。<code>db</code>文件夹则是用于数据库，这三个文件夹需要你手动创建。<code>docker-compose.yml</code>文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  lychee:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">linuxserver/lychee</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - lychee-db:</span><span class="string">lychee-db</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/path/to/lychee/config:/config</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/path/to/lychee/pictures:/pictures</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8000</span><span class="string">:80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  lychee-db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mariadb:10</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/path/to/lychee/db:/var/lib/mysql</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_ROOT_PASSWORD=&lt;choose</span> <span class="string">root</span> <span class="string">password&gt;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_DATABASE=&lt;db</span> <span class="string">name&gt;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_USER=&lt;username&gt;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_PASSWORD=&lt;username&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>目前我没发现lychee的这个镜像支持用环境变量来配置数据库信息。所以上面对应的数据库信息后续需要在网页端手动输入。</p></blockquote><p>然后在这个文件夹下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure><p>然后访问<code>http://yourdoman.com:8000</code>就可以访问了。</p><h3 id="1-3-Lychee配置"><a href="#1-3-Lychee配置" class="headerlink" title="1.3 Lychee配置"></a>1.3 Lychee配置</h3><p>在访问上述网页之后，Lychee会提示我们输入数据库信息。</p><p><img src="https://imgs.codewoody.com/uploads/big/257d81510bc5d03dfac4948844222f46.png" alt="Lychee 配置"></p><p>注意这里的Database Host要填写<code>lychee-db</code>。其他的设置与上面的<code>docker-compose.yml</code>文件中的一致即可。</p><p>而后按照提示创建登录账户：</p><p><img src="https://imgs.codewoody.com/uploads/big/2ac1ded0feb822e54fad9838655f1bdb.png" alt="创建账户"></p><h2 id="2-Lychee-Advanced"><a href="#2-Lychee-Advanced" class="headerlink" title="2. Lychee Advanced"></a>2. Lychee Advanced</h2><h3 id="2-1-使用Nginx进行反向代理"><a href="#2-1-使用Nginx进行反向代理" class="headerlink" title="2.1 使用Nginx进行反向代理"></a>2.1 使用Nginx进行反向代理</h3><p>Nginx配置文件如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">server_name</span> imgs.codewoody.com;</span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">50M</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://localhost:8000;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-启用HTTPS"><a href="#2-2-启用HTTPS" class="headerlink" title="2.2 启用HTTPS"></a>2.2 启用HTTPS</h3><p>目前来看，<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s encrypt</a>仍然是个人建站启用HTTPS的不二之选。其使用教程可以说是非常简明了，具体参考<a href="https://certbot.eff.org/" target="_blank" rel="noopener">certbot</a>。</p><p>文章链接 <a href="http://www.codewoody.com/posts/65048/">http://www.codewoody.com/posts/65048/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://imgs.codewoody.com/uploads/big/4c50d020f4346ef8aab039fdd6c09527.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;Lychee is a free photo-management tool, which runs on your server or web-space. Installing is a matter of seconds. Upload, manage and share photos like from a native application. Lychee comes with everything you need and all your photos are stored securely.&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="折腾" scheme="http://www.codewoody.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>这个博客是如何建立起来的</title>
    <link href="http://www.codewoody.com/posts/53793/"/>
    <id>http://www.codewoody.com/posts/53793/</id>
    <published>2018-11-05T08:16:48.000Z</published>
    <updated>2018-11-13T08:42:10.894Z</updated>
    
    <content type="html"><![CDATA[<p>在博客问题上我可是折腾了很多回了，先是尝试了wordpress（来来回回很多次），不过wordpress使用起来，感觉还是太“重”，很多东西配置起来非常麻烦(包括主题设置，甚至是Markdown支持)。后来迁移到简书上面，被国家政策教做人(一篇关于Shadowsocks的文章被屏蔽了，有种吃苍蝇的感觉)。思前想后，还是自己host自己的博客好。<a id="more"></a>最终我是选择了Hexo + Github的方案，好处如下：</p><ol><li>对Markdown支持比较好</li><li>不需要自己折腾服务器</li><li>用Git管理非常方便</li></ol><p>在这篇文章里，我整理一下整个博客的搭建过程。</p><h2 id="1-Hexo-Setup"><a href="#1-Hexo-Setup" class="headerlink" title="1. Hexo Setup"></a>1. Hexo Setup</h2><p><a href="http://link.zhihu.com/?target=https://github.com/hexojs/hexo" target="_blank" rel="noopener">Hexo</a>是一款基于Node.js的<strong>静态</strong>博客框架，可以生成静态页面部署在Github和Heroku上面。Hexo的搭建过程如下：</p><ol><li>申请域名</li><li>创建Github仓库</li><li>安装Hexo及其依赖</li><li>绑定域名</li></ol><h3 id="1-1-申请域名"><a href="#1-1-申请域名" class="headerlink" title="1.1 申请域名"></a>1.1 申请域名</h3><p>虽然部署在Github上Github会提供一个免费的域名，但是如果有自己的独立域名的话，网站会更像”博客”一点。申请域名的地方有很多，我的域名是选用的阿里云的。传送门：<a href="http://link.zhihu.com/?target=https://www.aliyun.com/" target="_blank" rel="noopener">阿里云-为了无法计算的价值</a>。</p><h3 id="1-2-创建Github仓库"><a href="#1-2-创建Github仓库" class="headerlink" title="1.2 创建Github仓库"></a>1.2 创建Github仓库</h3><p>在Github中创建一个名字为username.github.io的仓库，注意这里的username需要替换为你自己的用户名。例如我的仓库名字为<a href="https://github.com/huangy10/huangy10.github.io" target="_blank" rel="noopener">huangy10.github.io</a>。</p><blockquote><p>你可以尝试在这个仓库中添加一个名为index.html的文件，在其中接入hello world。然后访问<a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> 就可以看到这个页面了。<br>不过注意尝试之后删除这个仓库重新创建。后面我们在部署Hexo的时候最好让这个仓库是空的。</p></blockquote><h3 id="1-3-安装Hexo及其依赖"><a href="#1-3-安装Hexo及其依赖" class="headerlink" title="1.3 安装Hexo及其依赖"></a>1.3 安装Hexo及其依赖</h3><h4 id="1-3-1-安装Git，并配置好SSH秘钥"><a href="#1-3-1-安装Git，并配置好SSH秘钥" class="headerlink" title="1.3.1 安装Git，并配置好SSH秘钥"></a>1.3.1 安装Git，并配置好SSH秘钥</h4><p>这里Github有全面的教程，传送门：<a href="https://try.github.io/" target="_blank" rel="noopener">https://try.github.io/</a></p><h4 id="1-3-2-安装Node-js"><a href="#1-3-2-安装Node-js" class="headerlink" title="1.3.2 安装Node.js"></a>1.3.2 安装Node.js</h4><p>Mac平台下面安装Node.js非常简单，可以通过<a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>进行安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><blockquote><p>如果没有安装Homebrew，可以在Terminal中输入下面这个命令快速安装：<br><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p></blockquote><p>安装完成后可以通过<code>node -v</code>来验证安装是否成功，并查看安装版本。进一步通<code>npm -v</code>来检查npm也正确安装了。</p><h4 id="1-3-3-安装Hexo"><a href="#1-3-3-安装Hexo" class="headerlink" title="1.3.3 安装Hexo"></a>1.3.3 安装Hexo</h4><p>使用npm来安装Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>完成安装以后，挑选一个合适的路径，然后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>这个命令会在当前文件夹中创建一个名为blog的文件夹。博客相关的文件都会存储在这个文件夹中。<code>cd</code>进入这个文件夹，然后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 在本地运行一个测试服务器来伺服静态文件</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后在浏览器中访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以访问自己的网站了。</p><p><img src="https://i.loli.net/2018/11/07/5be288ab96418.png" alt="博客初始页面"></p><p>我们来看一下Hexo博客项目下的目录结构：</p><p><img src="https://i.loli.net/2018/11/07/5be28a0345e4c.png" alt="Hexo目录结构"></p><p>其中比较重要的是：</p><ul><li><code>_config.yml</code>是整个项目的配置文件，<a href="https://zh.wikipedia.org/zh/YAML" target="_blank" rel="noopener">YAML格式</a>；</li><li><code>public</code>是发布的静态文件内容。注意这个文件会在<code>hexo g</code>命令后重新生成，其中内容会被重置；</li><li><code>source</code>是工程源文件，其中的<code>_posts</code>文件夹存储了博文的Markdown文件。其中的其他文件，则会在<code>hexo g</code>命令的作用下发布到<code>public</code>文件夹中；</li><li><code>themes</code>存储了博客的主题。在各个主题自己内部也有自己的<code>_config.yml</code>文件，用来定制化模板的参数。</li></ul><h3 id="1-4-Hexo部署"><a href="#1-4-Hexo部署" class="headerlink" title="1.4 Hexo部署"></a>1.4 Hexo部署</h3><p>我们选择将Hexo部署到Github上。打开博客项目根目录下的<code>_config.yml</code>文件，跳到最后，修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">git-repo-path(ssh方式，不要用https)</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master(不出意外就填写master)</span></span><br></pre></td></tr></table></figure><p>保存退出。</p><p>然后我们需要安装一个git部署的工具:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>三个命令，就可以逐步完成清理之前的生成，重新生成静态文件，将静态文件部署到Github上。全部完成后访问<a href="http://username.github.io" target="_blank" rel="noopener">username.github.io</a> 。就可以看到站点了。</p><h2 id="2-Hexo-Advanced"><a href="#2-Hexo-Advanced" class="headerlink" title="2. Hexo Advanced"></a>2. Hexo Advanced</h2><h3 id="2-1-自定义域名"><a href="#2-1-自定义域名" class="headerlink" title="2.1 自定义域名"></a>2.1 自定义域名</h3><p>使用github提供的免费域名还是不够fancy，我还是希望使用自己的域名。首先进入域名管理后台，添加两条记录。分别是</p><ul><li>yourdomain.com 添加一条A记录，指向username.github.io对应的ip地址。（这个ip地址可以通过ping命令看到）</li><li><a href="http://www.yourdomain.com" target="_blank" rel="noopener">www.yourdomain.com</a> 添加一条CNAME记录，指向username.github.io</li></ul><p>然后在本地博客工程中的<code>public</code>文件夹下，添加一个<code>CNAME</code>文件，文件中写入自定义的域名<code>www.yourdomain.com</code>。重新三连：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean; hexo g; hexo d</span><br></pre></td></tr></table></figure><p>这是输入<code>https://www.yourdomain.com</code>就可以访问自己的网站了（可能需要等一段时间让dns刷新）</p><h3 id="2-2-更换主题"><a href="#2-2-更换主题" class="headerlink" title="2.2 更换主题"></a>2.2 更换主题</h3><p>自己搭建博客的乐趣之一就是各种更换主题。Hexo有自己的主题市场：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a>。我选择的主题是<a href="https://github.com/BoizZ/hexo-theme-laughing" target="_blank" rel="noopener">laughing</a>。这个主题比较简洁，而且支持响应式布局。不过，这个主题支持的多说这个评论平台已经关闭了。其安装过程如下（其他的主题的安装方式大同小异）：</p><p>首先安装主题依赖的<code>pug</code>模板引擎:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug --save</span><br></pre></td></tr></table></figure><p>然后将主题文件夹下载到<code>themes</code>目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes</span><br><span class="line">git clone git@github.com:BoizZ/hexo-theme-laughing.git</span><br></pre></td></tr></table></figure><p>最后修改博客项目根目录下的<code>_config.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-laughing</span></span><br></pre></td></tr></table></figure><p>主题的配置方式可以参考主题的<a href="https://github.com/BoizZ/hexo-theme-laughing#%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3" target="_blank" rel="noopener">Github文档</a>。需要注意的是，文档中所说的<code>_config.yml</code>文件是指的主题文件夹中的配置文件，而非博客项目根目录下的配置文件。</p><h3 id="2-3-插件"><a href="#2-3-插件" class="headerlink" title="2.3 插件"></a>2.3 插件</h3><p>Hexo提供了很多<a href="https://hexo.io/zh-cn/docs/plugins.html" target="_blank" rel="noopener">插件</a>来增强博客的功能。这个部分我也正在研究。这里我列出一下目前我安装了的插件：</p><ul><li>hexo-addlink: 在文章末尾中添加本文的链接</li><li>hexo-generator-feed: 生成rss订阅</li><li>hexo-generator-sitemap: 生成站点地图</li></ul><p>文章链接 <a href="http://www.codewoody.com/posts/53793/">http://www.codewoody.com/posts/53793/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在博客问题上我可是折腾了很多回了，先是尝试了wordpress（来来回回很多次），不过wordpress使用起来，感觉还是太“重”，很多东西配置起来非常麻烦(包括主题设置，甚至是Markdown支持)。后来迁移到简书上面，被国家政策教做人(一篇关于Shadowsocks的文章被屏蔽了，有种吃苍蝇的感觉)。思前想后，还是自己host自己的博客好。
    
    </summary>
    
      <category term="教程" scheme="http://www.codewoody.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://www.codewoody.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Hexo" scheme="http://www.codewoody.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://www.codewoody.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.codewoody.com/posts/16107/"/>
    <id>http://www.codewoody.com/posts/16107/</id>
    <published>2018-11-05T05:01:41.633Z</published>
    <updated>2018-11-16T08:55:45.696Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>前面的文字<a target="_blank" href="https://static.codewoody.com/default/Dedicated%20Short-Range%20Communications%20%28DSRC%29%20Standards%20in%20the%20United%20States.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=woodyhuang%2F20181130%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181130T072805Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Signature=cbeffd7a4f5fa18a5c5e40a3ca47aac87ffa6568237b1f4cb73bc2c56c1d65f6">下载链接</a>后面的文字<br>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>文章链接 <a href="http://www.codewoody.com/posts/16107/">http://www.codewoody.com/posts/16107/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
